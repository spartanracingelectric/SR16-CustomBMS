
SR16_BMS_FREERTOS_TESTING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e3c  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  000080cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006474  08006474  00007474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800647c  0800647c  000080cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800647c  0800647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08006484  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  200000cc  08006550  000080cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08006550  000088dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199d6  00000000  00000000  000080f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f59  00000000  00000000  00021acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00025a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f1  00000000  00000000  00027158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e1e  00000000  00000000  00028349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc8a  00000000  00000000  0004a167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6c09  00000000  00000000  00065df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c9fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006558  00000000  00000000  0012ca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00132f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000cc 	.word	0x200000cc
 800020c:	00000000 	.word	0x00000000
 8000210:	08006014 	.word	0x08006014

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000d0 	.word	0x200000d0
 800022c:	08006014 	.word	0x08006014

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e16:	2afd      	cmp	r2, #253	@ 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	@ 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__aeabi_f2uiz>:
 8001064:	0042      	lsls	r2, r0, #1
 8001066:	d20e      	bcs.n	8001086 <__aeabi_f2uiz+0x22>
 8001068:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800106c:	d30b      	bcc.n	8001086 <__aeabi_f2uiz+0x22>
 800106e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001072:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001076:	d409      	bmi.n	800108c <__aeabi_f2uiz+0x28>
 8001078:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800107c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001080:	fa23 f002 	lsr.w	r0, r3, r2
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2uiz+0x32>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d102      	bne.n	800109c <__aeabi_f2uiz+0x38>
 8001096:	f04f 30ff 	mov.w	r0, #4294967295
 800109a:	4770      	bx	lr
 800109c:	f04f 0000 	mov.w	r0, #0
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <__aeabi_uldivmod>:
 80010a4:	b953      	cbnz	r3, 80010bc <__aeabi_uldivmod+0x18>
 80010a6:	b94a      	cbnz	r2, 80010bc <__aeabi_uldivmod+0x18>
 80010a8:	2900      	cmp	r1, #0
 80010aa:	bf08      	it	eq
 80010ac:	2800      	cmpeq	r0, #0
 80010ae:	bf1c      	itt	ne
 80010b0:	f04f 31ff 	movne.w	r1, #4294967295
 80010b4:	f04f 30ff 	movne.w	r0, #4294967295
 80010b8:	f000 b968 	b.w	800138c <__aeabi_idiv0>
 80010bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c4:	f000 f806 	bl	80010d4 <__udivmoddi4>
 80010c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d0:	b004      	add	sp, #16
 80010d2:	4770      	bx	lr

080010d4 <__udivmoddi4>:
 80010d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d8:	9d08      	ldr	r5, [sp, #32]
 80010da:	460c      	mov	r4, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14e      	bne.n	800117e <__udivmoddi4+0xaa>
 80010e0:	4694      	mov	ip, r2
 80010e2:	458c      	cmp	ip, r1
 80010e4:	4686      	mov	lr, r0
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	d962      	bls.n	80011b2 <__udivmoddi4+0xde>
 80010ec:	b14a      	cbz	r2, 8001102 <__udivmoddi4+0x2e>
 80010ee:	f1c2 0320 	rsb	r3, r2, #32
 80010f2:	4091      	lsls	r1, r2
 80010f4:	fa20 f303 	lsr.w	r3, r0, r3
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	4319      	orrs	r1, r3
 80010fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8001102:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001106:	fbb1 f4f7 	udiv	r4, r1, r7
 800110a:	fb07 1114 	mls	r1, r7, r4, r1
 800110e:	fa1f f68c 	uxth.w	r6, ip
 8001112:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001116:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800111a:	fb04 f106 	mul.w	r1, r4, r6
 800111e:	4299      	cmp	r1, r3
 8001120:	d90a      	bls.n	8001138 <__udivmoddi4+0x64>
 8001122:	eb1c 0303 	adds.w	r3, ip, r3
 8001126:	f104 30ff 	add.w	r0, r4, #4294967295
 800112a:	f080 8110 	bcs.w	800134e <__udivmoddi4+0x27a>
 800112e:	4299      	cmp	r1, r3
 8001130:	f240 810d 	bls.w	800134e <__udivmoddi4+0x27a>
 8001134:	3c02      	subs	r4, #2
 8001136:	4463      	add	r3, ip
 8001138:	1a59      	subs	r1, r3, r1
 800113a:	fbb1 f0f7 	udiv	r0, r1, r7
 800113e:	fb07 1110 	mls	r1, r7, r0, r1
 8001142:	fb00 f606 	mul.w	r6, r0, r6
 8001146:	fa1f f38e 	uxth.w	r3, lr
 800114a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800114e:	429e      	cmp	r6, r3
 8001150:	d90a      	bls.n	8001168 <__udivmoddi4+0x94>
 8001152:	eb1c 0303 	adds.w	r3, ip, r3
 8001156:	f100 31ff 	add.w	r1, r0, #4294967295
 800115a:	f080 80fa 	bcs.w	8001352 <__udivmoddi4+0x27e>
 800115e:	429e      	cmp	r6, r3
 8001160:	f240 80f7 	bls.w	8001352 <__udivmoddi4+0x27e>
 8001164:	4463      	add	r3, ip
 8001166:	3802      	subs	r0, #2
 8001168:	2100      	movs	r1, #0
 800116a:	1b9b      	subs	r3, r3, r6
 800116c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001170:	b11d      	cbz	r5, 800117a <__udivmoddi4+0xa6>
 8001172:	40d3      	lsrs	r3, r2
 8001174:	2200      	movs	r2, #0
 8001176:	e9c5 3200 	strd	r3, r2, [r5]
 800117a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117e:	428b      	cmp	r3, r1
 8001180:	d905      	bls.n	800118e <__udivmoddi4+0xba>
 8001182:	b10d      	cbz	r5, 8001188 <__udivmoddi4+0xb4>
 8001184:	e9c5 0100 	strd	r0, r1, [r5]
 8001188:	2100      	movs	r1, #0
 800118a:	4608      	mov	r0, r1
 800118c:	e7f5      	b.n	800117a <__udivmoddi4+0xa6>
 800118e:	fab3 f183 	clz	r1, r3
 8001192:	2900      	cmp	r1, #0
 8001194:	d146      	bne.n	8001224 <__udivmoddi4+0x150>
 8001196:	42a3      	cmp	r3, r4
 8001198:	d302      	bcc.n	80011a0 <__udivmoddi4+0xcc>
 800119a:	4290      	cmp	r0, r2
 800119c:	f0c0 80ee 	bcc.w	800137c <__udivmoddi4+0x2a8>
 80011a0:	1a86      	subs	r6, r0, r2
 80011a2:	eb64 0303 	sbc.w	r3, r4, r3
 80011a6:	2001      	movs	r0, #1
 80011a8:	2d00      	cmp	r5, #0
 80011aa:	d0e6      	beq.n	800117a <__udivmoddi4+0xa6>
 80011ac:	e9c5 6300 	strd	r6, r3, [r5]
 80011b0:	e7e3      	b.n	800117a <__udivmoddi4+0xa6>
 80011b2:	2a00      	cmp	r2, #0
 80011b4:	f040 808f 	bne.w	80012d6 <__udivmoddi4+0x202>
 80011b8:	eba1 040c 	sub.w	r4, r1, ip
 80011bc:	2101      	movs	r1, #1
 80011be:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011c2:	fa1f f78c 	uxth.w	r7, ip
 80011c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011ca:	fb08 4416 	mls	r4, r8, r6, r4
 80011ce:	fb07 f006 	mul.w	r0, r7, r6
 80011d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011da:	4298      	cmp	r0, r3
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x11c>
 80011de:	eb1c 0303 	adds.w	r3, ip, r3
 80011e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80011e6:	d202      	bcs.n	80011ee <__udivmoddi4+0x11a>
 80011e8:	4298      	cmp	r0, r3
 80011ea:	f200 80cb 	bhi.w	8001384 <__udivmoddi4+0x2b0>
 80011ee:	4626      	mov	r6, r4
 80011f0:	1a1c      	subs	r4, r3, r0
 80011f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011f6:	fb08 4410 	mls	r4, r8, r0, r4
 80011fa:	fb00 f707 	mul.w	r7, r0, r7
 80011fe:	fa1f f38e 	uxth.w	r3, lr
 8001202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001206:	429f      	cmp	r7, r3
 8001208:	d908      	bls.n	800121c <__udivmoddi4+0x148>
 800120a:	eb1c 0303 	adds.w	r3, ip, r3
 800120e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001212:	d202      	bcs.n	800121a <__udivmoddi4+0x146>
 8001214:	429f      	cmp	r7, r3
 8001216:	f200 80ae 	bhi.w	8001376 <__udivmoddi4+0x2a2>
 800121a:	4620      	mov	r0, r4
 800121c:	1bdb      	subs	r3, r3, r7
 800121e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001222:	e7a5      	b.n	8001170 <__udivmoddi4+0x9c>
 8001224:	f1c1 0720 	rsb	r7, r1, #32
 8001228:	408b      	lsls	r3, r1
 800122a:	fa22 fc07 	lsr.w	ip, r2, r7
 800122e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001232:	fa24 f607 	lsr.w	r6, r4, r7
 8001236:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800123a:	fbb6 f8f9 	udiv	r8, r6, r9
 800123e:	fa1f fe8c 	uxth.w	lr, ip
 8001242:	fb09 6618 	mls	r6, r9, r8, r6
 8001246:	fa20 f307 	lsr.w	r3, r0, r7
 800124a:	408c      	lsls	r4, r1
 800124c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001250:	fb08 f00e 	mul.w	r0, r8, lr
 8001254:	431c      	orrs	r4, r3
 8001256:	0c23      	lsrs	r3, r4, #16
 8001258:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800125c:	4298      	cmp	r0, r3
 800125e:	fa02 f201 	lsl.w	r2, r2, r1
 8001262:	d90a      	bls.n	800127a <__udivmoddi4+0x1a6>
 8001264:	eb1c 0303 	adds.w	r3, ip, r3
 8001268:	f108 36ff 	add.w	r6, r8, #4294967295
 800126c:	f080 8081 	bcs.w	8001372 <__udivmoddi4+0x29e>
 8001270:	4298      	cmp	r0, r3
 8001272:	d97e      	bls.n	8001372 <__udivmoddi4+0x29e>
 8001274:	f1a8 0802 	sub.w	r8, r8, #2
 8001278:	4463      	add	r3, ip
 800127a:	1a1e      	subs	r6, r3, r0
 800127c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001280:	fb09 6613 	mls	r6, r9, r3, r6
 8001284:	fb03 fe0e 	mul.w	lr, r3, lr
 8001288:	b2a4      	uxth	r4, r4
 800128a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800128e:	45a6      	cmp	lr, r4
 8001290:	d908      	bls.n	80012a4 <__udivmoddi4+0x1d0>
 8001292:	eb1c 0404 	adds.w	r4, ip, r4
 8001296:	f103 30ff 	add.w	r0, r3, #4294967295
 800129a:	d266      	bcs.n	800136a <__udivmoddi4+0x296>
 800129c:	45a6      	cmp	lr, r4
 800129e:	d964      	bls.n	800136a <__udivmoddi4+0x296>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4464      	add	r4, ip
 80012a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a8:	fba0 8302 	umull	r8, r3, r0, r2
 80012ac:	eba4 040e 	sub.w	r4, r4, lr
 80012b0:	429c      	cmp	r4, r3
 80012b2:	46c6      	mov	lr, r8
 80012b4:	461e      	mov	r6, r3
 80012b6:	d350      	bcc.n	800135a <__udivmoddi4+0x286>
 80012b8:	d04d      	beq.n	8001356 <__udivmoddi4+0x282>
 80012ba:	b155      	cbz	r5, 80012d2 <__udivmoddi4+0x1fe>
 80012bc:	ebba 030e 	subs.w	r3, sl, lr
 80012c0:	eb64 0406 	sbc.w	r4, r4, r6
 80012c4:	fa04 f707 	lsl.w	r7, r4, r7
 80012c8:	40cb      	lsrs	r3, r1
 80012ca:	431f      	orrs	r7, r3
 80012cc:	40cc      	lsrs	r4, r1
 80012ce:	e9c5 7400 	strd	r7, r4, [r5]
 80012d2:	2100      	movs	r1, #0
 80012d4:	e751      	b.n	800117a <__udivmoddi4+0xa6>
 80012d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012da:	f1c2 0320 	rsb	r3, r2, #32
 80012de:	40d9      	lsrs	r1, r3
 80012e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012e4:	fa20 f303 	lsr.w	r3, r0, r3
 80012e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012ec:	fbb1 f0f8 	udiv	r0, r1, r8
 80012f0:	fb08 1110 	mls	r1, r8, r0, r1
 80012f4:	4094      	lsls	r4, r2
 80012f6:	431c      	orrs	r4, r3
 80012f8:	fa1f f78c 	uxth.w	r7, ip
 80012fc:	0c23      	lsrs	r3, r4, #16
 80012fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001302:	fb00 f107 	mul.w	r1, r0, r7
 8001306:	4299      	cmp	r1, r3
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x248>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001312:	d22c      	bcs.n	800136e <__udivmoddi4+0x29a>
 8001314:	4299      	cmp	r1, r3
 8001316:	d92a      	bls.n	800136e <__udivmoddi4+0x29a>
 8001318:	3802      	subs	r0, #2
 800131a:	4463      	add	r3, ip
 800131c:	1a5b      	subs	r3, r3, r1
 800131e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001322:	fb08 3311 	mls	r3, r8, r1, r3
 8001326:	b2a4      	uxth	r4, r4
 8001328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800132c:	fb01 f307 	mul.w	r3, r1, r7
 8001330:	42a3      	cmp	r3, r4
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x272>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f101 36ff 	add.w	r6, r1, #4294967295
 800133c:	d213      	bcs.n	8001366 <__udivmoddi4+0x292>
 800133e:	42a3      	cmp	r3, r4
 8001340:	d911      	bls.n	8001366 <__udivmoddi4+0x292>
 8001342:	3902      	subs	r1, #2
 8001344:	4464      	add	r4, ip
 8001346:	1ae4      	subs	r4, r4, r3
 8001348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800134c:	e73b      	b.n	80011c6 <__udivmoddi4+0xf2>
 800134e:	4604      	mov	r4, r0
 8001350:	e6f2      	b.n	8001138 <__udivmoddi4+0x64>
 8001352:	4608      	mov	r0, r1
 8001354:	e708      	b.n	8001168 <__udivmoddi4+0x94>
 8001356:	45c2      	cmp	sl, r8
 8001358:	d2af      	bcs.n	80012ba <__udivmoddi4+0x1e6>
 800135a:	ebb8 0e02 	subs.w	lr, r8, r2
 800135e:	eb63 060c 	sbc.w	r6, r3, ip
 8001362:	3801      	subs	r0, #1
 8001364:	e7a9      	b.n	80012ba <__udivmoddi4+0x1e6>
 8001366:	4631      	mov	r1, r6
 8001368:	e7ed      	b.n	8001346 <__udivmoddi4+0x272>
 800136a:	4603      	mov	r3, r0
 800136c:	e79a      	b.n	80012a4 <__udivmoddi4+0x1d0>
 800136e:	4630      	mov	r0, r6
 8001370:	e7d4      	b.n	800131c <__udivmoddi4+0x248>
 8001372:	46b0      	mov	r8, r6
 8001374:	e781      	b.n	800127a <__udivmoddi4+0x1a6>
 8001376:	4463      	add	r3, ip
 8001378:	3802      	subs	r0, #2
 800137a:	e74f      	b.n	800121c <__udivmoddi4+0x148>
 800137c:	4606      	mov	r6, r0
 800137e:	4623      	mov	r3, r4
 8001380:	4608      	mov	r0, r1
 8001382:	e711      	b.n	80011a8 <__udivmoddi4+0xd4>
 8001384:	3e02      	subs	r6, #2
 8001386:	4463      	add	r3, ip
 8001388:	e732      	b.n	80011f0 <__udivmoddi4+0x11c>
 800138a:	bf00      	nop

0800138c <__aeabi_idiv0>:
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 8001396:	23ff      	movs	r3, #255	@ 0xff
 8001398:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e00f      	b.n	80013c0 <Wakeup_Idle+0x30>
		LTC_nCS_Low();							   // Pull CS low
 80013a0:	f001 f85e 	bl	8002460 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 80013a4:	1cf9      	adds	r1, r7, #3
 80013a6:	2364      	movs	r3, #100	@ 0x64
 80013a8:	2201      	movs	r2, #1
 80013aa:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <Wakeup_Idle+0x40>)
 80013ac:	f002 ff4a 	bl	8004244 <HAL_SPI_Transmit>
		osDelay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f004 f815 	bl	80053e0 <osDelay>
		LTC_nCS_High();							   // Pull CS high
 80013b6:	f001 f847 	bl	8002448 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	ddec      	ble.n	80013a0 <Wakeup_Idle+0x10>
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001b4 	.word	0x200001b4

080013d4 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_DEVICES; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e00c      	b.n	80013fa <Wakeup_Sleep+0x26>
        LTC_nCS_Low();
 80013e0:	f001 f83e 	bl	8002460 <LTC_nCS_Low>
        osDelay(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f003 fffb 	bl	80053e0 <osDelay>
        LTC_nCS_High();
 80013ea:	f001 f82d 	bl	8002448 <LTC_nCS_High>
        osDelay(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f003 fff6 	bl	80053e0 <osDelay>
    for (int i = 0; i < NUM_DEVICES; i++) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	ddef      	ble.n	80013e0 <Wakeup_Sleep+0xc>
    }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 800140c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001410:	b089      	sub	sp, #36	@ 0x24
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	466b      	mov	r3, sp
 8001418:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 800141e:	2340      	movs	r3, #64	@ 0x40
 8001420:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001422:	7f3b      	ldrb	r3, [r7, #28]
 8001424:	3b01      	subs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	7f3b      	ldrb	r3, [r7, #28]
 800142a:	2200      	movs	r2, #0
 800142c:	4698      	mov	r8, r3
 800142e:	4691      	mov	r9, r2
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800143c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001440:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001444:	7f3b      	ldrb	r3, [r7, #28]
 8001446:	2200      	movs	r2, #0
 8001448:	461c      	mov	r4, r3
 800144a:	4615      	mov	r5, r2
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	00eb      	lsls	r3, r5, #3
 8001456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800145a:	00e2      	lsls	r2, r4, #3
 800145c:	7f3b      	ldrb	r3, [r7, #28]
 800145e:	3307      	adds	r3, #7
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	ebad 0d03 	sub.w	sp, sp, r3
 8001468:	466b      	mov	r3, sp
 800146a:	3300      	adds	r3, #0
 800146c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 800146e:	2300      	movs	r3, #0
 8001470:	77bb      	strb	r3, [r7, #30]
 8001472:	e074      	b.n	800155e <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001474:	7fbb      	ldrb	r3, [r7, #30]
 8001476:	4a3f      	ldr	r2, [pc, #252]	@ (8001574 <Read_Cell_Volt+0x168>)
 8001478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001484:	7fbb      	ldrb	r3, [r7, #30]
 8001486:	4a3b      	ldr	r2, [pc, #236]	@ (8001574 <Read_Cell_Volt+0x168>)
 8001488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4619      	mov	r1, r3
 8001496:	2002      	movs	r0, #2
 8001498:	f000 faa2 	bl	80019e0 <LTC_Pec15_Calc>
 800149c:	4603      	mov	r3, r0
 800149e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80014a0:	8a7b      	ldrh	r3, [r7, #18]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014b0:	f7ff ff6e 	bl	8001390 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014b4:	f000 ffd4 	bl	8002460 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014b8:	f107 0108 	add.w	r1, r7, #8
 80014bc:	2364      	movs	r3, #100	@ 0x64
 80014be:	2204      	movs	r2, #4
 80014c0:	482d      	ldr	r0, [pc, #180]	@ (8001578 <Read_Cell_Volt+0x16c>)
 80014c2:	f002 febf 	bl	8004244 <HAL_SPI_Transmit>
 80014c6:	4603      	mov	r3, r0
 80014c8:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014ca:	7c7b      	ldrb	r3, [r7, #17]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014d0:	7c7b      	ldrb	r3, [r7, #17]
 80014d2:	2201      	movs	r2, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014de:	4313      	orrs	r3, r2
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014e4:	7f3b      	ldrb	r3, [r7, #28]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	4822      	ldr	r0, [pc, #136]	@ (8001578 <Read_Cell_Volt+0x16c>)
 80014ee:	f002 ffed 	bl	80044cc <HAL_SPI_Receive>
 80014f2:	4603      	mov	r3, r0
 80014f4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014f6:	7c7b      	ldrb	r3, [r7, #17]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80014fc:	7c7b      	ldrb	r3, [r7, #17]
 80014fe:	3304      	adds	r3, #4
 8001500:	2201      	movs	r2, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	b25a      	sxtb	r2, r3
 8001508:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800150c:	4313      	orrs	r3, r2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001512:	f000 ff99 	bl	8002448 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001516:	2300      	movs	r3, #0
 8001518:	777b      	strb	r3, [r7, #29]
 800151a:	e01a      	b.n	8001552 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 800151c:	7f7b      	ldrb	r3, [r7, #29]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001526:	7f7a      	ldrb	r2, [r7, #29]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001532:	7fba      	ldrb	r2, [r7, #30]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
			memcpy(
 8001542:	2206      	movs	r2, #6
 8001544:	68f9      	ldr	r1, [r7, #12]
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fb6a 	bl	8005c20 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800154c:	7f7b      	ldrb	r3, [r7, #29]
 800154e:	3301      	adds	r3, #1
 8001550:	777b      	strb	r3, [r7, #29]
 8001552:	7f7b      	ldrb	r3, [r7, #29]
 8001554:	2b07      	cmp	r3, #7
 8001556:	d9e1      	bls.n	800151c <Read_Cell_Volt+0x110>
			i++) {
 8001558:	7fbb      	ldrb	r3, [r7, #30]
 800155a:	3301      	adds	r3, #1
 800155c:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 800155e:	7fbb      	ldrb	r3, [r7, #30]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d987      	bls.n	8001474 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	46b5      	mov	sp, r6
}
 8001568:	4618      	mov	r0, r3
 800156a:	3724      	adds	r7, #36	@ 0x24
 800156c:	46bd      	mov	sp, r7
 800156e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001572:	bf00      	nop
 8001574:	0800602c 	.word	0x0800602c
 8001578:	200001b4 	.word	0x200001b4

0800157c <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001588:	2306      	movs	r3, #6
 800158a:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3304      	adds	r3, #4
 8001594:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <LTC_WRCOMM+0xd4>)
 8001598:	2207      	movs	r2, #7
 800159a:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 800159c:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <LTC_WRCOMM+0xd4>)
 800159e:	2221      	movs	r2, #33	@ 0x21
 80015a0:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 80015a2:	492b      	ldr	r1, [pc, #172]	@ (8001650 <LTC_WRCOMM+0xd4>)
 80015a4:	2002      	movs	r0, #2
 80015a6:	f000 fa1b 	bl	80019e0 <LTC_Pec15_Calc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <LTC_WRCOMM+0xd4>)
 80015b8:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015ba:	8a3b      	ldrh	r3, [r7, #16]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <LTC_WRCOMM+0xd4>)
 80015c0:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015c2:	2304      	movs	r3, #4
 80015c4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	75bb      	strb	r3, [r7, #22]
 80015ca:	e02d      	b.n	8001628 <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	757b      	strb	r3, [r7, #21]
 80015d0:	e00c      	b.n	80015ec <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015d2:	7d7b      	ldrb	r3, [r7, #21]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	441a      	add	r2, r3
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	7811      	ldrb	r1, [r2, #0]
 80015dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001650 <LTC_WRCOMM+0xd4>)
 80015de:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	3301      	adds	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015e6:	7d7b      	ldrb	r3, [r7, #21]
 80015e8:	3301      	adds	r3, #1
 80015ea:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015ec:	7d7a      	ldrb	r2, [r7, #21]
 80015ee:	7d3b      	ldrb	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3ee      	bcc.n	80015d2 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015f4:	7d3b      	ldrb	r3, [r7, #20]
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f9f1 	bl	80019e0 <LTC_Pec15_Calc>
 80015fe:	4603      	mov	r3, r0
 8001600:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	b29a      	uxth	r2, r3
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	b2d1      	uxtb	r1, r2
 800160c:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <LTC_WRCOMM+0xd4>)
 800160e:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3301      	adds	r3, #1
 8001614:	89fa      	ldrh	r2, [r7, #14]
 8001616:	b2d1      	uxtb	r1, r2
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <LTC_WRCOMM+0xd4>)
 800161a:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	3302      	adds	r3, #2
 8001620:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001622:	7dbb      	ldrb	r3, [r7, #22]
 8001624:	3b01      	subs	r3, #1
 8001626:	75bb      	strb	r3, [r7, #22]
 8001628:	7dbb      	ldrb	r3, [r7, #22]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ce      	bne.n	80015cc <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800162e:	f7ff feaf 	bl	8001390 <Wakeup_Idle>
	LTC_nCS_Low();
 8001632:	f000 ff15 	bl	8002460 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 8001636:	7cfb      	ldrb	r3, [r7, #19]
 8001638:	b29a      	uxth	r2, r3
 800163a:	2364      	movs	r3, #100	@ 0x64
 800163c:	4904      	ldr	r1, [pc, #16]	@ (8001650 <LTC_WRCOMM+0xd4>)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <LTC_WRCOMM+0xd8>)
 8001640:	f002 fe00 	bl	8004244 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001644:	f000 ff00 	bl	8002448 <LTC_nCS_High>
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000e8 	.word	0x200000e8
 8001654:	200001b4 	.word	0x200001b4

08001658 <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001662:	2307      	movs	r3, #7
 8001664:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 8001666:	2323      	movs	r3, #35	@ 0x23
 8001668:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	2002      	movs	r0, #2
 8001672:	f000 f9b5 	bl	80019e0 <LTC_Pec15_Calc>
 8001676:	4603      	mov	r3, r0
 8001678:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800167a:	8a7b      	ldrh	r3, [r7, #18]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001684:	8a7b      	ldrh	r3, [r7, #18]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800168a:	f7ff fe81 	bl	8001390 <Wakeup_Idle>
	LTC_nCS_Low();
 800168e:	f000 fee7 	bl	8002460 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001692:	f107 010c 	add.w	r1, r7, #12
 8001696:	2364      	movs	r3, #100	@ 0x64
 8001698:	2204      	movs	r2, #4
 800169a:	480e      	ldr	r0, [pc, #56]	@ (80016d4 <LTC_STCOMM+0x7c>)
 800169c:	f002 fdd2 	bl	8004244 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e008      	b.n	80016b8 <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 80016a6:	2364      	movs	r3, #100	@ 0x64
 80016a8:	2201      	movs	r2, #1
 80016aa:	21ff      	movs	r1, #255	@ 0xff
 80016ac:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <LTC_STCOMM+0x7c>)
 80016ae:	f002 fdc9 	bl	8004244 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	79fa      	ldrb	r2, [r7, #7]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dbef      	blt.n	80016a6 <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016c6:	f000 febf 	bl	8002448 <LTC_nCS_High>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001b4 	.word	0x200001b4

080016d8 <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016dc:	b089      	sub	sp, #36	@ 0x24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	466b      	mov	r3, sp
 80016e4:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016ea:	2340      	movs	r3, #64	@ 0x40
 80016ec:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016ee:	7f3b      	ldrb	r3, [r7, #28]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	7f3b      	ldrb	r3, [r7, #28]
 80016f6:	2200      	movs	r2, #0
 80016f8:	4698      	mov	r8, r3
 80016fa:	4691      	mov	r9, r2
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001710:	7f3b      	ldrb	r3, [r7, #28]
 8001712:	2200      	movs	r2, #0
 8001714:	461c      	mov	r4, r3
 8001716:	4615      	mov	r5, r2
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	7f3b      	ldrb	r3, [r7, #28]
 800172a:	3307      	adds	r3, #7
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	ebad 0d03 	sub.w	sp, sp, r3
 8001734:	466b      	mov	r3, sp
 8001736:	3300      	adds	r3, #0
 8001738:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	77bb      	strb	r3, [r7, #30]
 800173e:	e074      	b.n	800182a <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001740:	7fbb      	ldrb	r3, [r7, #30]
 8001742:	4a3f      	ldr	r2, [pc, #252]	@ (8001840 <Read_Cell_Temps+0x168>)
 8001744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b29b      	uxth	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001750:	7fbb      	ldrb	r3, [r7, #30]
 8001752:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <Read_Cell_Temps+0x168>)
 8001754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	4619      	mov	r1, r3
 8001762:	2002      	movs	r0, #2
 8001764:	f000 f93c 	bl	80019e0 <LTC_Pec15_Calc>
 8001768:	4603      	mov	r3, r0
 800176a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800176c:	8a7b      	ldrh	r3, [r7, #18]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b29b      	uxth	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8001776:	8a7b      	ldrh	r3, [r7, #18]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 800177c:	f7ff fe08 	bl	8001390 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001780:	f000 fe6e 	bl	8002460 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001784:	f107 0108 	add.w	r1, r7, #8
 8001788:	2364      	movs	r3, #100	@ 0x64
 800178a:	2204      	movs	r2, #4
 800178c:	482d      	ldr	r0, [pc, #180]	@ (8001844 <Read_Cell_Temps+0x16c>)
 800178e:	f002 fd59 	bl	8004244 <HAL_SPI_Transmit>
 8001792:	4603      	mov	r3, r0
 8001794:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 8001796:	7c7b      	ldrb	r3, [r7, #17]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 800179c:	7c7b      	ldrb	r3, [r7, #17]
 800179e:	2201      	movs	r2, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	b25a      	sxtb	r2, r3
 80017a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017b0:	7f3b      	ldrb	r3, [r7, #28]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	2364      	movs	r3, #100	@ 0x64
 80017b6:	6979      	ldr	r1, [r7, #20]
 80017b8:	4822      	ldr	r0, [pc, #136]	@ (8001844 <Read_Cell_Temps+0x16c>)
 80017ba:	f002 fe87 	bl	80044cc <HAL_SPI_Receive>
 80017be:	4603      	mov	r3, r0
 80017c0:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017c2:	7c7b      	ldrb	r3, [r7, #17]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017c8:	7c7b      	ldrb	r3, [r7, #17]
 80017ca:	3304      	adds	r3, #4
 80017cc:	2201      	movs	r2, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	b25a      	sxtb	r2, r3
 80017d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017de:	f000 fe33 	bl	8002448 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	777b      	strb	r3, [r7, #29]
 80017e6:	e01a      	b.n	800181e <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017e8:	7f7b      	ldrb	r3, [r7, #29]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017f2:	7f7a      	ldrb	r2, [r7, #29]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80017fe:	7fba      	ldrb	r2, [r7, #30]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
			memcpy(
 800180e:	2206      	movs	r2, #6
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fa04 	bl	8005c20 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001818:	7f7b      	ldrb	r3, [r7, #29]
 800181a:	3301      	adds	r3, #1
 800181c:	777b      	strb	r3, [r7, #29]
 800181e:	7f7b      	ldrb	r3, [r7, #29]
 8001820:	2b07      	cmp	r3, #7
 8001822:	d9e1      	bls.n	80017e8 <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001824:	7fbb      	ldrb	r3, [r7, #30]
 8001826:	3301      	adds	r3, #1
 8001828:	77bb      	strb	r3, [r7, #30]
 800182a:	7fbb      	ldrb	r3, [r7, #30]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d987      	bls.n	8001740 <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 8001830:	7ffb      	ldrb	r3, [r7, #31]
 8001832:	46b5      	mov	sp, r6
}
 8001834:	4618      	mov	r0, r3
 8001836:	3724      	adds	r7, #36	@ 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800183e:	bf00      	nop
 8001840:	08006034 	.word	0x08006034
 8001844:	200001b4 	.word	0x200001b4

08001848 <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	460b      	mov	r3, r1
 8001854:	71bb      	strb	r3, [r7, #6]
 8001856:	4613      	mov	r3, r2
 8001858:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	105b      	asrs	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3302      	adds	r3, #2
 800186a:	b2db      	uxtb	r3, r3
 800186c:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	01db      	lsls	r3, r3, #7
 8001872:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	b2da      	uxtb	r2, r3
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4413      	add	r3, r2
 800187e:	b2da      	uxtb	r2, r3
 8001880:	797b      	ldrb	r3, [r7, #5]
 8001882:	4413      	add	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3360      	adds	r3, #96	@ 0x60
 8001888:	b2db      	uxtb	r3, r3
 800188a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	2002      	movs	r0, #2
 8001894:	f000 f8a4 	bl	80019e0 <LTC_Pec15_Calc>
 8001898:	4603      	mov	r3, r0
 800189a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018ac:	f7ff fd70 	bl	8001390 <Wakeup_Idle>
	LTC_nCS_Low();
 80018b0:	f000 fdd6 	bl	8002460 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018b4:	f107 0108 	add.w	r1, r7, #8
 80018b8:	2364      	movs	r3, #100	@ 0x64
 80018ba:	2204      	movs	r2, #4
 80018bc:	4804      	ldr	r0, [pc, #16]	@ (80018d0 <LTC_ADCV+0x88>)
 80018be:	f002 fcc1 	bl	8004244 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018c2:	f000 fdc1 	bl	8002448 <LTC_nCS_High>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001b4 	.word	0x200001b4

080018d4 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	105b      	asrs	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3304      	adds	r3, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	01db      	lsls	r3, r3, #7
 80018fc:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	4413      	add	r3, r2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3360      	adds	r3, #96	@ 0x60
 8001908:	b2db      	uxtb	r3, r3
 800190a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4619      	mov	r1, r3
 8001912:	2002      	movs	r0, #2
 8001914:	f000 f864 	bl	80019e0 <LTC_Pec15_Calc>
 8001918:	4603      	mov	r3, r0
 800191a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800191c:	89bb      	ldrh	r3, [r7, #12]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	b29b      	uxth	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001926:	89bb      	ldrh	r3, [r7, #12]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800192c:	f7ff fd30 	bl	8001390 <Wakeup_Idle>
	LTC_nCS_Low();
 8001930:	f000 fd96 	bl	8002460 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001934:	f107 0108 	add.w	r1, r7, #8
 8001938:	2364      	movs	r3, #100	@ 0x64
 800193a:	2204      	movs	r2, #4
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <LTC_ADAX+0x7c>)
 800193e:	f002 fc81 	bl	8004244 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001942:	f000 fd81 	bl	8002448 <LTC_nCS_High>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200001b4 	.word	0x200001b4

08001954 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001966:	2307      	movs	r3, #7
 8001968:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800196a:	2314      	movs	r3, #20
 800196c:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	2002      	movs	r0, #2
 8001974:	f000 f834 	bl	80019e0 <LTC_Pec15_Calc>
 8001978:	4603      	mov	r3, r0
 800197a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001986:	893b      	ldrh	r3, [r7, #8]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800198c:	f7ff fd00 	bl	8001390 <Wakeup_Idle>

	LTC_nCS_Low();
 8001990:	f000 fd66 	bl	8002460 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001994:	1d39      	adds	r1, r7, #4
 8001996:	2364      	movs	r3, #100	@ 0x64
 8001998:	2204      	movs	r2, #4
 800199a:	480f      	ldr	r0, [pc, #60]	@ (80019d8 <LTC_POLLADC+0x84>)
 800199c:	f002 fc52 	bl	8004244 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 80019a0:	e00c      	b.n	80019bc <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 80019a2:	f000 ff61 	bl	8002868 <HAL_GetTick>
 80019a6:	4603      	mov	r3, r0
 80019a8:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 80019aa:	7abb      	ldrb	r3, [r7, #10]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <LTC_POLLADC+0x62>
			finished = 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	72fb      	strb	r3, [r7, #11]
 80019b4:	e002      	b.n	80019bc <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	330a      	adds	r3, #10
 80019ba:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <LTC_POLLADC+0x88>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d802      	bhi.n	80019ca <LTC_POLLADC+0x76>
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0eb      	beq.n	80019a2 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019ca:	f000 fd3d 	bl	8002448 <LTC_nCS_High>
	return (counter);
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200001b4 	.word	0x200001b4
 80019dc:	00030d3f 	.word	0x00030d3f

080019e0 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 80019ec:	2310      	movs	r3, #16
 80019ee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80019f0:	2300      	movs	r3, #0
 80019f2:	737b      	strb	r3, [r7, #13]
 80019f4:	e017      	b.n	8001a26 <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	09db      	lsrs	r3, r3, #7
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	7b7a      	ldrb	r2, [r7, #13]
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	440a      	add	r2, r1
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	490a      	ldr	r1, [pc, #40]	@ (8001a40 <LTC_Pec15_Calc+0x60>)
 8001a16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4053      	eors	r3, r2
 8001a1e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	3301      	adds	r3, #1
 8001a24:	737b      	strb	r3, [r7, #13]
 8001a26:	7b7a      	ldrb	r2, [r7, #13]
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3e3      	bcc.n	80019f6 <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	b29b      	uxth	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	08006038 	.word	0x08006038

08001a44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a56:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <MX_ADC1_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a6e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001a82:	f000 fefb 	bl	800287c <HAL_ADC_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a8c:	f000 fb78 	bl	8002180 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a90:	230f      	movs	r3, #15
 8001a92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_ADC1_Init+0x74>)
 8001aa2:	f000 ffc3 	bl	8002a2c <HAL_ADC_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001aac:	f000 fb68 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000012c 	.word	0x2000012c
 8001abc:	40012400 	.word	0x40012400

08001ac0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001ad2:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <MX_ADC2_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001adc:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001aea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001aee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001afc:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001afe:	f000 febd 	bl	800287c <HAL_ADC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001b08:	f000 fb3a 	bl	8002180 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	@ (8001b34 <MX_ADC2_Init+0x74>)
 8001b1e:	f000 ff85 	bl	8002a2c <HAL_ADC_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001b28:	f000 fb2a 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000015c 	.word	0x2000015c
 8001b38:	40012800 	.word	0x40012800

08001b3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a28      	ldr	r2, [pc, #160]	@ (8001bf8 <HAL_ADC_MspInit+0xbc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d122      	bne.n	8001ba2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a26      	ldr	r2, [pc, #152]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4819      	ldr	r0, [pc, #100]	@ (8001c00 <HAL_ADC_MspInit+0xc4>)
 8001b9c:	f001 fac4 	bl	8003128 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001ba0:	e026      	b.n	8001bf0 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <HAL_ADC_MspInit+0xc8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d121      	bne.n	8001bf0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_ADC_MspInit+0xc0>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|Shunt_Signal_Pin;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be0:	2303      	movs	r3, #3
 8001be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <HAL_ADC_MspInit+0xc4>)
 8001bec:	f001 fa9c 	bl	8003128 <HAL_GPIO_Init>
}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40012400 	.word	0x40012400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40012800 	.word	0x40012800

08001c08 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <MX_CAN1_Init+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001c12:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c14:	2209      	movs	r2, #9
 8001c16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c18:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c2e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001c32:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <MX_CAN1_Init+0x64>)
 8001c5a:	f001 f820 	bl	8002c9e <HAL_CAN_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c64:	f000 fa8c 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000018c 	.word	0x2000018c
 8001c70:	40006400 	.word	0x40006400

08001c74 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <HAL_CAN_MspInit+0xb0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d143      	bne.n	8001d1c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c94:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <HAL_CAN_MspInit+0xb4>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	4a23      	ldr	r2, [pc, #140]	@ (8001d28 <HAL_CAN_MspInit+0xb4>)
 8001c9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	61d3      	str	r3, [r2, #28]
 8001ca0:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_CAN_MspInit+0xb4>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cac:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_CAN_MspInit+0xb4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_CAN_MspInit+0xb4>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_CAN_MspInit+0xb4>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4814      	ldr	r0, [pc, #80]	@ (8001d2c <HAL_CAN_MspInit+0xb8>)
 8001cda:	f001 fa25 	bl	8003128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <HAL_CAN_MspInit+0xb8>)
 8001cf4:	f001 fa18 	bl	8003128 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_CAN_MspInit+0xbc>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d16:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <HAL_CAN_MspInit+0xbc>)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	@ 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40006400 	.word	0x40006400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40010000 	.word	0x40010000

08001d34 <CAN_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <CAN_Start+0x10>)
 8001d3a:	f001 f8ab 	bl	8002e94 <HAL_CAN_Start>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000018c 	.word	0x2000018c

08001d48 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <CAN_Activate+0x14>)
 8001d50:	f001 f8e4 	bl	8002f1c <HAL_CAN_ActivateNotification>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000018c 	.word	0x2000018c

08001d60 <CAN_SettingsInit>:
HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
			&ptr->TxMailbox);
}

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001d68:	f7ff ffe4 	bl	8001d34 <CAN_Start>
	CAN_Activate();
 8001d6c:	f7ff ffec 	bl	8001d48 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2208      	movs	r2, #8
 8001d86:	611a      	str	r2, [r3, #16]
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da4:	4b3c      	ldr	r3, [pc, #240]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a3b      	ldr	r2, [pc, #236]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001daa:	f043 0320 	orr.w	r3, r3, #32
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a29      	ldr	r2, [pc, #164]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <MX_GPIO_Init+0x108>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2110      	movs	r1, #16
 8001e08:	4824      	ldr	r0, [pc, #144]	@ (8001e9c <MX_GPIO_Init+0x10c>)
 8001e0a:	f001 fb11 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2102      	movs	r1, #2
 8001e12:	4823      	ldr	r0, [pc, #140]	@ (8001ea0 <MX_GPIO_Init+0x110>)
 8001e14:	f001 fb0c 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2140      	movs	r1, #64	@ 0x40
 8001e1c:	4821      	ldr	r0, [pc, #132]	@ (8001ea4 <MX_GPIO_Init+0x114>)
 8001e1e:	f001 fb07 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8001e22:	2310      	movs	r3, #16
 8001e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4619      	mov	r1, r3
 8001e38:	4818      	ldr	r0, [pc, #96]	@ (8001e9c <MX_GPIO_Init+0x10c>)
 8001e3a:	f001 f975 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	4812      	ldr	r0, [pc, #72]	@ (8001ea0 <MX_GPIO_Init+0x110>)
 8001e56:	f001 f967 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 MCU_HV_SENSE_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|MCU_HV_SENSE_ENABLE_Pin;
 8001e5a:	2384      	movs	r3, #132	@ 0x84
 8001e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <MX_GPIO_Init+0x110>)
 8001e6e:	f001 f95b 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8001e72:	2340      	movs	r3, #64	@ 0x40
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	4806      	ldr	r0, [pc, #24]	@ (8001ea4 <MX_GPIO_Init+0x114>)
 8001e8a:	f001 f94d 	bl	8003128 <HAL_GPIO_Init>

}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40010c00 	.word	0x40010c00
 8001ea4:	40011000 	.word	0x40011000

08001ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8001eae:	af00      	add	r7, sp, #0
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	struct batteryModule modPackInfo;
	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
	uint8_t safetyWarnings = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
	uint8_t safetyStates = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f000 fca9 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f8af 	bl	8002028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eca:	f7ff ff61 	bl	8001d90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ece:	f7ff fdb9 	bl	8001a44 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ed2:	f7ff fdf5 	bl	8001ac0 <MX_ADC2_Init>
  MX_TIM7_Init();
 8001ed6:	f000 fbaf 	bl	8002638 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001eda:	f000 fa35 	bl	8002348 <MX_SPI1_Init>
  MX_CAN1_Init();
 8001ede:	f7ff fe93 	bl	8001c08 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001ee2:	f000 fbfd 	bl	80026e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff39 	bl	8001d60 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8001eee:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8001ef2:	2240      	movs	r2, #64	@ 0x40
 8001ef4:	4948      	ldr	r1, [pc, #288]	@ (8002018 <main+0x170>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f900 	bl	80020fc <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8001efc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001f00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 f916 	bl	8002136 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8001f0a:	f000 fa9d 	bl	8002448 <LTC_nCS_High>

	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2102      	movs	r1, #2
 8001f12:	4842      	ldr	r0, [pc, #264]	@ (800201c <main+0x174>)
 8001f14:	f001 fa8c 	bl	8003430 <HAL_GPIO_WritePin>
	osDelay(500);
 8001f18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f1c:	f003 fa60 	bl	80053e0 <osDelay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2102      	movs	r1, #2
 8001f24:	483d      	ldr	r0, [pc, #244]	@ (800201c <main+0x174>)
 8001f26:	f001 fa83 	bl	8003430 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
	uint8_t indexpause = 8;
 8001f30:	2308      	movs	r3, #8
 8001f32:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
	uint8_t low_volt_hysteresis = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
	uint8_t high_volt_hysteresis = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	uint8_t cell_imbalance_hysteresis = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e

	//reading cell voltages
	Wakeup_Sleep();
 8001f48:	f7ff fa44 	bl	80013d4 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 8001f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f99f 	bl	8002294 <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 8001f56:	f7ff fa3d 	bl	80013d4 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 8001f5a:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8001f5e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8001f62:	e016      	b.n	8001f92 <main+0xea>
		Wakeup_Idle();
 8001f64:	f7ff fa14 	bl	8001390 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8001f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6c:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 8001f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f74:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8001f78:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f99d 	bl	80022bc <Read_Temp>
		osDelay(3);
 8001f82:	2003      	movs	r0, #3
 8001f84:	f003 fa2c 	bl	80053e0 <osDelay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 8001f88:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8001f92:	f897 2247 	ldrb.w	r2, [r7, #583]	@ 0x247
 8001f96:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3e2      	bcc.n	8001f64 <main+0xbc>
	}
	Wakeup_Idle();
 8001f9e:	f7ff f9f7 	bl	8001390 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8001fa2:	491f      	ldr	r1, [pc, #124]	@ (8002020 <main+0x178>)
 8001fa4:	2008      	movs	r0, #8
 8001fa6:	f7ff fae9 	bl	800157c <LTC_WRCOMM>
	Wakeup_Idle();
 8001faa:	f7ff f9f1 	bl	8001390 <Wakeup_Idle>
	LTC_STCOMM(2);
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7ff fb52 	bl	8001658 <LTC_STCOMM>

	Wakeup_Sleep();
 8001fb4:	f7ff fa0e 	bl	80013d4 <Wakeup_Sleep>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8001fb8:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001fbc:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 8001fc0:	e016      	b.n	8001ff0 <main+0x148>
		Wakeup_Idle();
 8001fc2:	f7ff f9e5 	bl	8001390 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fca:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 8001fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd2:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8001fd6:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f96e 	bl	80022bc <Read_Temp>
		osDelay(3);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f003 f9fd 	bl	80053e0 <osDelay>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8001fe6:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8001fea:	3301      	adds	r3, #1
 8001fec:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 8001ff0:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8001ff4:	2b0b      	cmp	r3, #11
 8001ff6:	d9e4      	bls.n	8001fc2 <main+0x11a>
	}
	Wakeup_Idle();
 8001ff8:	f7ff f9ca 	bl	8001390 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8001ffc:	4909      	ldr	r1, [pc, #36]	@ (8002024 <main+0x17c>)
 8001ffe:	2008      	movs	r0, #8
 8002000:	f7ff fabc 	bl	800157c <LTC_WRCOMM>
	Wakeup_Idle();
 8002004:	f7ff f9c4 	bl	8001390 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002008:	2002      	movs	r0, #2
 800200a:	f7ff fb25 	bl	8001658 <LTC_STCOMM>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800200e:	f003 f9c5 	bl	800539c <osKernelInitialize>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002012:	bf00      	nop
 8002014:	e7fd      	b.n	8002012 <main+0x16a>
 8002016:	bf00      	nop
 8002018:	40011000 	.word	0x40011000
 800201c:	40010c00 	.word	0x40010c00
 8002020:	20000000 	.word	0x20000000
 8002024:	20000006 	.word	0x20000006

08002028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09c      	sub	sp, #112	@ 0x70
 800202c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002032:	2238      	movs	r2, #56	@ 0x38
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fdc0 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2220      	movs	r2, #32
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fdb2 	bl	8005bbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002058:	2301      	movs	r3, #1
 800205a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800205c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002060:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002062:	2304      	movs	r3, #4
 8002064:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002066:	2301      	movs	r3, #1
 8002068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800206a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800206e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002070:	2302      	movs	r3, #2
 8002072:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800207a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800207e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002080:	2302      	movs	r3, #2
 8002082:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002084:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002088:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800208a:	2340      	movs	r3, #64	@ 0x40
 800208c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002092:	4618      	mov	r0, r3
 8002094:	f001 f9e4 	bl	8003460 <HAL_RCC_OscConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800209e:	f000 f86f 	bl	8002180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fce4 	bl	8003a8c <HAL_RCC_ClockConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020ca:	f000 f859 	bl	8002180 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020ce:	2302      	movs	r3, #2
 80020d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fefc 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020e6:	f000 f84b 	bl	8002180 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80020ea:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <SystemClock_Config+0xd0>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3770      	adds	r7, #112	@ 0x70
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	42420070 	.word	0x42420070

080020fc <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	68b8      	ldr	r0, [r7, #8]
 8002112:	f001 f98d 	bl	8003430 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <TimerPacket_Init>:
		gtp->ts_prev = gtp->ts_curr;
	}
}
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	609a      	str	r2, [r3, #8]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800216e:	f000 fb69 	bl	8002844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40001000 	.word	0x40001000

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <Error_Handler+0x8>

0800218c <Get_Actual_Temps>:
				0x0F, 0xC9, 0x7F, 0xF9 },
		{ 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F,
				0xF9 }, { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08,
				0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp, uint16_t data) {
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	603a      	str	r2, [r7, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	460b      	mov	r3, r1
 800219c:	71bb      	strb	r3, [r7, #6]
 800219e:	4613      	mov	r3, r2
 80021a0:	80bb      	strh	r3, [r7, #4]
    if (data == 0) {
 80021a2:	88bb      	ldrh	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10d      	bne.n	80021c4 <Get_Actual_Temps+0x38>
        actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = -99.0f; // error value
 80021a8:	79fa      	ldrb	r2, [r7, #7]
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	79bb      	ldrb	r3, [r7, #6]
 80021b6:	4413      	add	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
        return;
 80021c2:	e059      	b.n	8002278 <Get_Actual_Temps+0xec>
    }

    float scalar = 30000.0f / (float)(data) - 1.0f;
 80021c4:	88bb      	ldrh	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fda4 	bl	8000d14 <__aeabi_ui2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4619      	mov	r1, r3
 80021d0:	482b      	ldr	r0, [pc, #172]	@ (8002280 <Get_Actual_Temps+0xf4>)
 80021d2:	f7fe feab 	bl	8000f2c <__aeabi_fdiv>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fce7 	bl	8000bb0 <__aeabi_fsub>
 80021e2:	4603      	mov	r3, r0
 80021e4:	60fb      	str	r3, [r7, #12]
    scalar = ntcSeriesResistance / scalar;
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4826      	ldr	r0, [pc, #152]	@ (8002284 <Get_Actual_Temps+0xf8>)
 80021ea:	f7fe fe9f 	bl	8000f2c <__aeabi_fdiv>
 80021ee:	4603      	mov	r3, r0
 80021f0:	60fb      	str	r3, [r7, #12]

    float steinhart = scalar / ntcNominal;
 80021f2:	4924      	ldr	r1, [pc, #144]	@ (8002284 <Get_Actual_Temps+0xf8>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7fe fe99 	bl	8000f2c <__aeabi_fdiv>
 80021fa:	4603      	mov	r3, r0
 80021fc:	60bb      	str	r3, [r7, #8]
    steinhart = log(steinhart);
 80021fe:	68b8      	ldr	r0, [r7, #8]
 8002200:	f7fe f97a 	bl	80004f8 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f003 fd16 	bl	8005c3c <log>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fc76 	bl	8000b08 <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
 800221e:	60bb      	str	r3, [r7, #8]
    steinhart *= invBetaFactor;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <Get_Actual_Temps+0xfc>)
 8002222:	4619      	mov	r1, r3
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	f7fe fdcd 	bl	8000dc4 <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	60bb      	str	r3, [r7, #8]
    steinhart += invNominalTemp;
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <Get_Actual_Temps+0x100>)
 8002230:	4619      	mov	r1, r3
 8002232:	68b8      	ldr	r0, [r7, #8]
 8002234:	f7fe fcbe 	bl	8000bb4 <__addsf3>
 8002238:	4603      	mov	r3, r0
 800223a:	60bb      	str	r3, [r7, #8]
    steinhart = 1.0f / steinhart;
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002242:	f7fe fe73 	bl	8000f2c <__aeabi_fdiv>
 8002246:	4603      	mov	r3, r0
 8002248:	60bb      	str	r3, [r7, #8]
    steinhart -= 273.15f;
 800224a:	4911      	ldr	r1, [pc, #68]	@ (8002290 <Get_Actual_Temps+0x104>)
 800224c:	68b8      	ldr	r0, [r7, #8]
 800224e:	f7fe fcaf 	bl	8000bb0 <__aeabi_fsub>
 8002252:	4603      	mov	r3, r0
 8002254:	60bb      	str	r3, [r7, #8]

    actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	79bb      	ldrb	r3, [r7, #6]
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	18d4      	adds	r4, r2, r3
 800226c:	68b8      	ldr	r0, [r7, #8]
 800226e:	f7fe fef9 	bl	8001064 <__aeabi_f2uiz>
 8002272:	4603      	mov	r3, r0
 8002274:	b29b      	uxth	r3, r3
 8002276:	8023      	strh	r3, [r4, #0]
}
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	46ea6000 	.word	0x46ea6000
 8002284:	461c4000 	.word	0x461c4000
 8002288:	3998a193 	.word	0x3998a193
 800228c:	3b5bcf0f 	.word	0x3b5bcf0f
 8002290:	43889333 	.word	0x43889333

08002294 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_26HZ_FILTERED, DCP_DISABLED, CELL_CH_ALL);//filtered mode takes 200ms for each module to read
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2003      	movs	r0, #3
 80022a2:	f7ff fad1 	bl	8001848 <LTC_ADCV>
	LTC_POLLADC();
 80022a6:	f7ff fb55 	bl	8001954 <LTC_POLLADC>
	Wakeup_Idle();
 80022aa:	f7ff f871 	bl	8001390 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff f8ac 	bl	800140c <Read_Cell_Volt>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <Read_Temp+0x88>)
 80022d6:	4413      	add	r3, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	2008      	movs	r0, #8
 80022dc:	f7ff f94e 	bl	800157c <LTC_WRCOMM>
	Wakeup_Idle();
 80022e0:	f7ff f856 	bl	8001390 <Wakeup_Idle>
	LTC_STCOMM(2);
 80022e4:	2002      	movs	r0, #2
 80022e6:	f7ff f9b7 	bl	8001658 <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 80022ea:	f7ff f851 	bl	8001390 <Wakeup_Idle>
	LTC_ADAX(MD_27KHZ_FAST, 1); //doing GPIO all conversion,fast mode can do it in 1.1ms
 80022ee:	2101      	movs	r1, #1
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff faef 	bl	80018d4 <LTC_ADAX>
	LTC_POLLADC();
 80022f6:	f7ff fb2d 	bl	8001954 <LTC_POLLADC>
	Wakeup_Idle();
 80022fa:	f7ff f849 	bl	8001390 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff f9ea 	bl	80016d8 <Read_Cell_Temps>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
 800230e:	e012      	b.n	8002336 <Read_Temp+0x7a>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8002310:	7dfa      	ldrb	r2, [r7, #23]
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	82bb      	strh	r3, [r7, #20]
//			read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002324:	8abb      	ldrh	r3, [r7, #20]
 8002326:	7bf9      	ldrb	r1, [r7, #15]
 8002328:	7df8      	ldrb	r0, [r7, #23]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f7ff ff2e 	bl	800218c <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	3301      	adds	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	2b07      	cmp	r3, #7
 800233a:	d9e9      	bls.n	8002310 <Read_Temp+0x54>
		}
	}
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000000c 	.word	0x2000000c

08002348 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800234c:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <MX_SPI1_Init+0x64>)
 800234e:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <MX_SPI1_Init+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002354:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <MX_SPI1_Init+0x64>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800236c:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002378:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <MX_SPI1_Init+0x64>)
 800237c:	2228      	movs	r2, #40	@ 0x28
 800237e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002380:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002382:	2200      	movs	r2, #0
 8002384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238c:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <MX_SPI1_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <MX_SPI1_Init+0x64>)
 8002394:	220a      	movs	r2, #10
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002398:	4804      	ldr	r0, [pc, #16]	@ (80023ac <MX_SPI1_Init+0x64>)
 800239a:	f001 fecf 	bl	800413c <HAL_SPI_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023a4:	f7ff feec 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200001b4 	.word	0x200001b4
 80023b0:	40013000 	.word	0x40013000

080023b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1b      	ldr	r2, [pc, #108]	@ (800243c <HAL_SPI_MspInit+0x88>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d12f      	bne.n	8002434 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_SPI_MspInit+0x8c>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a19      	ldr	r2, [pc, #100]	@ (8002440 <HAL_SPI_MspInit+0x8c>)
 80023da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_SPI_MspInit+0x8c>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_SPI_MspInit+0x8c>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a13      	ldr	r2, [pc, #76]	@ (8002440 <HAL_SPI_MspInit+0x8c>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_SPI_MspInit+0x8c>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002404:	23a0      	movs	r3, #160	@ 0xa0
 8002406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	4619      	mov	r1, r3
 8002416:	480b      	ldr	r0, [pc, #44]	@ (8002444 <HAL_SPI_MspInit+0x90>)
 8002418:	f000 fe86 	bl	8003128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800241c:	2340      	movs	r3, #64	@ 0x40
 800241e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <HAL_SPI_MspInit+0x90>)
 8002430:	f000 fe7a 	bl	8003128 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013000 	.word	0x40013000
 8002440:	40021000 	.word	0x40021000
 8002444:	40010800 	.word	0x40010800

08002448 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 800244c:	2201      	movs	r2, #1
 800244e:	2110      	movs	r1, #16
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <LTC_nCS_High+0x14>)
 8002452:	f000 ffed 	bl	8003430 <HAL_GPIO_WritePin>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40010800 	.word	0x40010800

08002460 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002464:	2200      	movs	r2, #0
 8002466:	2110      	movs	r1, #16
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <LTC_nCS_Low+0x14>)
 800246a:	f000 ffe1 	bl	8003430 <HAL_GPIO_WritePin>
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40010800 	.word	0x40010800

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <HAL_MspInit+0x68>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <HAL_MspInit+0x68>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6193      	str	r3, [r2, #24]
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_MspInit+0x68>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_MspInit+0x68>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a11      	ldr	r2, [pc, #68]	@ (80024e0 <HAL_MspInit+0x68>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	61d3      	str	r3, [r2, #28]
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_MspInit+0x68>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	210f      	movs	r1, #15
 80024b2:	f06f 0001 	mvn.w	r0, #1
 80024b6:	f000 fe0c 	bl	80030d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_MspInit+0x6c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <HAL_MspInit+0x6c>)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000

080024e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	@ 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024fe:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_InitTick+0xe8>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a33      	ldr	r2, [pc, #204]	@ (80025d0 <HAL_InitTick+0xe8>)
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_InitTick+0xe8>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002516:	f107 0210 	add.w	r2, r7, #16
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f001 fc8b 	bl	8003e3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800252a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002530:	f001 fc5c 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8002534:	6378      	str	r0, [r7, #52]	@ 0x34
 8002536:	e004      	b.n	8002542 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002538:	f001 fc58 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 800253c:	4603      	mov	r3, r0
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002544:	4a23      	ldr	r2, [pc, #140]	@ (80025d4 <HAL_InitTick+0xec>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	3b01      	subs	r3, #1
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_InitTick+0xf0>)
 8002552:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <HAL_InitTick+0xf4>)
 8002554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_InitTick+0xf0>)
 8002558:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800255c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800255e:	4a1e      	ldr	r2, [pc, #120]	@ (80025d8 <HAL_InitTick+0xf0>)
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002562:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002564:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <HAL_InitTick+0xf0>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_InitTick+0xf0>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_InitTick+0xf0>)
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002576:	4818      	ldr	r0, [pc, #96]	@ (80025d8 <HAL_InitTick+0xf0>)
 8002578:	f002 fb75 	bl	8004c66 <HAL_TIM_Base_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002582:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11b      	bne.n	80025c2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800258a:	4813      	ldr	r0, [pc, #76]	@ (80025d8 <HAL_InitTick+0xf0>)
 800258c:	f002 fbba 	bl	8004d04 <HAL_TIM_Base_Start_IT>
 8002590:	4603      	mov	r3, r0
 8002592:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002596:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800259a:	2b00      	cmp	r3, #0
 800259c:	d111      	bne.n	80025c2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800259e:	2036      	movs	r0, #54	@ 0x36
 80025a0:	f000 fdb3 	bl	800310a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b0f      	cmp	r3, #15
 80025a8:	d808      	bhi.n	80025bc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80025aa:	2200      	movs	r2, #0
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	2036      	movs	r0, #54	@ 0x36
 80025b0:	f000 fd8f 	bl	80030d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b4:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_InitTick+0xf8>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e002      	b.n	80025c2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3738      	adds	r7, #56	@ 0x38
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	2000020c 	.word	0x2000020c
 80025dc:	40001000 	.word	0x40001000
 80025e0:	20000070 	.word	0x20000070

080025e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <NMI_Handler+0x4>

080025ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <MemManage_Handler+0x4>

080025fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <UsageFault_Handler+0x4>

0800260c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <TIM6_IRQHandler+0x10>)
 800261e:	f002 fbcb 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000020c 	.word	0x2000020c

0800262c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002646:	4b15      	ldr	r3, [pc, #84]	@ (800269c <MX_TIM7_Init+0x64>)
 8002648:	4a15      	ldr	r2, [pc, #84]	@ (80026a0 <MX_TIM7_Init+0x68>)
 800264a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800264c:	4b13      	ldr	r3, [pc, #76]	@ (800269c <MX_TIM7_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_TIM7_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002658:	4b10      	ldr	r3, [pc, #64]	@ (800269c <MX_TIM7_Init+0x64>)
 800265a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800265e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002660:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_TIM7_Init+0x64>)
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002666:	480d      	ldr	r0, [pc, #52]	@ (800269c <MX_TIM7_Init+0x64>)
 8002668:	f002 fafd 	bl	8004c66 <HAL_TIM_Base_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002672:	f7ff fd85 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800267e:	463b      	mov	r3, r7
 8002680:	4619      	mov	r1, r3
 8002682:	4806      	ldr	r0, [pc, #24]	@ (800269c <MX_TIM7_Init+0x64>)
 8002684:	f002 fd24 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800268e:	f7ff fd77 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000254 	.word	0x20000254
 80026a0:	40001400 	.word	0x40001400

080026a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_TIM_Base_MspInit+0x34>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10b      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_TIM_Base_MspInit+0x38>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a08      	ldr	r2, [pc, #32]	@ (80026dc <HAL_TIM_Base_MspInit+0x38>)
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_TIM_Base_MspInit+0x38>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40001400 	.word	0x40001400
 80026dc:	40021000 	.word	0x40021000

080026e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <MX_USART1_UART_Init+0x50>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 800270c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002710:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 800271a:	f002 fd51 	bl	80051c0 <HAL_UART_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002724:	f7ff fd2c 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000029c 	.word	0x2000029c
 8002730:	40013800 	.word	0x40013800

08002734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_UART_MspInit+0x8c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d131      	bne.n	80027b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_UART_MspInit+0x90>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <HAL_UART_MspInit+0x90>)
 800275a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_UART_MspInit+0x90>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_UART_MspInit+0x90>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <HAL_UART_MspInit+0x90>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_UART_MspInit+0x90>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8002784:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8002788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4619      	mov	r1, r3
 8002798:	480b      	ldr	r0, [pc, #44]	@ (80027c8 <HAL_UART_MspInit+0x94>)
 800279a:	f000 fcc5 	bl	8003128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800279e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	4619      	mov	r1, r3
 80027b2:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <HAL_UART_MspInit+0x94>)
 80027b4:	f000 fcb8 	bl	8003128 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010800 	.word	0x40010800

080027cc <Reset_Handler>:
 80027cc:	f7ff ff2e 	bl	800262c <SystemInit>
 80027d0:	480b      	ldr	r0, [pc, #44]	@ (8002800 <LoopFillZerobss+0xe>)
 80027d2:	490c      	ldr	r1, [pc, #48]	@ (8002804 <LoopFillZerobss+0x12>)
 80027d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002808 <LoopFillZerobss+0x16>)
 80027d6:	2300      	movs	r3, #0
 80027d8:	e002      	b.n	80027e0 <LoopCopyDataInit>

080027da <CopyDataInit>:
 80027da:	58d4      	ldr	r4, [r2, r3]
 80027dc:	50c4      	str	r4, [r0, r3]
 80027de:	3304      	adds	r3, #4

080027e0 <LoopCopyDataInit>:
 80027e0:	18c4      	adds	r4, r0, r3
 80027e2:	428c      	cmp	r4, r1
 80027e4:	d3f9      	bcc.n	80027da <CopyDataInit>
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <LoopFillZerobss+0x1a>)
 80027e8:	4c09      	ldr	r4, [pc, #36]	@ (8002810 <LoopFillZerobss+0x1e>)
 80027ea:	2300      	movs	r3, #0
 80027ec:	e001      	b.n	80027f2 <LoopFillZerobss>

080027ee <FillZerobss>:
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	3204      	adds	r2, #4

080027f2 <LoopFillZerobss>:
 80027f2:	42a2      	cmp	r2, r4
 80027f4:	d3fb      	bcc.n	80027ee <FillZerobss>
 80027f6:	f003 f9ef 	bl	8005bd8 <__libc_init_array>
 80027fa:	f7ff fb55 	bl	8001ea8 <main>
 80027fe:	4770      	bx	lr
 8002800:	20000000 	.word	0x20000000
 8002804:	200000cc 	.word	0x200000cc
 8002808:	08006484 	.word	0x08006484
 800280c:	200000cc 	.word	0x200000cc
 8002810:	200008dc 	.word	0x200008dc

08002814 <ADC1_2_IRQHandler>:
 8002814:	e7fe      	b.n	8002814 <ADC1_2_IRQHandler>
	...

08002818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <HAL_Init+0x28>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	@ (8002840 <HAL_Init+0x28>)
 8002822:	f043 0310 	orr.w	r3, r3, #16
 8002826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 fc47 	bl	80030bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	200f      	movs	r0, #15
 8002830:	f7ff fe5a 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fe20 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000

08002844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002848:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_IncTick+0x1c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_IncTick+0x20>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	4a03      	ldr	r2, [pc, #12]	@ (8002864 <HAL_IncTick+0x20>)
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000074 	.word	0x20000074
 8002864:	200002e4 	.word	0x200002e4

08002868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return uwTick;
 800286c:	4b02      	ldr	r3, [pc, #8]	@ (8002878 <HAL_GetTick+0x10>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	200002e4 	.word	0x200002e4

0800287c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0be      	b.n	8002a1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff f93e 	bl	8001b3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9ab 	bl	8002c1c <ADC_ConversionStop_Disable>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8099 	bne.w	8002a0a <HAL_ADC_Init+0x18e>
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 8095 	bne.w	8002a0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e8:	f023 0302 	bic.w	r3, r3, #2
 80028ec:	f043 0202 	orr.w	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002904:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002914:	d003      	beq.n	800291e <HAL_ADC_Init+0xa2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_ADC_Init+0xa8>
 800291e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002922:	e000      	b.n	8002926 <HAL_ADC_Init+0xaa>
 8002924:	2300      	movs	r3, #0
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7d1b      	ldrb	r3, [r3, #20]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d119      	bne.n	8002968 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7b1b      	ldrb	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	3b01      	subs	r3, #1
 8002942:	035a      	lsls	r2, r3, #13
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e00b      	b.n	8002968 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_ADC_Init+0x1a8>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002998:	d003      	beq.n	80029a2 <HAL_ADC_Init+0x126>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d104      	bne.n	80029ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	051b      	lsls	r3, r3, #20
 80029aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	430a      	orrs	r2, r1
 80029be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_ADC_Init+0x1ac>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029e6:	e018      	b.n	8002a1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	f023 0312 	bic.w	r3, r3, #18
 80029f0:	f043 0210 	orr.w	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a08:	e007      	b.n	8002a1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	ffe1f7fd 	.word	0xffe1f7fd
 8002a28:	ff1f0efe 	.word	0xff1f0efe

08002a2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x20>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0dc      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1da>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d81c      	bhi.n	8002a96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b05      	subs	r3, #5
 8002a6e:	221f      	movs	r2, #31
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4019      	ands	r1, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b05      	subs	r3, #5
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a94:	e03c      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d81c      	bhi.n	8002ad8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b23      	subs	r3, #35	@ 0x23
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4019      	ands	r1, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b23      	subs	r3, #35	@ 0x23
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad6:	e01b      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b41      	subs	r3, #65	@ 0x41
 8002aea:	221f      	movs	r2, #31
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	4019      	ands	r1, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3b41      	subs	r3, #65	@ 0x41
 8002b04:	fa00 f203 	lsl.w	r2, r0, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d91c      	bls.n	8002b52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1e      	subs	r3, #30
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4019      	ands	r1, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6898      	ldr	r0, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	3b1e      	subs	r3, #30
 8002b44:	fa00 f203 	lsl.w	r2, r0, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	e019      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	2207      	movs	r2, #7
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4019      	ands	r1, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6898      	ldr	r0, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d003      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b92:	2b11      	cmp	r3, #17
 8002b94:	d132      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c10 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d125      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d126      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002bbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d11a      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a13      	ldr	r2, [pc, #76]	@ (8002c18 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	0c9a      	lsrs	r2, r3, #18
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bdc:	e002      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f9      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x1b2>
 8002bea:	e007      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	40012400 	.word	0x40012400
 8002c14:	2000006c 	.word	0x2000006c
 8002c18:	431bde83 	.word	0x431bde83

08002c1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d12e      	bne.n	8002c94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c46:	f7ff fe0f 	bl	8002868 <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c4c:	e01b      	b.n	8002c86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c4e:	f7ff fe0b 	bl	8002868 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d914      	bls.n	8002c86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e007      	b.n	8002c96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d0dc      	beq.n	8002c4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0ed      	b.n	8002e8c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fe ffd9 	bl	8001c74 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd2:	f7ff fdc9 	bl	8002868 <HAL_GetTick>
 8002cd6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cd8:	e012      	b.n	8002d00 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cda:	f7ff fdc5 	bl	8002868 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b0a      	cmp	r3, #10
 8002ce6:	d90b      	bls.n	8002d00 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2205      	movs	r2, #5
 8002cf8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0c5      	b.n	8002e8c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0e5      	beq.n	8002cda <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0202 	bic.w	r2, r2, #2
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1e:	f7ff fda3 	bl	8002868 <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d24:	e012      	b.n	8002d4c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d26:	f7ff fd9f 	bl	8002868 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b0a      	cmp	r3, #10
 8002d32:	d90b      	bls.n	8002d4c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2205      	movs	r2, #5
 8002d44:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e09f      	b.n	8002e8c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e5      	bne.n	8002d26 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7e1b      	ldrb	r3, [r3, #24]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e007      	b.n	8002d84 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7e5b      	ldrb	r3, [r3, #25]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e007      	b.n	8002dae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7e9b      	ldrb	r3, [r3, #26]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d108      	bne.n	8002dc8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e007      	b.n	8002dd8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0220 	bic.w	r2, r2, #32
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7edb      	ldrb	r3, [r3, #27]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d108      	bne.n	8002df2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0210 	bic.w	r2, r2, #16
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e007      	b.n	8002e02 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0210 	orr.w	r2, r2, #16
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7f1b      	ldrb	r3, [r3, #28]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0208 	orr.w	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e007      	b.n	8002e2c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0208 	bic.w	r2, r2, #8
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7f5b      	ldrb	r3, [r3, #29]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0204 	orr.w	r2, r2, #4
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e007      	b.n	8002e56 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0204 	bic.w	r2, r2, #4
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d12e      	bne.n	8002f06 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ec0:	f7ff fcd2 	bl	8002868 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ec6:	e012      	b.n	8002eee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ec8:	f7ff fcce 	bl	8002868 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b0a      	cmp	r3, #10
 8002ed4:	d90b      	bls.n	8002eee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e012      	b.n	8002f14 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e5      	bne.n	8002ec8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e006      	b.n	8002f14 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d002      	beq.n	8002f3a <HAL_CAN_ActivateNotification+0x1e>
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d109      	bne.n	8002f4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6959      	ldr	r1, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e006      	b.n	8002f5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f84:	4013      	ands	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9a:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	60d3      	str	r3, [r2, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 0307 	and.w	r3, r3, #7
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	db0b      	blt.n	8002ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4906      	ldr	r1, [pc, #24]	@ (8003000 <__NVIC_EnableIRQ+0x34>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2001      	movs	r0, #1
 8002fee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	@ (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	@ (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
         );
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	@ 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff4f 	bl	8002f68 <__NVIC_SetPriorityGrouping>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e4:	f7ff ff64 	bl	8002fb0 <__NVIC_GetPriorityGrouping>
 80030e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f7ff ffb2 	bl	8003058 <NVIC_EncodePriority>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff81 	bl	8003004 <__NVIC_SetPriority>
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff57 	bl	8002fcc <__NVIC_EnableIRQ>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b08b      	sub	sp, #44	@ 0x2c
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313a:	e169      	b.n	8003410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800313c:	2201      	movs	r2, #1
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	429a      	cmp	r2, r3
 8003156:	f040 8158 	bne.w	800340a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a9a      	ldr	r2, [pc, #616]	@ (80033c8 <HAL_GPIO_Init+0x2a0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d05e      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003164:	4a98      	ldr	r2, [pc, #608]	@ (80033c8 <HAL_GPIO_Init+0x2a0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d875      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 800316a:	4a98      	ldr	r2, [pc, #608]	@ (80033cc <HAL_GPIO_Init+0x2a4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d058      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003170:	4a96      	ldr	r2, [pc, #600]	@ (80033cc <HAL_GPIO_Init+0x2a4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d86f      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 8003176:	4a96      	ldr	r2, [pc, #600]	@ (80033d0 <HAL_GPIO_Init+0x2a8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d052      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 800317c:	4a94      	ldr	r2, [pc, #592]	@ (80033d0 <HAL_GPIO_Init+0x2a8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d869      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 8003182:	4a94      	ldr	r2, [pc, #592]	@ (80033d4 <HAL_GPIO_Init+0x2ac>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04c      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003188:	4a92      	ldr	r2, [pc, #584]	@ (80033d4 <HAL_GPIO_Init+0x2ac>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d863      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 800318e:	4a92      	ldr	r2, [pc, #584]	@ (80033d8 <HAL_GPIO_Init+0x2b0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d046      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003194:	4a90      	ldr	r2, [pc, #576]	@ (80033d8 <HAL_GPIO_Init+0x2b0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d85d      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 800319a:	2b12      	cmp	r3, #18
 800319c:	d82a      	bhi.n	80031f4 <HAL_GPIO_Init+0xcc>
 800319e:	2b12      	cmp	r3, #18
 80031a0:	d859      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 80031a2:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <HAL_GPIO_Init+0x80>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	08003223 	.word	0x08003223
 80031ac:	080031fd 	.word	0x080031fd
 80031b0:	0800320f 	.word	0x0800320f
 80031b4:	08003251 	.word	0x08003251
 80031b8:	08003257 	.word	0x08003257
 80031bc:	08003257 	.word	0x08003257
 80031c0:	08003257 	.word	0x08003257
 80031c4:	08003257 	.word	0x08003257
 80031c8:	08003257 	.word	0x08003257
 80031cc:	08003257 	.word	0x08003257
 80031d0:	08003257 	.word	0x08003257
 80031d4:	08003257 	.word	0x08003257
 80031d8:	08003257 	.word	0x08003257
 80031dc:	08003257 	.word	0x08003257
 80031e0:	08003257 	.word	0x08003257
 80031e4:	08003257 	.word	0x08003257
 80031e8:	08003257 	.word	0x08003257
 80031ec:	08003205 	.word	0x08003205
 80031f0:	08003219 	.word	0x08003219
 80031f4:	4a79      	ldr	r2, [pc, #484]	@ (80033dc <HAL_GPIO_Init+0x2b4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031fa:	e02c      	b.n	8003256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	623b      	str	r3, [r7, #32]
          break;
 8003202:	e029      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	3304      	adds	r3, #4
 800320a:	623b      	str	r3, [r7, #32]
          break;
 800320c:	e024      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	3308      	adds	r3, #8
 8003214:	623b      	str	r3, [r7, #32]
          break;
 8003216:	e01f      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	330c      	adds	r3, #12
 800321e:	623b      	str	r3, [r7, #32]
          break;
 8003220:	e01a      	b.n	8003258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800322a:	2304      	movs	r3, #4
 800322c:	623b      	str	r3, [r7, #32]
          break;
 800322e:	e013      	b.n	8003258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003238:	2308      	movs	r3, #8
 800323a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	611a      	str	r2, [r3, #16]
          break;
 8003242:	e009      	b.n	8003258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003244:	2308      	movs	r3, #8
 8003246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	615a      	str	r2, [r3, #20]
          break;
 800324e:	e003      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003250:	2300      	movs	r3, #0
 8003252:	623b      	str	r3, [r7, #32]
          break;
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x130>
          break;
 8003256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2bff      	cmp	r3, #255	@ 0xff
 800325c:	d801      	bhi.n	8003262 <HAL_GPIO_Init+0x13a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	e001      	b.n	8003266 <HAL_GPIO_Init+0x13e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2bff      	cmp	r3, #255	@ 0xff
 800326c:	d802      	bhi.n	8003274 <HAL_GPIO_Init+0x14c>
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	e002      	b.n	800327a <HAL_GPIO_Init+0x152>
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	3b08      	subs	r3, #8
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	210f      	movs	r1, #15
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	431a      	orrs	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80b1 	beq.w	800340a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032a8:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <HAL_GPIO_Init+0x2b8>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a4c      	ldr	r2, [pc, #304]	@ (80033e0 <HAL_GPIO_Init+0x2b8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_GPIO_Init+0x2b8>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032c0:	4a48      	ldr	r2, [pc, #288]	@ (80033e4 <HAL_GPIO_Init+0x2bc>)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	220f      	movs	r2, #15
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a40      	ldr	r2, [pc, #256]	@ (80033e8 <HAL_GPIO_Init+0x2c0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_GPIO_Init+0x1ec>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3f      	ldr	r2, [pc, #252]	@ (80033ec <HAL_GPIO_Init+0x2c4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00d      	beq.n	8003310 <HAL_GPIO_Init+0x1e8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3e      	ldr	r2, [pc, #248]	@ (80033f0 <HAL_GPIO_Init+0x2c8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <HAL_GPIO_Init+0x1e4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3d      	ldr	r2, [pc, #244]	@ (80033f4 <HAL_GPIO_Init+0x2cc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_GPIO_Init+0x1e0>
 8003304:	2303      	movs	r3, #3
 8003306:	e006      	b.n	8003316 <HAL_GPIO_Init+0x1ee>
 8003308:	2304      	movs	r3, #4
 800330a:	e004      	b.n	8003316 <HAL_GPIO_Init+0x1ee>
 800330c:	2302      	movs	r3, #2
 800330e:	e002      	b.n	8003316 <HAL_GPIO_Init+0x1ee>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_GPIO_Init+0x1ee>
 8003314:	2300      	movs	r3, #0
 8003316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003318:	f002 0203 	and.w	r2, r2, #3
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	4093      	lsls	r3, r2
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003326:	492f      	ldr	r1, [pc, #188]	@ (80033e4 <HAL_GPIO_Init+0x2bc>)
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	3302      	adds	r3, #2
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003340:	4b2d      	ldr	r3, [pc, #180]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	492c      	ldr	r1, [pc, #176]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800334e:	4b2a      	ldr	r3, [pc, #168]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	43db      	mvns	r3, r3
 8003356:	4928      	ldr	r1, [pc, #160]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003358:	4013      	ands	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003368:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	4922      	ldr	r1, [pc, #136]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	60cb      	str	r3, [r1, #12]
 8003374:	e006      	b.n	8003384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003376:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	43db      	mvns	r3, r3
 800337e:	491e      	ldr	r1, [pc, #120]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003380:	4013      	ands	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4918      	ldr	r1, [pc, #96]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	4914      	ldr	r1, [pc, #80]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d021      	beq.n	80033fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	490e      	ldr	r1, [pc, #56]	@ (80033f8 <HAL_GPIO_Init+0x2d0>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e021      	b.n	800340a <HAL_GPIO_Init+0x2e2>
 80033c6:	bf00      	nop
 80033c8:	10320000 	.word	0x10320000
 80033cc:	10310000 	.word	0x10310000
 80033d0:	10220000 	.word	0x10220000
 80033d4:	10210000 	.word	0x10210000
 80033d8:	10120000 	.word	0x10120000
 80033dc:	10110000 	.word	0x10110000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40010800 	.word	0x40010800
 80033ec:	40010c00 	.word	0x40010c00
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_GPIO_Init+0x304>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	43db      	mvns	r3, r3
 8003404:	4909      	ldr	r1, [pc, #36]	@ (800342c <HAL_GPIO_Init+0x304>)
 8003406:	4013      	ands	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	3301      	adds	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	f47f ae8e 	bne.w	800313c <HAL_GPIO_Init+0x14>
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	372c      	adds	r7, #44	@ 0x2c
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003440:	787b      	ldrb	r3, [r7, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800344c:	e003      	b.n	8003456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	611a      	str	r2, [r3, #16]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e304      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8087 	beq.w	800358e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003480:	4b92      	ldr	r3, [pc, #584]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b04      	cmp	r3, #4
 800348a:	d00c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800348c:	4b8f      	ldr	r3, [pc, #572]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b08      	cmp	r3, #8
 8003496:	d112      	bne.n	80034be <HAL_RCC_OscConfig+0x5e>
 8003498:	4b8c      	ldr	r3, [pc, #560]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a4:	d10b      	bne.n	80034be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a6:	4b89      	ldr	r3, [pc, #548]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d06c      	beq.n	800358c <HAL_RCC_OscConfig+0x12c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d168      	bne.n	800358c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e2de      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x76>
 80034c8:	4b80      	ldr	r3, [pc, #512]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7f      	ldr	r2, [pc, #508]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e02e      	b.n	8003534 <HAL_RCC_OscConfig+0xd4>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x98>
 80034de:	4b7b      	ldr	r3, [pc, #492]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7a      	ldr	r2, [pc, #488]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b78      	ldr	r3, [pc, #480]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a77      	ldr	r2, [pc, #476]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e01d      	b.n	8003534 <HAL_RCC_OscConfig+0xd4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0xbc>
 8003502:	4b72      	ldr	r3, [pc, #456]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a71      	ldr	r2, [pc, #452]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b6f      	ldr	r3, [pc, #444]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6e      	ldr	r2, [pc, #440]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0xd4>
 800351c:	4b6b      	ldr	r3, [pc, #428]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a6a      	ldr	r2, [pc, #424]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b68      	ldr	r3, [pc, #416]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a67      	ldr	r2, [pc, #412]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7ff f994 	bl	8002868 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7ff f990 	bl	8002868 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e292      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b5d      	ldr	r3, [pc, #372]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0xe4>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7ff f980 	bl	8002868 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7ff f97c 	bl	8002868 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e27e      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	4b53      	ldr	r3, [pc, #332]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x10c>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d063      	beq.n	8003662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800359a:	4b4c      	ldr	r3, [pc, #304]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035a6:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d11c      	bne.n	80035ec <HAL_RCC_OscConfig+0x18c>
 80035b2:	4b46      	ldr	r3, [pc, #280]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d116      	bne.n	80035ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	4b43      	ldr	r3, [pc, #268]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x176>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e252      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d6:	4b3d      	ldr	r3, [pc, #244]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4939      	ldr	r1, [pc, #228]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	e03a      	b.n	8003662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f4:	4b36      	ldr	r3, [pc, #216]	@ (80036d0 <HAL_RCC_OscConfig+0x270>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7ff f935 	bl	8002868 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003602:	f7ff f931 	bl	8002868 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e233      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	4b2d      	ldr	r3, [pc, #180]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003620:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4927      	ldr	r1, [pc, #156]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
 8003634:	e015      	b.n	8003662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	4b26      	ldr	r3, [pc, #152]	@ (80036d0 <HAL_RCC_OscConfig+0x270>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f914 	bl	8002868 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7ff f910 	bl	8002868 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e212      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03a      	beq.n	80036e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d019      	beq.n	80036aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003676:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7ff f8f4 	bl	8002868 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003684:	f7ff f8f0 	bl	8002868 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1f2      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <HAL_RCC_OscConfig+0x26c>)
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f000 fbfa 	bl	8003e9c <RCC_Delay>
 80036a8:	e01c      	b.n	80036e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036aa:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <HAL_RCC_OscConfig+0x274>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b0:	f7ff f8da 	bl	8002868 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b6:	e00f      	b.n	80036d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7ff f8d6 	bl	8002868 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d908      	bls.n	80036d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1d8      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	42420000 	.word	0x42420000
 80036d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b9b      	ldr	r3, [pc, #620]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e9      	bne.n	80036b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a6 	beq.w	800383e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4b94      	ldr	r3, [pc, #592]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	4b91      	ldr	r3, [pc, #580]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a90      	ldr	r2, [pc, #576]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]
 800370e:	4b8e      	ldr	r3, [pc, #568]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b8b      	ldr	r3, [pc, #556]	@ (800394c <HAL_RCC_OscConfig+0x4ec>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b88      	ldr	r3, [pc, #544]	@ (800394c <HAL_RCC_OscConfig+0x4ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a87      	ldr	r2, [pc, #540]	@ (800394c <HAL_RCC_OscConfig+0x4ec>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7ff f897 	bl	8002868 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7ff f893 	bl	8002868 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	@ 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e195      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b7e      	ldr	r3, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x4ec>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x312>
 8003764:	4b78      	ldr	r3, [pc, #480]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a77      	ldr	r2, [pc, #476]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	e02d      	b.n	80037ce <HAL_RCC_OscConfig+0x36e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x334>
 800377a:	4b73      	ldr	r3, [pc, #460]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a72      	ldr	r2, [pc, #456]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6213      	str	r3, [r2, #32]
 8003786:	4b70      	ldr	r3, [pc, #448]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a6f      	ldr	r2, [pc, #444]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	f023 0304 	bic.w	r3, r3, #4
 8003790:	6213      	str	r3, [r2, #32]
 8003792:	e01c      	b.n	80037ce <HAL_RCC_OscConfig+0x36e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d10c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x356>
 800379c:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4a69      	ldr	r2, [pc, #420]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6213      	str	r3, [r2, #32]
 80037a8:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a66      	ldr	r2, [pc, #408]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6213      	str	r3, [r2, #32]
 80037b4:	e00b      	b.n	80037ce <HAL_RCC_OscConfig+0x36e>
 80037b6:	4b64      	ldr	r3, [pc, #400]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4a63      	ldr	r2, [pc, #396]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6213      	str	r3, [r2, #32]
 80037c2:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4a60      	ldr	r2, [pc, #384]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7ff f847 	bl	8002868 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7ff f843 	bl	8002868 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e143      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b54      	ldr	r3, [pc, #336]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCC_OscConfig+0x37e>
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7ff f831 	bl	8002868 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7ff f82d 	bl	8002868 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e12d      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	4b49      	ldr	r3, [pc, #292]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b45      	ldr	r3, [pc, #276]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4a44      	ldr	r2, [pc, #272]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800383c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 808c 	beq.w	8003960 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003848:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003854:	d10e      	bne.n	8003874 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003856:	4b3c      	ldr	r3, [pc, #240]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800385e:	2b08      	cmp	r3, #8
 8003860:	d108      	bne.n	8003874 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003862:	4b39      	ldr	r3, [pc, #228]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e103      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	2b02      	cmp	r3, #2
 800387a:	d14e      	bne.n	800391a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800387c:	4b32      	ldr	r3, [pc, #200]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003888:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0ef      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800389c:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <HAL_RCC_OscConfig+0x4f0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe ffe1 	bl	8002868 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038aa:	f7fe ffdd 	bl	8002868 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	@ 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0df      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80038bc:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d4:	491c      	ldr	r1, [pc, #112]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80038da:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038de:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	4918      	ldr	r1, [pc, #96]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80038ec:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <HAL_RCC_OscConfig+0x4f0>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe ffb9 	bl	8002868 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038fa:	f7fe ffb5 	bl	8002868 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	@ 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0b7      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800390c:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x49a>
 8003918:	e022      	b.n	8003960 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800391a:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <HAL_RCC_OscConfig+0x4e8>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003926:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <HAL_RCC_OscConfig+0x4f0>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe ff9c 	bl	8002868 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003932:	e00f      	b.n	8003954 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003934:	f7fe ff98 	bl	8002868 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	@ 0x64
 8003940:	d908      	bls.n	8003954 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e09a      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003954:	4b4b      	ldr	r3, [pc, #300]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e9      	bne.n	8003934 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8088 	beq.w	8003a7a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800396a:	4b46      	ldr	r3, [pc, #280]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	d068      	beq.n	8003a48 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d14d      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b42      	ldr	r3, [pc, #264]	@ (8003a88 <HAL_RCC_OscConfig+0x628>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe ff70 	bl	8002868 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe ff6c 	bl	8002868 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e06e      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	4b39      	ldr	r3, [pc, #228]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d10f      	bne.n	80039d4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80039b4:	4b33      	ldr	r3, [pc, #204]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4931      	ldr	r1, [pc, #196]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039c2:	4b30      	ldr	r3, [pc, #192]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	492d      	ldr	r1, [pc, #180]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	430b      	orrs	r3, r1
 80039e6:	4927      	ldr	r1, [pc, #156]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b26      	ldr	r3, [pc, #152]	@ (8003a88 <HAL_RCC_OscConfig+0x628>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe ff39 	bl	8002868 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe ff35 	bl	8002868 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e037      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x59a>
 8003a18:	e02f      	b.n	8003a7a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <HAL_RCC_OscConfig+0x628>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe ff22 	bl	8002868 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe ff1e 	bl	8002868 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e020      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c8>
 8003a46:	e018      	b.n	8003a7a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e013      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_OscConfig+0x624>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	42420060 	.word	0x42420060

08003a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d0      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	4965      	ldr	r1, [pc, #404]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b8      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a58      	ldr	r2, [pc, #352]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b00:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a52      	ldr	r2, [pc, #328]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	494d      	ldr	r1, [pc, #308]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d040      	beq.n	8003bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e073      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4936      	ldr	r1, [pc, #216]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fe fe74 	bl	8002868 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe fe70 	bl	8002868 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e053      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d210      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4922      	ldr	r1, [pc, #136]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e032      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4916      	ldr	r1, [pc, #88]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c06:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	490e      	ldr	r1, [pc, #56]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c1a:	f000 f821 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490a      	ldr	r1, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1cc>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_ClockConfig+0x1d0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fc54 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08006438 	.word	0x08006438
 8003c58:	2000006c 	.word	0x2000006c
 8003c5c:	20000070 	.word	0x20000070

08003c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b08e      	sub	sp, #56	@ 0x38
 8003c66:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c70:	2300      	movs	r3, #0
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c84:	4b4e      	ldr	r3, [pc, #312]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d002      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d003      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8003c98:	e089      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003c9e:	e089      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003caa:	5c9b      	ldrb	r3, [r3, r2]
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d072      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003cb8:	4b41      	ldr	r3, [pc, #260]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	4b42      	ldr	r3, [pc, #264]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x16c>)
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d053      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	3301      	adds	r3, #1
 8003cde:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ce0:	4b37      	ldr	r3, [pc, #220]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	3302      	adds	r3, #2
 8003cec:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	469a      	mov	sl, r3
 8003cf4:	4693      	mov	fp, r2
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	617a      	str	r2, [r7, #20]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	fb03 f20b 	mul.w	r2, r3, fp
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fb0a f303 	mul.w	r3, sl, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	fbaa 0102 	umull	r0, r1, sl, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	4619      	mov	r1, r3
 8003d16:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d18:	fb03 f201 	mul.w	r2, r3, r1
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	fb00 f303 	mul.w	r3, r0, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d26:	fba0 4502 	umull	r4, r5, r0, r2
 8003d2a:	442b      	add	r3, r5
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	60fa      	str	r2, [r7, #12]
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d42:	460b      	mov	r3, r1
 8003d44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d48:	4652      	mov	r2, sl
 8003d4a:	fb02 f203 	mul.w	r2, r2, r3
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4684      	mov	ip, r0
 8003d52:	fb0c f303 	mul.w	r3, ip, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	fba2 8901 	umull	r8, r9, r2, r1
 8003d60:	444b      	add	r3, r9
 8003d62:	4699      	mov	r9, r3
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	4620      	mov	r0, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f7fd f99a 	bl	80010a4 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d78:	e007      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	4a11      	ldr	r2, [pc, #68]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d7e:	fb03 f202 	mul.w	r2, r3, r2
 8003d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d8c:	7b5b      	ldrb	r3, [r3, #13]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d9c:	e004      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x170>)
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x174>)
 8003db0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003db2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3738      	adds	r7, #56	@ 0x38
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	017d7840 	.word	0x017d7840
 8003dc8:	08006450 	.word	0x08006450
 8003dcc:	08006460 	.word	0x08006460
 8003dd0:	003d0900 	.word	0x003d0900
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b02      	ldr	r3, [pc, #8]	@ (8003de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	2000006c 	.word	0x2000006c

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff2 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08006448 	.word	0x08006448

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffde 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	@ (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	08006448 	.word	0x08006448

08003e3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	220f      	movs	r2, #15
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e4c:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0203 	and.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e58:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e64:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e70:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	08db      	lsrs	r3, r3, #3
 8003e76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e7e:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40022000 	.word	0x40022000

08003e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <RCC_Delay+0x34>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <RCC_Delay+0x38>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0a5b      	lsrs	r3, r3, #9
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb8:	bf00      	nop
  }
  while (Delay --);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	60fa      	str	r2, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <RCC_Delay+0x1c>
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	2000006c 	.word	0x2000006c
 8003ed4:	10624dd3 	.word	0x10624dd3

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d07d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efc:	4b8b      	ldr	r3, [pc, #556]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b88      	ldr	r3, [pc, #544]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4a87      	ldr	r2, [pc, #540]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	61d3      	str	r3, [r2, #28]
 8003f14:	4b85      	ldr	r3, [pc, #532]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b82      	ldr	r3, [pc, #520]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d118      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f30:	4b7f      	ldr	r3, [pc, #508]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7e      	ldr	r2, [pc, #504]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fc94 	bl	8002868 <HAL_GetTick>
 8003f40:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	e008      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f44:	f7fe fc90 	bl	8002868 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0e5      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f62:	4b72      	ldr	r3, [pc, #456]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d027      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f80:	4b6a      	ldr	r3, [pc, #424]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f88:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f90:	4b68      	ldr	r3, [pc, #416]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f96:	4a65      	ldr	r2, [pc, #404]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d014      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fc5f 	bl	8002868 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe fc5b 	bl	8002868 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0ae      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b59      	ldr	r3, [pc, #356]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd0:	4b56      	ldr	r3, [pc, #344]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4953      	ldr	r1, [pc, #332]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe2:	7efb      	ldrb	r3, [r7, #27]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b50      	ldr	r3, [pc, #320]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4a4f      	ldr	r2, [pc, #316]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004000:	4b4a      	ldr	r3, [pc, #296]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4947      	ldr	r1, [pc, #284]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800401e:	4b43      	ldr	r3, [pc, #268]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4940      	ldr	r1, [pc, #256]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800402c:	4313      	orrs	r3, r2
 800402e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800403c:	4b3b      	ldr	r3, [pc, #236]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	4938      	ldr	r1, [pc, #224]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800404a:	4313      	orrs	r3, r2
 800404c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800404e:	4b37      	ldr	r3, [pc, #220]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800405a:	4b34      	ldr	r3, [pc, #208]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d148      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d138      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800407c:	4b2b      	ldr	r3, [pc, #172]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004088:	4b28      	ldr	r3, [pc, #160]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e042      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800409c:	4b23      	ldr	r3, [pc, #140]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4920      	ldr	r1, [pc, #128]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80040ae:	4b1f      	ldr	r3, [pc, #124]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	491c      	ldr	r1, [pc, #112]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fe fbcf 	bl	8002868 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040ce:	f7fe fbcb 	bl	8002868 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b64      	cmp	r3, #100	@ 0x64
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e020      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040ec:	e009      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80040ee:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e00f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4904      	ldr	r1, [pc, #16]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
 8004134:	42420440 	.word	0x42420440
 8004138:	42420070 	.word	0x42420070

0800413c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e076      	b.n	800423c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800415e:	d009      	beq.n	8004174 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
 8004166:	e005      	b.n	8004174 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe f910 	bl	80023b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f8:	ea42 0103 	orr.w	r1, r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	0c1a      	lsrs	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f002 0204 	and.w	r2, r2, #4
 800421a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800422a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004254:	f7fe fb08 	bl	8002868 <HAL_GetTick>
 8004258:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	e12a      	b.n	80044c4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0x36>
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e122      	b.n	80044c4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_SPI_Transmit+0x48>
 8004288:	2302      	movs	r3, #2
 800428a:	e11b      	b.n	80044c4 <HAL_SPI_Transmit+0x280>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2203      	movs	r2, #3
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042da:	d10f      	bne.n	80042fc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d007      	beq.n	800431a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004322:	d152      	bne.n	80043ca <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_SPI_Transmit+0xee>
 800432c:	8b7b      	ldrh	r3, [r7, #26]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d145      	bne.n	80043be <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	881a      	ldrh	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	1c9a      	adds	r2, r3, #2
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004356:	e032      	b.n	80043be <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d112      	bne.n	800438c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	86da      	strh	r2, [r3, #54]	@ 0x36
 800438a:	e018      	b.n	80043be <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438c:	f7fe fa6c 	bl	8002868 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d803      	bhi.n	80043a4 <HAL_SPI_Transmit+0x160>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d102      	bne.n	80043aa <HAL_SPI_Transmit+0x166>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e082      	b.n	80044c4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1c7      	bne.n	8004358 <HAL_SPI_Transmit+0x114>
 80043c8:	e053      	b.n	8004472 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Transmit+0x194>
 80043d2:	8b7b      	ldrh	r3, [r7, #26]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d147      	bne.n	8004468 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043fe:	e033      	b.n	8004468 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d113      	bne.n	8004436 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004434:	e018      	b.n	8004468 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004436:	f7fe fa17 	bl	8002868 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d803      	bhi.n	800444e <HAL_SPI_Transmit+0x20a>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d102      	bne.n	8004454 <HAL_SPI_Transmit+0x210>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e02d      	b.n	80044c4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1c6      	bne.n	8004400 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fbc4 	bl	8004c04 <SPI_EndRxTxTransaction>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d001      	beq.n	80044ec <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	e104      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f4:	d112      	bne.n	800451c <HAL_SPI_Receive+0x50>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10e      	bne.n	800451c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2204      	movs	r2, #4
 8004502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8f3 	bl	80046fe <HAL_SPI_TransmitReceive>
 8004518:	4603      	mov	r3, r0
 800451a:	e0ec      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800451c:	f7fe f9a4 	bl	8002868 <HAL_GetTick>
 8004520:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SPI_Receive+0x62>
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0e1      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_SPI_Receive+0x74>
 800453c:	2302      	movs	r3, #2
 800453e:	e0da      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2204      	movs	r2, #4
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	88fa      	ldrh	r2, [r7, #6]
 8004566:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800458e:	d10f      	bne.n	80045b0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b40      	cmp	r3, #64	@ 0x40
 80045bc:	d007      	beq.n	80045ce <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d170      	bne.n	80046b8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045d6:	e035      	b.n	8004644 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d115      	bne.n	8004612 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f103 020c 	add.w	r2, r3, #12
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004610:	e018      	b.n	8004644 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fe f929 	bl	8002868 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Receive+0x15e>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Receive+0x164>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e058      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1c4      	bne.n	80045d8 <HAL_SPI_Receive+0x10c>
 800464e:	e038      	b.n	80046c2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d113      	bne.n	8004686 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	b292      	uxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004684:	e018      	b.n	80046b8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004686:	f7fe f8ef 	bl	8002868 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d803      	bhi.n	800469e <HAL_SPI_Receive+0x1d2>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_Receive+0x1d8>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d109      	bne.n	80046b8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e01e      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1c6      	bne.n	8004650 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fa4a 	bl	8004b60 <SPI_EndRxTransaction>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b08a      	sub	sp, #40	@ 0x28
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800470c:	2301      	movs	r3, #1
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004710:	f7fe f8aa 	bl	8002868 <HAL_GetTick>
 8004714:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800471c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d00c      	beq.n	8004748 <HAL_SPI_TransmitReceive+0x4a>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004734:	d106      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x46>
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d001      	beq.n	8004748 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
 8004746:	e17f      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_SPI_TransmitReceive+0x5c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_SPI_TransmitReceive+0x5c>
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e174      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_SPI_TransmitReceive+0x6e>
 8004768:	2302      	movs	r3, #2
 800476a:	e16d      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b04      	cmp	r3, #4
 800477e:	d003      	beq.n	8004788 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2205      	movs	r2, #5
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	887a      	ldrh	r2, [r7, #2]
 800479e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d007      	beq.n	80047dc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e4:	d17e      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0xf6>
 80047ee:	8afb      	ldrh	r3, [r7, #22]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d16c      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	881a      	ldrh	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	1c9a      	adds	r2, r3, #2
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004818:	e059      	b.n	80048ce <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d11b      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x162>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_SPI_TransmitReceive+0x162>
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	2b01      	cmp	r3, #1
 8004836:	d113      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d119      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x1a4>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d014      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	b292      	uxth	r2, r2
 8004884:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800489e:	2301      	movs	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048a2:	f7fd ffe1 	bl	8002868 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d80d      	bhi.n	80048ce <HAL_SPI_TransmitReceive+0x1d0>
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d009      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0bc      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1a0      	bne.n	800481a <HAL_SPI_TransmitReceive+0x11c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d19b      	bne.n	800481a <HAL_SPI_TransmitReceive+0x11c>
 80048e2:	e082      	b.n	80049ea <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x1f4>
 80048ec:	8afb      	ldrh	r3, [r7, #22]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d171      	bne.n	80049d6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	330c      	adds	r3, #12
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004918:	e05d      	b.n	80049d6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d11c      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x264>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d017      	beq.n	8004962 <HAL_SPI_TransmitReceive+0x264>
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	2b01      	cmp	r3, #1
 8004936:	d114      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d119      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x2a6>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d014      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a0:	2301      	movs	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a4:	f7fd ff60 	bl	8002868 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d803      	bhi.n	80049bc <HAL_SPI_TransmitReceive+0x2be>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d102      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x2c4>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e038      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d19c      	bne.n	800491a <HAL_SPI_TransmitReceive+0x21c>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d197      	bne.n	800491a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ea:	6a3a      	ldr	r2, [r7, #32]
 80049ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f908 	bl	8004c04 <SPI_EndRxTxTransaction>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e01d      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3728      	adds	r7, #40	@ 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a60:	f7fd ff02 	bl	8002868 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a70:	f7fd fefa 	bl	8002868 <HAL_GetTick>
 8004a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a76:	4b39      	ldr	r3, [pc, #228]	@ (8004b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	015b      	lsls	r3, r3, #5
 8004a7c:	0d1b      	lsrs	r3, r3, #20
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a86:	e054      	b.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d050      	beq.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a90:	f7fd feea 	bl	8002868 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d902      	bls.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d13d      	bne.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004abe:	d111      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac8:	d004      	beq.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad2:	d107      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aec:	d10f      	bne.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e017      	b.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d19b      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	2000006c 	.word	0x2000006c

08004b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b74:	d111      	bne.n	8004b9a <SPI_EndRxTransaction+0x3a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b7e:	d004      	beq.n	8004b8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b88:	d107      	bne.n	8004b9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b98:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ba2:	d117      	bne.n	8004bd4 <SPI_EndRxTransaction+0x74>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bac:	d112      	bne.n	8004bd4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff49 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e013      	b.n	8004bfc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2180      	movs	r1, #128	@ 0x80
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ff36 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e000      	b.n	8004bfc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2201      	movs	r2, #1
 8004c18:	2102      	movs	r1, #2
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff ff18 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e013      	b.n	8004c5e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2180      	movs	r1, #128	@ 0x80
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff ff05 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e000      	b.n	8004c5e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e041      	b.n	8004cfc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fd fd09 	bl	80026a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f000 f99b 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d001      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e03f      	b.n	8004d9c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_TIM_Base_Start_IT+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d46:	d00e      	beq.n	8004d66 <HAL_TIM_Base_Start_IT+0x62>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a17      	ldr	r2, [pc, #92]	@ (8004dac <HAL_TIM_Base_Start_IT+0xa8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_TIM_Base_Start_IT+0x62>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a16      	ldr	r2, [pc, #88]	@ (8004db0 <HAL_TIM_Base_Start_IT+0xac>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_TIM_Base_Start_IT+0x62>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d111      	bne.n	8004d8a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d010      	beq.n	8004d9a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d88:	e007      	b.n	8004d9a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00

08004db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0202 	mvn.w	r2, #2
 8004dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8d1 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8c4 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f8d3 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0204 	mvn.w	r2, #4
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8ab 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f89e 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8ad 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0208 	mvn.w	r2, #8
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f885 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f878 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f887 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01b      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0210 	mvn.w	r2, #16
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f85f 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f852 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f861 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0201 	mvn.w	r2, #1
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fd f91c 	bl	800215c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f933 	bl	80051ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f831 	bl	8004fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0220 	mvn.w	r2, #32
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f906 	bl	800519c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a33      	ldr	r2, [pc, #204]	@ (80050c0 <TIM_Base_SetConfig+0xe0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00f      	beq.n	8005018 <TIM_Base_SetConfig+0x38>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffe:	d00b      	beq.n	8005018 <TIM_Base_SetConfig+0x38>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <TIM_Base_SetConfig+0xe4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_Base_SetConfig+0x38>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <TIM_Base_SetConfig+0xe8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0x38>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a2e      	ldr	r2, [pc, #184]	@ (80050cc <TIM_Base_SetConfig+0xec>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d108      	bne.n	800502a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a24      	ldr	r2, [pc, #144]	@ (80050c0 <TIM_Base_SetConfig+0xe0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00f      	beq.n	8005052 <TIM_Base_SetConfig+0x72>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005038:	d00b      	beq.n	8005052 <TIM_Base_SetConfig+0x72>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a21      	ldr	r2, [pc, #132]	@ (80050c4 <TIM_Base_SetConfig+0xe4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_Base_SetConfig+0x72>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a20      	ldr	r2, [pc, #128]	@ (80050c8 <TIM_Base_SetConfig+0xe8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_Base_SetConfig+0x72>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a1f      	ldr	r2, [pc, #124]	@ (80050cc <TIM_Base_SetConfig+0xec>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a0d      	ldr	r2, [pc, #52]	@ (80050c0 <TIM_Base_SetConfig+0xe0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]
  }
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e04b      	b.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a19      	ldr	r2, [pc, #100]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005134:	d00e      	beq.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a15      	ldr	r2, [pc, #84]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a13      	ldr	r2, [pc, #76]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10c      	bne.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4313      	orrs	r3, r2
 8005164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00

0800519c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e042      	b.n	8005258 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fd faa4 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	@ 0x24
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f82b 	bl	8005260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800529a:	f023 030c 	bic.w	r3, r3, #12
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005374 <UART_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe fda4 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	e002      	b.n	80052d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe fd8c 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 80052d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009a      	lsls	r2, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <UART_SetConfig+0x118>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	0119      	lsls	r1, r3, #4
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009a      	lsls	r2, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	fbb2 f2f3 	udiv	r2, r2, r3
 800530c:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <UART_SetConfig+0x118>)
 800530e:	fba3 0302 	umull	r0, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2064      	movs	r0, #100	@ 0x64
 8005316:	fb00 f303 	mul.w	r3, r0, r3
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	3332      	adds	r3, #50	@ 0x32
 8005320:	4a15      	ldr	r2, [pc, #84]	@ (8005378 <UART_SetConfig+0x118>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800532c:	4419      	add	r1, r3
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009a      	lsls	r2, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <UART_SetConfig+0x118>)
 8005346:	fba3 0302 	umull	r0, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	2064      	movs	r0, #100	@ 0x64
 800534e:	fb00 f303 	mul.w	r3, r0, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	3332      	adds	r3, #50	@ 0x32
 8005358:	4a07      	ldr	r2, [pc, #28]	@ (8005378 <UART_SetConfig+0x118>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 020f 	and.w	r2, r3, #15
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	440a      	add	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40013800 	.word	0x40013800
 8005378:	51eb851f 	.word	0x51eb851f

0800537c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005380:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <SysTick_Handler+0x1c>)
 8005382:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005384:	f000 faec 	bl	8005960 <xTaskGetSchedulerState>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d001      	beq.n	8005392 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800538e:	f000 fbf3 	bl	8005b78 <xPortSysTickHandler>
  }
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	e000e010 	.word	0xe000e010

0800539c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a2:	f3ef 8305 	mrs	r3, IPSR
 80053a6:	603b      	str	r3, [r7, #0]
  return(result);
 80053a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053ae:	f06f 0305 	mvn.w	r3, #5
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e00c      	b.n	80053d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053b6:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <osKernelInitialize+0x40>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d105      	bne.n	80053ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053be:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <osKernelInitialize+0x40>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	e002      	b.n	80053d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053d0:	687b      	ldr	r3, [r7, #4]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	200002e8 	.word	0x200002e8

080053e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e8:	f3ef 8305 	mrs	r3, IPSR
 80053ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <osDelay+0x1c>
    stat = osErrorISR;
 80053f4:	f06f 0305 	mvn.w	r3, #5
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e007      	b.n	800540c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f88a 	bl	8005520 <vTaskDelay>
    }
  }

  return (stat);
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e00c      	b.n	8005496 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3308      	adds	r3, #8
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e002      	b.n	800548a <vListInsert+0x2e>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d2f6      	bcs.n	8005484 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6892      	ldr	r2, [r2, #8]
 80054e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6852      	ldr	r2, [r2, #4]
 80054ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d103      	bne.n	8005500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	1e5a      	subs	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
	...

08005520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005532:	4b14      	ldr	r3, [pc, #80]	@ (8005584 <vTaskDelay+0x64>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <vTaskDelay+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005552:	f000 f81b 	bl	800558c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005556:	2100      	movs	r1, #0
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa1f 	bl	800599c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800555e:	f000 f823 	bl	80055a8 <xTaskResumeAll>
 8005562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800556a:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <vTaskDelay+0x68>)
 800556c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	200007a0 	.word	0x200007a0
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <vTaskSuspendAll+0x18>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a03      	ldr	r2, [pc, #12]	@ (80055a4 <vTaskSuspendAll+0x18>)
 8005598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800559a:	bf00      	nop
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	200007a0 	.word	0x200007a0

080055a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055b6:	4b42      	ldr	r3, [pc, #264]	@ (80056c0 <xTaskResumeAll+0x118>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	603b      	str	r3, [r7, #0]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055d6:	f000 fa4f 	bl	8005a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055da:	4b39      	ldr	r3, [pc, #228]	@ (80056c0 <xTaskResumeAll+0x118>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	4a37      	ldr	r2, [pc, #220]	@ (80056c0 <xTaskResumeAll+0x118>)
 80055e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e4:	4b36      	ldr	r3, [pc, #216]	@ (80056c0 <xTaskResumeAll+0x118>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d162      	bne.n	80056b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055ec:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <xTaskResumeAll+0x11c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05e      	beq.n	80056b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f4:	e02f      	b.n	8005656 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f6:	4b34      	ldr	r3, [pc, #208]	@ (80056c8 <xTaskResumeAll+0x120>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3318      	adds	r3, #24
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ff62 	bl	80054cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff5d 	bl	80054cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005616:	4b2d      	ldr	r3, [pc, #180]	@ (80056cc <xTaskResumeAll+0x124>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <xTaskResumeAll+0x7e>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	4a2a      	ldr	r2, [pc, #168]	@ (80056cc <xTaskResumeAll+0x124>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4a27      	ldr	r2, [pc, #156]	@ (80056d0 <xTaskResumeAll+0x128>)
 8005634:	441a      	add	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7ff feea 	bl	8005416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005646:	4b23      	ldr	r3, [pc, #140]	@ (80056d4 <xTaskResumeAll+0x12c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005650:	4b21      	ldr	r3, [pc, #132]	@ (80056d8 <xTaskResumeAll+0x130>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005656:	4b1c      	ldr	r3, [pc, #112]	@ (80056c8 <xTaskResumeAll+0x120>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1cb      	bne.n	80055f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005664:	f000 f95c 	bl	8005920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005668:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <xTaskResumeAll+0x134>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005674:	f000 f836 	bl	80056e4 <xTaskIncrementTick>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800567e:	4b16      	ldr	r3, [pc, #88]	@ (80056d8 <xTaskResumeAll+0x130>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f1      	bne.n	8005674 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005690:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <xTaskResumeAll+0x134>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005696:	4b10      	ldr	r3, [pc, #64]	@ (80056d8 <xTaskResumeAll+0x130>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800569e:	2301      	movs	r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056a2:	4b0f      	ldr	r3, [pc, #60]	@ (80056e0 <xTaskResumeAll+0x138>)
 80056a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b2:	f000 fa11 	bl	8005ad8 <vPortExitCritical>

	return xAlreadyYielded;
 80056b6:	68bb      	ldr	r3, [r7, #8]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200007a0 	.word	0x200007a0
 80056c4:	20000780 	.word	0x20000780
 80056c8:	20000758 	.word	0x20000758
 80056cc:	20000788 	.word	0x20000788
 80056d0:	200002f0 	.word	0x200002f0
 80056d4:	200002ec 	.word	0x200002ec
 80056d8:	20000794 	.word	0x20000794
 80056dc:	20000790 	.word	0x20000790
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ee:	4b4f      	ldr	r3, [pc, #316]	@ (800582c <xTaskIncrementTick+0x148>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8090 	bne.w	8005818 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005830 <xTaskIncrementTick+0x14c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005700:	4a4b      	ldr	r2, [pc, #300]	@ (8005830 <xTaskIncrementTick+0x14c>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d121      	bne.n	8005750 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800570c:	4b49      	ldr	r3, [pc, #292]	@ (8005834 <xTaskIncrementTick+0x150>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	603b      	str	r3, [r7, #0]
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <xTaskIncrementTick+0x46>
 800572e:	4b41      	ldr	r3, [pc, #260]	@ (8005834 <xTaskIncrementTick+0x150>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	4b40      	ldr	r3, [pc, #256]	@ (8005838 <xTaskIncrementTick+0x154>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a3e      	ldr	r2, [pc, #248]	@ (8005834 <xTaskIncrementTick+0x150>)
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	4a3e      	ldr	r2, [pc, #248]	@ (8005838 <xTaskIncrementTick+0x154>)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b3e      	ldr	r3, [pc, #248]	@ (800583c <xTaskIncrementTick+0x158>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3301      	adds	r3, #1
 8005748:	4a3c      	ldr	r2, [pc, #240]	@ (800583c <xTaskIncrementTick+0x158>)
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	f000 f8e8 	bl	8005920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005750:	4b3b      	ldr	r3, [pc, #236]	@ (8005840 <xTaskIncrementTick+0x15c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	d349      	bcc.n	80057ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575a:	4b36      	ldr	r3, [pc, #216]	@ (8005834 <xTaskIncrementTick+0x150>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005764:	4b36      	ldr	r3, [pc, #216]	@ (8005840 <xTaskIncrementTick+0x15c>)
 8005766:	f04f 32ff 	mov.w	r2, #4294967295
 800576a:	601a      	str	r2, [r3, #0]
					break;
 800576c:	e03f      	b.n	80057ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576e:	4b31      	ldr	r3, [pc, #196]	@ (8005834 <xTaskIncrementTick+0x150>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d203      	bcs.n	800578e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005786:	4a2e      	ldr	r2, [pc, #184]	@ (8005840 <xTaskIncrementTick+0x15c>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800578c:	e02f      	b.n	80057ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fe9a 	bl	80054cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	3318      	adds	r3, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe91 	bl	80054cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	4b25      	ldr	r3, [pc, #148]	@ (8005844 <xTaskIncrementTick+0x160>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d903      	bls.n	80057be <xTaskIncrementTick+0xda>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	4a22      	ldr	r2, [pc, #136]	@ (8005844 <xTaskIncrementTick+0x160>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005848 <xTaskIncrementTick+0x164>)
 80057cc:	441a      	add	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7ff fe1e 	bl	8005416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057de:	4b1b      	ldr	r3, [pc, #108]	@ (800584c <xTaskIncrementTick+0x168>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d3b8      	bcc.n	800575a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ec:	e7b5      	b.n	800575a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ee:	4b17      	ldr	r3, [pc, #92]	@ (800584c <xTaskIncrementTick+0x168>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f4:	4914      	ldr	r1, [pc, #80]	@ (8005848 <xTaskIncrementTick+0x164>)
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d901      	bls.n	800580a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800580a:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <xTaskIncrementTick+0x16c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005812:	2301      	movs	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e004      	b.n	8005822 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005818:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <xTaskIncrementTick+0x170>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3301      	adds	r3, #1
 800581e:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <xTaskIncrementTick+0x170>)
 8005820:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005822:	697b      	ldr	r3, [r7, #20]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200007a0 	.word	0x200007a0
 8005830:	20000784 	.word	0x20000784
 8005834:	20000750 	.word	0x20000750
 8005838:	20000754 	.word	0x20000754
 800583c:	20000798 	.word	0x20000798
 8005840:	2000079c 	.word	0x2000079c
 8005844:	20000788 	.word	0x20000788
 8005848:	200002f0 	.word	0x200002f0
 800584c:	200002ec 	.word	0x200002ec
 8005850:	20000794 	.word	0x20000794
 8005854:	20000790 	.word	0x20000790

08005858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800585e:	4b2a      	ldr	r3, [pc, #168]	@ (8005908 <vTaskSwitchContext+0xb0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005866:	4b29      	ldr	r3, [pc, #164]	@ (800590c <vTaskSwitchContext+0xb4>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800586c:	e047      	b.n	80058fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800586e:	4b27      	ldr	r3, [pc, #156]	@ (800590c <vTaskSwitchContext+0xb4>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005874:	4b26      	ldr	r3, [pc, #152]	@ (8005910 <vTaskSwitchContext+0xb8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e011      	b.n	80058a0 <vTaskSwitchContext+0x48>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10b      	bne.n	800589a <vTaskSwitchContext+0x42>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	607b      	str	r3, [r7, #4]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <vTaskSwitchContext+0x3e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b01      	subs	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	491c      	ldr	r1, [pc, #112]	@ (8005914 <vTaskSwitchContext+0xbc>)
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0e3      	beq.n	800587c <vTaskSwitchContext+0x24>
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4a15      	ldr	r2, [pc, #84]	@ (8005914 <vTaskSwitchContext+0xbc>)
 80058c0:	4413      	add	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3308      	adds	r3, #8
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d104      	bne.n	80058e4 <vTaskSwitchContext+0x8c>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005918 <vTaskSwitchContext+0xc0>)
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <vTaskSwitchContext+0xb8>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058f4:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <vTaskSwitchContext+0xc0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3364      	adds	r3, #100	@ 0x64
 80058fa:	4a08      	ldr	r2, [pc, #32]	@ (800591c <vTaskSwitchContext+0xc4>)
 80058fc:	6013      	str	r3, [r2, #0]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	200007a0 	.word	0x200007a0
 800590c:	20000794 	.word	0x20000794
 8005910:	20000788 	.word	0x20000788
 8005914:	200002f0 	.word	0x200002f0
 8005918:	200002ec 	.word	0x200002ec
 800591c:	2000007c 	.word	0x2000007c

08005920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005926:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <prvResetNextTaskUnblockTime+0x38>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005930:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <prvResetNextTaskUnblockTime+0x3c>)
 8005932:	f04f 32ff 	mov.w	r2, #4294967295
 8005936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005938:	e008      	b.n	800594c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593a:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <prvResetNextTaskUnblockTime+0x38>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a04      	ldr	r2, [pc, #16]	@ (800595c <prvResetNextTaskUnblockTime+0x3c>)
 800594a:	6013      	str	r3, [r2, #0]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000750 	.word	0x20000750
 800595c:	2000079c 	.word	0x2000079c

08005960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <xTaskGetSchedulerState+0x34>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800596e:	2301      	movs	r3, #1
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	e008      	b.n	8005986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005974:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <xTaskGetSchedulerState+0x38>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800597c:	2302      	movs	r3, #2
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	e001      	b.n	8005986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005986:	687b      	ldr	r3, [r7, #4]
	}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000078c 	.word	0x2000078c
 8005998:	200007a0 	.word	0x200007a0

0800599c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059a6:	4b21      	ldr	r3, [pc, #132]	@ (8005a2c <prvAddCurrentTaskToDelayedList+0x90>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ac:	4b20      	ldr	r3, [pc, #128]	@ (8005a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fd8a 	bl	80054cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d10a      	bne.n	80059d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4819      	ldr	r0, [pc, #100]	@ (8005a34 <prvAddCurrentTaskToDelayedList+0x98>)
 80059d0:	f7ff fd21 	bl	8005416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059d4:	e026      	b.n	8005a24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059de:	4b14      	ldr	r3, [pc, #80]	@ (8005a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d209      	bcs.n	8005a02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ee:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7ff fd2e 	bl	800545c <vListInsert>
}
 8005a00:	e010      	b.n	8005a24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a02:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7ff fd24 	bl	800545c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a14:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d202      	bcs.n	8005a24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a1e:	4a08      	ldr	r2, [pc, #32]	@ (8005a40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6013      	str	r3, [r2, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000784 	.word	0x20000784
 8005a30:	200002ec 	.word	0x200002ec
 8005a34:	2000076c 	.word	0x2000076c
 8005a38:	20000754 	.word	0x20000754
 8005a3c:	20000750 	.word	0x20000750
 8005a40:	2000079c 	.word	0x2000079c
	...

08005a50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a50:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <pxCurrentTCBConst2>)
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	6808      	ldr	r0, [r1, #0]
 8005a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a5a:	f380 8809 	msr	PSP, r0
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f380 8811 	msr	BASEPRI, r0
 8005a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005a6e:	4770      	bx	lr

08005a70 <pxCurrentTCBConst2>:
 8005a70:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <vPortEnterCritical+0x58>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad0 <vPortEnterCritical+0x58>)
 8005a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad0 <vPortEnterCritical+0x58>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d110      	bne.n	8005ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	603b      	str	r3, [r7, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <vPortEnterCritical+0x4a>
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr
 8005ad0:	20000078 	.word	0x20000078
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ade:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <vPortExitCritical+0x50>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <vPortExitCritical+0x26>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	607b      	str	r3, [r7, #4]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005afe:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <vPortExitCritical+0x50>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	4a08      	ldr	r2, [pc, #32]	@ (8005b28 <vPortExitCritical+0x50>)
 8005b06:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b08:	4b07      	ldr	r3, [pc, #28]	@ (8005b28 <vPortExitCritical+0x50>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <vPortExitCritical+0x44>
 8005b10:	2300      	movs	r3, #0
 8005b12:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b1a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000078 	.word	0x20000078
 8005b2c:	00000000 	.word	0x00000000

08005b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b30:	f3ef 8009 	mrs	r0, PSP
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4b0d      	ldr	r3, [pc, #52]	@ (8005b70 <pxCurrentTCBConst>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b40:	6010      	str	r0, [r2, #0]
 8005b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b4a:	f380 8811 	msr	BASEPRI, r0
 8005b4e:	f7ff fe83 	bl	8005858 <vTaskSwitchContext>
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b5e:	6819      	ldr	r1, [r3, #0]
 8005b60:	6808      	ldr	r0, [r1, #0]
 8005b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b66:	f380 8809 	msr	PSP, r0
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	4770      	bx	lr

08005b70 <pxCurrentTCBConst>:
 8005b70:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f7ff fda7 	bl	80056e4 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <xPortSysTickHandler+0x40>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f383 8811 	msr	BASEPRI, r3
}
 8005bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <memset>:
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4402      	add	r2, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <__errno>:
 8005bcc:	4b01      	ldr	r3, [pc, #4]	@ (8005bd4 <__errno+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000007c 	.word	0x2000007c

08005bd8 <__libc_init_array>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	2600      	movs	r6, #0
 8005bdc:	4d0c      	ldr	r5, [pc, #48]	@ (8005c10 <__libc_init_array+0x38>)
 8005bde:	4c0d      	ldr	r4, [pc, #52]	@ (8005c14 <__libc_init_array+0x3c>)
 8005be0:	1b64      	subs	r4, r4, r5
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	42a6      	cmp	r6, r4
 8005be6:	d109      	bne.n	8005bfc <__libc_init_array+0x24>
 8005be8:	f000 fa14 	bl	8006014 <_init>
 8005bec:	2600      	movs	r6, #0
 8005bee:	4d0a      	ldr	r5, [pc, #40]	@ (8005c18 <__libc_init_array+0x40>)
 8005bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8005c1c <__libc_init_array+0x44>)
 8005bf2:	1b64      	subs	r4, r4, r5
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	42a6      	cmp	r6, r4
 8005bf8:	d105      	bne.n	8005c06 <__libc_init_array+0x2e>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c00:	4798      	blx	r3
 8005c02:	3601      	adds	r6, #1
 8005c04:	e7ee      	b.n	8005be4 <__libc_init_array+0xc>
 8005c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0a:	4798      	blx	r3
 8005c0c:	3601      	adds	r6, #1
 8005c0e:	e7f2      	b.n	8005bf6 <__libc_init_array+0x1e>
 8005c10:	0800647c 	.word	0x0800647c
 8005c14:	0800647c 	.word	0x0800647c
 8005c18:	0800647c 	.word	0x0800647c
 8005c1c:	08006480 	.word	0x08006480

08005c20 <memcpy>:
 8005c20:	440a      	add	r2, r1
 8005c22:	4291      	cmp	r1, r2
 8005c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c28:	d100      	bne.n	8005c2c <memcpy+0xc>
 8005c2a:	4770      	bx	lr
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c32:	4291      	cmp	r1, r2
 8005c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c38:	d1f9      	bne.n	8005c2e <memcpy+0xe>
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <log>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	4604      	mov	r4, r0
 8005c40:	460d      	mov	r5, r1
 8005c42:	f000 f835 	bl	8005cb0 <__ieee754_log>
 8005c46:	4622      	mov	r2, r4
 8005c48:	4606      	mov	r6, r0
 8005c4a:	460f      	mov	r7, r1
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa ff43 	bl	8000adc <__aeabi_dcmpun>
 8005c56:	b998      	cbnz	r0, 8005c80 <log+0x44>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7fa ff32 	bl	8000ac8 <__aeabi_dcmpgt>
 8005c64:	b960      	cbnz	r0, 8005c80 <log+0x44>
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa ff03 	bl	8000a78 <__aeabi_dcmpeq>
 8005c72:	b140      	cbz	r0, 8005c86 <log+0x4a>
 8005c74:	f7ff ffaa 	bl	8005bcc <__errno>
 8005c78:	2322      	movs	r3, #34	@ 0x22
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	4f06      	ldr	r7, [pc, #24]	@ (8005c98 <log+0x5c>)
 8005c7e:	6003      	str	r3, [r0, #0]
 8005c80:	4630      	mov	r0, r6
 8005c82:	4639      	mov	r1, r7
 8005c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c86:	f7ff ffa1 	bl	8005bcc <__errno>
 8005c8a:	2321      	movs	r3, #33	@ 0x21
 8005c8c:	6003      	str	r3, [r0, #0]
 8005c8e:	4803      	ldr	r0, [pc, #12]	@ (8005c9c <log+0x60>)
 8005c90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c94:	f000 b804 	b.w	8005ca0 <nan>
 8005c98:	fff00000 	.word	0xfff00000
 8005c9c:	08006470 	.word	0x08006470

08005ca0 <nan>:
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	4901      	ldr	r1, [pc, #4]	@ (8005ca8 <nan+0x8>)
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	7ff80000 	.word	0x7ff80000
 8005cac:	00000000 	.word	0x00000000

08005cb0 <__ieee754_log>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	da24      	bge.n	8005d0c <__ieee754_log+0x5c>
 8005cc2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8005cc6:	4304      	orrs	r4, r0
 8005cc8:	d108      	bne.n	8005cdc <__ieee754_log+0x2c>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2000      	movs	r0, #0
 8005cd0:	49cb      	ldr	r1, [pc, #812]	@ (8006000 <__ieee754_log+0x350>)
 8005cd2:	f7fa fd93 	bl	80007fc <__aeabi_ddiv>
 8005cd6:	b007      	add	sp, #28
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	da04      	bge.n	8005cea <__ieee754_log+0x3a>
 8005ce0:	f7fa faaa 	bl	8000238 <__aeabi_dsub>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e7f3      	b.n	8005cd2 <__ieee754_log+0x22>
 8005cea:	2200      	movs	r2, #0
 8005cec:	4bc5      	ldr	r3, [pc, #788]	@ (8006004 <__ieee754_log+0x354>)
 8005cee:	f7fa fc5b 	bl	80005a8 <__aeabi_dmul>
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8005cfc:	48c2      	ldr	r0, [pc, #776]	@ (8006008 <__ieee754_log+0x358>)
 8005cfe:	4285      	cmp	r5, r0
 8005d00:	dd06      	ble.n	8005d10 <__ieee754_log+0x60>
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	f7fa fa99 	bl	800023c <__adddf3>
 8005d0a:	e7e4      	b.n	8005cd6 <__ieee754_log+0x26>
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	e7f5      	b.n	8005cfc <__ieee754_log+0x4c>
 8005d10:	152c      	asrs	r4, r5, #20
 8005d12:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8005d16:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005d1a:	440c      	add	r4, r1
 8005d1c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8005d20:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8005d24:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8005d28:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8005d2c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8005d30:	ea41 0305 	orr.w	r3, r1, r5
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4bb4      	ldr	r3, [pc, #720]	@ (800600c <__ieee754_log+0x35c>)
 8005d3c:	f7fa fa7c 	bl	8000238 <__aeabi_dsub>
 8005d40:	1cab      	adds	r3, r5, #2
 8005d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	4682      	mov	sl, r0
 8005d4a:	468b      	mov	fp, r1
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8005d54:	dc53      	bgt.n	8005dfe <__ieee754_log+0x14e>
 8005d56:	2300      	movs	r3, #0
 8005d58:	f7fa fe8e 	bl	8000a78 <__aeabi_dcmpeq>
 8005d5c:	b1d0      	cbz	r0, 8005d94 <__ieee754_log+0xe4>
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	f000 8120 	beq.w	8005fa4 <__ieee754_log+0x2f4>
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7fa fbb5 	bl	80004d4 <__aeabi_i2d>
 8005d6a:	a391      	add	r3, pc, #580	@ (adr r3, 8005fb0 <__ieee754_log+0x300>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	4606      	mov	r6, r0
 8005d72:	460f      	mov	r7, r1
 8005d74:	f7fa fc18 	bl	80005a8 <__aeabi_dmul>
 8005d78:	a38f      	add	r3, pc, #572	@ (adr r3, 8005fb8 <__ieee754_log+0x308>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	4630      	mov	r0, r6
 8005d84:	4639      	mov	r1, r7
 8005d86:	f7fa fc0f 	bl	80005a8 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	e7b8      	b.n	8005d06 <__ieee754_log+0x56>
 8005d94:	a38a      	add	r3, pc, #552	@ (adr r3, 8005fc0 <__ieee754_log+0x310>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	f7fa fc03 	bl	80005a8 <__aeabi_dmul>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	2000      	movs	r0, #0
 8005da8:	4999      	ldr	r1, [pc, #612]	@ (8006010 <__ieee754_log+0x360>)
 8005daa:	f7fa fa45 	bl	8000238 <__aeabi_dsub>
 8005dae:	4652      	mov	r2, sl
 8005db0:	4606      	mov	r6, r0
 8005db2:	460f      	mov	r7, r1
 8005db4:	465b      	mov	r3, fp
 8005db6:	4650      	mov	r0, sl
 8005db8:	4659      	mov	r1, fp
 8005dba:	f7fa fbf5 	bl	80005a8 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f7fa fbef 	bl	80005a8 <__aeabi_dmul>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	b914      	cbnz	r4, 8005dd6 <__ieee754_log+0x126>
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	e0a0      	b.n	8005f18 <__ieee754_log+0x268>
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f7fa fb7c 	bl	80004d4 <__aeabi_i2d>
 8005ddc:	a374      	add	r3, pc, #464	@ (adr r3, 8005fb0 <__ieee754_log+0x300>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	4680      	mov	r8, r0
 8005de4:	4689      	mov	r9, r1
 8005de6:	f7fa fbdf 	bl	80005a8 <__aeabi_dmul>
 8005dea:	a373      	add	r3, pc, #460	@ (adr r3, 8005fb8 <__ieee754_log+0x308>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	4604      	mov	r4, r0
 8005df2:	460d      	mov	r5, r1
 8005df4:	4640      	mov	r0, r8
 8005df6:	4649      	mov	r1, r9
 8005df8:	f7fa fbd6 	bl	80005a8 <__aeabi_dmul>
 8005dfc:	e0a5      	b.n	8005f4a <__ieee754_log+0x29a>
 8005dfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e02:	f7fa fa1b 	bl	800023c <__adddf3>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	f7fa fcf5 	bl	80007fc <__aeabi_ddiv>
 8005e12:	e9cd 0100 	strd	r0, r1, [sp]
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7fa fb5c 	bl	80004d4 <__aeabi_i2d>
 8005e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	f7fa fbbe 	bl	80005a8 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e34:	f7fa fbb8 	bl	80005a8 <__aeabi_dmul>
 8005e38:	a363      	add	r3, pc, #396	@ (adr r3, 8005fc8 <__ieee754_log+0x318>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	4680      	mov	r8, r0
 8005e40:	4689      	mov	r9, r1
 8005e42:	f7fa fbb1 	bl	80005a8 <__aeabi_dmul>
 8005e46:	a362      	add	r3, pc, #392	@ (adr r3, 8005fd0 <__ieee754_log+0x320>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa f9f6 	bl	800023c <__adddf3>
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	f7fa fba8 	bl	80005a8 <__aeabi_dmul>
 8005e58:	a35f      	add	r3, pc, #380	@ (adr r3, 8005fd8 <__ieee754_log+0x328>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa f9ed 	bl	800023c <__adddf3>
 8005e62:	4642      	mov	r2, r8
 8005e64:	464b      	mov	r3, r9
 8005e66:	f7fa fb9f 	bl	80005a8 <__aeabi_dmul>
 8005e6a:	a35d      	add	r3, pc, #372	@ (adr r3, 8005fe0 <__ieee754_log+0x330>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa f9e4 	bl	800023c <__adddf3>
 8005e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e78:	f7fa fb96 	bl	80005a8 <__aeabi_dmul>
 8005e7c:	a35a      	add	r3, pc, #360	@ (adr r3, 8005fe8 <__ieee754_log+0x338>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fb8d 	bl	80005a8 <__aeabi_dmul>
 8005e8e:	a358      	add	r3, pc, #352	@ (adr r3, 8005ff0 <__ieee754_log+0x340>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f9d2 	bl	800023c <__adddf3>
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	f7fa fb84 	bl	80005a8 <__aeabi_dmul>
 8005ea0:	a355      	add	r3, pc, #340	@ (adr r3, 8005ff8 <__ieee754_log+0x348>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f9c9 	bl	800023c <__adddf3>
 8005eaa:	4642      	mov	r2, r8
 8005eac:	464b      	mov	r3, r9
 8005eae:	f7fa fb7b 	bl	80005a8 <__aeabi_dmul>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eba:	f7fa f9bf 	bl	800023c <__adddf3>
 8005ebe:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8005ec2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8005ec6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8005eca:	3551      	adds	r5, #81	@ 0x51
 8005ecc:	4335      	orrs	r5, r6
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4689      	mov	r9, r1
 8005ed4:	dd48      	ble.n	8005f68 <__ieee754_log+0x2b8>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8006010 <__ieee754_log+0x360>)
 8005eda:	4650      	mov	r0, sl
 8005edc:	4659      	mov	r1, fp
 8005ede:	f7fa fb63 	bl	80005a8 <__aeabi_dmul>
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	465b      	mov	r3, fp
 8005ee6:	f7fa fb5f 	bl	80005a8 <__aeabi_dmul>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4606      	mov	r6, r0
 8005ef0:	460f      	mov	r7, r1
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f7fa f9a1 	bl	800023c <__adddf3>
 8005efa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005efe:	f7fa fb53 	bl	80005a8 <__aeabi_dmul>
 8005f02:	4680      	mov	r8, r0
 8005f04:	4689      	mov	r9, r1
 8005f06:	b964      	cbnz	r4, 8005f22 <__ieee754_log+0x272>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa f992 	bl	8000238 <__aeabi_dsub>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4650      	mov	r0, sl
 8005f1a:	4659      	mov	r1, fp
 8005f1c:	f7fa f98c 	bl	8000238 <__aeabi_dsub>
 8005f20:	e6d9      	b.n	8005cd6 <__ieee754_log+0x26>
 8005f22:	a323      	add	r3, pc, #140	@ (adr r3, 8005fb0 <__ieee754_log+0x300>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2c:	f7fa fb3c 	bl	80005a8 <__aeabi_dmul>
 8005f30:	a321      	add	r3, pc, #132	@ (adr r3, 8005fb8 <__ieee754_log+0x308>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	4604      	mov	r4, r0
 8005f38:	460d      	mov	r5, r1
 8005f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f3e:	f7fa fb33 	bl	80005a8 <__aeabi_dmul>
 8005f42:	4642      	mov	r2, r8
 8005f44:	464b      	mov	r3, r9
 8005f46:	f7fa f979 	bl	800023c <__adddf3>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4630      	mov	r0, r6
 8005f50:	4639      	mov	r1, r7
 8005f52:	f7fa f971 	bl	8000238 <__aeabi_dsub>
 8005f56:	4652      	mov	r2, sl
 8005f58:	465b      	mov	r3, fp
 8005f5a:	f7fa f96d 	bl	8000238 <__aeabi_dsub>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4620      	mov	r0, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	e7d9      	b.n	8005f1c <__ieee754_log+0x26c>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	4659      	mov	r1, fp
 8005f70:	f7fa f962 	bl	8000238 <__aeabi_dsub>
 8005f74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f78:	f7fa fb16 	bl	80005a8 <__aeabi_dmul>
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	f43f af25 	beq.w	8005dd0 <__ieee754_log+0x120>
 8005f86:	a30a      	add	r3, pc, #40	@ (adr r3, 8005fb0 <__ieee754_log+0x300>)
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f90:	f7fa fb0a 	bl	80005a8 <__aeabi_dmul>
 8005f94:	a308      	add	r3, pc, #32	@ (adr r3, 8005fb8 <__ieee754_log+0x308>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa2:	e729      	b.n	8005df8 <__ieee754_log+0x148>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	e695      	b.n	8005cd6 <__ieee754_log+0x26>
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w
 8005fb0:	fee00000 	.word	0xfee00000
 8005fb4:	3fe62e42 	.word	0x3fe62e42
 8005fb8:	35793c76 	.word	0x35793c76
 8005fbc:	3dea39ef 	.word	0x3dea39ef
 8005fc0:	55555555 	.word	0x55555555
 8005fc4:	3fd55555 	.word	0x3fd55555
 8005fc8:	df3e5244 	.word	0xdf3e5244
 8005fcc:	3fc2f112 	.word	0x3fc2f112
 8005fd0:	96cb03de 	.word	0x96cb03de
 8005fd4:	3fc74664 	.word	0x3fc74664
 8005fd8:	94229359 	.word	0x94229359
 8005fdc:	3fd24924 	.word	0x3fd24924
 8005fe0:	55555593 	.word	0x55555593
 8005fe4:	3fe55555 	.word	0x3fe55555
 8005fe8:	d078c69f 	.word	0xd078c69f
 8005fec:	3fc39a09 	.word	0x3fc39a09
 8005ff0:	1d8e78af 	.word	0x1d8e78af
 8005ff4:	3fcc71c5 	.word	0x3fcc71c5
 8005ff8:	9997fa04 	.word	0x9997fa04
 8005ffc:	3fd99999 	.word	0x3fd99999
 8006000:	c3500000 	.word	0xc3500000
 8006004:	43500000 	.word	0x43500000
 8006008:	7fefffff 	.word	0x7fefffff
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	3fe00000 	.word	0x3fe00000

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
