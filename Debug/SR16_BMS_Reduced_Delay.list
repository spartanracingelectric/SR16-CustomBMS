
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000802c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008214  08008214  00009214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800867c  0800867c  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008684  08008684  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008684  08008684  00009684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008688  08008688  00009688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800868c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200000c8  08008754  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08008754  0000a528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150ab  00000000  00000000  0000a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0d  00000000  00000000  0001f19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00022bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efd  00000000  00000000  00023f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021917  00000000  00000000  00024e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c28  00000000  00000000  0004672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde9c  00000000  00000000  00060354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e1f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005404  00000000  00000000  0011e234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00123638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c8 	.word	0x200000c8
 8000204:	00000000 	.word	0x00000000
 8000208:	080081fc 	.word	0x080081fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000cc 	.word	0x200000cc
 8000224:	080081fc 	.word	0x080081fc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	@ 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	@ 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	@ 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b968 	b.w	8001384 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9d08      	ldr	r5, [sp, #32]
 80010d2:	460c      	mov	r4, r1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d14e      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010d8:	4694      	mov	ip, r2
 80010da:	458c      	cmp	ip, r1
 80010dc:	4686      	mov	lr, r0
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	d962      	bls.n	80011aa <__udivmoddi4+0xde>
 80010e4:	b14a      	cbz	r2, 80010fa <__udivmoddi4+0x2e>
 80010e6:	f1c2 0320 	rsb	r3, r2, #32
 80010ea:	4091      	lsls	r1, r2
 80010ec:	fa20 f303 	lsr.w	r3, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	4319      	orrs	r1, r3
 80010f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8001102:	fb07 1114 	mls	r1, r7, r4, r1
 8001106:	fa1f f68c 	uxth.w	r6, ip
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001112:	fb04 f106 	mul.w	r1, r4, r6
 8001116:	4299      	cmp	r1, r3
 8001118:	d90a      	bls.n	8001130 <__udivmoddi4+0x64>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001122:	f080 8110 	bcs.w	8001346 <__udivmoddi4+0x27a>
 8001126:	4299      	cmp	r1, r3
 8001128:	f240 810d 	bls.w	8001346 <__udivmoddi4+0x27a>
 800112c:	3c02      	subs	r4, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a59      	subs	r1, r3, r1
 8001132:	fbb1 f0f7 	udiv	r0, r1, r7
 8001136:	fb07 1110 	mls	r1, r7, r0, r1
 800113a:	fb00 f606 	mul.w	r6, r0, r6
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	429e      	cmp	r6, r3
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001152:	f080 80fa 	bcs.w	800134a <__udivmoddi4+0x27e>
 8001156:	429e      	cmp	r6, r3
 8001158:	f240 80f7 	bls.w	800134a <__udivmoddi4+0x27e>
 800115c:	4463      	add	r3, ip
 800115e:	3802      	subs	r0, #2
 8001160:	2100      	movs	r1, #0
 8001162:	1b9b      	subs	r3, r3, r6
 8001164:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001168:	b11d      	cbz	r5, 8001172 <__udivmoddi4+0xa6>
 800116a:	40d3      	lsrs	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	e9c5 3200 	strd	r3, r2, [r5]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d905      	bls.n	8001186 <__udivmoddi4+0xba>
 800117a:	b10d      	cbz	r5, 8001180 <__udivmoddi4+0xb4>
 800117c:	e9c5 0100 	strd	r0, r1, [r5]
 8001180:	2100      	movs	r1, #0
 8001182:	4608      	mov	r0, r1
 8001184:	e7f5      	b.n	8001172 <__udivmoddi4+0xa6>
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d146      	bne.n	800121c <__udivmoddi4+0x150>
 800118e:	42a3      	cmp	r3, r4
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xcc>
 8001192:	4290      	cmp	r0, r2
 8001194:	f0c0 80ee 	bcc.w	8001374 <__udivmoddi4+0x2a8>
 8001198:	1a86      	subs	r6, r0, r2
 800119a:	eb64 0303 	sbc.w	r3, r4, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d0e6      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011a4:	e9c5 6300 	strd	r6, r3, [r5]
 80011a8:	e7e3      	b.n	8001172 <__udivmoddi4+0xa6>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	f040 808f 	bne.w	80012ce <__udivmoddi4+0x202>
 80011b0:	eba1 040c 	sub.w	r4, r1, ip
 80011b4:	2101      	movs	r1, #1
 80011b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ba:	fa1f f78c 	uxth.w	r7, ip
 80011be:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c2:	fb08 4416 	mls	r4, r8, r6, r4
 80011c6:	fb07 f006 	mul.w	r0, r7, r6
 80011ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d908      	bls.n	80011e8 <__udivmoddi4+0x11c>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f106 34ff 	add.w	r4, r6, #4294967295
 80011de:	d202      	bcs.n	80011e6 <__udivmoddi4+0x11a>
 80011e0:	4298      	cmp	r0, r3
 80011e2:	f200 80cb 	bhi.w	800137c <__udivmoddi4+0x2b0>
 80011e6:	4626      	mov	r6, r4
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80011ee:	fb08 4410 	mls	r4, r8, r0, r4
 80011f2:	fb00 f707 	mul.w	r7, r0, r7
 80011f6:	fa1f f38e 	uxth.w	r3, lr
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	429f      	cmp	r7, r3
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x148>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 34ff 	add.w	r4, r0, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x146>
 800120c:	429f      	cmp	r7, r3
 800120e:	f200 80ae 	bhi.w	800136e <__udivmoddi4+0x2a2>
 8001212:	4620      	mov	r0, r4
 8001214:	1bdb      	subs	r3, r3, r7
 8001216:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121a:	e7a5      	b.n	8001168 <__udivmoddi4+0x9c>
 800121c:	f1c1 0720 	rsb	r7, r1, #32
 8001220:	408b      	lsls	r3, r1
 8001222:	fa22 fc07 	lsr.w	ip, r2, r7
 8001226:	ea4c 0c03 	orr.w	ip, ip, r3
 800122a:	fa24 f607 	lsr.w	r6, r4, r7
 800122e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001232:	fbb6 f8f9 	udiv	r8, r6, r9
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	fb09 6618 	mls	r6, r9, r8, r6
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	408c      	lsls	r4, r1
 8001244:	fa00 fa01 	lsl.w	sl, r0, r1
 8001248:	fb08 f00e 	mul.w	r0, r8, lr
 800124c:	431c      	orrs	r4, r3
 800124e:	0c23      	lsrs	r3, r4, #16
 8001250:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001254:	4298      	cmp	r0, r3
 8001256:	fa02 f201 	lsl.w	r2, r2, r1
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x1a6>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f108 36ff 	add.w	r6, r8, #4294967295
 8001264:	f080 8081 	bcs.w	800136a <__udivmoddi4+0x29e>
 8001268:	4298      	cmp	r0, r3
 800126a:	d97e      	bls.n	800136a <__udivmoddi4+0x29e>
 800126c:	f1a8 0802 	sub.w	r8, r8, #2
 8001270:	4463      	add	r3, ip
 8001272:	1a1e      	subs	r6, r3, r0
 8001274:	fbb6 f3f9 	udiv	r3, r6, r9
 8001278:	fb09 6613 	mls	r6, r9, r3, r6
 800127c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001286:	45a6      	cmp	lr, r4
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x1d0>
 800128a:	eb1c 0404 	adds.w	r4, ip, r4
 800128e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001292:	d266      	bcs.n	8001362 <__udivmoddi4+0x296>
 8001294:	45a6      	cmp	lr, r4
 8001296:	d964      	bls.n	8001362 <__udivmoddi4+0x296>
 8001298:	3b02      	subs	r3, #2
 800129a:	4464      	add	r4, ip
 800129c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a0:	fba0 8302 	umull	r8, r3, r0, r2
 80012a4:	eba4 040e 	sub.w	r4, r4, lr
 80012a8:	429c      	cmp	r4, r3
 80012aa:	46c6      	mov	lr, r8
 80012ac:	461e      	mov	r6, r3
 80012ae:	d350      	bcc.n	8001352 <__udivmoddi4+0x286>
 80012b0:	d04d      	beq.n	800134e <__udivmoddi4+0x282>
 80012b2:	b155      	cbz	r5, 80012ca <__udivmoddi4+0x1fe>
 80012b4:	ebba 030e 	subs.w	r3, sl, lr
 80012b8:	eb64 0406 	sbc.w	r4, r4, r6
 80012bc:	fa04 f707 	lsl.w	r7, r4, r7
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	40cc      	lsrs	r4, r1
 80012c6:	e9c5 7400 	strd	r7, r4, [r5]
 80012ca:	2100      	movs	r1, #0
 80012cc:	e751      	b.n	8001172 <__udivmoddi4+0xa6>
 80012ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d2:	f1c2 0320 	rsb	r3, r2, #32
 80012d6:	40d9      	lsrs	r1, r3
 80012d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012dc:	fa20 f303 	lsr.w	r3, r0, r3
 80012e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e8:	fb08 1110 	mls	r1, r8, r0, r1
 80012ec:	4094      	lsls	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	0c23      	lsrs	r3, r4, #16
 80012f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012fa:	fb00 f107 	mul.w	r1, r0, r7
 80012fe:	4299      	cmp	r1, r3
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x248>
 8001302:	eb1c 0303 	adds.w	r3, ip, r3
 8001306:	f100 36ff 	add.w	r6, r0, #4294967295
 800130a:	d22c      	bcs.n	8001366 <__udivmoddi4+0x29a>
 800130c:	4299      	cmp	r1, r3
 800130e:	d92a      	bls.n	8001366 <__udivmoddi4+0x29a>
 8001310:	3802      	subs	r0, #2
 8001312:	4463      	add	r3, ip
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	fbb3 f1f8 	udiv	r1, r3, r8
 800131a:	fb08 3311 	mls	r3, r8, r1, r3
 800131e:	b2a4      	uxth	r4, r4
 8001320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001324:	fb01 f307 	mul.w	r3, r1, r7
 8001328:	42a3      	cmp	r3, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x272>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f101 36ff 	add.w	r6, r1, #4294967295
 8001334:	d213      	bcs.n	800135e <__udivmoddi4+0x292>
 8001336:	42a3      	cmp	r3, r4
 8001338:	d911      	bls.n	800135e <__udivmoddi4+0x292>
 800133a:	3902      	subs	r1, #2
 800133c:	4464      	add	r4, ip
 800133e:	1ae4      	subs	r4, r4, r3
 8001340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001344:	e73b      	b.n	80011be <__udivmoddi4+0xf2>
 8001346:	4604      	mov	r4, r0
 8001348:	e6f2      	b.n	8001130 <__udivmoddi4+0x64>
 800134a:	4608      	mov	r0, r1
 800134c:	e708      	b.n	8001160 <__udivmoddi4+0x94>
 800134e:	45c2      	cmp	sl, r8
 8001350:	d2af      	bcs.n	80012b2 <__udivmoddi4+0x1e6>
 8001352:	ebb8 0e02 	subs.w	lr, r8, r2
 8001356:	eb63 060c 	sbc.w	r6, r3, ip
 800135a:	3801      	subs	r0, #1
 800135c:	e7a9      	b.n	80012b2 <__udivmoddi4+0x1e6>
 800135e:	4631      	mov	r1, r6
 8001360:	e7ed      	b.n	800133e <__udivmoddi4+0x272>
 8001362:	4603      	mov	r3, r0
 8001364:	e79a      	b.n	800129c <__udivmoddi4+0x1d0>
 8001366:	4630      	mov	r0, r6
 8001368:	e7d4      	b.n	8001314 <__udivmoddi4+0x248>
 800136a:	46b0      	mov	r8, r6
 800136c:	e781      	b.n	8001272 <__udivmoddi4+0x1a6>
 800136e:	4463      	add	r3, ip
 8001370:	3802      	subs	r0, #2
 8001372:	e74f      	b.n	8001214 <__udivmoddi4+0x148>
 8001374:	4606      	mov	r6, r0
 8001376:	4623      	mov	r3, r4
 8001378:	4608      	mov	r0, r1
 800137a:	e711      	b.n	80011a0 <__udivmoddi4+0xd4>
 800137c:	3e02      	subs	r6, #2
 800137e:	4463      	add	r3, ip
 8001380:	e732      	b.n	80011e8 <__udivmoddi4+0x11c>
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800138e:	23ff      	movs	r3, #255	@ 0xff
 8001390:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e00c      	b.n	80013b2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 8001398:	f001 fc42 	bl	8002c20 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 800139c:	1cf9      	adds	r1, r7, #3
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Wakeup_Idle+0x3c>)
 80013a4:	f004 ff64 	bl	8006270 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013a8:	f001 fc2e 	bl	8002c08 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	ddef      	ble.n	8001398 <Wakeup_Idle+0x10>
	}
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001f4 	.word	0x200001f4

080013c8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e00c      	b.n	80013ee <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
 80013d4:	f001 fc24 	bl	8002c20 <LTC_nCS_Low>
		HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 fec5 	bl	8003168 <HAL_Delay>
		LTC_nCS_High();
 80013de:	f001 fc13 	bl	8002c08 <LTC_nCS_High>
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 fec0 	bl	8003168 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	ddef      	ble.n	80013d4 <Wakeup_Sleep+0xc>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b089      	sub	sp, #36	@ 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	466b      	mov	r3, sp
 800140c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001416:	7f3b      	ldrb	r3, [r7, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	7f3b      	ldrb	r3, [r7, #28]
 800141e:	2200      	movs	r2, #0
 8001420:	4698      	mov	r8, r3
 8001422:	4691      	mov	r9, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	2200      	movs	r2, #0
 800143c:	461c      	mov	r4, r3
 800143e:	4615      	mov	r5, r2
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	00eb      	lsls	r3, r5, #3
 800144a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144e:	00e2      	lsls	r2, r4, #3
 8001450:	7f3b      	ldrb	r3, [r7, #28]
 8001452:	3307      	adds	r3, #7
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	ebad 0d03 	sub.w	sp, sp, r3
 800145c:	466b      	mov	r3, sp
 800145e:	3300      	adds	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001462:	2300      	movs	r3, #0
 8001464:	77bb      	strb	r3, [r7, #30]
 8001466:	e074      	b.n	8001552 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001468:	7fbb      	ldrb	r3, [r7, #30]
 800146a:	4a3f      	ldr	r2, [pc, #252]	@ (8001568 <Read_Cell_Volt+0x168>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	2002      	movs	r0, #2
 800148c:	f000 faa2 	bl	80019d4 <LTC_Pec15_Calc>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014a4:	f7ff ff70 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014a8:	f001 fbba 	bl	8002c20 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	2364      	movs	r3, #100	@ 0x64
 80014b2:	2204      	movs	r2, #4
 80014b4:	482d      	ldr	r0, [pc, #180]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014b6:	f004 fedb 	bl	8006270 <HAL_SPI_Transmit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014be:	7c7b      	ldrb	r3, [r7, #17]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014c4:	7c7b      	ldrb	r3, [r7, #17]
 80014c6:	2201      	movs	r2, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2364      	movs	r3, #100	@ 0x64
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	4822      	ldr	r0, [pc, #136]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014e2:	f005 f809 	bl	80064f8 <HAL_SPI_Receive>
 80014e6:	4603      	mov	r3, r0
 80014e8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014ea:	7c7b      	ldrb	r3, [r7, #17]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80014f0:	7c7b      	ldrb	r3, [r7, #17]
 80014f2:	3304      	adds	r3, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001506:	f001 fb7f 	bl	8002c08 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800150a:	2300      	movs	r3, #0
 800150c:	777b      	strb	r3, [r7, #29]
 800150e:	e01a      	b.n	8001546 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800151a:	7f7a      	ldrb	r2, [r7, #29]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001526:	7fba      	ldrb	r2, [r7, #30]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
			memcpy(
 8001536:	2206      	movs	r2, #6
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fc66 	bl	8007e0c <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001540:	7f7b      	ldrb	r3, [r7, #29]
 8001542:	3301      	adds	r3, #1
 8001544:	777b      	strb	r3, [r7, #29]
 8001546:	7f7b      	ldrb	r3, [r7, #29]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d9e1      	bls.n	8001510 <Read_Cell_Volt+0x110>
			i++) {
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	3301      	adds	r3, #1
 8001550:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001552:	7fbb      	ldrb	r3, [r7, #30]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d987      	bls.n	8001468 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	46b5      	mov	sp, r6
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	@ 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001566:	bf00      	nop
 8001568:	08008214 	.word	0x08008214
 800156c:	200001f4 	.word	0x200001f4

08001570 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800157c:	2306      	movs	r3, #6
 800157e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3304      	adds	r3, #4
 8001588:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800158c:	2207      	movs	r2, #7
 800158e:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001592:	2221      	movs	r2, #33	@ 0x21
 8001594:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 8001596:	492b      	ldr	r1, [pc, #172]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001598:	2002      	movs	r0, #2
 800159a:	f000 fa1b 	bl	80019d4 <LTC_Pec15_Calc>
 800159e:	4603      	mov	r3, r0
 80015a0:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015a2:	8a3b      	ldrh	r3, [r7, #16]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015ac:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015b4:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015b6:	2304      	movs	r3, #4
 80015b8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	75bb      	strb	r3, [r7, #22]
 80015be:	e02d      	b.n	800161c <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	757b      	strb	r3, [r7, #21]
 80015c4:	e00c      	b.n	80015e0 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	441a      	add	r2, r3
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015d2:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	3301      	adds	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015da:	7d7b      	ldrb	r3, [r7, #21]
 80015dc:	3301      	adds	r3, #1
 80015de:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015e0:	7d7a      	ldrb	r2, [r7, #21]
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3ee      	bcc.n	80015c6 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015e8:	7d3b      	ldrb	r3, [r7, #20]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f9f1 	bl	80019d4 <LTC_Pec15_Calc>
 80015f2:	4603      	mov	r3, r0
 80015f4:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001602:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	3301      	adds	r3, #1
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	b2d1      	uxtb	r1, r2
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800160e:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3302      	adds	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	3b01      	subs	r3, #1
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ce      	bne.n	80015c0 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001622:	f7ff feb1 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001626:	f001 fafb 	bl	8002c20 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 800162a:	7cfb      	ldrb	r3, [r7, #19]
 800162c:	b29a      	uxth	r2, r3
 800162e:	2364      	movs	r3, #100	@ 0x64
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <LTC_WRCOMM+0xd8>)
 8001634:	f004 fe1c 	bl	8006270 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001638:	f001 fae6 	bl	8002c08 <LTC_nCS_High>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000e4 	.word	0x200000e4
 8001648:	200001f4 	.word	0x200001f4

0800164c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001656:	2307      	movs	r3, #7
 8001658:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800165a:	2323      	movs	r3, #35	@ 0x23
 800165c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	2002      	movs	r0, #2
 8001666:	f000 f9b5 	bl	80019d4 <LTC_Pec15_Calc>
 800166a:	4603      	mov	r3, r0
 800166c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800166e:	8a7b      	ldrh	r3, [r7, #18]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800167e:	f7ff fe83 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001682:	f001 facd 	bl	8002c20 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	2364      	movs	r3, #100	@ 0x64
 800168c:	2204      	movs	r2, #4
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <LTC_STCOMM+0x7c>)
 8001690:	f004 fdee 	bl	8006270 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e008      	b.n	80016ac <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	21ff      	movs	r1, #255	@ 0xff
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <LTC_STCOMM+0x7c>)
 80016a2:	f004 fde5 	bl	8006270 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbef      	blt.n	800169a <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ba:	f001 faa5 	bl	8002c08 <LTC_nCS_High>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001f4 	.word	0x200001f4

080016cc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d0:	b089      	sub	sp, #36	@ 0x24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	466b      	mov	r3, sp
 80016d8:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016de:	2340      	movs	r3, #64	@ 0x40
 80016e0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016e2:	7f3b      	ldrb	r3, [r7, #28]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	7f3b      	ldrb	r3, [r7, #28]
 80016ea:	2200      	movs	r2, #0
 80016ec:	4698      	mov	r8, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001700:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	2200      	movs	r2, #0
 8001708:	461c      	mov	r4, r3
 800170a:	4615      	mov	r5, r2
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	00eb      	lsls	r3, r5, #3
 8001716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171a:	00e2      	lsls	r2, r4, #3
 800171c:	7f3b      	ldrb	r3, [r7, #28]
 800171e:	3307      	adds	r3, #7
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	ebad 0d03 	sub.w	sp, sp, r3
 8001728:	466b      	mov	r3, sp
 800172a:	3300      	adds	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	77bb      	strb	r3, [r7, #30]
 8001732:	e074      	b.n	800181e <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f93c 	bl	80019d4 <LTC_Pec15_Calc>
 800175c:	4603      	mov	r3, r0
 800175e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001760:	8a7b      	ldrh	r3, [r7, #18]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001770:	f7ff fe0a 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001774:	f001 fa54 	bl	8002c20 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	2364      	movs	r3, #100	@ 0x64
 800177e:	2204      	movs	r2, #4
 8001780:	482d      	ldr	r0, [pc, #180]	@ (8001838 <Read_Cell_Temps+0x16c>)
 8001782:	f004 fd75 	bl	8006270 <HAL_SPI_Transmit>
 8001786:	4603      	mov	r3, r0
 8001788:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800178a:	7c7b      	ldrb	r3, [r7, #17]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001790:	7c7b      	ldrb	r3, [r7, #17]
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	b25a      	sxtb	r2, r3
 800179a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017a4:	7f3b      	ldrb	r3, [r7, #28]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	4822      	ldr	r0, [pc, #136]	@ (8001838 <Read_Cell_Temps+0x16c>)
 80017ae:	f004 fea3 	bl	80064f8 <HAL_SPI_Receive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017b6:	7c7b      	ldrb	r3, [r7, #17]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017bc:	7c7b      	ldrb	r3, [r7, #17]
 80017be:	3304      	adds	r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017d2:	f001 fa19 	bl	8002c08 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	777b      	strb	r3, [r7, #29]
 80017da:	e01a      	b.n	8001812 <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017dc:	7f7b      	ldrb	r3, [r7, #29]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017e6:	7f7a      	ldrb	r2, [r7, #29]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80017f2:	7fba      	ldrb	r2, [r7, #30]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
			memcpy(
 8001802:	2206      	movs	r2, #6
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f006 fb00 	bl	8007e0c <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	3301      	adds	r3, #1
 8001810:	777b      	strb	r3, [r7, #29]
 8001812:	7f7b      	ldrb	r3, [r7, #29]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d9e1      	bls.n	80017dc <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001818:	7fbb      	ldrb	r3, [r7, #30]
 800181a:	3301      	adds	r3, #1
 800181c:	77bb      	strb	r3, [r7, #30]
 800181e:	7fbb      	ldrb	r3, [r7, #30]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d987      	bls.n	8001734 <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	46b5      	mov	sp, r6
}
 8001828:	4618      	mov	r0, r3
 800182a:	3724      	adds	r7, #36	@ 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001832:	bf00      	nop
 8001834:	0800821c 	.word	0x0800821c
 8001838:	200001f4 	.word	0x200001f4

0800183c <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	105b      	asrs	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3302      	adds	r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	b2da      	uxtb	r2, r3
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	797b      	ldrb	r3, [r7, #5]
 8001876:	4413      	add	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3360      	adds	r3, #96	@ 0x60
 800187c:	b2db      	uxtb	r3, r3
 800187e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	2002      	movs	r0, #2
 8001888:	f000 f8a4 	bl	80019d4 <LTC_Pec15_Calc>
 800188c:	4603      	mov	r3, r0
 800188e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001890:	89bb      	ldrh	r3, [r7, #12]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018a0:	f7ff fd72 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 80018a4:	f001 f9bc 	bl	8002c20 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018a8:	f107 0108 	add.w	r1, r7, #8
 80018ac:	2364      	movs	r3, #100	@ 0x64
 80018ae:	2204      	movs	r2, #4
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <LTC_ADCV+0x88>)
 80018b2:	f004 fcdd 	bl	8006270 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018b6:	f001 f9a7 	bl	8002c08 <LTC_nCS_High>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001f4 	.word	0x200001f4

080018c8 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	105b      	asrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3304      	adds	r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3360      	adds	r3, #96	@ 0x60
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	2002      	movs	r0, #2
 8001908:	f000 f864 	bl	80019d4 <LTC_Pec15_Calc>
 800190c:	4603      	mov	r3, r0
 800190e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001920:	f7ff fd32 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001924:	f001 f97c 	bl	8002c20 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001928:	f107 0108 	add.w	r1, r7, #8
 800192c:	2364      	movs	r3, #100	@ 0x64
 800192e:	2204      	movs	r2, #4
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <LTC_ADAX+0x7c>)
 8001932:	f004 fc9d 	bl	8006270 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001936:	f001 f967 	bl	8002c08 <LTC_nCS_High>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001f4 	.word	0x200001f4

08001948 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800195a:	2307      	movs	r3, #7
 800195c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800195e:	2314      	movs	r3, #20
 8001960:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	2002      	movs	r0, #2
 8001968:	f000 f834 	bl	80019d4 <LTC_Pec15_Calc>
 800196c:	4603      	mov	r3, r0
 800196e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001980:	f7ff fd02 	bl	8001388 <Wakeup_Idle>

	LTC_nCS_Low();
 8001984:	f001 f94c 	bl	8002c20 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	2364      	movs	r3, #100	@ 0x64
 800198c:	2204      	movs	r2, #4
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <LTC_POLLADC+0x84>)
 8001990:	f004 fc6e 	bl	8006270 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001994:	e00c      	b.n	80019b0 <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 8001996:	f001 fbdd 	bl	8003154 <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
 800199c:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800199e:	7abb      	ldrb	r3, [r7, #10]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <LTC_POLLADC+0x62>
			finished = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	72fb      	strb	r3, [r7, #11]
 80019a8:	e002      	b.n	80019b0 <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	330a      	adds	r3, #10
 80019ae:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <LTC_POLLADC+0x88>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d802      	bhi.n	80019be <LTC_POLLADC+0x76>
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0eb      	beq.n	8001996 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019be:	f001 f923 	bl	8002c08 <LTC_nCS_High>
	return (counter);
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001f4 	.word	0x200001f4
 80019d0:	00030d3f 	.word	0x00030d3f

080019d4 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 80019e0:	2310      	movs	r3, #16
 80019e2:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80019e4:	2300      	movs	r3, #0
 80019e6:	737b      	strb	r3, [r7, #13]
 80019e8:	e017      	b.n	8001a1a <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	09db      	lsrs	r3, r3, #7
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	7b7a      	ldrb	r2, [r7, #13]
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	4053      	eors	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <LTC_Pec15_Calc+0x60>)
 8001a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4053      	eors	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a14:	7b7b      	ldrb	r3, [r7, #13]
 8001a16:	3301      	adds	r3, #1
 8001a18:	737b      	strb	r3, [r7, #13]
 8001a1a:	7b7a      	ldrb	r2, [r7, #13]
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e3      	bcc.n	80019ea <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b29b      	uxth	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	08008220 	.word	0x08008220

08001a38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_ADC1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a76:	f001 fb9b 	bl	80031b0 <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 fd4a 	bl	8002518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a84:	230f      	movs	r3, #15
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a96:	f001 ff21 	bl	80038dc <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 fd3a 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000128 	.word	0x20000128
 8001ab0:	40012400 	.word	0x40012400

08001ab4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ac6:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <MX_ADC2_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ade:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ae2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001af2:	f001 fb5d 	bl	80031b0 <HAL_ADC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001afc:	f000 fd0c 	bl	8002518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b00:	230a      	movs	r3, #10
 8001b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001b12:	f001 fee3 	bl	80038dc <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001b1c:	f000 fcfc 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000158 	.word	0x20000158
 8001b2c:	40012800 	.word	0x40012800

08001b30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a45      	ldr	r2, [pc, #276]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d153      	bne.n	8001bf8 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b50:	4b44      	ldr	r3, [pc, #272]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a43      	ldr	r2, [pc, #268]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b3e      	ldr	r3, [pc, #248]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001b80:	2320      	movs	r3, #32
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b84:	2303      	movs	r3, #3
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4836      	ldr	r0, [pc, #216]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001b90:	f003 f9a4 	bl	8004edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b94:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001b96:	4a36      	ldr	r2, [pc, #216]	@ (8001c70 <HAL_ADC_MspInit+0x140>)
 8001b98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bac:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001bae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001bc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bca:	4828      	ldr	r0, [pc, #160]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001bcc:	f002 fd90 	bl	80046f0 <HAL_DMA_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001bd6:	f000 fc9f 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001bde:	621a      	str	r2, [r3, #32]
 8001be0:	4a22      	ldr	r2, [pc, #136]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2102      	movs	r1, #2
 8001bea:	2012      	movs	r0, #18
 8001bec:	f002 fd49 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bf0:	2012      	movs	r0, #18
 8001bf2:	f002 fd62 	bl	80046ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001bf6:	e02e      	b.n	8001c56 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c74 <HAL_ADC_MspInit+0x144>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d129      	bne.n	8001c56 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a11      	ldr	r2, [pc, #68]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c32:	230f      	movs	r3, #15
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4809      	ldr	r0, [pc, #36]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001c42:	f003 f94b 	bl	8004edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2102      	movs	r1, #2
 8001c4a:	2012      	movs	r0, #18
 8001c4c:	f002 fd19 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c50:	2012      	movs	r0, #18
 8001c52:	f002 fd32 	bl	80046ba <HAL_NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	@ 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012400 	.word	0x40012400
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	20000188 	.word	0x20000188
 8001c70:	40020008 	.word	0x40020008
 8001c74:	40012800 	.word	0x40012800

08001c78 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001c7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ce0 <MX_CAN1_Init+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001c84:	2209      	movs	r2, #9
 8001c86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001c96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001c9e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001ca2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_CAN1_Init+0x64>)
 8001cca:	f001 ffa3 	bl	8003c14 <HAL_CAN_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001cd4:	f000 fc20 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200001cc 	.word	0x200001cc
 8001ce0:	40006400 	.word	0x40006400

08001ce4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a31      	ldr	r2, [pc, #196]	@ (8001dc4 <HAL_CAN_MspInit+0xe0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d15b      	bne.n	8001dbc <HAL_CAN_MspInit+0xd8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d04:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_CAN_MspInit+0xe4>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc8 <HAL_CAN_MspInit+0xe4>)
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	61d3      	str	r3, [r2, #28]
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_CAN_MspInit+0xe4>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_CAN_MspInit+0xe4>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a29      	ldr	r2, [pc, #164]	@ (8001dc8 <HAL_CAN_MspInit+0xe4>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <HAL_CAN_MspInit+0xe4>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4820      	ldr	r0, [pc, #128]	@ (8001dcc <HAL_CAN_MspInit+0xe8>)
 8001d4a:	f003 f8c7 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	481a      	ldr	r0, [pc, #104]	@ (8001dcc <HAL_CAN_MspInit+0xe8>)
 8001d64:	f003 f8ba 	bl	8004edc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_CAN_MspInit+0xec>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <HAL_CAN_MspInit+0xec>)
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2013      	movs	r0, #19
 8001d92:	f002 fc76 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d96:	2013      	movs	r0, #19
 8001d98:	f002 fc8f 	bl	80046ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2014      	movs	r0, #20
 8001da2:	f002 fc6e 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001da6:	2014      	movs	r0, #20
 8001da8:	f002 fc87 	bl	80046ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2015      	movs	r0, #21
 8001db2:	f002 fc66 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001db6:	2015      	movs	r0, #21
 8001db8:	f002 fc7f 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	@ 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40006400 	.word	0x40006400
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <CAN_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <CAN_Start+0x10>)
 8001dda:	f002 f816 	bl	8003e0a <HAL_CAN_Start>
 8001dde:	4603      	mov	r3, r0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001cc 	.word	0x200001cc

08001de8 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001dec:	2102      	movs	r1, #2
 8001dee:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <CAN_Activate+0x14>)
 8001df0:	f002 f91e 	bl	8004030 <HAL_CAN_ActivateNotification>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200001cc 	.word	0x200001cc

08001e00 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f103 021c 	add.w	r2, r3, #28
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3318      	adds	r3, #24
 8001e14:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <CAN_Send+0x24>)
 8001e16:	f002 f83c 	bl	8003e92 <HAL_CAN_AddTxMessage>
 8001e1a:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200001cc 	.word	0x200001cc

08001e28 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001e30:	f7ff ffd0 	bl	8001dd4 <CAN_Start>
	CAN_Activate();
 8001e34:	f7ff ffd8 	bl	8001de8 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	611a      	str	r2, [r3, #16]
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <CAN_Send_Safety_Checker>:
	HAL_Delay(1);
	CAN_Send(ptr);
}

void CAN_Send_Safety_Checker(struct CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 8001e80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e84:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff ffe4 	bl	8001e58 <Set_CAN_Id>
	ptr->data[0] = *faults;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001eca:	0c1b      	lsrs	r3, r3, #16
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8001eda:	0e1b      	lsrs	r3, r3, #24
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_Delay(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f001 f93f 	bl	8003168 <HAL_Delay>
	CAN_Send(ptr);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff ff88 	bl	8001e00 <CAN_Send>
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <MX_DMA_Init+0x78>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <MX_DMA_Init+0x78>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6153      	str	r3, [r2, #20]
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <MX_DMA_Init+0x78>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2102      	movs	r1, #2
 8001f1a:	200b      	movs	r0, #11
 8001f1c:	f002 fbb1 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f20:	200b      	movs	r0, #11
 8001f22:	f002 fbca 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2103      	movs	r1, #3
 8001f2a:	200c      	movs	r0, #12
 8001f2c:	f002 fba9 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f30:	200c      	movs	r0, #12
 8001f32:	f002 fbc2 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2103      	movs	r1, #3
 8001f3a:	200d      	movs	r0, #13
 8001f3c:	f002 fba1 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f40:	200d      	movs	r0, #13
 8001f42:	f002 fbba 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	200e      	movs	r0, #14
 8001f4c:	f002 fb99 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f50:	200e      	movs	r0, #14
 8001f52:	f002 fbb2 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2101      	movs	r1, #1
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f002 fb91 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f60:	200f      	movs	r0, #15
 8001f62:	f002 fbaa 	bl	80046ba <HAL_NVIC_EnableIRQ>


}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000

08001f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f88:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a35      	ldr	r2, [pc, #212]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa0:	4b30      	ldr	r3, [pc, #192]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd0:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <MX_GPIO_Init+0xf0>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2110      	movs	r1, #16
 8001fec:	481e      	ldr	r0, [pc, #120]	@ (8002068 <MX_GPIO_Init+0xf4>)
 8001fee:	f003 f8f9 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	481d      	ldr	r0, [pc, #116]	@ (800206c <MX_GPIO_Init+0xf8>)
 8001ff8:	f003 f8f4 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2140      	movs	r1, #64	@ 0x40
 8002000:	481b      	ldr	r0, [pc, #108]	@ (8002070 <MX_GPIO_Init+0xfc>)
 8002002:	f003 f8ef 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8002006:	2310      	movs	r3, #16
 8002008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2302      	movs	r3, #2
 8002014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	4619      	mov	r1, r3
 800201c:	4812      	ldr	r0, [pc, #72]	@ (8002068 <MX_GPIO_Init+0xf4>)
 800201e:	f002 ff5d 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 8002022:	2302      	movs	r3, #2
 8002024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2302      	movs	r3, #2
 8002030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_GPIO_Init+0xf8>)
 800203a:	f002 ff4f 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 800203e:	2340      	movs	r3, #64	@ 0x40
 8002040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002042:	2301      	movs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2302      	movs	r3, #2
 800204c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4619      	mov	r1, r3
 8002054:	4806      	ldr	r0, [pc, #24]	@ (8002070 <MX_GPIO_Init+0xfc>)
 8002056:	f002 ff41 	bl	8004edc <HAL_GPIO_Init>

}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800
 800206c:	40010c00 	.word	0x40010c00
 8002070:	40011000 	.word	0x40011000

08002074 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(uint32_t *read_volt_HV) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

		// ADC開始
		HAL_ADC_Start(&hadc1);
 8002080:	4820      	ldr	r0, [pc, #128]	@ (8002104 <ReadHVInput+0x90>)
 8002082:	f001 f96d 	bl	8003360 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002086:	f04f 31ff 	mov.w	r1, #4294967295
 800208a:	481e      	ldr	r0, [pc, #120]	@ (8002104 <ReadHVInput+0x90>)
 800208c:	f001 fa42 	bl	8003514 <HAL_ADC_PollForConversion>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);
 8002096:	481b      	ldr	r0, [pc, #108]	@ (8002104 <ReadHVInput+0x90>)
 8002098:	f001 fb42 	bl	8003720 <HAL_ADC_GetValue>
 800209c:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);
 800209e:	4819      	ldr	r0, [pc, #100]	@ (8002104 <ReadHVInput+0x90>)
 80020a0:	f001 fa0c 	bl	80034bc <HAL_ADC_Stop>

		// 電圧計算
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f7fe fe31 	bl	8000d0c <__aeabi_ui2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff37 	bl	8000f24 <__aeabi_fdiv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4913      	ldr	r1, [pc, #76]	@ (8002108 <ReadHVInput+0x94>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fe7e 	bl	8000dbc <__aeabi_fmul>
 80020c0:	4603      	mov	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]
		float amcOutput = adcVoltage / GAIN_TLV9001;
 80020c4:	4911      	ldr	r1, [pc, #68]	@ (800210c <ReadHVInput+0x98>)
 80020c6:	6938      	ldr	r0, [r7, #16]
 80020c8:	f7fe ff2c 	bl	8000f24 <__aeabi_fdiv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
		float hvInput = amcOutput * DIVIDER_RATIO;
 80020d0:	490f      	ldr	r1, [pc, #60]	@ (8002110 <ReadHVInput+0x9c>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7fe fe72 	bl	8000dbc <__aeabi_fmul>
 80020d8:	4603      	mov	r3, r0
 80020da:	490e      	ldr	r1, [pc, #56]	@ (8002114 <ReadHVInput+0xa0>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ff21 	bl	8000f24 <__aeabi_fdiv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	60bb      	str	r3, [r7, #8]

		*read_volt_HV = (uint32_t)(hvInput * 10000);
 80020e6:	490c      	ldr	r1, [pc, #48]	@ (8002118 <ReadHVInput+0xa4>)
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f7fe fe67 	bl	8000dbc <__aeabi_fmul>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe ffb3 	bl	800105c <__aeabi_f2uiz>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	601a      	str	r2, [r3, #0]
	}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000128 	.word	0x20000128
 8002108:	40533333 	.word	0x40533333
 800210c:	3fca3d71 	.word	0x3fca3d71
 8002110:	49aae7e0 	.word	0x49aae7e0
 8002114:	45d4d000 	.word	0x45d4d000
 8002118:	461c4000 	.word	0x461c4000

0800211c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002122:	af04      	add	r7, sp, #16
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 8002124:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002128:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 8002130:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002134:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 800213c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002140:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002148:	f000 ffac 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800214c:	f000 f90a 	bl	8002364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002150:	f7ff ff10 	bl	8001f74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002154:	f7ff fed0 	bl	8001ef8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002158:	f7ff fc6e 	bl	8001a38 <MX_ADC1_Init>
  MX_ADC2_Init();
 800215c:	f7ff fcaa 	bl	8001ab4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8002160:	f000 fe4a 	bl	8002df8 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002164:	f000 fc6e 	bl	8002a44 <MX_SPI1_Init>
  MX_CAN1_Init();
 8002168:	f7ff fd86 	bl	8001c78 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800216c:	f000 fea0 	bl	8002eb0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fe57 	bl	8001e28 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 800217a:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	4974      	ldr	r1, [pc, #464]	@ (8002354 <main+0x238>)
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f958 	bl	8002438 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8002188:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800218c:	210a      	movs	r1, #10
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f992 	bl	80024b8 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8002194:	f000 fd38 	bl	8002c08 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2102      	movs	r1, #2
 800219c:	486e      	ldr	r0, [pc, #440]	@ (8002358 <main+0x23c>)
 800219e:	f003 f821 	bl	80051e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80021a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021a6:	f000 ffdf 	bl	8003168 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2102      	movs	r1, #2
 80021ae:	486a      	ldr	r0, [pc, #424]	@ (8002358 <main+0x23c>)
 80021b0:	f003 f818 	bl	80051e4 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
	uint8_t indexpause = 8;
 80021ba:	2308      	movs	r3, #8
 80021bc:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
	uint8_t low_volt_hysteresis = 0;
 80021c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80021c4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
	uint8_t high_volt_hysteresis = 0;
 80021cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80021d0:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
	uint8_t cell_imbalance_hysteresis = 0;
 80021d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80021dc:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

	//reading cell voltages
	Wakeup_Sleep();
 80021e4:	f7ff f8f0 	bl	80013c8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 80021e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fa1d 	bl	800262c <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 80021f2:	f7ff f8e9 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80021f6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80021fa:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
 80021fe:	e016      	b.n	800222e <main+0x112>
		Wakeup_Idle();
 8002200:	f7ff f8c2 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002204:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002208:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 800220c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002210:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002214:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fa1b 	bl	8002654 <Read_Temp>
		HAL_Delay(3);
 800221e:	2003      	movs	r0, #3
 8002220:	f000 ffa2 	bl	8003168 <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 8002224:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 8002228:	3301      	adds	r3, #1
 800222a:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
 800222e:	f897 2245 	ldrb.w	r2, [r7, #581]	@ 0x245
 8002232:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8002236:	429a      	cmp	r2, r3
 8002238:	d3e2      	bcc.n	8002200 <main+0xe4>
	}
	Wakeup_Idle();
 800223a:	f7ff f8a5 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 800223e:	4947      	ldr	r1, [pc, #284]	@ (800235c <main+0x240>)
 8002240:	2008      	movs	r0, #8
 8002242:	f7ff f995 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002246:	f7ff f89f 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 800224a:	2002      	movs	r0, #2
 800224c:	f7ff f9fe 	bl	800164c <LTC_STCOMM>

	ReadHVInput(&modPackInfo.pack_voltage);
 8002250:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002254:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff0b 	bl	8002074 <ReadHVInput>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800225e:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8002262:	210a      	movs	r1, #10
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f904 	bl	8002472 <GpioFixedToggle>
//		printf("Hello");
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800226a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f935 	bl	80024de <TimerPacket_FixedPulse>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f1      	beq.n	800225e <main+0x142>
			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 800227a:	1dbc      	adds	r4, r7, #6
 800227c:	1dfa      	adds	r2, r7, #7
 800227e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002282:	f107 0008 	add.w	r0, r7, #8
 8002286:	1d7b      	adds	r3, r7, #5
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4623      	mov	r3, r4
 800228c:	f7ff fdf1 	bl	8001e72 <CAN_Send_Safety_Checker>
//			CAN_Send_Cell_Summary(&msg, &modPackInfo);
//			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
//			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
			//reading cell voltages
//			Wakeup_Sleep();
			Read_Volt(modPackInfo.cell_volt);
 8002290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f9c9 	bl	800262c <Read_Volt>
//			    printf("Cell %d: %u mV\n", i + 1, modPackInfo.cell_volt[i]);
//			}

			//reading cell temperatures
//			Wakeup_Sleep();
			for (uint8_t i = tempindex; i < indexpause; i++) {
 800229a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800229e:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
 80022a2:	e011      	b.n	80022c8 <main+0x1ac>
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80022a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a8:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80022ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b0:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80022b4:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 f9cb 	bl	8002654 <Read_Temp>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80022be:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 80022c2:	3301      	adds	r3, #1
 80022c4:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
 80022c8:	f897 2244 	ldrb.w	r2, [r7, #580]	@ 0x244
 80022cc:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3e7      	bcc.n	80022a4 <main+0x188>
			}
			if (indexpause == 8) {
 80022d4:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d10d      	bne.n	80022f8 <main+0x1dc>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 80022dc:	491f      	ldr	r1, [pc, #124]	@ (800235c <main+0x240>)
 80022de:	2008      	movs	r0, #8
 80022e0:	f7ff f946 	bl	8001570 <LTC_WRCOMM>
				LTC_STCOMM(2);
 80022e4:	2002      	movs	r0, #2
 80022e6:	f7ff f9b1 	bl	800164c <LTC_STCOMM>
				tempindex = 8;
 80022ea:	2308      	movs	r3, #8
 80022ec:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
				indexpause = NUM_THERM_PER_MOD;
 80022f0:	230c      	movs	r3, #12
 80022f2:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 80022f6:	e010      	b.n	800231a <main+0x1fe>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 80022f8:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	d10c      	bne.n	800231a <main+0x1fe>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8002300:	4917      	ldr	r1, [pc, #92]	@ (8002360 <main+0x244>)
 8002302:	2008      	movs	r0, #8
 8002304:	f7ff f934 	bl	8001570 <LTC_WRCOMM>
				LTC_STCOMM(2);
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff f99f 	bl	800164c <LTC_STCOMM>
				indexpause = 8;
 800230e:	2308      	movs	r3, #8
 8002310:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
				tempindex = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
			}

			ReadHVInput(&modPackInfo.pack_voltage);
 800231a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800231e:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fea6 	bl	8002074 <ReadHVInput>
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

			//getting the summary of all cells in the pack
			Cell_Summary_Voltage(&modPackInfo, &safetyFaults,
 8002328:	1d7c      	adds	r4, r7, #5
 800232a:	1dba      	adds	r2, r7, #6
 800232c:	1df9      	adds	r1, r7, #7
 800232e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002332:	1cbb      	adds	r3, r7, #2
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	1cfb      	adds	r3, r7, #3
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4623      	mov	r3, r4
 8002340:	f000 f9ce 	bl	80026e0 <Cell_Summary_Voltage>
								&safetyWarnings, &safetyStates, &low_volt_hysteresis,
								&high_volt_hysteresis, &cell_imbalance_hysteresis);

			Cell_Summary_Temperature(&modPackInfo, &safetyFaults,&safetyWarnings);
 8002344:	1dba      	adds	r2, r7, #6
 8002346:	1df9      	adds	r1, r7, #7
 8002348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fb09 	bl	8002964 <Cell_Summary_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002352:	e784      	b.n	800225e <main+0x142>
 8002354:	40011000 	.word	0x40011000
 8002358:	40010c00 	.word	0x40010c00
 800235c:	20000000 	.word	0x20000000
 8002360:	20000006 	.word	0x20000006

08002364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09c      	sub	sp, #112	@ 0x70
 8002368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800236e:	2238      	movs	r2, #56	@ 0x38
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f005 fd18 	bl	8007da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2220      	movs	r2, #32
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f005 fd0a 	bl	8007da8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002394:	2301      	movs	r3, #1
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800239c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800239e:	2304      	movs	r3, #4
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a2:	2301      	movs	r3, #1
 80023a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80023a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ac:	2302      	movs	r3, #2
 80023ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80023ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80023bc:	2302      	movs	r3, #2
 80023be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80023c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80023c6:	2340      	movs	r3, #64	@ 0x40
 80023c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 ff3a 	bl	8005248 <HAL_RCC_OscConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80023da:	f000 f89d 	bl	8002518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023de:	230f      	movs	r3, #15
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e2:	2302      	movs	r3, #2
 80023e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fa3a 	bl	8005874 <HAL_RCC_ClockConfig>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002406:	f000 f887 	bl	8002518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800240a:	2302      	movs	r3, #2
 800240c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800240e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002412:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fc22 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002422:	f000 f879 	bl	8002518 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002426:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <SystemClock_Config+0xd0>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	3770      	adds	r7, #112	@ 0x70
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	42420070 	.word	0x42420070

08002438 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	68b8      	ldr	r0, [r7, #8]
 800244e:	f002 fec9 	bl	80051e4 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 800247e:	f000 fe69 	bl	8003154 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	429a      	cmp	r2, r3
 8002496:	d90b      	bls.n	80024b0 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	889b      	ldrh	r3, [r3, #4]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f002 feb6 	bl	8005214 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
	}
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80024e6:	f000 fe35 	bl	8003154 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d905      	bls.n	800250e <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251c:	b672      	cpsid	i
}
 800251e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <Error_Handler+0x8>

08002524 <Get_Actual_Temps>:
								 { 0x69, 0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F, 0xF9 },
							 	 { 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp, uint16_t data) {
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	603a      	str	r2, [r7, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
 8002532:	460b      	mov	r3, r1
 8002534:	71bb      	strb	r3, [r7, #6]
 8002536:	4613      	mov	r3, r2
 8002538:	80bb      	strh	r3, [r7, #4]
    if (data == 0) {
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10e      	bne.n	800255e <Get_Actual_Temps+0x3a>
        actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = 999.0f; // error value
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	461a      	mov	r2, r3
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	4413      	add	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800255a:	801a      	strh	r2, [r3, #0]
        return;
 800255c:	e059      	b.n	8002612 <Get_Actual_Temps+0xee>
    }

    float scalar = 30000.0f / (float)(data) - 1.0f;
 800255e:	88bb      	ldrh	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fbd3 	bl	8000d0c <__aeabi_ui2f>
 8002566:	4603      	mov	r3, r0
 8002568:	4619      	mov	r1, r3
 800256a:	482b      	ldr	r0, [pc, #172]	@ (8002618 <Get_Actual_Temps+0xf4>)
 800256c:	f7fe fcda 	bl	8000f24 <__aeabi_fdiv>
 8002570:	4603      	mov	r3, r0
 8002572:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fb16 	bl	8000ba8 <__aeabi_fsub>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]
    scalar = ntcSeriesResistance / scalar;
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	4826      	ldr	r0, [pc, #152]	@ (800261c <Get_Actual_Temps+0xf8>)
 8002584:	f7fe fcce 	bl	8000f24 <__aeabi_fdiv>
 8002588:	4603      	mov	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]

    float steinhart = scalar / ntcNominal;
 800258c:	4923      	ldr	r1, [pc, #140]	@ (800261c <Get_Actual_Temps+0xf8>)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7fe fcc8 	bl	8000f24 <__aeabi_fdiv>
 8002594:	4603      	mov	r3, r0
 8002596:	60bb      	str	r3, [r7, #8]
    steinhart = log(steinhart);
 8002598:	68b8      	ldr	r0, [r7, #8]
 800259a:	f7fd ffa9 	bl	80004f0 <__aeabi_f2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f005 fc3f 	bl	8007e28 <log>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7fe faa5 	bl	8000b00 <__aeabi_d2f>
 80025b6:	4603      	mov	r3, r0
 80025b8:	60bb      	str	r3, [r7, #8]
    steinhart *= invBetaFactor;
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <Get_Actual_Temps+0xfc>)
 80025bc:	4619      	mov	r1, r3
 80025be:	68b8      	ldr	r0, [r7, #8]
 80025c0:	f7fe fbfc 	bl	8000dbc <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	60bb      	str	r3, [r7, #8]
    steinhart += invNominalTemp;
 80025c8:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <Get_Actual_Temps+0x100>)
 80025ca:	4619      	mov	r1, r3
 80025cc:	68b8      	ldr	r0, [r7, #8]
 80025ce:	f7fe faed 	bl	8000bac <__addsf3>
 80025d2:	4603      	mov	r3, r0
 80025d4:	60bb      	str	r3, [r7, #8]
    steinhart = 1.0f / steinhart;
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80025dc:	f7fe fca2 	bl	8000f24 <__aeabi_fdiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	60bb      	str	r3, [r7, #8]
    steinhart -= 273.15f;
 80025e4:	4910      	ldr	r1, [pc, #64]	@ (8002628 <Get_Actual_Temps+0x104>)
 80025e6:	68b8      	ldr	r0, [r7, #8]
 80025e8:	f7fe fade 	bl	8000ba8 <__aeabi_fsub>
 80025ec:	4603      	mov	r3, r0
 80025ee:	60bb      	str	r3, [r7, #8]

    actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 80025f0:	79fa      	ldrb	r2, [r7, #7]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	461a      	mov	r2, r3
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	18d4      	adds	r4, r2, r3
 8002606:	68b8      	ldr	r0, [r7, #8]
 8002608:	f7fe fd28 	bl	800105c <__aeabi_f2uiz>
 800260c:	4603      	mov	r3, r0
 800260e:	b29b      	uxth	r3, r3
 8002610:	8023      	strh	r3, [r4, #0]
}
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	46ea6000 	.word	0x46ea6000
 800261c:	461c4000 	.word	0x461c4000
 8002620:	3998a193 	.word	0x3998a193
 8002624:	3b5bcf0f 	.word	0x3b5bcf0f
 8002628:	43889333 	.word	0x43889333

0800262c <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_FAST, DCP_DISABLED, CELL_CH_ALL);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff f8ff 	bl	800183c <LTC_ADCV>
	LTC_POLLADC();
 800263e:	f7ff f983 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 8002642:	f7fe fea1 	bl	8001388 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe feda 	bl	8001400 <Read_Cell_Volt>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4a1b      	ldr	r2, [pc, #108]	@ (80026dc <Read_Temp+0x88>)
 800266e:	4413      	add	r3, r2
 8002670:	4619      	mov	r1, r3
 8002672:	2008      	movs	r0, #8
 8002674:	f7fe ff7c 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002678:	f7fe fe86 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 800267c:	2002      	movs	r0, #2
 800267e:	f7fe ffe5 	bl	800164c <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 8002682:	f7fe fe81 	bl	8001388 <Wakeup_Idle>
	LTC_ADAX(MD_FAST, 1); //doing GPIO all conversion
 8002686:	2101      	movs	r1, #1
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff f91d 	bl	80018c8 <LTC_ADAX>
	LTC_POLLADC();
 800268e:	f7ff f95b 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 8002692:	f7fe fe79 	bl	8001388 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff f818 	bl	80016cc <Read_Cell_Temps>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
 80026a6:	e012      	b.n	80026ce <Read_Temp+0x7a>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 80026a8:	7dfa      	ldrb	r2, [r7, #23]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 80026bc:	8abb      	ldrh	r3, [r7, #20]
 80026be:	7bf9      	ldrb	r1, [r7, #15]
 80026c0:	7df8      	ldrb	r0, [r7, #23]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	f7ff ff2e 	bl	8002524 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	3301      	adds	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b07      	cmp	r3, #7
 80026d2:	d9e9      	bls.n	80026a8 <Read_Temp+0x54>

		}
	}
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	batt->cell_volt_lowest = batt->cell_volt[0];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

	for (int i = 1; i < NUM_CELLS; i++) {
 8002702:	2301      	movs	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e11a      	b.n	800293e <Cell_Summary_Voltage+0x25e>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002716:	429a      	cmp	r2, r3
 8002718:	d93a      	bls.n	8002790 <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800272e:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002732:	4293      	cmp	r3, r2
 8002734:	d906      	bls.n	8002744 <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	b2da      	uxtb	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800274a:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800274e:	4293      	cmp	r3, r2
 8002750:	d910      	bls.n	8002774 <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	f043 0310 	orr.w	r3, r3, #16
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	2102      	movs	r1, #2
 800276c:	4878      	ldr	r0, [pc, #480]	@ (8002950 <Cell_Summary_Voltage+0x270>)
 800276e:	f002 fd39 	bl	80051e4 <HAL_GPIO_WritePin>
 8002772:	e00d      	b.n	8002790 <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800277a:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800277e:	4293      	cmp	r3, r2
 8002780:	d903      	bls.n	800278a <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e002      	b.n	8002790 <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800279e:	429a      	cmp	r2, r3
 80027a0:	d23a      	bcs.n	8002818 <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80027b6:	f646 1278 	movw	r2, #27000	@ 0x6978
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d806      	bhi.n	80027cc <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80027d2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d810      	bhi.n	80027fc <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f043 0320 	orr.w	r3, r3, #32
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	2102      	movs	r1, #2
 80027f4:	4856      	ldr	r0, [pc, #344]	@ (8002950 <Cell_Summary_Voltage+0x270>)
 80027f6:	f002 fcf5 	bl	80051e4 <HAL_GPIO_WritePin>
 80027fa:	e00d      	b.n	8002818 <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002802:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002806:	4293      	cmp	r3, r2
 8002808:	d803      	bhi.n	8002812 <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e002      	b.n	8002818 <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800282c:	db10      	blt.n	8002850 <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00c      	beq.n	8002850 <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002844:	2201      	movs	r2, #1
 8002846:	2102      	movs	r1, #2
 8002848:	4841      	ldr	r0, [pc, #260]	@ (8002950 <Cell_Summary_Voltage+0x270>)
 800284a:	f002 fccb 	bl	80051e4 <HAL_GPIO_WritePin>
 800284e:	e011      	b.n	8002874 <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002864:	db03      	blt.n	800286e <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	e002      	b.n	8002874 <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002888:	db06      	blt.n	8002898 <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	b2da      	uxtb	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800289e:	4a2d      	ldr	r2, [pc, #180]	@ (8002954 <Cell_Summary_Voltage+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d906      	bls.n	80028b2 <Cell_Summary_Voltage+0x1d2>
			*warnings |= 0b10000000;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80028b8:	4a27      	ldr	r2, [pc, #156]	@ (8002958 <Cell_Summary_Voltage+0x278>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d806      	bhi.n	80028cc <Cell_Summary_Voltage+0x1ec>
			*warnings |= 0b01000000;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80028d2:	4a22      	ldr	r2, [pc, #136]	@ (800295c <Cell_Summary_Voltage+0x27c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d90b      	bls.n	80028f0 <Cell_Summary_Voltage+0x210>
			*fault |= 0b10000000;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2102      	movs	r1, #2
 80028ea:	4819      	ldr	r0, [pc, #100]	@ (8002950 <Cell_Summary_Voltage+0x270>)
 80028ec:	f002 fc7a 	bl	80051e4 <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80028f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <Cell_Summary_Voltage+0x280>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d80b      	bhi.n	8002914 <Cell_Summary_Voltage+0x234>
			*fault |= 0b01000000;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 800290a:	2201      	movs	r2, #1
 800290c:	2102      	movs	r1, #2
 800290e:	4810      	ldr	r0, [pc, #64]	@ (8002950 <Cell_Summary_Voltage+0x270>)
 8002910:	f002 fc68 	bl	80051e4 <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002928:	db06      	blt.n	8002938 <Cell_Summary_Voltage+0x258>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b5f      	cmp	r3, #95	@ 0x5f
 8002942:	f77f aee1 	ble.w	8002708 <Cell_Summary_Voltage+0x28>
		}
//		if (BALANCE) {
//			*states |= 0b10000000;
//		}
	}
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40010c00 	.word	0x40010c00
 8002954:	003e5507 	.word	0x003e5507
 8002958:	002dc6c0 	.word	0x002dc6c0
 800295c:	003e8f9f 	.word	0x003e8f9f
 8002960:	002bf200 	.word	0x002bf200

08002964 <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
	batt->cell_temp_lowest = batt->cell_temp[0];
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e04f      	b.n	8002a2e <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8b3 2196 	ldrh.w	r2, [r3, #406]	@ 0x196
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	3160      	adds	r1, #96	@ 0x60
 800299a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d224      	bcs.n	80029ec <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	3260      	adds	r2, #96	@ 0x60
 80029a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80029b8:	2b36      	cmp	r3, #54	@ 0x36
 80029ba:	d906      	bls.n	80029ca <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80029d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80029d2:	d90b      	bls.n	80029ec <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80029e2:	2201      	movs	r2, #1
 80029e4:	2102      	movs	r1, #2
 80029e6:	4816      	ldr	r0, [pc, #88]	@ (8002a40 <Cell_Summary_Temperature+0xdc>)
 80029e8:	f002 fbfc 	bl	80051e4 <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8b3 2194 	ldrh.w	r2, [r3, #404]	@ 0x194
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6979      	ldr	r1, [r7, #20]
 80029f6:	3160      	adds	r1, #96	@ 0x60
 80029f8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d913      	bls.n	8002a28 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	3260      	adds	r2, #96	@ 0x60
 8002a06:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b5f      	cmp	r3, #95	@ 0x5f
 8002a32:	ddac      	ble.n	800298e <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40010c00 	.word	0x40010c00

08002a44 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a48:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <MX_SPI1_Init+0x68>)
 8002a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a4e:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a68:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a78:	2228      	movs	r2, #40	@ 0x28
 8002a7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a88:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a90:	220a      	movs	r2, #10
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a94:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <MX_SPI1_Init+0x64>)
 8002a96:	f003 fb67 	bl	8006168 <HAL_SPI_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002aa0:	f7ff fd3a 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200001f4 	.word	0x200001f4
 8002aac:	40013000 	.word	0x40013000

08002ab0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a48      	ldr	r2, [pc, #288]	@ (8002bec <HAL_SPI_MspInit+0x13c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	f040 8088 	bne.w	8002be2 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ad2:	4b47      	ldr	r3, [pc, #284]	@ (8002bf0 <HAL_SPI_MspInit+0x140>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4a46      	ldr	r2, [pc, #280]	@ (8002bf0 <HAL_SPI_MspInit+0x140>)
 8002ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002adc:	6193      	str	r3, [r2, #24]
 8002ade:	4b44      	ldr	r3, [pc, #272]	@ (8002bf0 <HAL_SPI_MspInit+0x140>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b41      	ldr	r3, [pc, #260]	@ (8002bf0 <HAL_SPI_MspInit+0x140>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	4a40      	ldr	r2, [pc, #256]	@ (8002bf0 <HAL_SPI_MspInit+0x140>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6193      	str	r3, [r2, #24]
 8002af6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <HAL_SPI_MspInit+0x140>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b02:	23a0      	movs	r3, #160	@ 0xa0
 8002b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4619      	mov	r1, r3
 8002b14:	4837      	ldr	r0, [pc, #220]	@ (8002bf4 <HAL_SPI_MspInit+0x144>)
 8002b16:	f002 f9e1 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b1a:	2340      	movs	r3, #64	@ 0x40
 8002b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4831      	ldr	r0, [pc, #196]	@ (8002bf4 <HAL_SPI_MspInit+0x144>)
 8002b2e:	f002 f9d5 	bl	8004edc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002b32:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b34:	4a31      	ldr	r2, [pc, #196]	@ (8002bfc <HAL_SPI_MspInit+0x14c>)
 8002b36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b38:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b44:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b46:	2280      	movs	r2, #128	@ 0x80
 8002b48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b50:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b52:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b58:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b5a:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b60:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b68:	4823      	ldr	r0, [pc, #140]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b6a:	f001 fdc1 	bl	80046f0 <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002b74:	f7ff fcd0 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_SPI_MspInit+0x148>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002b86:	4a1f      	ldr	r2, [pc, #124]	@ (8002c04 <HAL_SPI_MspInit+0x154>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002b98:	2280      	movs	r2, #128	@ 0x80
 8002b9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bae:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002bb6:	4812      	ldr	r0, [pc, #72]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002bb8:	f001 fd9a 	bl	80046f0 <HAL_DMA_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8002bc2:	f7ff fca9 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002bca:	649a      	str	r2, [r3, #72]	@ 0x48
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c00 <HAL_SPI_MspInit+0x150>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	2023      	movs	r0, #35	@ 0x23
 8002bd8:	f001 fd53 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002bdc:	2023      	movs	r0, #35	@ 0x23
 8002bde:	f001 fd6c 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002be2:	bf00      	nop
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40013000 	.word	0x40013000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010800 	.word	0x40010800
 8002bf8:	2000024c 	.word	0x2000024c
 8002bfc:	4002001c 	.word	0x4002001c
 8002c00:	20000290 	.word	0x20000290
 8002c04:	40020030 	.word	0x40020030

08002c08 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	2110      	movs	r1, #16
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <LTC_nCS_High+0x14>)
 8002c12:	f002 fae7 	bl	80051e4 <HAL_GPIO_WritePin>
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40010800 	.word	0x40010800

08002c20 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002c24:	2200      	movs	r2, #0
 8002c26:	2110      	movs	r1, #16
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <LTC_nCS_Low+0x14>)
 8002c2a:	f002 fadb 	bl	80051e4 <HAL_GPIO_WritePin>
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40010800 	.word	0x40010800

08002c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6193      	str	r3, [r2, #24]
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_MspInit+0x60>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_MspInit+0x60>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000

08002c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <NMI_Handler+0x4>

08002ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <BusFault_Handler+0x4>

08002cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <UsageFault_Handler+0x4>

08002cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cec:	f000 fa20 	bl	8003130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cf8:	4802      	ldr	r0, [pc, #8]	@ (8002d04 <DMA1_Channel1_IRQHandler+0x10>)
 8002cfa:	f001 feb3 	bl	8004a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000188 	.word	0x20000188

08002d08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002d0c:	4802      	ldr	r0, [pc, #8]	@ (8002d18 <DMA1_Channel2_IRQHandler+0x10>)
 8002d0e:	f001 fea9 	bl	8004a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000024c 	.word	0x2000024c

08002d1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002d20:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <DMA1_Channel3_IRQHandler+0x10>)
 8002d22:	f001 fe9f 	bl	8004a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000290 	.word	0x20000290

08002d30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d34:	4802      	ldr	r0, [pc, #8]	@ (8002d40 <DMA1_Channel4_IRQHandler+0x10>)
 8002d36:	f001 fe95 	bl	8004a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200003a8 	.word	0x200003a8

08002d44 <DMA1_Channel5_IRQHandler>:
/**
<<<<<<< HEAD
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d48:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <DMA1_Channel5_IRQHandler+0x10>)
 8002d4a:	f001 fe8b 	bl	8004a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000364 	.word	0x20000364

08002d58 <ADC1_2_IRQHandler>:
=======
>>>>>>> f4468bfacfee563f36ab7a8748ecdd98968165c9
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d5c:	4803      	ldr	r0, [pc, #12]	@ (8002d6c <ADC1_2_IRQHandler+0x14>)
 8002d5e:	f000 fceb 	bl	8003738 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002d62:	4803      	ldr	r0, [pc, #12]	@ (8002d70 <ADC1_2_IRQHandler+0x18>)
 8002d64:	f000 fce8 	bl	8003738 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000128 	.word	0x20000128
 8002d70:	20000158 	.word	0x20000158

08002d74 <CAN1_TX_IRQHandler>:
/**
<<<<<<< HEAD
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <CAN1_TX_IRQHandler+0x10>)
 8002d7a:	f001 f97e 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200001cc 	.word	0x200001cc

08002d88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <CAN1_RX0_IRQHandler+0x10>)
 8002d8e:	f001 f974 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200001cc 	.word	0x200001cc

08002d9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002da0:	4802      	ldr	r0, [pc, #8]	@ (8002dac <CAN1_RX1_IRQHandler+0x10>)
 8002da2:	f001 f96a 	bl	800407a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200001cc 	.word	0x200001cc

08002db0 <SPI1_IRQHandler>:
=======
>>>>>>> f4468bfacfee563f36ab7a8748ecdd98968165c9
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002db4:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <SPI1_IRQHandler+0x10>)
 8002db6:	f003 fe61 	bl	8006a7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200001f4 	.word	0x200001f4

08002dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <USART1_IRQHandler+0x10>)
 8002dca:	f004 fb0b 	bl	80073e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000031c 	.word	0x2000031c

08002dd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <TIM7_IRQHandler+0x10>)
 8002dde:	f004 f8a3 	bl	8006f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200002d4 	.word	0x200002d4

08002dec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dfe:	463b      	mov	r3, r7
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e08:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <MX_TIM7_Init+0x68>)
 8002e0a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002e0c:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e12:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002e18:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e1e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e26:	480d      	ldr	r0, [pc, #52]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e28:	f004 f82f 	bl	8006e8a <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002e32:	f7ff fb71 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e3e:	463b      	mov	r3, r7
 8002e40:	4619      	mov	r1, r3
 8002e42:	4806      	ldr	r0, [pc, #24]	@ (8002e5c <MX_TIM7_Init+0x64>)
 8002e44:	f004 fa06 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002e4e:	f7ff fb63 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200002d4 	.word	0x200002d4
 8002e60:	40001400 	.word	0x40001400

08002e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x44>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_TIM_Base_MspInit+0x48>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <HAL_TIM_Base_MspInit+0x48>)
 8002e7c:	f043 0320 	orr.w	r3, r3, #32
 8002e80:	61d3      	str	r3, [r2, #28]
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_TIM_Base_MspInit+0x48>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	2037      	movs	r0, #55	@ 0x37
 8002e94:	f001 fbf5 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e98:	2037      	movs	r0, #55	@ 0x37
 8002e9a:	f001 fc0e 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40001400 	.word	0x40001400
 8002eac:	40021000 	.word	0x40021000

08002eb0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <MX_USART1_UART_Init+0x50>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee8:	f004 fa2c 	bl	8007344 <HAL_UART_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ef2:	f7ff fb11 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000031c 	.word	0x2000031c
 8002f00:	40013800 	.word	0x40013800

08002f04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a47      	ldr	r2, [pc, #284]	@ (800303c <HAL_UART_MspInit+0x138>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 8086 	bne.w	8003032 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f26:	4b46      	ldr	r3, [pc, #280]	@ (8003040 <HAL_UART_MspInit+0x13c>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4a45      	ldr	r2, [pc, #276]	@ (8003040 <HAL_UART_MspInit+0x13c>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f30:	6193      	str	r3, [r2, #24]
 8002f32:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_UART_MspInit+0x13c>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	4b40      	ldr	r3, [pc, #256]	@ (8003040 <HAL_UART_MspInit+0x13c>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4a3f      	ldr	r2, [pc, #252]	@ (8003040 <HAL_UART_MspInit+0x13c>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6193      	str	r3, [r2, #24]
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003040 <HAL_UART_MspInit+0x13c>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4836      	ldr	r0, [pc, #216]	@ (8003044 <HAL_UART_MspInit+0x140>)
 8002f6c:	f001 ffb6 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	482f      	ldr	r0, [pc, #188]	@ (8003044 <HAL_UART_MspInit+0x140>)
 8002f86:	f001 ffa9 	bl	8004edc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800304c <HAL_UART_MspInit+0x148>)
 8002f8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f96:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa2:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002fae:	4b26      	ldr	r3, [pc, #152]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb4:	4b24      	ldr	r3, [pc, #144]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fba:	4823      	ldr	r0, [pc, #140]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002fbc:	f001 fb98 	bl	80046f0 <HAL_DMA_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002fc6:	f7ff faa7 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002fce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_UART_MspInit+0x144>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003054 <HAL_UART_MspInit+0x150>)
 8002fda:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002fde:	2210      	movs	r2, #16
 8002fe0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fee:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff4:	4b16      	ldr	r3, [pc, #88]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003006:	4812      	ldr	r0, [pc, #72]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 8003008:	f001 fb72 	bl	80046f0 <HAL_DMA_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003012:	f7ff fa81 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
 800301c:	4a0c      	ldr	r2, [pc, #48]	@ (8003050 <HAL_UART_MspInit+0x14c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	2025      	movs	r0, #37	@ 0x25
 8003028:	f001 fb2b 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800302c:	2025      	movs	r0, #37	@ 0x25
 800302e:	f001 fb44 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003032:	bf00      	nop
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40013800 	.word	0x40013800
 8003040:	40021000 	.word	0x40021000
 8003044:	40010800 	.word	0x40010800
 8003048:	20000364 	.word	0x20000364
 800304c:	40020058 	.word	0x40020058
 8003050:	200003a8 	.word	0x200003a8
 8003054:	40020044 	.word	0x40020044

08003058 <Reset_Handler>:
 8003058:	f7ff fec8 	bl	8002dec <SystemInit>
 800305c:	480b      	ldr	r0, [pc, #44]	@ (800308c <LoopFillZerobss+0xe>)
 800305e:	490c      	ldr	r1, [pc, #48]	@ (8003090 <LoopFillZerobss+0x12>)
 8003060:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <LoopFillZerobss+0x16>)
 8003062:	2300      	movs	r3, #0
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:
 8003066:	58d4      	ldr	r4, [r2, r3]
 8003068:	50c4      	str	r4, [r0, r3]
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:
 800306c:	18c4      	adds	r4, r0, r3
 800306e:	428c      	cmp	r4, r1
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
 8003072:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <LoopFillZerobss+0x1a>)
 8003074:	4c09      	ldr	r4, [pc, #36]	@ (800309c <LoopFillZerobss+0x1e>)
 8003076:	2300      	movs	r3, #0
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:
 800307e:	42a2      	cmp	r2, r4
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>
 8003082:	f004 fe9f 	bl	8007dc4 <__libc_init_array>
 8003086:	f7ff f849 	bl	800211c <main>
 800308a:	4770      	bx	lr
 800308c:	20000000 	.word	0x20000000
 8003090:	200000c8 	.word	0x200000c8
 8003094:	0800868c 	.word	0x0800868c
 8003098:	200000c8 	.word	0x200000c8
 800309c:	20000528 	.word	0x20000528

080030a0 <CAN1_SCE_IRQHandler>:
 80030a0:	e7fe      	b.n	80030a0 <CAN1_SCE_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_Init+0x28>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <HAL_Init+0x28>)
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f001 fad9 	bl	800466c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f000 f808 	bl	80030d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c0:	f7ff fdba 	bl	8002c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000

080030d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d8:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_InitTick+0x54>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x58>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 faf1 	bl	80046d6 <HAL_SYSTICK_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00e      	b.n	800311c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d80a      	bhi.n	800311a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003104:	2200      	movs	r2, #0
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f001 fab9 	bl	8004682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003110:	4a06      	ldr	r2, [pc, #24]	@ (800312c <HAL_InitTick+0x5c>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2000006c 	.word	0x2000006c
 8003128:	20000074 	.word	0x20000074
 800312c:	20000070 	.word	0x20000070

08003130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_IncTick+0x1c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_IncTick+0x20>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a03      	ldr	r2, [pc, #12]	@ (8003150 <HAL_IncTick+0x20>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	20000074 	.word	0x20000074
 8003150:	200003ec 	.word	0x200003ec

08003154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b02      	ldr	r3, [pc, #8]	@ (8003164 <HAL_GetTick+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	200003ec 	.word	0x200003ec

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff fff0 	bl	8003154 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003182:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <HAL_Delay+0x44>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800318e:	bf00      	nop
 8003190:	f7ff ffe0 	bl	8003154 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000074 	.word	0x20000074

080031b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0be      	b.n	8003350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fc9e 	bl	8001b30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fcc3 	bl	8003b80 <ADC_ConversionStop_Disable>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 8099 	bne.w	800333e <HAL_ADC_Init+0x18e>
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8095 	bne.w	800333e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	f043 0202 	orr.w	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7b1b      	ldrb	r3, [r3, #12]
 8003236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4313      	orrs	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003248:	d003      	beq.n	8003252 <HAL_ADC_Init+0xa2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_ADC_Init+0xa8>
 8003252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003256:	e000      	b.n	800325a <HAL_ADC_Init+0xaa>
 8003258:	2300      	movs	r3, #0
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7d1b      	ldrb	r3, [r3, #20]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d119      	bne.n	800329c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7b1b      	ldrb	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	3b01      	subs	r3, #1
 8003276:	035a      	lsls	r2, r3, #13
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e00b      	b.n	800329c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b28      	ldr	r3, [pc, #160]	@ (8003358 <HAL_ADC_Init+0x1a8>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032cc:	d003      	beq.n	80032d6 <HAL_ADC_Init+0x126>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d104      	bne.n	80032e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	3b01      	subs	r3, #1
 80032dc:	051b      	lsls	r3, r3, #20
 80032de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	4b18      	ldr	r3, [pc, #96]	@ (800335c <HAL_ADC_Init+0x1ac>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d10b      	bne.n	800331c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800331a:	e018      	b.n	800334e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	f023 0312 	bic.w	r3, r3, #18
 8003324:	f043 0210 	orr.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800333c:	e007      	b.n	800334e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	f043 0210 	orr.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	ffe1f7fd 	.word	0xffe1f7fd
 800335c:	ff1f0efe 	.word	0xff1f0efe

08003360 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_ADC_Start+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e098      	b.n	80034ac <HAL_ADC_Start+0x14c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fba2 	bl	8003acc <ADC_Enable>
 8003388:	4603      	mov	r3, r0
 800338a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 8087 	bne.w	80034a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a41      	ldr	r2, [pc, #260]	@ (80034b4 <HAL_ADC_Start+0x154>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d105      	bne.n	80033be <HAL_ADC_Start+0x5e>
 80033b2:	4b41      	ldr	r3, [pc, #260]	@ (80034b8 <HAL_ADC_Start+0x158>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d026      	beq.n	8003426 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033e8:	e01d      	b.n	8003426 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2f      	ldr	r2, [pc, #188]	@ (80034b8 <HAL_ADC_Start+0x158>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_ADC_Start+0xaa>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2b      	ldr	r2, [pc, #172]	@ (80034b4 <HAL_ADC_Start+0x154>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d10d      	bne.n	8003426 <HAL_ADC_Start+0xc6>
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_ADC_Start+0x158>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800341e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f023 0206 	bic.w	r2, r3, #6
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800343e:	e002      	b.n	8003446 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0202 	mvn.w	r2, #2
 8003456:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003462:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003466:	d113      	bne.n	8003490 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800346c:	4a11      	ldr	r2, [pc, #68]	@ (80034b4 <HAL_ADC_Start+0x154>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d105      	bne.n	800347e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_ADC_Start+0x158>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	e00c      	b.n	80034aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e003      	b.n	80034aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40012800 	.word	0x40012800
 80034b8:	40012400 	.word	0x40012400

080034bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_Stop+0x1a>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e01a      	b.n	800350c <HAL_ADC_Stop+0x50>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fb4e 	bl	8003b80 <ADC_ConversionStop_Disable>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800352a:	f7ff fe13 	bl	8003154 <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0d3      	b.n	80036fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d131      	bne.n	80035c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	d12a      	bne.n	80035c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003572:	e021      	b.n	80035b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d01d      	beq.n	80035b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_ADC_PollForConversion+0x7e>
 8003582:	f7ff fde7 	bl	8003154 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d212      	bcs.n	80035b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0a2      	b.n	80036fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0d6      	beq.n	8003574 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80035c6:	e070      	b.n	80036aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80035c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003708 <HAL_ADC_PollForConversion+0x1f4>)
 80035ca:	681c      	ldr	r4, [r3, #0]
 80035cc:	2002      	movs	r0, #2
 80035ce:	f002 fc79 	bl	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq>
 80035d2:	4603      	mov	r3, r0
 80035d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6919      	ldr	r1, [r3, #16]
 80035de:	4b4b      	ldr	r3, [pc, #300]	@ (800370c <HAL_ADC_PollForConversion+0x1f8>)
 80035e0:	400b      	ands	r3, r1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_ADC_PollForConversion+0x104>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68d9      	ldr	r1, [r3, #12]
 80035ec:	4b48      	ldr	r3, [pc, #288]	@ (8003710 <HAL_ADC_PollForConversion+0x1fc>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <HAL_ADC_PollForConversion+0x104>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	4b46      	ldr	r3, [pc, #280]	@ (8003714 <HAL_ADC_PollForConversion+0x200>)
 80035fc:	400b      	ands	r3, r1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <HAL_ADC_PollForConversion+0x100>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68d9      	ldr	r1, [r3, #12]
 8003608:	4b43      	ldr	r3, [pc, #268]	@ (8003718 <HAL_ADC_PollForConversion+0x204>)
 800360a:	400b      	ands	r3, r1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_PollForConversion+0x100>
 8003610:	2314      	movs	r3, #20
 8003612:	e020      	b.n	8003656 <HAL_ADC_PollForConversion+0x142>
 8003614:	2329      	movs	r3, #41	@ 0x29
 8003616:	e01e      	b.n	8003656 <HAL_ADC_PollForConversion+0x142>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_ADC_PollForConversion+0x200>)
 8003620:	400b      	ands	r3, r1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_ADC_PollForConversion+0x120>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68d9      	ldr	r1, [r3, #12]
 800362c:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <HAL_ADC_PollForConversion+0x204>)
 800362e:	400b      	ands	r3, r1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <HAL_ADC_PollForConversion+0x13c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6919      	ldr	r1, [r3, #16]
 800363a:	4b38      	ldr	r3, [pc, #224]	@ (800371c <HAL_ADC_PollForConversion+0x208>)
 800363c:	400b      	ands	r3, r1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <HAL_ADC_PollForConversion+0x140>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68d9      	ldr	r1, [r3, #12]
 8003648:	4b34      	ldr	r3, [pc, #208]	@ (800371c <HAL_ADC_PollForConversion+0x208>)
 800364a:	400b      	ands	r3, r1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_PollForConversion+0x140>
 8003650:	2354      	movs	r3, #84	@ 0x54
 8003652:	e000      	b.n	8003656 <HAL_ADC_PollForConversion+0x142>
 8003654:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800365c:	e021      	b.n	80036a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d01a      	beq.n	800369c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_ADC_PollForConversion+0x168>
 800366c:	f7ff fd72 	bl	8003154 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d20f      	bcs.n	800369c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	429a      	cmp	r2, r3
 8003682:	d90b      	bls.n	800369c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e030      	b.n	80036fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d8d9      	bhi.n	800365e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0212 	mvn.w	r2, #18
 80036b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80036ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80036ce:	d115      	bne.n	80036fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	2000006c 	.word	0x2000006c
 800370c:	24924924 	.word	0x24924924
 8003710:	00924924 	.word	0x00924924
 8003714:	12492492 	.word	0x12492492
 8003718:	00492492 	.word	0x00492492
 800371c:	00249249 	.word	0x00249249

08003720 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03e      	beq.n	80037d8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d039      	beq.n	80037d8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003786:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800378a:	d11d      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003790:	2b00      	cmp	r3, #0
 8003792:	d119      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0220 	bic.w	r2, r2, #32
 80037a2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f874 	bl	80038b6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f06f 0212 	mvn.w	r2, #18
 80037d6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04d      	beq.n	800387e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d048      	beq.n	800387e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800380e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003812:	d012      	beq.n	800383a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800381e:	2b00      	cmp	r3, #0
 8003820:	d125      	bne.n	800386e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800382c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003830:	d11d      	bne.n	800386e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003848:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9c7 	bl	8003c02 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 020c 	mvn.w	r2, #12
 800387c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f812 	bl	80038c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0201 	mvn.w	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x20>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0dc      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x1da>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b06      	cmp	r3, #6
 800390a:	d81c      	bhi.n	8003946 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b05      	subs	r3, #5
 800391e:	221f      	movs	r2, #31
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	4019      	ands	r1, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	3b05      	subs	r3, #5
 8003938:	fa00 f203 	lsl.w	r2, r0, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34
 8003944:	e03c      	b.n	80039c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d81c      	bhi.n	8003988 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	3b23      	subs	r3, #35	@ 0x23
 8003960:	221f      	movs	r2, #31
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	4019      	ands	r1, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b23      	subs	r3, #35	@ 0x23
 800397a:	fa00 f203 	lsl.w	r2, r0, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
 8003986:	e01b      	b.n	80039c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	3b41      	subs	r3, #65	@ 0x41
 800399a:	221f      	movs	r2, #31
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	4019      	ands	r1, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	3b41      	subs	r3, #65	@ 0x41
 80039b4:	fa00 f203 	lsl.w	r2, r0, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d91c      	bls.n	8003a02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	3b1e      	subs	r3, #30
 80039da:	2207      	movs	r2, #7
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4019      	ands	r1, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6898      	ldr	r0, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	3b1e      	subs	r3, #30
 80039f4:	fa00 f203 	lsl.w	r2, r0, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	e019      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6919      	ldr	r1, [r3, #16]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	2207      	movs	r2, #7
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	4019      	ands	r1, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6898      	ldr	r0, [r3, #8]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d003      	beq.n	8003a46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a42:	2b11      	cmp	r3, #17
 8003a44:	d132      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d125      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d126      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003a6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d11a      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a13      	ldr	r2, [pc, #76]	@ (8003ac8 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	0c9a      	lsrs	r2, r3, #18
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a8c:	e002      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f9      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x1b2>
 8003a9a:	e007      	b.n	8003aac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40012400 	.word	0x40012400
 8003ac4:	2000006c 	.word	0x2000006c
 8003ac8:	431bde83 	.word	0x431bde83

08003acc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d040      	beq.n	8003b6c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003afa:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <ADC_Enable+0xac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1f      	ldr	r2, [pc, #124]	@ (8003b7c <ADC_Enable+0xb0>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	0c9b      	lsrs	r3, r3, #18
 8003b06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b08:	e002      	b.n	8003b10 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f9      	bne.n	8003b0a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b16:	f7ff fb1d 	bl	8003154 <HAL_GetTick>
 8003b1a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b1c:	e01f      	b.n	8003b5e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b1e:	f7ff fb19 	bl	8003154 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d918      	bls.n	8003b5e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d011      	beq.n	8003b5e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e007      	b.n	8003b6e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d1d8      	bne.n	8003b1e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2000006c 	.word	0x2000006c
 8003b7c:	431bde83 	.word	0x431bde83

08003b80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d12e      	bne.n	8003bf8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003baa:	f7ff fad3 	bl	8003154 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bb0:	e01b      	b.n	8003bea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bb2:	f7ff facf 	bl	8003154 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d914      	bls.n	8003bea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10d      	bne.n	8003bea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	f043 0210 	orr.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	f043 0201 	orr.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d0dc      	beq.n	8003bb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0ed      	b.n	8003e02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe f856 	bl	8001ce4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c48:	f7ff fa84 	bl	8003154 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c4e:	e012      	b.n	8003c76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c50:	f7ff fa80 	bl	8003154 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b0a      	cmp	r3, #10
 8003c5c:	d90b      	bls.n	8003c76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0c5      	b.n	8003e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0e5      	beq.n	8003c50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0202 	bic.w	r2, r2, #2
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c94:	f7ff fa5e 	bl	8003154 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c9a:	e012      	b.n	8003cc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c9c:	f7ff fa5a 	bl	8003154 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b0a      	cmp	r3, #10
 8003ca8:	d90b      	bls.n	8003cc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2205      	movs	r2, #5
 8003cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e09f      	b.n	8003e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7e1b      	ldrb	r3, [r3, #24]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d108      	bne.n	8003cea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e007      	b.n	8003cfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7e5b      	ldrb	r3, [r3, #25]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e007      	b.n	8003d24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7e9b      	ldrb	r3, [r3, #26]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d108      	bne.n	8003d3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0220 	orr.w	r2, r2, #32
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e007      	b.n	8003d4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0220 	bic.w	r2, r2, #32
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7edb      	ldrb	r3, [r3, #27]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d108      	bne.n	8003d68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0210 	bic.w	r2, r2, #16
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e007      	b.n	8003d78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0210 	orr.w	r2, r2, #16
 8003d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7f1b      	ldrb	r3, [r3, #28]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d108      	bne.n	8003d92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e007      	b.n	8003da2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0208 	bic.w	r2, r2, #8
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7f5b      	ldrb	r3, [r3, #29]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d108      	bne.n	8003dbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0204 	orr.w	r2, r2, #4
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	ea42 0103 	orr.w	r1, r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	1e5a      	subs	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d12e      	bne.n	8003e7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e36:	f7ff f98d 	bl	8003154 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e3c:	e012      	b.n	8003e64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e3e:	f7ff f989 	bl	8003154 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b0a      	cmp	r3, #10
 8003e4a:	d90b      	bls.n	8003e64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e012      	b.n	8003e8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e5      	bne.n	8003e3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e006      	b.n	8003e8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b089      	sub	sp, #36	@ 0x24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eb0:	7ffb      	ldrb	r3, [r7, #31]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d003      	beq.n	8003ebe <HAL_CAN_AddTxMessage+0x2c>
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f040 80ad 	bne.w	8004018 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8095 	beq.w	8004008 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	0e1b      	lsrs	r3, r3, #24
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	409a      	lsls	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	6809      	ldr	r1, [r1, #0]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3318      	adds	r3, #24
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	440b      	add	r3, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e00f      	b.n	8003f36 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	440b      	add	r3, r1
 8003f34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3318      	adds	r3, #24
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	440b      	add	r3, r1
 8003f46:	3304      	adds	r3, #4
 8003f48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	7d1b      	ldrb	r3, [r3, #20]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d111      	bne.n	8003f76 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3318      	adds	r3, #24
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3304      	adds	r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	6811      	ldr	r1, [r2, #0]
 8003f66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	440b      	add	r3, r1
 8003f72:	3304      	adds	r3, #4
 8003f74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3307      	adds	r3, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	061a      	lsls	r2, r3, #24
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3306      	adds	r3, #6
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3305      	adds	r3, #5
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	4313      	orrs	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	3204      	adds	r2, #4
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	4610      	mov	r0, r2
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6811      	ldr	r1, [r2, #0]
 8003f9e:	ea43 0200 	orr.w	r2, r3, r0
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003fac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	061a      	lsls	r2, r3, #24
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	4610      	mov	r0, r2
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	6811      	ldr	r1, [r2, #0]
 8003fd4:	ea43 0200 	orr.w	r2, r3, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	440b      	add	r3, r1
 8003fde:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003fe2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3318      	adds	r3, #24
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	4413      	add	r3, r2
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6811      	ldr	r1, [r2, #0]
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3318      	adds	r3, #24
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	440b      	add	r3, r1
 8004002:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e00e      	b.n	8004026 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e006      	b.n	8004026 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3724      	adds	r7, #36	@ 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d002      	beq.n	800404e <HAL_CAN_ActivateNotification+0x1e>
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d109      	bne.n	8004062 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e006      	b.n	8004070 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08a      	sub	sp, #40	@ 0x28
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d07c      	beq.n	80041ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d023      	beq.n	8004112 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2201      	movs	r2, #1
 80040d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f983 	bl	80043e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80040e2:	e016      	b.n	8004112 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f6:	e00c      	b.n	8004112 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	e002      	b.n	8004112 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f986 	bl	800441e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d024      	beq.n	8004166 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004124:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f962 	bl	80043fa <HAL_CAN_TxMailbox1CompleteCallback>
 8004136:	e016      	b.n	8004166 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	e00c      	b.n	8004166 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
 800415e:	e002      	b.n	8004166 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f965 	bl	8004430 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d024      	beq.n	80041ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004178:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f941 	bl	800440c <HAL_CAN_TxMailbox2CompleteCallback>
 800418a:	e016      	b.n	80041ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
 800419e:	e00c      	b.n	80041ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	e002      	b.n	80041ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f944 	bl	8004442 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2208      	movs	r2, #8
 80041f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f933 	bl	8004466 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f91b 	bl	8004454 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2210      	movs	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2208      	movs	r2, #8
 800425c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f913 	bl	800448a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8fb 	bl	8004478 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2210      	movs	r2, #16
 800429c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8fc 	bl	800449c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2208      	movs	r2, #8
 80042be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8f4 	bl	80044ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d07b      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d072      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004334:	2b00      	cmp	r3, #0
 8004336:	d043      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800433e:	2b00      	cmp	r3, #0
 8004340:	d03e      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d02b      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x32a>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d82e      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d022      	beq.n	800439a <HAL_CAN_IRQHandler+0x320>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d82a      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d019      	beq.n	8004390 <HAL_CAN_IRQHandler+0x316>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d826      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d010      	beq.n	8004386 <HAL_CAN_IRQHandler+0x30c>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d822      	bhi.n	80043ae <HAL_CAN_IRQHandler+0x334>
 8004368:	2b10      	cmp	r3, #16
 800436a:	d002      	beq.n	8004372 <HAL_CAN_IRQHandler+0x2f8>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d005      	beq.n	800437c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004370:	e01d      	b.n	80043ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	f043 0308 	orr.w	r3, r3, #8
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800437a:	e019      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	f043 0310 	orr.w	r3, r3, #16
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004384:	e014      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800438e:	e00f      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004398:	e00a      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043a2:	e005      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043ac:	e000      	b.n	80043b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80043ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80043be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2204      	movs	r2, #4
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f870 	bl	80044c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043e0:	bf00      	nop
 80043e2:	3728      	adds	r7, #40	@ 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
	...

080044d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	@ (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <__NVIC_GetPriorityGrouping+0x18>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	f003 0307 	and.w	r3, r3, #7
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0b      	blt.n	8004562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	f003 021f 	and.w	r2, r3, #31
 8004550:	4906      	ldr	r1, [pc, #24]	@ (800456c <__NVIC_EnableIRQ+0x34>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2001      	movs	r0, #1
 800455a:	fa00 f202 	lsl.w	r2, r0, r2
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e100 	.word	0xe000e100

08004570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db0a      	blt.n	800459a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	490c      	ldr	r1, [pc, #48]	@ (80045bc <__NVIC_SetPriority+0x4c>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	0112      	lsls	r2, r2, #4
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	440b      	add	r3, r1
 8004594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004598:	e00a      	b.n	80045b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	4908      	ldr	r1, [pc, #32]	@ (80045c0 <__NVIC_SetPriority+0x50>)
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	3b04      	subs	r3, #4
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	440b      	add	r3, r1
 80045ae:	761a      	strb	r2, [r3, #24]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e100 	.word	0xe000e100
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	@ 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f1c3 0307 	rsb	r3, r3, #7
 80045de:	2b04      	cmp	r3, #4
 80045e0:	bf28      	it	cs
 80045e2:	2304      	movcs	r3, #4
 80045e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d902      	bls.n	80045f4 <NVIC_EncodePriority+0x30>
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3b03      	subs	r3, #3
 80045f2:	e000      	b.n	80045f6 <NVIC_EncodePriority+0x32>
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43da      	mvns	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	401a      	ands	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800460c:	f04f 31ff 	mov.w	r1, #4294967295
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	43d9      	mvns	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	4313      	orrs	r3, r2
         );
}
 800461e:	4618      	mov	r0, r3
 8004620:	3724      	adds	r7, #36	@ 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004638:	d301      	bcc.n	800463e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800463a:	2301      	movs	r3, #1
 800463c:	e00f      	b.n	800465e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <SysTick_Config+0x40>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004646:	210f      	movs	r1, #15
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	f7ff ff90 	bl	8004570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <SysTick_Config+0x40>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004656:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <SysTick_Config+0x40>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	e000e010 	.word	0xe000e010

0800466c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff2d 	bl	80044d4 <__NVIC_SetPriorityGrouping>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004694:	f7ff ff42 	bl	800451c <__NVIC_GetPriorityGrouping>
 8004698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f7ff ff90 	bl	80045c4 <NVIC_EncodePriority>
 80046a4:	4602      	mov	r2, r0
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff5f 	bl	8004570 <__NVIC_SetPriority>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff35 	bl	8004538 <__NVIC_EnableIRQ>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ffa2 	bl	8004628 <SysTick_Config>
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e059      	b.n	80047ba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	4b2d      	ldr	r3, [pc, #180]	@ (80047c4 <HAL_DMA_Init+0xd4>)
 800470e:	429a      	cmp	r2, r3
 8004710:	d80f      	bhi.n	8004732 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_DMA_Init+0xd8>)
 800471a:	4413      	add	r3, r2
 800471c:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <HAL_DMA_Init+0xdc>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	009a      	lsls	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <HAL_DMA_Init+0xe0>)
 800472e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004730:	e00e      	b.n	8004750 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	4b26      	ldr	r3, [pc, #152]	@ (80047d4 <HAL_DMA_Init+0xe4>)
 800473a:	4413      	add	r3, r2
 800473c:	4a23      	ldr	r2, [pc, #140]	@ (80047cc <HAL_DMA_Init+0xdc>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	009a      	lsls	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a22      	ldr	r2, [pc, #136]	@ (80047d8 <HAL_DMA_Init+0xe8>)
 800474e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004766:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800476a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	40020407 	.word	0x40020407
 80047c8:	bffdfff8 	.word	0xbffdfff8
 80047cc:	cccccccd 	.word	0xcccccccd
 80047d0:	40020000 	.word	0x40020000
 80047d4:	bffdfbf8 	.word	0xbffdfbf8
 80047d8:	40020400 	.word	0x40020400

080047dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d008      	beq.n	8004806 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2204      	movs	r2, #4
 80047f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e020      	b.n	8004848 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 020e 	bic.w	r2, r2, #14
 8004814:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482e:	2101      	movs	r1, #1
 8004830:	fa01 f202 	lsl.w	r2, r1, r2
 8004834:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
	...

08004854 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d005      	beq.n	8004878 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2204      	movs	r2, #4
 8004870:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e0d6      	b.n	8004a26 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 020e 	bic.w	r2, r2, #14
 8004886:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b64      	ldr	r3, [pc, #400]	@ (8004a30 <HAL_DMA_Abort_IT+0x1dc>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d958      	bls.n	8004956 <HAL_DMA_Abort_IT+0x102>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a62      	ldr	r2, [pc, #392]	@ (8004a34 <HAL_DMA_Abort_IT+0x1e0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04f      	beq.n	800494e <HAL_DMA_Abort_IT+0xfa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a61      	ldr	r2, [pc, #388]	@ (8004a38 <HAL_DMA_Abort_IT+0x1e4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d048      	beq.n	800494a <HAL_DMA_Abort_IT+0xf6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5f      	ldr	r2, [pc, #380]	@ (8004a3c <HAL_DMA_Abort_IT+0x1e8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d040      	beq.n	8004944 <HAL_DMA_Abort_IT+0xf0>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a40 <HAL_DMA_Abort_IT+0x1ec>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d038      	beq.n	800493e <HAL_DMA_Abort_IT+0xea>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004a44 <HAL_DMA_Abort_IT+0x1f0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d030      	beq.n	8004938 <HAL_DMA_Abort_IT+0xe4>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a5b      	ldr	r2, [pc, #364]	@ (8004a48 <HAL_DMA_Abort_IT+0x1f4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d028      	beq.n	8004932 <HAL_DMA_Abort_IT+0xde>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a52      	ldr	r2, [pc, #328]	@ (8004a30 <HAL_DMA_Abort_IT+0x1dc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d020      	beq.n	800492c <HAL_DMA_Abort_IT+0xd8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a57      	ldr	r2, [pc, #348]	@ (8004a4c <HAL_DMA_Abort_IT+0x1f8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d019      	beq.n	8004928 <HAL_DMA_Abort_IT+0xd4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a55      	ldr	r2, [pc, #340]	@ (8004a50 <HAL_DMA_Abort_IT+0x1fc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d012      	beq.n	8004924 <HAL_DMA_Abort_IT+0xd0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a54      	ldr	r2, [pc, #336]	@ (8004a54 <HAL_DMA_Abort_IT+0x200>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00a      	beq.n	800491e <HAL_DMA_Abort_IT+0xca>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a52      	ldr	r2, [pc, #328]	@ (8004a58 <HAL_DMA_Abort_IT+0x204>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d102      	bne.n	8004918 <HAL_DMA_Abort_IT+0xc4>
 8004912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004916:	e01b      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 8004918:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800491c:	e018      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 800491e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004922:	e015      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 8004924:	2310      	movs	r3, #16
 8004926:	e013      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 8004928:	2301      	movs	r3, #1
 800492a:	e011      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 800492c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004930:	e00e      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 8004932:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004936:	e00b      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 8004938:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800493c:	e008      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 800493e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004942:	e005      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 8004944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004948:	e002      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 800494a:	2310      	movs	r3, #16
 800494c:	e000      	b.n	8004950 <HAL_DMA_Abort_IT+0xfc>
 800494e:	2301      	movs	r3, #1
 8004950:	4a42      	ldr	r2, [pc, #264]	@ (8004a5c <HAL_DMA_Abort_IT+0x208>)
 8004952:	6053      	str	r3, [r2, #4]
 8004954:	e057      	b.n	8004a06 <HAL_DMA_Abort_IT+0x1b2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a36      	ldr	r2, [pc, #216]	@ (8004a34 <HAL_DMA_Abort_IT+0x1e0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d04f      	beq.n	8004a00 <HAL_DMA_Abort_IT+0x1ac>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a34      	ldr	r2, [pc, #208]	@ (8004a38 <HAL_DMA_Abort_IT+0x1e4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d048      	beq.n	80049fc <HAL_DMA_Abort_IT+0x1a8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a33      	ldr	r2, [pc, #204]	@ (8004a3c <HAL_DMA_Abort_IT+0x1e8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d040      	beq.n	80049f6 <HAL_DMA_Abort_IT+0x1a2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a31      	ldr	r2, [pc, #196]	@ (8004a40 <HAL_DMA_Abort_IT+0x1ec>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d038      	beq.n	80049f0 <HAL_DMA_Abort_IT+0x19c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <HAL_DMA_Abort_IT+0x1f0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d030      	beq.n	80049ea <HAL_DMA_Abort_IT+0x196>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <HAL_DMA_Abort_IT+0x1f4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d028      	beq.n	80049e4 <HAL_DMA_Abort_IT+0x190>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <HAL_DMA_Abort_IT+0x1dc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d020      	beq.n	80049de <HAL_DMA_Abort_IT+0x18a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a4c <HAL_DMA_Abort_IT+0x1f8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d019      	beq.n	80049da <HAL_DMA_Abort_IT+0x186>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a29      	ldr	r2, [pc, #164]	@ (8004a50 <HAL_DMA_Abort_IT+0x1fc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d012      	beq.n	80049d6 <HAL_DMA_Abort_IT+0x182>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a27      	ldr	r2, [pc, #156]	@ (8004a54 <HAL_DMA_Abort_IT+0x200>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00a      	beq.n	80049d0 <HAL_DMA_Abort_IT+0x17c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a26      	ldr	r2, [pc, #152]	@ (8004a58 <HAL_DMA_Abort_IT+0x204>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d102      	bne.n	80049ca <HAL_DMA_Abort_IT+0x176>
 80049c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049c8:	e01b      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049ce:	e018      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049d4:	e015      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049d6:	2310      	movs	r3, #16
 80049d8:	e013      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049da:	2301      	movs	r3, #1
 80049dc:	e011      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049e2:	e00e      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049e8:	e00b      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049ee:	e008      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049f4:	e005      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049fa:	e002      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 80049fc:	2310      	movs	r3, #16
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_Abort_IT+0x1ae>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4a17      	ldr	r2, [pc, #92]	@ (8004a60 <HAL_DMA_Abort_IT+0x20c>)
 8004a04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
    } 
  }
  return status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40020080 	.word	0x40020080
 8004a34:	40020008 	.word	0x40020008
 8004a38:	4002001c 	.word	0x4002001c
 8004a3c:	40020030 	.word	0x40020030
 8004a40:	40020044 	.word	0x40020044
 8004a44:	40020058 	.word	0x40020058
 8004a48:	4002006c 	.word	0x4002006c
 8004a4c:	40020408 	.word	0x40020408
 8004a50:	4002041c 	.word	0x4002041c
 8004a54:	40020430 	.word	0x40020430
 8004a58:	40020444 	.word	0x40020444
 8004a5c:	40020400 	.word	0x40020400
 8004a60:	40020000 	.word	0x40020000

08004a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	2204      	movs	r2, #4
 8004a82:	409a      	lsls	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80f1 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x20c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80eb 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b5f      	ldr	r3, [pc, #380]	@ (8004c3c <HAL_DMA_IRQHandler+0x1d8>)
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d958      	bls.n	8004b76 <HAL_DMA_IRQHandler+0x112>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8004c40 <HAL_DMA_IRQHandler+0x1dc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d04f      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x10a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8004c44 <HAL_DMA_IRQHandler+0x1e0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d048      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x106>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5a      	ldr	r2, [pc, #360]	@ (8004c48 <HAL_DMA_IRQHandler+0x1e4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d040      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x100>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a59      	ldr	r2, [pc, #356]	@ (8004c4c <HAL_DMA_IRQHandler+0x1e8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d038      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xfa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a57      	ldr	r2, [pc, #348]	@ (8004c50 <HAL_DMA_IRQHandler+0x1ec>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d030      	beq.n	8004b58 <HAL_DMA_IRQHandler+0xf4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a56      	ldr	r2, [pc, #344]	@ (8004c54 <HAL_DMA_IRQHandler+0x1f0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d028      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xee>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a4d      	ldr	r2, [pc, #308]	@ (8004c3c <HAL_DMA_IRQHandler+0x1d8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d020      	beq.n	8004b4c <HAL_DMA_IRQHandler+0xe8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a52      	ldr	r2, [pc, #328]	@ (8004c58 <HAL_DMA_IRQHandler+0x1f4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d019      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xe4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a50      	ldr	r2, [pc, #320]	@ (8004c5c <HAL_DMA_IRQHandler+0x1f8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d012      	beq.n	8004b44 <HAL_DMA_IRQHandler+0xe0>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a4f      	ldr	r2, [pc, #316]	@ (8004c60 <HAL_DMA_IRQHandler+0x1fc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xda>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004c64 <HAL_DMA_IRQHandler+0x200>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d102      	bne.n	8004b38 <HAL_DMA_IRQHandler+0xd4>
 8004b32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b36:	e01b      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004b3c:	e018      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b42:	e015      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b44:	2340      	movs	r3, #64	@ 0x40
 8004b46:	e013      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	e011      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b4c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b50:	e00e      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b56:	e00b      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004b5c:	e008      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b62:	e005      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b68:	e002      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b6a:	2340      	movs	r3, #64	@ 0x40
 8004b6c:	e000      	b.n	8004b70 <HAL_DMA_IRQHandler+0x10c>
 8004b6e:	2304      	movs	r3, #4
 8004b70:	4a3d      	ldr	r2, [pc, #244]	@ (8004c68 <HAL_DMA_IRQHandler+0x204>)
 8004b72:	6053      	str	r3, [r2, #4]
 8004b74:	e057      	b.n	8004c26 <HAL_DMA_IRQHandler+0x1c2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a31      	ldr	r2, [pc, #196]	@ (8004c40 <HAL_DMA_IRQHandler+0x1dc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d04f      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x1bc>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2f      	ldr	r2, [pc, #188]	@ (8004c44 <HAL_DMA_IRQHandler+0x1e0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d048      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x1b8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004c48 <HAL_DMA_IRQHandler+0x1e4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d040      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x1b2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	@ (8004c4c <HAL_DMA_IRQHandler+0x1e8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d038      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x1ac>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c50 <HAL_DMA_IRQHandler+0x1ec>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d030      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x1a6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a29      	ldr	r2, [pc, #164]	@ (8004c54 <HAL_DMA_IRQHandler+0x1f0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d028      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x1a0>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	@ (8004c3c <HAL_DMA_IRQHandler+0x1d8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d020      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x19a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a25      	ldr	r2, [pc, #148]	@ (8004c58 <HAL_DMA_IRQHandler+0x1f4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d019      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x196>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a24      	ldr	r2, [pc, #144]	@ (8004c5c <HAL_DMA_IRQHandler+0x1f8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d012      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x192>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	@ (8004c60 <HAL_DMA_IRQHandler+0x1fc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x18c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	@ (8004c64 <HAL_DMA_IRQHandler+0x200>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d102      	bne.n	8004bea <HAL_DMA_IRQHandler+0x186>
 8004be4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004be8:	e01b      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004bea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004bee:	e018      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bf4:	e015      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004bf6:	2340      	movs	r3, #64	@ 0x40
 8004bf8:	e013      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004bfa:	2304      	movs	r3, #4
 8004bfc:	e011      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004bfe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c02:	e00e      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004c04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c08:	e00b      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004c0a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004c0e:	e008      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004c10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c14:	e005      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1a:	e002      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004c1c:	2340      	movs	r3, #64	@ 0x40
 8004c1e:	e000      	b.n	8004c22 <HAL_DMA_IRQHandler+0x1be>
 8004c20:	2304      	movs	r3, #4
 8004c22:	4a12      	ldr	r2, [pc, #72]	@ (8004c6c <HAL_DMA_IRQHandler+0x208>)
 8004c24:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8136 	beq.w	8004e9c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c38:	e130      	b.n	8004e9c <HAL_DMA_IRQHandler+0x438>
 8004c3a:	bf00      	nop
 8004c3c:	40020080 	.word	0x40020080
 8004c40:	40020008 	.word	0x40020008
 8004c44:	4002001c 	.word	0x4002001c
 8004c48:	40020030 	.word	0x40020030
 8004c4c:	40020044 	.word	0x40020044
 8004c50:	40020058 	.word	0x40020058
 8004c54:	4002006c 	.word	0x4002006c
 8004c58:	40020408 	.word	0x40020408
 8004c5c:	4002041c 	.word	0x4002041c
 8004c60:	40020430 	.word	0x40020430
 8004c64:	40020444 	.word	0x40020444
 8004c68:	40020400 	.word	0x40020400
 8004c6c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	2202      	movs	r2, #2
 8004c76:	409a      	lsls	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80dd 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x3d8>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80d7 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 020a 	bic.w	r2, r2, #10
 8004caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <HAL_DMA_IRQHandler+0x444>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d958      	bls.n	8004d72 <HAL_DMA_IRQHandler+0x30e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a79      	ldr	r2, [pc, #484]	@ (8004eac <HAL_DMA_IRQHandler+0x448>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d04f      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x306>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a78      	ldr	r2, [pc, #480]	@ (8004eb0 <HAL_DMA_IRQHandler+0x44c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d048      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x302>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a76      	ldr	r2, [pc, #472]	@ (8004eb4 <HAL_DMA_IRQHandler+0x450>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d040      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2fc>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a75      	ldr	r2, [pc, #468]	@ (8004eb8 <HAL_DMA_IRQHandler+0x454>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d038      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2f6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a73      	ldr	r2, [pc, #460]	@ (8004ebc <HAL_DMA_IRQHandler+0x458>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d030      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x2f0>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a72      	ldr	r2, [pc, #456]	@ (8004ec0 <HAL_DMA_IRQHandler+0x45c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d028      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x2ea>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a69      	ldr	r2, [pc, #420]	@ (8004ea8 <HAL_DMA_IRQHandler+0x444>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d020      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2e4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec4 <HAL_DMA_IRQHandler+0x460>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d019      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x2e0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a6c      	ldr	r2, [pc, #432]	@ (8004ec8 <HAL_DMA_IRQHandler+0x464>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d012      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x2dc>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8004ecc <HAL_DMA_IRQHandler+0x468>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00a      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x2d6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a69      	ldr	r2, [pc, #420]	@ (8004ed0 <HAL_DMA_IRQHandler+0x46c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d102      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x2d0>
 8004d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d32:	e01b      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d38:	e018      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d3e:	e015      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d40:	2320      	movs	r3, #32
 8004d42:	e013      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e011      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d4c:	e00e      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d4e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d52:	e00b      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d58:	e008      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d5e:	e005      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d64:	e002      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d66:	2320      	movs	r3, #32
 8004d68:	e000      	b.n	8004d6c <HAL_DMA_IRQHandler+0x308>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	4a59      	ldr	r2, [pc, #356]	@ (8004ed4 <HAL_DMA_IRQHandler+0x470>)
 8004d6e:	6053      	str	r3, [r2, #4]
 8004d70:	e057      	b.n	8004e22 <HAL_DMA_IRQHandler+0x3be>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4d      	ldr	r2, [pc, #308]	@ (8004eac <HAL_DMA_IRQHandler+0x448>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04f      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x3b8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <HAL_DMA_IRQHandler+0x44c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d048      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x3b4>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <HAL_DMA_IRQHandler+0x450>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x3ae>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a48      	ldr	r2, [pc, #288]	@ (8004eb8 <HAL_DMA_IRQHandler+0x454>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d038      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x3a8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	@ (8004ebc <HAL_DMA_IRQHandler+0x458>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d030      	beq.n	8004e06 <HAL_DMA_IRQHandler+0x3a2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a45      	ldr	r2, [pc, #276]	@ (8004ec0 <HAL_DMA_IRQHandler+0x45c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d028      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x39c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea8 <HAL_DMA_IRQHandler+0x444>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d020      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x396>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a41      	ldr	r2, [pc, #260]	@ (8004ec4 <HAL_DMA_IRQHandler+0x460>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d019      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x392>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a40      	ldr	r2, [pc, #256]	@ (8004ec8 <HAL_DMA_IRQHandler+0x464>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d012      	beq.n	8004df2 <HAL_DMA_IRQHandler+0x38e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8004ecc <HAL_DMA_IRQHandler+0x468>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00a      	beq.n	8004dec <HAL_DMA_IRQHandler+0x388>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed0 <HAL_DMA_IRQHandler+0x46c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d102      	bne.n	8004de6 <HAL_DMA_IRQHandler+0x382>
 8004de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004de4:	e01b      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004de6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dea:	e018      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004df0:	e015      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004df2:	2320      	movs	r3, #32
 8004df4:	e013      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e011      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dfe:	e00e      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004e00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e04:	e00b      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004e06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e0a:	e008      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e10:	e005      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e16:	e002      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004e18:	2320      	movs	r3, #32
 8004e1a:	e000      	b.n	8004e1e <HAL_DMA_IRQHandler+0x3ba>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed8 <HAL_DMA_IRQHandler+0x474>)
 8004e20:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d034      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e3a:	e02f      	b.n	8004e9c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e40:	2208      	movs	r2, #8
 8004e42:	409a      	lsls	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d028      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x43a>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d023      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 020e 	bic.w	r2, r2, #14
 8004e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f202 	lsl.w	r2, r1, r2
 8004e74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
    }
  }
  return;
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
}
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40020080 	.word	0x40020080
 8004eac:	40020008 	.word	0x40020008
 8004eb0:	4002001c 	.word	0x4002001c
 8004eb4:	40020030 	.word	0x40020030
 8004eb8:	40020044 	.word	0x40020044
 8004ebc:	40020058 	.word	0x40020058
 8004ec0:	4002006c 	.word	0x4002006c
 8004ec4:	40020408 	.word	0x40020408
 8004ec8:	4002041c 	.word	0x4002041c
 8004ecc:	40020430 	.word	0x40020430
 8004ed0:	40020444 	.word	0x40020444
 8004ed4:	40020400 	.word	0x40020400
 8004ed8:	40020000 	.word	0x40020000

08004edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b08b      	sub	sp, #44	@ 0x2c
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eee:	e169      	b.n	80051c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	f040 8158 	bne.w	80051be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a9a      	ldr	r2, [pc, #616]	@ (800517c <HAL_GPIO_Init+0x2a0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d05e      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f18:	4a98      	ldr	r2, [pc, #608]	@ (800517c <HAL_GPIO_Init+0x2a0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d875      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f1e:	4a98      	ldr	r2, [pc, #608]	@ (8005180 <HAL_GPIO_Init+0x2a4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d058      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f24:	4a96      	ldr	r2, [pc, #600]	@ (8005180 <HAL_GPIO_Init+0x2a4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d86f      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f2a:	4a96      	ldr	r2, [pc, #600]	@ (8005184 <HAL_GPIO_Init+0x2a8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d052      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f30:	4a94      	ldr	r2, [pc, #592]	@ (8005184 <HAL_GPIO_Init+0x2a8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d869      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f36:	4a94      	ldr	r2, [pc, #592]	@ (8005188 <HAL_GPIO_Init+0x2ac>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d04c      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f3c:	4a92      	ldr	r2, [pc, #584]	@ (8005188 <HAL_GPIO_Init+0x2ac>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d863      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f42:	4a92      	ldr	r2, [pc, #584]	@ (800518c <HAL_GPIO_Init+0x2b0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d046      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
 8004f48:	4a90      	ldr	r2, [pc, #576]	@ (800518c <HAL_GPIO_Init+0x2b0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d85d      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	d82a      	bhi.n	8004fa8 <HAL_GPIO_Init+0xcc>
 8004f52:	2b12      	cmp	r3, #18
 8004f54:	d859      	bhi.n	800500a <HAL_GPIO_Init+0x12e>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <HAL_GPIO_Init+0x80>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004fd7 	.word	0x08004fd7
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fc3 	.word	0x08004fc3
 8004f68:	08005005 	.word	0x08005005
 8004f6c:	0800500b 	.word	0x0800500b
 8004f70:	0800500b 	.word	0x0800500b
 8004f74:	0800500b 	.word	0x0800500b
 8004f78:	0800500b 	.word	0x0800500b
 8004f7c:	0800500b 	.word	0x0800500b
 8004f80:	0800500b 	.word	0x0800500b
 8004f84:	0800500b 	.word	0x0800500b
 8004f88:	0800500b 	.word	0x0800500b
 8004f8c:	0800500b 	.word	0x0800500b
 8004f90:	0800500b 	.word	0x0800500b
 8004f94:	0800500b 	.word	0x0800500b
 8004f98:	0800500b 	.word	0x0800500b
 8004f9c:	0800500b 	.word	0x0800500b
 8004fa0:	08004fb9 	.word	0x08004fb9
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	4a79      	ldr	r2, [pc, #484]	@ (8005190 <HAL_GPIO_Init+0x2b4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fae:	e02c      	b.n	800500a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	623b      	str	r3, [r7, #32]
          break;
 8004fb6:	e029      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	623b      	str	r3, [r7, #32]
          break;
 8004fc0:	e024      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	623b      	str	r3, [r7, #32]
          break;
 8004fca:	e01f      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	623b      	str	r3, [r7, #32]
          break;
 8004fd4:	e01a      	b.n	800500c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fde:	2304      	movs	r3, #4
 8004fe0:	623b      	str	r3, [r7, #32]
          break;
 8004fe2:	e013      	b.n	800500c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fec:	2308      	movs	r3, #8
 8004fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	611a      	str	r2, [r3, #16]
          break;
 8004ff6:	e009      	b.n	800500c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	615a      	str	r2, [r3, #20]
          break;
 8005002:	e003      	b.n	800500c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005004:	2300      	movs	r3, #0
 8005006:	623b      	str	r3, [r7, #32]
          break;
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x130>
          break;
 800500a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2bff      	cmp	r3, #255	@ 0xff
 8005010:	d801      	bhi.n	8005016 <HAL_GPIO_Init+0x13a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	e001      	b.n	800501a <HAL_GPIO_Init+0x13e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2bff      	cmp	r3, #255	@ 0xff
 8005020:	d802      	bhi.n	8005028 <HAL_GPIO_Init+0x14c>
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	e002      	b.n	800502e <HAL_GPIO_Init+0x152>
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	3b08      	subs	r3, #8
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	210f      	movs	r1, #15
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	431a      	orrs	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80b1 	beq.w	80051be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800505c:	4b4d      	ldr	r3, [pc, #308]	@ (8005194 <HAL_GPIO_Init+0x2b8>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4a4c      	ldr	r2, [pc, #304]	@ (8005194 <HAL_GPIO_Init+0x2b8>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6193      	str	r3, [r2, #24]
 8005068:	4b4a      	ldr	r3, [pc, #296]	@ (8005194 <HAL_GPIO_Init+0x2b8>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005074:	4a48      	ldr	r2, [pc, #288]	@ (8005198 <HAL_GPIO_Init+0x2bc>)
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	3302      	adds	r3, #2
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a40      	ldr	r2, [pc, #256]	@ (800519c <HAL_GPIO_Init+0x2c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <HAL_GPIO_Init+0x1ec>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3f      	ldr	r2, [pc, #252]	@ (80051a0 <HAL_GPIO_Init+0x2c4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00d      	beq.n	80050c4 <HAL_GPIO_Init+0x1e8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3e      	ldr	r2, [pc, #248]	@ (80051a4 <HAL_GPIO_Init+0x2c8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <HAL_GPIO_Init+0x1e4>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3d      	ldr	r2, [pc, #244]	@ (80051a8 <HAL_GPIO_Init+0x2cc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <HAL_GPIO_Init+0x1e0>
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050bc:	2304      	movs	r3, #4
 80050be:	e004      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e002      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_GPIO_Init+0x1ee>
 80050c8:	2300      	movs	r3, #0
 80050ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050cc:	f002 0203 	and.w	r2, r2, #3
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	4093      	lsls	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050da:	492f      	ldr	r1, [pc, #188]	@ (8005198 <HAL_GPIO_Init+0x2bc>)
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	3302      	adds	r3, #2
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050f4:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	492c      	ldr	r1, [pc, #176]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005102:	4b2a      	ldr	r3, [pc, #168]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	43db      	mvns	r3, r3
 800510a:	4928      	ldr	r1, [pc, #160]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 800510c:	4013      	ands	r3, r2
 800510e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800511c:	4b23      	ldr	r3, [pc, #140]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	4922      	ldr	r1, [pc, #136]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	60cb      	str	r3, [r1, #12]
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800512a:	4b20      	ldr	r3, [pc, #128]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	43db      	mvns	r3, r3
 8005132:	491e      	ldr	r1, [pc, #120]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 8005134:	4013      	ands	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4918      	ldr	r1, [pc, #96]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	e006      	b.n	8005160 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005152:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	43db      	mvns	r3, r3
 800515a:	4914      	ldr	r1, [pc, #80]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 800515c:	4013      	ands	r3, r2
 800515e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d021      	beq.n	80051b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800516c:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	490e      	ldr	r1, [pc, #56]	@ (80051ac <HAL_GPIO_Init+0x2d0>)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
 8005178:	e021      	b.n	80051be <HAL_GPIO_Init+0x2e2>
 800517a:	bf00      	nop
 800517c:	10320000 	.word	0x10320000
 8005180:	10310000 	.word	0x10310000
 8005184:	10220000 	.word	0x10220000
 8005188:	10210000 	.word	0x10210000
 800518c:	10120000 	.word	0x10120000
 8005190:	10110000 	.word	0x10110000
 8005194:	40021000 	.word	0x40021000
 8005198:	40010000 	.word	0x40010000
 800519c:	40010800 	.word	0x40010800
 80051a0:	40010c00 	.word	0x40010c00
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <HAL_GPIO_Init+0x304>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	4909      	ldr	r1, [pc, #36]	@ (80051e0 <HAL_GPIO_Init+0x304>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f47f ae8e 	bne.w	8004ef0 <HAL_GPIO_Init+0x14>
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	372c      	adds	r7, #44	@ 0x2c
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	40010400 	.word	0x40010400

080051e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
 80051f0:	4613      	mov	r3, r2
 80051f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051f4:	787b      	ldrb	r3, [r7, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005200:	e003      	b.n	800520a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	041a      	lsls	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	611a      	str	r2, [r3, #16]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4013      	ands	r3, r2
 800522c:	041a      	lsls	r2, r3, #16
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	43d9      	mvns	r1, r3
 8005232:	887b      	ldrh	r3, [r7, #2]
 8005234:	400b      	ands	r3, r1
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	611a      	str	r2, [r3, #16]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr
	...

08005248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e304      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8087 	beq.w	8005376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005268:	4b92      	ldr	r3, [pc, #584]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b04      	cmp	r3, #4
 8005272:	d00c      	beq.n	800528e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005274:	4b8f      	ldr	r3, [pc, #572]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d112      	bne.n	80052a6 <HAL_RCC_OscConfig+0x5e>
 8005280:	4b8c      	ldr	r3, [pc, #560]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528c:	d10b      	bne.n	80052a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528e:	4b89      	ldr	r3, [pc, #548]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d06c      	beq.n	8005374 <HAL_RCC_OscConfig+0x12c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d168      	bne.n	8005374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e2de      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ae:	d106      	bne.n	80052be <HAL_RCC_OscConfig+0x76>
 80052b0:	4b80      	ldr	r3, [pc, #512]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7f      	ldr	r2, [pc, #508]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e02e      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCC_OscConfig+0x98>
 80052c6:	4b7b      	ldr	r3, [pc, #492]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7a      	ldr	r2, [pc, #488]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b78      	ldr	r3, [pc, #480]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a77      	ldr	r2, [pc, #476]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e01d      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0xbc>
 80052ea:	4b72      	ldr	r3, [pc, #456]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a71      	ldr	r2, [pc, #452]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b6f      	ldr	r3, [pc, #444]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6e      	ldr	r2, [pc, #440]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0xd4>
 8005304:	4b6b      	ldr	r3, [pc, #428]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a6a      	ldr	r2, [pc, #424]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b68      	ldr	r3, [pc, #416]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a67      	ldr	r2, [pc, #412]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800531a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fd ff16 	bl	8003154 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800532c:	f7fd ff12 	bl	8003154 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	@ 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e292      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b5d      	ldr	r3, [pc, #372]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0xe4>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fd ff02 	bl	8003154 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005354:	f7fd fefe 	bl	8003154 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	@ 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e27e      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	4b53      	ldr	r3, [pc, #332]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x10c>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d063      	beq.n	800544a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005382:	4b4c      	ldr	r3, [pc, #304]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800538e:	4b49      	ldr	r3, [pc, #292]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x18c>
 800539a:	4b46      	ldr	r3, [pc, #280]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	4b43      	ldr	r3, [pc, #268]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCC_OscConfig+0x176>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e252      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b3d      	ldr	r3, [pc, #244]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4939      	ldr	r1, [pc, #228]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	e03a      	b.n	800544a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	4b36      	ldr	r3, [pc, #216]	@ (80054b8 <HAL_RCC_OscConfig+0x270>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e2:	f7fd feb7 	bl	8003154 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fd feb3 	bl	8003154 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e233      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fc:	4b2d      	ldr	r3, [pc, #180]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b2a      	ldr	r3, [pc, #168]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4927      	ldr	r1, [pc, #156]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541e:	4b26      	ldr	r3, [pc, #152]	@ (80054b8 <HAL_RCC_OscConfig+0x270>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fd fe96 	bl	8003154 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542c:	f7fd fe92 	bl	8003154 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e212      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543e:	4b1d      	ldr	r3, [pc, #116]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03a      	beq.n	80054cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d019      	beq.n	8005492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545e:	4b17      	ldr	r3, [pc, #92]	@ (80054bc <HAL_RCC_OscConfig+0x274>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005464:	f7fd fe76 	bl	8003154 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546c:	f7fd fe72 	bl	8003154 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1f2      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547e:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <HAL_RCC_OscConfig+0x26c>)
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800548a:	2001      	movs	r0, #1
 800548c:	f000 fbca 	bl	8005c24 <RCC_Delay>
 8005490:	e01c      	b.n	80054cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005492:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <HAL_RCC_OscConfig+0x274>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fd fe5c 	bl	8003154 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a0:	f7fd fe58 	bl	8003154 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d908      	bls.n	80054c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1d8      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	42420000 	.word	0x42420000
 80054bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c0:	4b9b      	ldr	r3, [pc, #620]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e9      	bne.n	80054a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80a6 	beq.w	8005626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054de:	4b94      	ldr	r3, [pc, #592]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	4b91      	ldr	r3, [pc, #580]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4a90      	ldr	r2, [pc, #576]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	61d3      	str	r3, [r2, #28]
 80054f6:	4b8e      	ldr	r3, [pc, #568]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b8b      	ldr	r3, [pc, #556]	@ (8005734 <HAL_RCC_OscConfig+0x4ec>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b88      	ldr	r3, [pc, #544]	@ (8005734 <HAL_RCC_OscConfig+0x4ec>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a87      	ldr	r2, [pc, #540]	@ (8005734 <HAL_RCC_OscConfig+0x4ec>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fd fe19 	bl	8003154 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fd fe15 	bl	8003154 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	@ 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e195      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b7e      	ldr	r3, [pc, #504]	@ (8005734 <HAL_RCC_OscConfig+0x4ec>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x312>
 800554c:	4b78      	ldr	r3, [pc, #480]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4a77      	ldr	r2, [pc, #476]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6213      	str	r3, [r2, #32]
 8005558:	e02d      	b.n	80055b6 <HAL_RCC_OscConfig+0x36e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x334>
 8005562:	4b73      	ldr	r3, [pc, #460]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4a72      	ldr	r2, [pc, #456]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	6213      	str	r3, [r2, #32]
 800556e:	4b70      	ldr	r3, [pc, #448]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4a6f      	ldr	r2, [pc, #444]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	6213      	str	r3, [r2, #32]
 800557a:	e01c      	b.n	80055b6 <HAL_RCC_OscConfig+0x36e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b05      	cmp	r3, #5
 8005582:	d10c      	bne.n	800559e <HAL_RCC_OscConfig+0x356>
 8005584:	4b6a      	ldr	r3, [pc, #424]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4a69      	ldr	r2, [pc, #420]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 800558a:	f043 0304 	orr.w	r3, r3, #4
 800558e:	6213      	str	r3, [r2, #32]
 8005590:	4b67      	ldr	r3, [pc, #412]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	4a66      	ldr	r2, [pc, #408]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6213      	str	r3, [r2, #32]
 800559c:	e00b      	b.n	80055b6 <HAL_RCC_OscConfig+0x36e>
 800559e:	4b64      	ldr	r3, [pc, #400]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	4a63      	ldr	r2, [pc, #396]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	6213      	str	r3, [r2, #32]
 80055aa:	4b61      	ldr	r3, [pc, #388]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4a60      	ldr	r2, [pc, #384]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80055b0:	f023 0304 	bic.w	r3, r3, #4
 80055b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fd fdc9 	bl	8003154 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fd fdc5 	bl	8003154 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e143      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	4b54      	ldr	r3, [pc, #336]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ee      	beq.n	80055c6 <HAL_RCC_OscConfig+0x37e>
 80055e8:	e014      	b.n	8005614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ea:	f7fd fdb3 	bl	8003154 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fd fdaf 	bl	8003154 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e12d      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005608:	4b49      	ldr	r3, [pc, #292]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ee      	bne.n	80055f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561a:	4b45      	ldr	r3, [pc, #276]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	4a44      	ldr	r2, [pc, #272]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005624:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 808c 	beq.w	8005748 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005630:	4b3f      	ldr	r3, [pc, #252]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563c:	d10e      	bne.n	800565c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800563e:	4b3c      	ldr	r3, [pc, #240]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005646:	2b08      	cmp	r3, #8
 8005648:	d108      	bne.n	800565c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800564a:	4b39      	ldr	r3, [pc, #228]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005656:	d101      	bne.n	800565c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e103      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	2b02      	cmp	r3, #2
 8005662:	d14e      	bne.n	8005702 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005664:	4b32      	ldr	r3, [pc, #200]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005670:	4b2f      	ldr	r3, [pc, #188]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0ef      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005684:	4b2c      	ldr	r3, [pc, #176]	@ (8005738 <HAL_RCC_OscConfig+0x4f0>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568a:	f7fd fd63 	bl	8003154 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005692:	f7fd fd5f 	bl	8003154 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b64      	cmp	r3, #100	@ 0x64
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0df      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80056a4:	4b22      	ldr	r3, [pc, #136]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80056b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056bc:	491c      	ldr	r1, [pc, #112]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80056c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	4918      	ldr	r1, [pc, #96]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80056d4:	4b18      	ldr	r3, [pc, #96]	@ (8005738 <HAL_RCC_OscConfig+0x4f0>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fd fd3b 	bl	8003154 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056e2:	f7fd fd37 	bl	8003154 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b64      	cmp	r3, #100	@ 0x64
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e0b7      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80056f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x49a>
 8005700:	e022      	b.n	8005748 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	4a0a      	ldr	r2, [pc, #40]	@ (8005730 <HAL_RCC_OscConfig+0x4e8>)
 8005708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800570c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800570e:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <HAL_RCC_OscConfig+0x4f0>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005714:	f7fd fd1e 	bl	8003154 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800571a:	e00f      	b.n	800573c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800571c:	f7fd fd1a 	bl	8003154 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	@ 0x64
 8005728:	d908      	bls.n	800573c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e09a      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	40007000 	.word	0x40007000
 8005738:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800573c:	4b4b      	ldr	r3, [pc, #300]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e9      	bne.n	800571c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8088 	beq.w	8005862 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005752:	4b46      	ldr	r3, [pc, #280]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b08      	cmp	r3, #8
 800575c:	d068      	beq.n	8005830 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d14d      	bne.n	8005802 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b42      	ldr	r3, [pc, #264]	@ (8005870 <HAL_RCC_OscConfig+0x628>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fd fcf2 	bl	8003154 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fd fcee 	bl	8003154 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e06e      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005786:	4b39      	ldr	r3, [pc, #228]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800579a:	d10f      	bne.n	80057bc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800579c:	4b33      	ldr	r3, [pc, #204]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 800579e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4931      	ldr	r1, [pc, #196]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057aa:	4b30      	ldr	r3, [pc, #192]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	f023 020f 	bic.w	r2, r3, #15
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	492d      	ldr	r1, [pc, #180]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	430b      	orrs	r3, r1
 80057ce:	4927      	ldr	r1, [pc, #156]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d4:	4b26      	ldr	r3, [pc, #152]	@ (8005870 <HAL_RCC_OscConfig+0x628>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7fd fcbb 	bl	8003154 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fd fcb7 	bl	8003154 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e037      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057f4:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x59a>
 8005800:	e02f      	b.n	8005862 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <HAL_RCC_OscConfig+0x628>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd fca4 	bl	8003154 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005810:	f7fd fca0 	bl	8003154 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e020      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005822:	4b12      	ldr	r3, [pc, #72]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x5c8>
 800582e:	e018      	b.n	8005862 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e013      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_RCC_OscConfig+0x624>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	429a      	cmp	r2, r3
 800584e:	d106      	bne.n	800585e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d001      	beq.n	8005862 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	42420060 	.word	0x42420060

08005874 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0d0      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b6a      	ldr	r3, [pc, #424]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d910      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b67      	ldr	r3, [pc, #412]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 0207 	bic.w	r2, r3, #7
 800589e:	4965      	ldr	r1, [pc, #404]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b63      	ldr	r3, [pc, #396]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0b8      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d0:	4b59      	ldr	r3, [pc, #356]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a58      	ldr	r2, [pc, #352]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e8:	4b53      	ldr	r3, [pc, #332]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4a52      	ldr	r2, [pc, #328]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80058f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b50      	ldr	r3, [pc, #320]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	494d      	ldr	r1, [pc, #308]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d040      	beq.n	8005994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b47      	ldr	r3, [pc, #284]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d115      	bne.n	8005952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e07f      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005932:	4b41      	ldr	r3, [pc, #260]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e073      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005942:	4b3d      	ldr	r3, [pc, #244]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06b      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005952:	4b39      	ldr	r3, [pc, #228]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f023 0203 	bic.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4936      	ldr	r1, [pc, #216]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005964:	f7fd fbf6 	bl	8003154 <HAL_GetTick>
 8005968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	e00a      	b.n	8005982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596c:	f7fd fbf2 	bl	8003154 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e053      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	4b2d      	ldr	r3, [pc, #180]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 020c 	and.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	429a      	cmp	r2, r3
 8005992:	d1eb      	bne.n	800596c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005994:	4b27      	ldr	r3, [pc, #156]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d210      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b24      	ldr	r3, [pc, #144]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 0207 	bic.w	r2, r3, #7
 80059aa:	4922      	ldr	r1, [pc, #136]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b20      	ldr	r3, [pc, #128]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e032      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b19      	ldr	r3, [pc, #100]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4916      	ldr	r1, [pc, #88]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ee:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	490e      	ldr	r1, [pc, #56]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a02:	f000 f821 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	490a      	ldr	r1, [pc, #40]	@ (8005a3c <HAL_RCC_ClockConfig+0x1c8>)
 8005a14:	5ccb      	ldrb	r3, [r1, r3]
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	4a09      	ldr	r2, [pc, #36]	@ (8005a40 <HAL_RCC_ClockConfig+0x1cc>)
 8005a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <HAL_RCC_ClockConfig+0x1d0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd fb54 	bl	80030d0 <HAL_InitTick>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40022000 	.word	0x40022000
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	08008620 	.word	0x08008620
 8005a40:	2000006c 	.word	0x2000006c
 8005a44:	20000070 	.word	0x20000070

08005a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a4c:	b08e      	sub	sp, #56	@ 0x38
 8005a4e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a54:	2300      	movs	r3, #0
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a58:	2300      	movs	r3, #0
 8005a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d002      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x40>
 8005a80:	e089      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a82:	4b4a      	ldr	r3, [pc, #296]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x164>)
 8005a84:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005a86:	e089      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8a:	0c9b      	lsrs	r3, r3, #18
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	4b47      	ldr	r3, [pc, #284]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a92:	5c9b      	ldrb	r3, [r3, r2]
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d072      	beq.n	8005b86 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005aa0:	4b41      	ldr	r3, [pc, #260]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	4b42      	ldr	r3, [pc, #264]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005aaa:	5c9b      	ldrb	r3, [r3, r2]
 8005aac:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005aae:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d053      	beq.n	8005b62 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005aba:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005ac8:	4b37      	ldr	r3, [pc, #220]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	0a1b      	lsrs	r3, r3, #8
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	469a      	mov	sl, r3
 8005adc:	4693      	mov	fp, r2
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	617a      	str	r2, [r7, #20]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	fb03 f20b 	mul.w	r2, r3, fp
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	fb0a f303 	mul.w	r3, sl, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	fbaa 0102 	umull	r0, r1, sl, r2
 8005afa:	440b      	add	r3, r1
 8005afc:	4619      	mov	r1, r3
 8005afe:	4b2b      	ldr	r3, [pc, #172]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x164>)
 8005b00:	fb03 f201 	mul.w	r2, r3, r1
 8005b04:	2300      	movs	r3, #0
 8005b06:	fb00 f303 	mul.w	r3, r0, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	4a27      	ldr	r2, [pc, #156]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x164>)
 8005b0e:	fba0 4502 	umull	r4, r5, r0, r2
 8005b12:	442b      	add	r3, r5
 8005b14:	461d      	mov	r5, r3
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	60fa      	str	r2, [r7, #12]
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	2200      	movs	r2, #0
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b30:	4652      	mov	r2, sl
 8005b32:	fb02 f203 	mul.w	r2, r2, r3
 8005b36:	465b      	mov	r3, fp
 8005b38:	4684      	mov	ip, r0
 8005b3a:	fb0c f303 	mul.w	r3, ip, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	4602      	mov	r2, r0
 8005b42:	4651      	mov	r1, sl
 8005b44:	fba2 8901 	umull	r8, r9, r2, r1
 8005b48:	444b      	add	r3, r9
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fb faa2 	bl	800109c <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b60:	e007      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	4a11      	ldr	r2, [pc, #68]	@ (8005bac <HAL_RCC_GetSysClockFreq+0x164>)
 8005b66:	fb03 f202 	mul.w	r2, r3, r2
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005b72:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b74:	7b5b      	ldrb	r3, [r3, #13]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b84:	e004      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x170>)
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005b94:	e002      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b96:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x174>)
 8005b98:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3738      	adds	r7, #56	@ 0x38
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	017d7840 	.word	0x017d7840
 8005bb0:	08008638 	.word	0x08008638
 8005bb4:	08008648 	.word	0x08008648
 8005bb8:	003d0900 	.word	0x003d0900
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	@ (8005bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	2000006c 	.word	0x2000006c

08005bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bd8:	f7ff fff2 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4903      	ldr	r1, [pc, #12]	@ (8005bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	08008630 	.word	0x08008630

08005bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c00:	f7ff ffde 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c04:	4602      	mov	r2, r0
 8005c06:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	0adb      	lsrs	r3, r3, #11
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	4903      	ldr	r1, [pc, #12]	@ (8005c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c12:	5ccb      	ldrb	r3, [r1, r3]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	08008630 	.word	0x08008630

08005c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <RCC_Delay+0x34>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <RCC_Delay+0x38>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	0a5b      	lsrs	r3, r3, #9
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c40:	bf00      	nop
  }
  while (Delay --);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1e5a      	subs	r2, r3, #1
 8005c46:	60fa      	str	r2, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f9      	bne.n	8005c40 <RCC_Delay+0x1c>
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	2000006c 	.word	0x2000006c
 8005c5c:	10624dd3 	.word	0x10624dd3

08005c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d07d      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c80:	2300      	movs	r3, #0
 8005c82:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c84:	4b8b      	ldr	r3, [pc, #556]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10d      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c90:	4b88      	ldr	r3, [pc, #544]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	4a87      	ldr	r2, [pc, #540]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	61d3      	str	r3, [r2, #28]
 8005c9c:	4b85      	ldr	r3, [pc, #532]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	4b82      	ldr	r3, [pc, #520]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d118      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a7e      	ldr	r2, [pc, #504]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc4:	f7fd fa46 	bl	8003154 <HAL_GetTick>
 8005cc8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cca:	e008      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ccc:	f7fd fa42 	bl	8003154 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	@ 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e0e5      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cde:	4b76      	ldr	r3, [pc, #472]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cea:	4b72      	ldr	r3, [pc, #456]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02e      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d027      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d08:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d10:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d12:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d18:	4b68      	ldr	r3, [pc, #416]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d1e:	4a65      	ldr	r2, [pc, #404]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7fd fa11 	bl	8003154 <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	e00a      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fd fa0d 	bl	8003154 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0ae      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4c:	4b59      	ldr	r3, [pc, #356]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0ee      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d58:	4b56      	ldr	r3, [pc, #344]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4953      	ldr	r1, [pc, #332]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d6a:	7efb      	ldrb	r3, [r7, #27]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d70:	4b50      	ldr	r3, [pc, #320]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4a4f      	ldr	r2, [pc, #316]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d88:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4947      	ldr	r1, [pc, #284]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005da6:	4b43      	ldr	r3, [pc, #268]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4940      	ldr	r1, [pc, #256]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	4938      	ldr	r1, [pc, #224]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005dd6:	4b37      	ldr	r3, [pc, #220]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005de2:	4b34      	ldr	r3, [pc, #208]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005dee:	2301      	movs	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d148      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005df8:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d138      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005e04:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005e10:	4b28      	ldr	r3, [pc, #160]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e042      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005e24:	4b23      	ldr	r3, [pc, #140]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	4920      	ldr	r1, [pc, #128]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005e36:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3a:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	491c      	ldr	r1, [pc, #112]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005e48:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4e:	f7fd f981 	bl	8003154 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e56:	f7fd f97d 	bl	8003154 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b64      	cmp	r3, #100	@ 0x64
 8005e62:	d901      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e020      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e68:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005e74:	e009      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005e76:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d001      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e00f      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e96:	4b07      	ldr	r3, [pc, #28]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4904      	ldr	r1, [pc, #16]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40007000 	.word	0x40007000
 8005ebc:	42420440 	.word	0x42420440
 8005ec0:	42420070 	.word	0x42420070

08005ec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	f200 811d 	bhi.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	080060b1 	.word	0x080060b1
 8005f00:	08006115 	.word	0x08006115
 8005f04:	08006131 	.word	0x08006131
 8005f08:	0800600f 	.word	0x0800600f
 8005f0c:	08006131 	.word	0x08006131
 8005f10:	08006131 	.word	0x08006131
 8005f14:	08006131 	.word	0x08006131
 8005f18:	08006061 	.word	0x08006061
 8005f1c:	08006131 	.word	0x08006131
 8005f20:	08006131 	.word	0x08006131
 8005f24:	08006131 	.word	0x08006131
 8005f28:	08006131 	.word	0x08006131
 8005f2c:	08006131 	.word	0x08006131
 8005f30:	08006131 	.word	0x08006131
 8005f34:	08006131 	.word	0x08006131
 8005f38:	08005f3d 	.word	0x08005f3d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005f3c:	4b83      	ldr	r3, [pc, #524]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f42:	4b82      	ldr	r3, [pc, #520]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80f2 	beq.w	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	0c9b      	lsrs	r3, r3, #18
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	4a7d      	ldr	r2, [pc, #500]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005f5a:	5cd3      	ldrb	r3, [r2, r3]
 8005f5c:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d03b      	beq.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005f68:	4b78      	ldr	r3, [pc, #480]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	4a78      	ldr	r2, [pc, #480]	@ (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005f72:	5cd3      	ldrb	r3, [r2, r3]
 8005f74:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005f76:	4b75      	ldr	r3, [pc, #468]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01c      	beq.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005f82:	4b72      	ldr	r3, [pc, #456]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005f90:	4b6e      	ldr	r3, [pc, #440]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	fb03 f202 	mul.w	r2, r3, r2
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fba:	e007      	b.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005fbc:	4a66      	ldr	r2, [pc, #408]	@ (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005fcc:	4b60      	ldr	r3, [pc, #384]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005fce:	7b5b      	ldrb	r3, [r3, #13]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d108      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fde:	e004      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800615c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005fe4:	fb02 f303 	mul.w	r3, r2, r3
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8005fea:	4b58      	ldr	r3, [pc, #352]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff6:	d102      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005ffc:	e09a      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4a57      	ldr	r2, [pc, #348]	@ (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	623b      	str	r3, [r7, #32]
      break;
 800600c:	e092      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800600e:	4b4f      	ldr	r3, [pc, #316]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800601a:	f7ff fd15 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 800601e:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006020:	e08a      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8006022:	4b4a      	ldr	r3, [pc, #296]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8084 	beq.w	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006030:	4b46      	ldr	r3, [pc, #280]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800603e:	4b43      	ldr	r3, [pc, #268]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	0b1b      	lsrs	r3, r3, #12
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	3302      	adds	r3, #2
 800604a:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800604c:	4a42      	ldr	r2, [pc, #264]	@ (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	623b      	str	r3, [r7, #32]
      break;
 800605e:	e06b      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8006060:	4b3a      	ldr	r3, [pc, #232]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 800606c:	f7ff fcec 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8006070:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006072:	e063      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8006074:	4b35      	ldr	r3, [pc, #212]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d05d      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006080:	4b32      	ldr	r3, [pc, #200]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800608e:	4b2f      	ldr	r3, [pc, #188]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	0b1b      	lsrs	r3, r3, #12
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	3302      	adds	r3, #2
 800609a:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800609c:	4a2e      	ldr	r2, [pc, #184]	@ (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	623b      	str	r3, [r7, #32]
      break;
 80060ae:	e045      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80060b0:	4b26      	ldr	r3, [pc, #152]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c0:	d108      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 80060cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	e01e      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060de:	d109      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80060e0:	4b1a      	ldr	r3, [pc, #104]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 80060ec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80060f0:	623b      	str	r3, [r7, #32]
 80060f2:	e00e      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060fe:	d11f      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006100:	4b12      	ldr	r3, [pc, #72]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d019      	beq.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 800610c:	4b15      	ldr	r3, [pc, #84]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800610e:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006110:	e016      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006112:	e015      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006114:	f7ff fd72 	bl	8005bfc <HAL_RCC_GetPCLK2Freq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	0b9b      	lsrs	r3, r3, #14
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	3301      	adds	r3, #1
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	623b      	str	r3, [r7, #32]
      break;
 800612e:	e008      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 8006130:	bf00      	nop
 8006132:	e006      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8006134:	bf00      	nop
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8006140:	bf00      	nop
    }
  }
  return (frequency);
 8006142:	6a3b      	ldr	r3, [r7, #32]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3728      	adds	r7, #40	@ 0x28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021000 	.word	0x40021000
 8006150:	08008658 	.word	0x08008658
 8006154:	08008668 	.word	0x08008668
 8006158:	017d7840 	.word	0x017d7840
 800615c:	003d0900 	.word	0x003d0900
 8006160:	aaaaaaab 	.word	0xaaaaaaab
 8006164:	0002faf0 	.word	0x0002faf0

08006168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e076      	b.n	8006268 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800618a:	d009      	beq.n	80061a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	61da      	str	r2, [r3, #28]
 8006192:	e005      	b.n	80061a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fc fc78 	bl	8002ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006224:	ea42 0103 	orr.w	r1, r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	0c1a      	lsrs	r2, r3, #16
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f002 0204 	and.w	r2, r2, #4
 8006246:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006256:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006280:	f7fc ff68 	bl	8003154 <HAL_GetTick>
 8006284:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d001      	beq.n	800629a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006296:	2302      	movs	r3, #2
 8006298:	e12a      	b.n	80064f0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_SPI_Transmit+0x36>
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e122      	b.n	80064f0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_SPI_Transmit+0x48>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e11b      	b.n	80064f0 <HAL_SPI_Transmit+0x280>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2203      	movs	r2, #3
 80062c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006306:	d10f      	bne.n	8006328 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006316:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006326:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d007      	beq.n	8006346 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800634e:	d152      	bne.n	80063f6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_Transmit+0xee>
 8006358:	8b7b      	ldrh	r3, [r7, #26]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d145      	bne.n	80063ea <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006362:	881a      	ldrh	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636e:	1c9a      	adds	r2, r3, #2
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006382:	e032      	b.n	80063ea <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b02      	cmp	r3, #2
 8006390:	d112      	bne.n	80063b8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006396:	881a      	ldrh	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063b6:	e018      	b.n	80063ea <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b8:	f7fc fecc 	bl	8003154 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d803      	bhi.n	80063d0 <HAL_SPI_Transmit+0x160>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d102      	bne.n	80063d6 <HAL_SPI_Transmit+0x166>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e082      	b.n	80064f0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1c7      	bne.n	8006384 <HAL_SPI_Transmit+0x114>
 80063f4:	e053      	b.n	800649e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Transmit+0x194>
 80063fe:	8b7b      	ldrh	r3, [r7, #26]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d147      	bne.n	8006494 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	7812      	ldrb	r2, [r2, #0]
 8006410:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800642a:	e033      	b.n	8006494 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d113      	bne.n	8006462 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006460:	e018      	b.n	8006494 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006462:	f7fc fe77 	bl	8003154 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d803      	bhi.n	800647a <HAL_SPI_Transmit+0x20a>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d102      	bne.n	8006480 <HAL_SPI_Transmit+0x210>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e02d      	b.n	80064f0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1c6      	bne.n	800642c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fcc0 	bl	8006e28 <SPI_EndRxTxTransaction>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80064ee:	2300      	movs	r3, #0
  }
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d001      	beq.n	8006518 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
 8006516:	e104      	b.n	8006722 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006520:	d112      	bne.n	8006548 <HAL_SPI_Receive+0x50>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10e      	bne.n	8006548 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2204      	movs	r2, #4
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f8f3 	bl	800672a <HAL_SPI_TransmitReceive>
 8006544:	4603      	mov	r3, r0
 8006546:	e0ec      	b.n	8006722 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006548:	f7fc fe04 	bl	8003154 <HAL_GetTick>
 800654c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Receive+0x62>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e0e1      	b.n	8006722 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_SPI_Receive+0x74>
 8006568:	2302      	movs	r3, #2
 800656a:	e0da      	b.n	8006722 <HAL_SPI_Receive+0x22a>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2204      	movs	r2, #4
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ba:	d10f      	bne.n	80065dc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e6:	2b40      	cmp	r3, #64	@ 0x40
 80065e8:	d007      	beq.n	80065fa <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d170      	bne.n	80066e4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006602:	e035      	b.n	8006670 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d115      	bne.n	800663e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f103 020c 	add.w	r2, r3, #12
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800663c:	e018      	b.n	8006670 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800663e:	f7fc fd89 	bl	8003154 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d803      	bhi.n	8006656 <HAL_SPI_Receive+0x15e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d102      	bne.n	800665c <HAL_SPI_Receive+0x164>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e058      	b.n	8006722 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1c4      	bne.n	8006604 <HAL_SPI_Receive+0x10c>
 800667a:	e038      	b.n	80066ee <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b01      	cmp	r3, #1
 8006688:	d113      	bne.n	80066b2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	b292      	uxth	r2, r2
 8006696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066b0:	e018      	b.n	80066e4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066b2:	f7fc fd4f 	bl	8003154 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d803      	bhi.n	80066ca <HAL_SPI_Receive+0x1d2>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d102      	bne.n	80066d0 <HAL_SPI_Receive+0x1d8>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e01e      	b.n	8006722 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1c6      	bne.n	800667c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fb46 	bl	8006d84 <SPI_EndRxTransaction>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006720:	2300      	movs	r3, #0
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b08a      	sub	sp, #40	@ 0x28
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673c:	f7fc fd0a 	bl	8003154 <HAL_GetTick>
 8006740:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006748:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006750:	887b      	ldrh	r3, [r7, #2]
 8006752:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d00c      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x4a>
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006760:	d106      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x46>
 800676a:	7ffb      	ldrb	r3, [r7, #31]
 800676c:	2b04      	cmp	r3, #4
 800676e:	d001      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
 8006772:	e17f      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_SPI_TransmitReceive+0x5c>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_SPI_TransmitReceive+0x5c>
 8006780:	887b      	ldrh	r3, [r7, #2]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e174      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_SPI_TransmitReceive+0x6e>
 8006794:	2302      	movs	r3, #2
 8006796:	e16d      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d003      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2205      	movs	r2, #5
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	887a      	ldrh	r2, [r7, #2]
 80067ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	887a      	ldrh	r2, [r7, #2]
 80067d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	887a      	ldrh	r2, [r7, #2]
 80067dc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	d007      	beq.n	8006808 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006806:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006810:	d17e      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_SPI_TransmitReceive+0xf6>
 800681a:	8afb      	ldrh	r3, [r7, #22]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d16c      	bne.n	80068fa <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	881a      	ldrh	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006830:	1c9a      	adds	r2, r3, #2
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006844:	e059      	b.n	80068fa <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b02      	cmp	r3, #2
 8006852:	d11b      	bne.n	800688c <HAL_SPI_TransmitReceive+0x162>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_SPI_TransmitReceive+0x162>
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	2b01      	cmp	r3, #1
 8006862:	d113      	bne.n	800688c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006868:	881a      	ldrh	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006874:	1c9a      	adds	r2, r3, #2
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b01      	cmp	r3, #1
 8006898:	d119      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x1a4>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d014      	beq.n	80068ce <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	b292      	uxth	r2, r2
 80068b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b6:	1c9a      	adds	r2, r3, #2
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068ca:	2301      	movs	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068ce:	f7fc fc41 	bl	8003154 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068da:	429a      	cmp	r2, r3
 80068dc:	d80d      	bhi.n	80068fa <HAL_SPI_TransmitReceive+0x1d0>
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d009      	beq.n	80068fa <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0bc      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1a0      	bne.n	8006846 <HAL_SPI_TransmitReceive+0x11c>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d19b      	bne.n	8006846 <HAL_SPI_TransmitReceive+0x11c>
 800690e:	e082      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_SPI_TransmitReceive+0x1f4>
 8006918:	8afb      	ldrh	r3, [r7, #22]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d171      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006944:	e05d      	b.n	8006a02 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d11c      	bne.n	800698e <HAL_SPI_TransmitReceive+0x264>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d017      	beq.n	800698e <HAL_SPI_TransmitReceive+0x264>
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	2b01      	cmp	r3, #1
 8006962:	d114      	bne.n	800698e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	7812      	ldrb	r2, [r2, #0]
 8006970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b01      	cmp	r3, #1
 800699a:	d119      	bne.n	80069d0 <HAL_SPI_TransmitReceive+0x2a6>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d014      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069cc:	2301      	movs	r3, #1
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069d0:	f7fc fbc0 	bl	8003154 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069dc:	429a      	cmp	r2, r3
 80069de:	d803      	bhi.n	80069e8 <HAL_SPI_TransmitReceive+0x2be>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d102      	bne.n	80069ee <HAL_SPI_TransmitReceive+0x2c4>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e038      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d19c      	bne.n	8006946 <HAL_SPI_TransmitReceive+0x21c>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d197      	bne.n	8006946 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa04 	bl	8006e28 <SPI_EndRxTxTransaction>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e01d      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006a72:	2300      	movs	r3, #0
  }
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3728      	adds	r7, #40	@ 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10e      	bne.n	8006abc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
    return;
 8006aba:	e0b7      	b.n	8006c2c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <HAL_SPI_IRQHandler+0x5e>
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
    return;
 8006ad8:	e0a8      	b.n	8006c2c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <HAL_SPI_IRQHandler+0x74>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 809e 	beq.w	8006c2c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8098 	beq.w	8006c2c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d023      	beq.n	8006b4e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d011      	beq.n	8006b36 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	f043 0204 	orr.w	r2, r3, #4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	e00b      	b.n	8006b4e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]
        return;
 8006b4c:	e06e      	b.n	8006c2c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d014      	beq.n	8006b82 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5c:	f043 0201 	orr.w	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d04f      	beq.n	8006c2a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_SPI_IRQHandler+0x13a>
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d034      	beq.n	8006c20 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0203 	bic.w	r2, r2, #3
 8006bc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d011      	beq.n	8006bf2 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd2:	4a18      	ldr	r2, [pc, #96]	@ (8006c34 <HAL_SPI_IRQHandler+0x1b8>)
 8006bd4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fd fe3a 	bl	8004854 <HAL_DMA_Abort_IT>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8006c34 <HAL_SPI_IRQHandler+0x1b8>)
 8006c00:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fd fe24 	bl	8004854 <HAL_DMA_Abort_IT>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006c1e:	e003      	b.n	8006c28 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f809 	bl	8006c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c26:	e000      	b.n	8006c2a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8006c28:	bf00      	nop
    return;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	08006c4b 	.word	0x08006c4b

08006c38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr

08006c4a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff ffe7 	bl	8006c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c84:	f7fc fa66 	bl	8003154 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c94:	f7fc fa5e 	bl	8003154 <HAL_GetTick>
 8006c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c9a:	4b39      	ldr	r3, [pc, #228]	@ (8006d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	015b      	lsls	r3, r3, #5
 8006ca0:	0d1b      	lsrs	r3, r3, #20
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006caa:	e054      	b.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d050      	beq.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cb4:	f7fc fa4e 	bl	8003154 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d902      	bls.n	8006cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d13d      	bne.n	8006d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ce2:	d111      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cec:	d004      	beq.n	8006cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf6:	d107      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d10:	d10f      	bne.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e017      	b.n	8006d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d19b      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000006c 	.word	0x2000006c

08006d84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d98:	d111      	bne.n	8006dbe <SPI_EndRxTransaction+0x3a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da2:	d004      	beq.n	8006dae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dac:	d107      	bne.n	8006dbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dc6:	d117      	bne.n	8006df8 <SPI_EndRxTransaction+0x74>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd0:	d112      	bne.n	8006df8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2101      	movs	r1, #1
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ff49 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01a      	beq.n	8006e1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e013      	b.n	8006e20 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2180      	movs	r1, #128	@ 0x80
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff36 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	f043 0220 	orr.w	r2, r3, #32
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e000      	b.n	8006e20 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	2102      	movs	r1, #2
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff ff18 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4e:	f043 0220 	orr.w	r2, r3, #32
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e013      	b.n	8006e82 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	2180      	movs	r1, #128	@ 0x80
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ff05 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e74:	f043 0220 	orr.w	r2, r3, #32
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e000      	b.n	8006e82 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e041      	b.n	8006f20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fb ffd7 	bl	8002e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f000 f94b 	bl	8007164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0202 	mvn.w	r2, #2
 8006f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f8da 	bl	800712c <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8cd 	bl	800711a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f8dc 	bl	800713e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d020      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0204 	mvn.w	r2, #4
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8b4 	bl	800712c <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f8a7 	bl	800711a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8b6 	bl	800713e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d020      	beq.n	8007024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01b      	beq.n	8007024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0208 	mvn.w	r2, #8
 8006ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f88e 	bl	800712c <HAL_TIM_IC_CaptureCallback>
 8007010:	e005      	b.n	800701e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f881 	bl	800711a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f890 	bl	800713e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	2b00      	cmp	r3, #0
 800702c:	d020      	beq.n	8007070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01b      	beq.n	8007070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0210 	mvn.w	r2, #16
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2208      	movs	r2, #8
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f868 	bl	800712c <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f85b 	bl	800711a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f86a 	bl	800713e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0201 	mvn.w	r2, #1
 800708c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f83a 	bl	8007108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00c      	beq.n	80070b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f93d 	bl	8007332 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00c      	beq.n	80070dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f83a 	bl	8007150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0220 	mvn.w	r2, #32
 80070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f910 	bl	8007320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr

0800711a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr

0800712c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr
	...

08007164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a33      	ldr	r2, [pc, #204]	@ (8007244 <TIM_Base_SetConfig+0xe0>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00f      	beq.n	800719c <TIM_Base_SetConfig+0x38>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007182:	d00b      	beq.n	800719c <TIM_Base_SetConfig+0x38>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a30      	ldr	r2, [pc, #192]	@ (8007248 <TIM_Base_SetConfig+0xe4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d007      	beq.n	800719c <TIM_Base_SetConfig+0x38>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a2f      	ldr	r2, [pc, #188]	@ (800724c <TIM_Base_SetConfig+0xe8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_Base_SetConfig+0x38>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a2e      	ldr	r2, [pc, #184]	@ (8007250 <TIM_Base_SetConfig+0xec>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d108      	bne.n	80071ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a24      	ldr	r2, [pc, #144]	@ (8007244 <TIM_Base_SetConfig+0xe0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_Base_SetConfig+0x72>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071bc:	d00b      	beq.n	80071d6 <TIM_Base_SetConfig+0x72>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a21      	ldr	r2, [pc, #132]	@ (8007248 <TIM_Base_SetConfig+0xe4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_Base_SetConfig+0x72>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a20      	ldr	r2, [pc, #128]	@ (800724c <TIM_Base_SetConfig+0xe8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_Base_SetConfig+0x72>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007250 <TIM_Base_SetConfig+0xec>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a0d      	ldr	r2, [pc, #52]	@ (8007244 <TIM_Base_SetConfig+0xe0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d103      	bne.n	800721c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f023 0201 	bic.w	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	611a      	str	r2, [r3, #16]
  }
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr
 8007244:	40012c00 	.word	0x40012c00
 8007248:	40000400 	.word	0x40000400
 800724c:	40000800 	.word	0x40000800
 8007250:	40000c00 	.word	0x40000c00

08007254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007268:	2302      	movs	r3, #2
 800726a:	e04b      	b.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a19      	ldr	r2, [pc, #100]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b8:	d00e      	beq.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d009      	beq.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a13      	ldr	r2, [pc, #76]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a12      	ldr	r2, [pc, #72]	@ (800731c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d10c      	bne.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00

08007320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr

08007332 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e042      	b.n	80073dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fb fdca 	bl	8002f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2224      	movs	r2, #36	@ 0x24
 8007374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc7f 	bl	8007c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800739c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b0ba      	sub	sp, #232	@ 0xe8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800740a:	2300      	movs	r3, #0
 800740c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007410:	2300      	movs	r3, #0
 8007412:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10f      	bne.n	800744a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800742a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <HAL_UART_IRQHandler+0x66>
 8007436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fb63 	bl	8007b0e <UART_Receive_IT>
      return;
 8007448:	e25b      	b.n	8007902 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800744a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80de 	beq.w	8007610 <HAL_UART_IRQHandler+0x22c>
 8007454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007464:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80d1 	beq.w	8007610 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800746e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <HAL_UART_IRQHandler+0xae>
 800747a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800747e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748a:	f043 0201 	orr.w	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <HAL_UART_IRQHandler+0xd2>
 800749e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ae:	f043 0202 	orr.w	r2, r3, #2
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <HAL_UART_IRQHandler+0xf6>
 80074c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	f043 0204 	orr.w	r2, r3, #4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d011      	beq.n	800750a <HAL_UART_IRQHandler+0x126>
 80074e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	f043 0208 	orr.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 81f2 	beq.w	80078f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <HAL_UART_IRQHandler+0x14e>
 8007520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 faee 	bl	8007b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <HAL_UART_IRQHandler+0x17a>
 8007556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d04f      	beq.n	80075fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9f8 	bl	8007954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756e:	2b00      	cmp	r3, #0
 8007570:	d041      	beq.n	80075f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3314      	adds	r3, #20
 8007578:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800758c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3314      	adds	r3, #20
 800759a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800759e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1d9      	bne.n	8007572 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d013      	beq.n	80075ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ca:	4a7e      	ldr	r2, [pc, #504]	@ (80077c4 <HAL_UART_IRQHandler+0x3e0>)
 80075cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fd f93e 	bl	8004854 <HAL_DMA_Abort_IT>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d016      	beq.n	800760c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ec:	e00e      	b.n	800760c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f99c 	bl	800792c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f4:	e00a      	b.n	800760c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f998 	bl	800792c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fc:	e006      	b.n	800760c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f994 	bl	800792c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800760a:	e175      	b.n	80078f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	bf00      	nop
    return;
 800760e:	e173      	b.n	80078f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007614:	2b01      	cmp	r3, #1
 8007616:	f040 814f 	bne.w	80078b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8148 	beq.w	80078b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8141 	beq.w	80078b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	60bb      	str	r3, [r7, #8]
 800764a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80b6 	beq.w	80077c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007668:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8145 	beq.w	80078fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800767a:	429a      	cmp	r2, r3
 800767c:	f080 813e 	bcs.w	80078fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007686:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	2b20      	cmp	r3, #32
 8007690:	f000 8088 	beq.w	80077a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	330c      	adds	r3, #12
 800769a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80076c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1d9      	bne.n	8007694 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3314      	adds	r3, #20
 80076e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007704:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007708:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800770c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e1      	bne.n	80076e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3314      	adds	r3, #20
 8007722:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800772c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800772e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007740:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007742:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007746:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800774e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e3      	bne.n	800771c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007774:	f023 0310 	bic.w	r3, r3, #16
 8007778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007786:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007788:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800778c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e3      	bne.n	8007762 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fd f81c 	bl	80047dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8bf 	bl	800793e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077c0:	e09c      	b.n	80078fc <HAL_UART_IRQHandler+0x518>
 80077c2:	bf00      	nop
 80077c4:	08007a19 	.word	0x08007a19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 808e 	beq.w	8007900 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80077e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8089 	beq.w	8007900 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007812:	647a      	str	r2, [r7, #68]	@ 0x44
 8007814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e3      	bne.n	80077ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3314      	adds	r3, #20
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	623b      	str	r3, [r7, #32]
   return(result);
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800784a:	633a      	str	r2, [r7, #48]	@ 0x30
 800784c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e3      	bne.n	8007826 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	60fb      	str	r3, [r7, #12]
   return(result);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	330c      	adds	r3, #12
 800788c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007890:	61fa      	str	r2, [r7, #28]
 8007892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	617b      	str	r3, [r7, #20]
   return(result);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e3      	bne.n	800786c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f844 	bl	800793e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078b6:	e023      	b.n	8007900 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <HAL_UART_IRQHandler+0x4f4>
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8b5 	bl	8007a40 <UART_Transmit_IT>
    return;
 80078d6:	e014      	b.n	8007902 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00e      	beq.n	8007902 <HAL_UART_IRQHandler+0x51e>
 80078e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8f4 	bl	8007ade <UART_EndTransmit_IT>
    return;
 80078f6:	e004      	b.n	8007902 <HAL_UART_IRQHandler+0x51e>
    return;
 80078f8:	bf00      	nop
 80078fa:	e002      	b.n	8007902 <HAL_UART_IRQHandler+0x51e>
      return;
 80078fc:	bf00      	nop
 80078fe:	e000      	b.n	8007902 <HAL_UART_IRQHandler+0x51e>
      return;
 8007900:	bf00      	nop
  }
}
 8007902:	37e8      	adds	r7, #232	@ 0xe8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr

0800791a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	bc80      	pop	{r7}
 800792a:	4770      	bx	lr

0800792c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	bc80      	pop	{r7}
 800793c:	4770      	bx	lr

0800793e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr

08007954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b095      	sub	sp, #84	@ 0x54
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800797c:	643a      	str	r2, [r7, #64]	@ 0x40
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007982:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e5      	bne.n	800795c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3314      	adds	r3, #20
 8007996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3314      	adds	r3, #20
 80079ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e5      	bne.n	8007990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d119      	bne.n	8007a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	330c      	adds	r3, #12
 80079d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	60bb      	str	r3, [r7, #8]
   return(result);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f023 0310 	bic.w	r3, r3, #16
 80079e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ec:	61ba      	str	r2, [r7, #24]
 80079ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6979      	ldr	r1, [r7, #20]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	613b      	str	r3, [r7, #16]
   return(result);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e5      	bne.n	80079cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a0e:	bf00      	nop
 8007a10:	3754      	adds	r7, #84	@ 0x54
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff ff7a 	bl	800792c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b21      	cmp	r3, #33	@ 0x21
 8007a52:	d13e      	bne.n	8007ad2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5c:	d114      	bne.n	8007a88 <UART_Transmit_IT+0x48>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d110      	bne.n	8007a88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	1c9a      	adds	r2, r3, #2
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]
 8007a86:	e008      	b.n	8007a9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	1c59      	adds	r1, r3, #1
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6211      	str	r1, [r2, #32]
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10f      	bne.n	8007ace <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e000      	b.n	8007ad4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ad2:	2302      	movs	r3, #2
  }
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff ff02 	bl	8007908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b08c      	sub	sp, #48	@ 0x30
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b22      	cmp	r3, #34	@ 0x22
 8007b20:	f040 80ae 	bne.w	8007c80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b2c:	d117      	bne.n	8007b5e <UART_Receive_IT+0x50>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d113      	bne.n	8007b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b5c:	e026      	b.n	8007bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b70:	d007      	beq.n	8007b82 <UART_Receive_IT+0x74>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <UART_Receive_IT+0x82>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e008      	b.n	8007ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d15d      	bne.n	8007c7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0220 	bic.w	r2, r2, #32
 8007bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695a      	ldr	r2, [r3, #20]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0201 	bic.w	r2, r2, #1
 8007bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d135      	bne.n	8007c72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f023 0310 	bic.w	r3, r3, #16
 8007c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c2c:	623a      	str	r2, [r7, #32]
 8007c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	69f9      	ldr	r1, [r7, #28]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e5      	bne.n	8007c0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d10a      	bne.n	8007c64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fe67 	bl	800793e <HAL_UARTEx_RxEventCallback>
 8007c70:	e002      	b.n	8007c78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fe51 	bl	800791a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e002      	b.n	8007c82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e000      	b.n	8007c82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c80:	2302      	movs	r3, #2
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3730      	adds	r7, #48	@ 0x30
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007cc6:	f023 030c 	bic.w	r3, r3, #12
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a2c      	ldr	r2, [pc, #176]	@ (8007da0 <UART_SetConfig+0x114>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d103      	bne.n	8007cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007cf4:	f7fd ff82 	bl	8005bfc <HAL_RCC_GetPCLK2Freq>
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	e002      	b.n	8007d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cfc:	f7fd ff6a 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8007d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009a      	lsls	r2, r3, #2
 8007d0c:	441a      	add	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	4a22      	ldr	r2, [pc, #136]	@ (8007da4 <UART_SetConfig+0x118>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	0119      	lsls	r1, r3, #4
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009a      	lsls	r2, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d38:	4b1a      	ldr	r3, [pc, #104]	@ (8007da4 <UART_SetConfig+0x118>)
 8007d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	2064      	movs	r0, #100	@ 0x64
 8007d42:	fb00 f303 	mul.w	r3, r0, r3
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	3332      	adds	r3, #50	@ 0x32
 8007d4c:	4a15      	ldr	r2, [pc, #84]	@ (8007da4 <UART_SetConfig+0x118>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d58:	4419      	add	r1, r3
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	009a      	lsls	r2, r3, #2
 8007d64:	441a      	add	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d70:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <UART_SetConfig+0x118>)
 8007d72:	fba3 0302 	umull	r0, r3, r3, r2
 8007d76:	095b      	lsrs	r3, r3, #5
 8007d78:	2064      	movs	r0, #100	@ 0x64
 8007d7a:	fb00 f303 	mul.w	r3, r0, r3
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	3332      	adds	r3, #50	@ 0x32
 8007d84:	4a07      	ldr	r2, [pc, #28]	@ (8007da4 <UART_SetConfig+0x118>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	095b      	lsrs	r3, r3, #5
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	440a      	add	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40013800 	.word	0x40013800
 8007da4:	51eb851f 	.word	0x51eb851f

08007da8 <memset>:
 8007da8:	4603      	mov	r3, r0
 8007daa:	4402      	add	r2, r0
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d100      	bne.n	8007db2 <memset+0xa>
 8007db0:	4770      	bx	lr
 8007db2:	f803 1b01 	strb.w	r1, [r3], #1
 8007db6:	e7f9      	b.n	8007dac <memset+0x4>

08007db8 <__errno>:
 8007db8:	4b01      	ldr	r3, [pc, #4]	@ (8007dc0 <__errno+0x8>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000078 	.word	0x20000078

08007dc4 <__libc_init_array>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	4d0c      	ldr	r5, [pc, #48]	@ (8007dfc <__libc_init_array+0x38>)
 8007dca:	4c0d      	ldr	r4, [pc, #52]	@ (8007e00 <__libc_init_array+0x3c>)
 8007dcc:	1b64      	subs	r4, r4, r5
 8007dce:	10a4      	asrs	r4, r4, #2
 8007dd0:	42a6      	cmp	r6, r4
 8007dd2:	d109      	bne.n	8007de8 <__libc_init_array+0x24>
 8007dd4:	f000 fa12 	bl	80081fc <_init>
 8007dd8:	2600      	movs	r6, #0
 8007dda:	4d0a      	ldr	r5, [pc, #40]	@ (8007e04 <__libc_init_array+0x40>)
 8007ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8007e08 <__libc_init_array+0x44>)
 8007dde:	1b64      	subs	r4, r4, r5
 8007de0:	10a4      	asrs	r4, r4, #2
 8007de2:	42a6      	cmp	r6, r4
 8007de4:	d105      	bne.n	8007df2 <__libc_init_array+0x2e>
 8007de6:	bd70      	pop	{r4, r5, r6, pc}
 8007de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dec:	4798      	blx	r3
 8007dee:	3601      	adds	r6, #1
 8007df0:	e7ee      	b.n	8007dd0 <__libc_init_array+0xc>
 8007df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df6:	4798      	blx	r3
 8007df8:	3601      	adds	r6, #1
 8007dfa:	e7f2      	b.n	8007de2 <__libc_init_array+0x1e>
 8007dfc:	08008684 	.word	0x08008684
 8007e00:	08008684 	.word	0x08008684
 8007e04:	08008684 	.word	0x08008684
 8007e08:	08008688 	.word	0x08008688

08007e0c <memcpy>:
 8007e0c:	440a      	add	r2, r1
 8007e0e:	4291      	cmp	r1, r2
 8007e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e14:	d100      	bne.n	8007e18 <memcpy+0xc>
 8007e16:	4770      	bx	lr
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e24:	d1f9      	bne.n	8007e1a <memcpy+0xe>
 8007e26:	bd10      	pop	{r4, pc}

08007e28 <log>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	f000 f833 	bl	8007e98 <__ieee754_log>
 8007e32:	4622      	mov	r2, r4
 8007e34:	4606      	mov	r6, r0
 8007e36:	460f      	mov	r7, r1
 8007e38:	462b      	mov	r3, r5
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fe49 	bl	8000ad4 <__aeabi_dcmpun>
 8007e42:	b998      	cbnz	r0, 8007e6c <log+0x44>
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	4620      	mov	r0, r4
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	f7f8 fe38 	bl	8000ac0 <__aeabi_dcmpgt>
 8007e50:	b960      	cbnz	r0, 8007e6c <log+0x44>
 8007e52:	2200      	movs	r2, #0
 8007e54:	2300      	movs	r3, #0
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fe09 	bl	8000a70 <__aeabi_dcmpeq>
 8007e5e:	b140      	cbz	r0, 8007e72 <log+0x4a>
 8007e60:	f7ff ffaa 	bl	8007db8 <__errno>
 8007e64:	2322      	movs	r3, #34	@ 0x22
 8007e66:	2600      	movs	r6, #0
 8007e68:	4f06      	ldr	r7, [pc, #24]	@ (8007e84 <log+0x5c>)
 8007e6a:	6003      	str	r3, [r0, #0]
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	4639      	mov	r1, r7
 8007e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e72:	f7ff ffa1 	bl	8007db8 <__errno>
 8007e76:	2321      	movs	r3, #33	@ 0x21
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	4803      	ldr	r0, [pc, #12]	@ (8007e88 <log+0x60>)
 8007e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e80:	f000 b804 	b.w	8007e8c <nan>
 8007e84:	fff00000 	.word	0xfff00000
 8007e88:	08008678 	.word	0x08008678

08007e8c <nan>:
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	4901      	ldr	r1, [pc, #4]	@ (8007e94 <nan+0x8>)
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	7ff80000 	.word	0x7ff80000

08007e98 <__ieee754_log>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	da24      	bge.n	8007ef4 <__ieee754_log+0x5c>
 8007eaa:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007eae:	4304      	orrs	r4, r0
 8007eb0:	d108      	bne.n	8007ec4 <__ieee754_log+0x2c>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	49cb      	ldr	r1, [pc, #812]	@ (80081e8 <__ieee754_log+0x350>)
 8007eba:	f7f8 fc9b 	bl	80007f4 <__aeabi_ddiv>
 8007ebe:	b007      	add	sp, #28
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	da04      	bge.n	8007ed2 <__ieee754_log+0x3a>
 8007ec8:	f7f8 f9b2 	bl	8000230 <__aeabi_dsub>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e7f3      	b.n	8007eba <__ieee754_log+0x22>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4bc5      	ldr	r3, [pc, #788]	@ (80081ec <__ieee754_log+0x354>)
 8007ed6:	f7f8 fb63 	bl	80005a0 <__aeabi_dmul>
 8007eda:	460b      	mov	r3, r1
 8007edc:	460d      	mov	r5, r1
 8007ede:	4602      	mov	r2, r0
 8007ee0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8007ee4:	48c2      	ldr	r0, [pc, #776]	@ (80081f0 <__ieee754_log+0x358>)
 8007ee6:	4285      	cmp	r5, r0
 8007ee8:	dd06      	ble.n	8007ef8 <__ieee754_log+0x60>
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	f7f8 f9a1 	bl	8000234 <__adddf3>
 8007ef2:	e7e4      	b.n	8007ebe <__ieee754_log+0x26>
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	e7f5      	b.n	8007ee4 <__ieee754_log+0x4c>
 8007ef8:	152c      	asrs	r4, r5, #20
 8007efa:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007efe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007f02:	440c      	add	r4, r1
 8007f04:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8007f08:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8007f0c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8007f10:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8007f14:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8007f18:	ea41 0305 	orr.w	r3, r1, r5
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	2200      	movs	r2, #0
 8007f22:	4bb4      	ldr	r3, [pc, #720]	@ (80081f4 <__ieee754_log+0x35c>)
 8007f24:	f7f8 f984 	bl	8000230 <__aeabi_dsub>
 8007f28:	1cab      	adds	r3, r5, #2
 8007f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	4682      	mov	sl, r0
 8007f32:	468b      	mov	fp, r1
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8007f3c:	dc53      	bgt.n	8007fe6 <__ieee754_log+0x14e>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f7f8 fd96 	bl	8000a70 <__aeabi_dcmpeq>
 8007f44:	b1d0      	cbz	r0, 8007f7c <__ieee754_log+0xe4>
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	f000 8120 	beq.w	800818c <__ieee754_log+0x2f4>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7f8 fabd 	bl	80004cc <__aeabi_i2d>
 8007f52:	a391      	add	r3, pc, #580	@ (adr r3, 8008198 <__ieee754_log+0x300>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	4606      	mov	r6, r0
 8007f5a:	460f      	mov	r7, r1
 8007f5c:	f7f8 fb20 	bl	80005a0 <__aeabi_dmul>
 8007f60:	a38f      	add	r3, pc, #572	@ (adr r3, 80081a0 <__ieee754_log+0x308>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fb17 	bl	80005a0 <__aeabi_dmul>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	e7b8      	b.n	8007eee <__ieee754_log+0x56>
 8007f7c:	a38a      	add	r3, pc, #552	@ (adr r3, 80081a8 <__ieee754_log+0x310>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	4650      	mov	r0, sl
 8007f84:	4659      	mov	r1, fp
 8007f86:	f7f8 fb0b 	bl	80005a0 <__aeabi_dmul>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	2000      	movs	r0, #0
 8007f90:	4999      	ldr	r1, [pc, #612]	@ (80081f8 <__ieee754_log+0x360>)
 8007f92:	f7f8 f94d 	bl	8000230 <__aeabi_dsub>
 8007f96:	4652      	mov	r2, sl
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	465b      	mov	r3, fp
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	f7f8 fafd 	bl	80005a0 <__aeabi_dmul>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4630      	mov	r0, r6
 8007fac:	4639      	mov	r1, r7
 8007fae:	f7f8 faf7 	bl	80005a0 <__aeabi_dmul>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	b914      	cbnz	r4, 8007fbe <__ieee754_log+0x126>
 8007fb8:	4632      	mov	r2, r6
 8007fba:	463b      	mov	r3, r7
 8007fbc:	e0a0      	b.n	8008100 <__ieee754_log+0x268>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7f8 fa84 	bl	80004cc <__aeabi_i2d>
 8007fc4:	a374      	add	r3, pc, #464	@ (adr r3, 8008198 <__ieee754_log+0x300>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	4680      	mov	r8, r0
 8007fcc:	4689      	mov	r9, r1
 8007fce:	f7f8 fae7 	bl	80005a0 <__aeabi_dmul>
 8007fd2:	a373      	add	r3, pc, #460	@ (adr r3, 80081a0 <__ieee754_log+0x308>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 fade 	bl	80005a0 <__aeabi_dmul>
 8007fe4:	e0a5      	b.n	8008132 <__ieee754_log+0x29a>
 8007fe6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007fea:	f7f8 f923 	bl	8000234 <__adddf3>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	4659      	mov	r1, fp
 8007ff6:	f7f8 fbfd 	bl	80007f4 <__aeabi_ddiv>
 8007ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f7f8 fa64 	bl	80004cc <__aeabi_i2d>
 8008004:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800800c:	4610      	mov	r0, r2
 800800e:	4619      	mov	r1, r3
 8008010:	f7f8 fac6 	bl	80005a0 <__aeabi_dmul>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800801c:	f7f8 fac0 	bl	80005a0 <__aeabi_dmul>
 8008020:	a363      	add	r3, pc, #396	@ (adr r3, 80081b0 <__ieee754_log+0x318>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	4680      	mov	r8, r0
 8008028:	4689      	mov	r9, r1
 800802a:	f7f8 fab9 	bl	80005a0 <__aeabi_dmul>
 800802e:	a362      	add	r3, pc, #392	@ (adr r3, 80081b8 <__ieee754_log+0x320>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f8fe 	bl	8000234 <__adddf3>
 8008038:	4642      	mov	r2, r8
 800803a:	464b      	mov	r3, r9
 800803c:	f7f8 fab0 	bl	80005a0 <__aeabi_dmul>
 8008040:	a35f      	add	r3, pc, #380	@ (adr r3, 80081c0 <__ieee754_log+0x328>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f8f5 	bl	8000234 <__adddf3>
 800804a:	4642      	mov	r2, r8
 800804c:	464b      	mov	r3, r9
 800804e:	f7f8 faa7 	bl	80005a0 <__aeabi_dmul>
 8008052:	a35d      	add	r3, pc, #372	@ (adr r3, 80081c8 <__ieee754_log+0x330>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f8ec 	bl	8000234 <__adddf3>
 800805c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008060:	f7f8 fa9e 	bl	80005a0 <__aeabi_dmul>
 8008064:	a35a      	add	r3, pc, #360	@ (adr r3, 80081d0 <__ieee754_log+0x338>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 fa95 	bl	80005a0 <__aeabi_dmul>
 8008076:	a358      	add	r3, pc, #352	@ (adr r3, 80081d8 <__ieee754_log+0x340>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f7f8 f8da 	bl	8000234 <__adddf3>
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	f7f8 fa8c 	bl	80005a0 <__aeabi_dmul>
 8008088:	a355      	add	r3, pc, #340	@ (adr r3, 80081e0 <__ieee754_log+0x348>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f8d1 	bl	8000234 <__adddf3>
 8008092:	4642      	mov	r2, r8
 8008094:	464b      	mov	r3, r9
 8008096:	f7f8 fa83 	bl	80005a0 <__aeabi_dmul>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a2:	f7f8 f8c7 	bl	8000234 <__adddf3>
 80080a6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80080aa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80080ae:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80080b2:	3551      	adds	r5, #81	@ 0x51
 80080b4:	4335      	orrs	r5, r6
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	4680      	mov	r8, r0
 80080ba:	4689      	mov	r9, r1
 80080bc:	dd48      	ble.n	8008150 <__ieee754_log+0x2b8>
 80080be:	2200      	movs	r2, #0
 80080c0:	4b4d      	ldr	r3, [pc, #308]	@ (80081f8 <__ieee754_log+0x360>)
 80080c2:	4650      	mov	r0, sl
 80080c4:	4659      	mov	r1, fp
 80080c6:	f7f8 fa6b 	bl	80005a0 <__aeabi_dmul>
 80080ca:	4652      	mov	r2, sl
 80080cc:	465b      	mov	r3, fp
 80080ce:	f7f8 fa67 	bl	80005a0 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4606      	mov	r6, r0
 80080d8:	460f      	mov	r7, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f8a9 	bl	8000234 <__adddf3>
 80080e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080e6:	f7f8 fa5b 	bl	80005a0 <__aeabi_dmul>
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	b964      	cbnz	r4, 800810a <__ieee754_log+0x272>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 f89a 	bl	8000230 <__aeabi_dsub>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 f894 	bl	8000230 <__aeabi_dsub>
 8008108:	e6d9      	b.n	8007ebe <__ieee754_log+0x26>
 800810a:	a323      	add	r3, pc, #140	@ (adr r3, 8008198 <__ieee754_log+0x300>)
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008114:	f7f8 fa44 	bl	80005a0 <__aeabi_dmul>
 8008118:	a321      	add	r3, pc, #132	@ (adr r3, 80081a0 <__ieee754_log+0x308>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008126:	f7f8 fa3b 	bl	80005a0 <__aeabi_dmul>
 800812a:	4642      	mov	r2, r8
 800812c:	464b      	mov	r3, r9
 800812e:	f7f8 f881 	bl	8000234 <__adddf3>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4630      	mov	r0, r6
 8008138:	4639      	mov	r1, r7
 800813a:	f7f8 f879 	bl	8000230 <__aeabi_dsub>
 800813e:	4652      	mov	r2, sl
 8008140:	465b      	mov	r3, fp
 8008142:	f7f8 f875 	bl	8000230 <__aeabi_dsub>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	e7d9      	b.n	8008104 <__ieee754_log+0x26c>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4650      	mov	r0, sl
 8008156:	4659      	mov	r1, fp
 8008158:	f7f8 f86a 	bl	8000230 <__aeabi_dsub>
 800815c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008160:	f7f8 fa1e 	bl	80005a0 <__aeabi_dmul>
 8008164:	4606      	mov	r6, r0
 8008166:	460f      	mov	r7, r1
 8008168:	2c00      	cmp	r4, #0
 800816a:	f43f af25 	beq.w	8007fb8 <__ieee754_log+0x120>
 800816e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008198 <__ieee754_log+0x300>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008178:	f7f8 fa12 	bl	80005a0 <__aeabi_dmul>
 800817c:	a308      	add	r3, pc, #32	@ (adr r3, 80081a0 <__ieee754_log+0x308>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	4604      	mov	r4, r0
 8008184:	460d      	mov	r5, r1
 8008186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818a:	e729      	b.n	8007fe0 <__ieee754_log+0x148>
 800818c:	2000      	movs	r0, #0
 800818e:	2100      	movs	r1, #0
 8008190:	e695      	b.n	8007ebe <__ieee754_log+0x26>
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
 8008198:	fee00000 	.word	0xfee00000
 800819c:	3fe62e42 	.word	0x3fe62e42
 80081a0:	35793c76 	.word	0x35793c76
 80081a4:	3dea39ef 	.word	0x3dea39ef
 80081a8:	55555555 	.word	0x55555555
 80081ac:	3fd55555 	.word	0x3fd55555
 80081b0:	df3e5244 	.word	0xdf3e5244
 80081b4:	3fc2f112 	.word	0x3fc2f112
 80081b8:	96cb03de 	.word	0x96cb03de
 80081bc:	3fc74664 	.word	0x3fc74664
 80081c0:	94229359 	.word	0x94229359
 80081c4:	3fd24924 	.word	0x3fd24924
 80081c8:	55555593 	.word	0x55555593
 80081cc:	3fe55555 	.word	0x3fe55555
 80081d0:	d078c69f 	.word	0xd078c69f
 80081d4:	3fc39a09 	.word	0x3fc39a09
 80081d8:	1d8e78af 	.word	0x1d8e78af
 80081dc:	3fcc71c5 	.word	0x3fcc71c5
 80081e0:	9997fa04 	.word	0x9997fa04
 80081e4:	3fd99999 	.word	0x3fd99999
 80081e8:	c3500000 	.word	0xc3500000
 80081ec:	43500000 	.word	0x43500000
 80081f0:	7fefffff 	.word	0x7fefffff
 80081f4:	3ff00000 	.word	0x3ff00000
 80081f8:	3fe00000 	.word	0x3fe00000

080081fc <_init>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

08008208 <_fini>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	bf00      	nop
 800820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820e:	bc08      	pop	{r3}
 8008210:	469e      	mov	lr, r3
 8008212:	4770      	bx	lr
