
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fcc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080091b4  080091b4  0000a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009660  08009660  0000b0d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009660  08009660  0000a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009668  08009668  0000b0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800966c  0800966c  0000a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009670  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000d4  08009744  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08009744  0000b3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152c5  00000000  00000000  0000b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bfc  00000000  00000000  000203c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00023fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f66  00000000  00000000  000253b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228ec  00000000  00000000  0002631e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3fd  00000000  00000000  00048c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bff06  00000000  00000000  00063007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122f0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  00122f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00128ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000d4 	.word	0x200000d4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800919c 	.word	0x0800919c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000d8 	.word	0x200000d8
 8000224:	0800919c 	.word	0x0800919c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_frsub>:
 8000bb0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb4:	e002      	b.n	8000bbc <__addsf3>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fsub>:
 8000bb8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bbc <__addsf3>:
 8000bbc:	0042      	lsls	r2, r0, #1
 8000bbe:	bf1f      	itttt	ne
 8000bc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc4:	ea92 0f03 	teqne	r2, r3
 8000bc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd0:	d06a      	beq.n	8000ca8 <__addsf3+0xec>
 8000bd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bda:	bfc1      	itttt	gt
 8000bdc:	18d2      	addgt	r2, r2, r3
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	4048      	eorgt	r0, r1
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	bfb8      	it	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	2b19      	cmp	r3, #25
 8000bea:	bf88      	it	hi
 8000bec:	4770      	bxhi	lr
 8000bee:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c06:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0a:	bf18      	it	ne
 8000c0c:	4249      	negne	r1, r1
 8000c0e:	ea92 0f03 	teq	r2, r3
 8000c12:	d03f      	beq.n	8000c94 <__addsf3+0xd8>
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	fa41 fc03 	asr.w	ip, r1, r3
 8000c1c:	eb10 000c 	adds.w	r0, r0, ip
 8000c20:	f1c3 0320 	rsb	r3, r3, #32
 8000c24:	fa01 f103 	lsl.w	r1, r1, r3
 8000c28:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__addsf3+0x78>
 8000c2e:	4249      	negs	r1, r1
 8000c30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c34:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c38:	d313      	bcc.n	8000c62 <__addsf3+0xa6>
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c3e:	d306      	bcc.n	8000c4e <__addsf3+0x92>
 8000c40:	0840      	lsrs	r0, r0, #1
 8000c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c46:	f102 0201 	add.w	r2, r2, #1
 8000c4a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c4c:	d251      	bcs.n	8000cf2 <__addsf3+0x136>
 8000c4e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	ea40 0003 	orr.w	r0, r0, r3
 8000c60:	4770      	bx	lr
 8000c62:	0049      	lsls	r1, r1, #1
 8000c64:	eb40 0000 	adc.w	r0, r0, r0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c70:	d2ed      	bcs.n	8000c4e <__addsf3+0x92>
 8000c72:	fab0 fc80 	clz	ip, r0
 8000c76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c82:	bfaa      	itet	ge
 8000c84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c88:	4252      	neglt	r2, r2
 8000c8a:	4318      	orrge	r0, r3
 8000c8c:	bfbc      	itt	lt
 8000c8e:	40d0      	lsrlt	r0, r2
 8000c90:	4318      	orrlt	r0, r3
 8000c92:	4770      	bx	lr
 8000c94:	f092 0f00 	teq	r2, #0
 8000c98:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c9c:	bf06      	itte	eq
 8000c9e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	3201      	addeq	r2, #1
 8000ca4:	3b01      	subne	r3, #1
 8000ca6:	e7b5      	b.n	8000c14 <__addsf3+0x58>
 8000ca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb0:	bf18      	it	ne
 8000cb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb6:	d021      	beq.n	8000cfc <__addsf3+0x140>
 8000cb8:	ea92 0f03 	teq	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <__addsf3+0x10c>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea90 0f01 	teq	r0, r1
 8000ccc:	bf1c      	itt	ne
 8000cce:	2000      	movne	r0, #0
 8000cd0:	4770      	bxne	lr
 8000cd2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cd6:	d104      	bne.n	8000ce2 <__addsf3+0x126>
 8000cd8:	0040      	lsls	r0, r0, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ce6:	bf3c      	itt	cc
 8000ce8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cec:	4770      	bxcc	lr
 8000cee:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d00:	bf16      	itet	ne
 8000d02:	4608      	movne	r0, r1
 8000d04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d08:	4601      	movne	r1, r0
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	bf06      	itte	eq
 8000d0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d12:	ea90 0f01 	teqeq	r0, r1
 8000d16:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_ui2f>:
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e004      	b.n	8000d2c <__aeabi_i2f+0x8>
 8000d22:	bf00      	nop

08000d24 <__aeabi_i2f>:
 8000d24:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d28:	bf48      	it	mi
 8000d2a:	4240      	negmi	r0, r0
 8000d2c:	ea5f 0c00 	movs.w	ip, r0
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d38:	4601      	mov	r1, r0
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	e01c      	b.n	8000d7a <__aeabi_l2f+0x2a>

08000d40 <__aeabi_ul2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <__aeabi_l2f+0x14>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_l2f>:
 8000d50:	ea50 0201 	orrs.w	r2, r0, r1
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_l2f+0x14>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	ea5f 0c01 	movs.w	ip, r1
 8000d68:	bf02      	ittt	eq
 8000d6a:	4684      	moveq	ip, r0
 8000d6c:	4601      	moveq	r1, r0
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d74:	bf08      	it	eq
 8000d76:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d7e:	fabc f28c 	clz	r2, ip
 8000d82:	3a08      	subs	r2, #8
 8000d84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d88:	db10      	blt.n	8000dac <__aeabi_l2f+0x5c>
 8000d8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8e:	4463      	add	r3, ip
 8000d90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	f020 0001 	biceq.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	f102 0220 	add.w	r2, r2, #32
 8000db0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fmul>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d06f      	beq.n	8000ec4 <__aeabi_fmul+0xf8>
 8000de4:	441a      	add	r2, r3
 8000de6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dea:	0240      	lsls	r0, r0, #9
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df2:	d01e      	beq.n	8000e32 <__aeabi_fmul+0x66>
 8000df4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e00:	fba0 3101 	umull	r3, r1, r0, r1
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e08:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e0c:	bf3e      	ittt	cc
 8000e0e:	0049      	lslcc	r1, r1, #1
 8000e10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	ea40 0001 	orr.w	r0, r0, r1
 8000e1a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e1e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e20:	d81d      	bhi.n	8000e5e <__aeabi_fmul+0x92>
 8000e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2a:	bf08      	it	eq
 8000e2c:	f020 0001 	biceq.w	r0, r0, #1
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	0249      	lsleq	r1, r1, #9
 8000e3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e46:	3a7f      	subs	r2, #127	@ 0x7f
 8000e48:	bfc2      	ittt	gt
 8000e4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e52:	4770      	bxgt	lr
 8000e54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	dc5d      	bgt.n	8000f1c <__aeabi_fmul+0x150>
 8000e60:	f112 0f19 	cmn.w	r2, #25
 8000e64:	bfdc      	itt	le
 8000e66:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6a:	4770      	bxle	lr
 8000e6c:	f1c2 0200 	rsb	r2, r2, #0
 8000e70:	0041      	lsls	r1, r0, #1
 8000e72:	fa21 f102 	lsr.w	r1, r1, r2
 8000e76:	f1c2 0220 	rsb	r2, r2, #32
 8000e7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e82:	f140 0000 	adc.w	r0, r0, #0
 8000e86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8a:	bf08      	it	eq
 8000e8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e90:	4770      	bx	lr
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xce>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xe6>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fmul+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	bf18      	it	ne
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d00a      	beq.n	8000eea <__aeabi_fmul+0x11e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ede:	d1d8      	bne.n	8000e92 <__aeabi_fmul+0xc6>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f090 0f00 	teq	r0, #0
 8000eee:	bf17      	itett	ne
 8000ef0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef4:	4608      	moveq	r0, r1
 8000ef6:	f091 0f00 	teqne	r1, #0
 8000efa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000efe:	d014      	beq.n	8000f2a <__aeabi_fmul+0x15e>
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d101      	bne.n	8000f0a <__aeabi_fmul+0x13e>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d10f      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f0a:	ea93 0f0c 	teq	r3, ip
 8000f0e:	d103      	bne.n	8000f18 <__aeabi_fmul+0x14c>
 8000f10:	024b      	lsls	r3, r1, #9
 8000f12:	bf18      	it	ne
 8000f14:	4608      	movne	r0, r1
 8000f16:	d108      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f28:	4770      	bx	lr
 8000f2a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f2e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_fdiv>:
 8000f34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f42:	ea92 0f0c 	teqne	r2, ip
 8000f46:	ea93 0f0c 	teqne	r3, ip
 8000f4a:	d069      	beq.n	8001020 <__aeabi_fdiv+0xec>
 8000f4c:	eba2 0203 	sub.w	r2, r2, r3
 8000f50:	ea80 0c01 	eor.w	ip, r0, r1
 8000f54:	0249      	lsls	r1, r1, #9
 8000f56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5a:	d037      	beq.n	8000fcc <__aeabi_fdiv+0x98>
 8000f5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf38      	it	cc
 8000f70:	005b      	lslcc	r3, r3, #1
 8000f72:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f76:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	bf24      	itt	cs
 8000f7e:	1a5b      	subcs	r3, r3, r1
 8000f80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f88:	bf24      	itt	cs
 8000f8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f96:	bf24      	itt	cs
 8000f98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000faa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb6:	d1e0      	bne.n	8000f7a <__aeabi_fdiv+0x46>
 8000fb8:	2afd      	cmp	r2, #253	@ 0xfd
 8000fba:	f63f af50 	bhi.w	8000e5e <__aeabi_fmul+0x92>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc4:	bf08      	it	eq
 8000fc6:	f020 0001 	biceq.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd4:	327f      	adds	r2, #127	@ 0x7f
 8000fd6:	bfc2      	ittt	gt
 8000fd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe0:	4770      	bxgt	lr
 8000fe2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	3a01      	subs	r2, #1
 8000fec:	e737      	b.n	8000e5e <__aeabi_fmul+0x92>
 8000fee:	f092 0f00 	teq	r2, #0
 8000ff2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0040      	lsleq	r0, r0, #1
 8000ffa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ffe:	3a01      	subeq	r2, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xc2>
 8001002:	ea40 000c 	orr.w	r0, r0, ip
 8001006:	f093 0f00 	teq	r3, #0
 800100a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0049      	lsleq	r1, r1, #1
 8001012:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001016:	3b01      	subeq	r3, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xda>
 800101a:	ea41 010c 	orr.w	r1, r1, ip
 800101e:	e795      	b.n	8000f4c <__aeabi_fdiv+0x18>
 8001020:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001024:	ea92 0f0c 	teq	r2, ip
 8001028:	d108      	bne.n	800103c <__aeabi_fdiv+0x108>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	f47f af7d 	bne.w	8000f2a <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	f47f af70 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001038:	4608      	mov	r0, r1
 800103a:	e776      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	d104      	bne.n	800104c <__aeabi_fdiv+0x118>
 8001042:	024b      	lsls	r3, r1, #9
 8001044:	f43f af4c 	beq.w	8000ee0 <__aeabi_fmul+0x114>
 8001048:	4608      	mov	r0, r1
 800104a:	e76e      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800104c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001050:	bf18      	it	ne
 8001052:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	d1ca      	bne.n	8000fee <__aeabi_fdiv+0xba>
 8001058:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800105c:	f47f af5c 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001060:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001064:	f47f af3c 	bne.w	8000ee0 <__aeabi_fmul+0x114>
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800106a:	bf00      	nop

0800106c <__aeabi_f2uiz>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	d20e      	bcs.n	800108e <__aeabi_f2uiz+0x22>
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001074:	d30b      	bcc.n	800108e <__aeabi_f2uiz+0x22>
 8001076:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d409      	bmi.n	8001094 <__aeabi_f2uiz+0x28>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	4770      	bx	lr
 8001094:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001098:	d101      	bne.n	800109e <__aeabi_f2uiz+0x32>
 800109a:	0242      	lsls	r2, r0, #9
 800109c:	d102      	bne.n	80010a4 <__aeabi_f2uiz+0x38>
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_uldivmod>:
 80010ac:	b953      	cbnz	r3, 80010c4 <__aeabi_uldivmod+0x18>
 80010ae:	b94a      	cbnz	r2, 80010c4 <__aeabi_uldivmod+0x18>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	bf08      	it	eq
 80010b4:	2800      	cmpeq	r0, #0
 80010b6:	bf1c      	itt	ne
 80010b8:	f04f 31ff 	movne.w	r1, #4294967295
 80010bc:	f04f 30ff 	movne.w	r0, #4294967295
 80010c0:	f000 b968 	b.w	8001394 <__aeabi_idiv0>
 80010c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010cc:	f000 f806 	bl	80010dc <__udivmoddi4>
 80010d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9d08      	ldr	r5, [sp, #32]
 80010e2:	460c      	mov	r4, r1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d14e      	bne.n	8001186 <__udivmoddi4+0xaa>
 80010e8:	4694      	mov	ip, r2
 80010ea:	458c      	cmp	ip, r1
 80010ec:	4686      	mov	lr, r0
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	d962      	bls.n	80011ba <__udivmoddi4+0xde>
 80010f4:	b14a      	cbz	r2, 800110a <__udivmoddi4+0x2e>
 80010f6:	f1c2 0320 	rsb	r3, r2, #32
 80010fa:	4091      	lsls	r1, r2
 80010fc:	fa20 f303 	lsr.w	r3, r0, r3
 8001100:	fa0c fc02 	lsl.w	ip, ip, r2
 8001104:	4319      	orrs	r1, r3
 8001106:	fa00 fe02 	lsl.w	lr, r0, r2
 800110a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800110e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001112:	fb07 1114 	mls	r1, r7, r4, r1
 8001116:	fa1f f68c 	uxth.w	r6, ip
 800111a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001122:	fb04 f106 	mul.w	r1, r4, r6
 8001126:	4299      	cmp	r1, r3
 8001128:	d90a      	bls.n	8001140 <__udivmoddi4+0x64>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001132:	f080 8110 	bcs.w	8001356 <__udivmoddi4+0x27a>
 8001136:	4299      	cmp	r1, r3
 8001138:	f240 810d 	bls.w	8001356 <__udivmoddi4+0x27a>
 800113c:	3c02      	subs	r4, #2
 800113e:	4463      	add	r3, ip
 8001140:	1a59      	subs	r1, r3, r1
 8001142:	fbb1 f0f7 	udiv	r0, r1, r7
 8001146:	fb07 1110 	mls	r1, r7, r0, r1
 800114a:	fb00 f606 	mul.w	r6, r0, r6
 800114e:	fa1f f38e 	uxth.w	r3, lr
 8001152:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001156:	429e      	cmp	r6, r3
 8001158:	d90a      	bls.n	8001170 <__udivmoddi4+0x94>
 800115a:	eb1c 0303 	adds.w	r3, ip, r3
 800115e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001162:	f080 80fa 	bcs.w	800135a <__udivmoddi4+0x27e>
 8001166:	429e      	cmp	r6, r3
 8001168:	f240 80f7 	bls.w	800135a <__udivmoddi4+0x27e>
 800116c:	4463      	add	r3, ip
 800116e:	3802      	subs	r0, #2
 8001170:	2100      	movs	r1, #0
 8001172:	1b9b      	subs	r3, r3, r6
 8001174:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001178:	b11d      	cbz	r5, 8001182 <__udivmoddi4+0xa6>
 800117a:	40d3      	lsrs	r3, r2
 800117c:	2200      	movs	r2, #0
 800117e:	e9c5 3200 	strd	r3, r2, [r5]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d905      	bls.n	8001196 <__udivmoddi4+0xba>
 800118a:	b10d      	cbz	r5, 8001190 <__udivmoddi4+0xb4>
 800118c:	e9c5 0100 	strd	r0, r1, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	4608      	mov	r0, r1
 8001194:	e7f5      	b.n	8001182 <__udivmoddi4+0xa6>
 8001196:	fab3 f183 	clz	r1, r3
 800119a:	2900      	cmp	r1, #0
 800119c:	d146      	bne.n	800122c <__udivmoddi4+0x150>
 800119e:	42a3      	cmp	r3, r4
 80011a0:	d302      	bcc.n	80011a8 <__udivmoddi4+0xcc>
 80011a2:	4290      	cmp	r0, r2
 80011a4:	f0c0 80ee 	bcc.w	8001384 <__udivmoddi4+0x2a8>
 80011a8:	1a86      	subs	r6, r0, r2
 80011aa:	eb64 0303 	sbc.w	r3, r4, r3
 80011ae:	2001      	movs	r0, #1
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d0e6      	beq.n	8001182 <__udivmoddi4+0xa6>
 80011b4:	e9c5 6300 	strd	r6, r3, [r5]
 80011b8:	e7e3      	b.n	8001182 <__udivmoddi4+0xa6>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	f040 808f 	bne.w	80012de <__udivmoddi4+0x202>
 80011c0:	eba1 040c 	sub.w	r4, r1, ip
 80011c4:	2101      	movs	r1, #1
 80011c6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ca:	fa1f f78c 	uxth.w	r7, ip
 80011ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80011d2:	fb08 4416 	mls	r4, r8, r6, r4
 80011d6:	fb07 f006 	mul.w	r0, r7, r6
 80011da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d908      	bls.n	80011f8 <__udivmoddi4+0x11c>
 80011e6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x11a>
 80011f0:	4298      	cmp	r0, r3
 80011f2:	f200 80cb 	bhi.w	800138c <__udivmoddi4+0x2b0>
 80011f6:	4626      	mov	r6, r4
 80011f8:	1a1c      	subs	r4, r3, r0
 80011fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80011fe:	fb08 4410 	mls	r4, r8, r0, r4
 8001202:	fb00 f707 	mul.w	r7, r0, r7
 8001206:	fa1f f38e 	uxth.w	r3, lr
 800120a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800120e:	429f      	cmp	r7, r3
 8001210:	d908      	bls.n	8001224 <__udivmoddi4+0x148>
 8001212:	eb1c 0303 	adds.w	r3, ip, r3
 8001216:	f100 34ff 	add.w	r4, r0, #4294967295
 800121a:	d202      	bcs.n	8001222 <__udivmoddi4+0x146>
 800121c:	429f      	cmp	r7, r3
 800121e:	f200 80ae 	bhi.w	800137e <__udivmoddi4+0x2a2>
 8001222:	4620      	mov	r0, r4
 8001224:	1bdb      	subs	r3, r3, r7
 8001226:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800122a:	e7a5      	b.n	8001178 <__udivmoddi4+0x9c>
 800122c:	f1c1 0720 	rsb	r7, r1, #32
 8001230:	408b      	lsls	r3, r1
 8001232:	fa22 fc07 	lsr.w	ip, r2, r7
 8001236:	ea4c 0c03 	orr.w	ip, ip, r3
 800123a:	fa24 f607 	lsr.w	r6, r4, r7
 800123e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001242:	fbb6 f8f9 	udiv	r8, r6, r9
 8001246:	fa1f fe8c 	uxth.w	lr, ip
 800124a:	fb09 6618 	mls	r6, r9, r8, r6
 800124e:	fa20 f307 	lsr.w	r3, r0, r7
 8001252:	408c      	lsls	r4, r1
 8001254:	fa00 fa01 	lsl.w	sl, r0, r1
 8001258:	fb08 f00e 	mul.w	r0, r8, lr
 800125c:	431c      	orrs	r4, r3
 800125e:	0c23      	lsrs	r3, r4, #16
 8001260:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001264:	4298      	cmp	r0, r3
 8001266:	fa02 f201 	lsl.w	r2, r2, r1
 800126a:	d90a      	bls.n	8001282 <__udivmoddi4+0x1a6>
 800126c:	eb1c 0303 	adds.w	r3, ip, r3
 8001270:	f108 36ff 	add.w	r6, r8, #4294967295
 8001274:	f080 8081 	bcs.w	800137a <__udivmoddi4+0x29e>
 8001278:	4298      	cmp	r0, r3
 800127a:	d97e      	bls.n	800137a <__udivmoddi4+0x29e>
 800127c:	f1a8 0802 	sub.w	r8, r8, #2
 8001280:	4463      	add	r3, ip
 8001282:	1a1e      	subs	r6, r3, r0
 8001284:	fbb6 f3f9 	udiv	r3, r6, r9
 8001288:	fb09 6613 	mls	r6, r9, r3, r6
 800128c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001290:	b2a4      	uxth	r4, r4
 8001292:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001296:	45a6      	cmp	lr, r4
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x1d0>
 800129a:	eb1c 0404 	adds.w	r4, ip, r4
 800129e:	f103 30ff 	add.w	r0, r3, #4294967295
 80012a2:	d266      	bcs.n	8001372 <__udivmoddi4+0x296>
 80012a4:	45a6      	cmp	lr, r4
 80012a6:	d964      	bls.n	8001372 <__udivmoddi4+0x296>
 80012a8:	3b02      	subs	r3, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012b0:	fba0 8302 	umull	r8, r3, r0, r2
 80012b4:	eba4 040e 	sub.w	r4, r4, lr
 80012b8:	429c      	cmp	r4, r3
 80012ba:	46c6      	mov	lr, r8
 80012bc:	461e      	mov	r6, r3
 80012be:	d350      	bcc.n	8001362 <__udivmoddi4+0x286>
 80012c0:	d04d      	beq.n	800135e <__udivmoddi4+0x282>
 80012c2:	b155      	cbz	r5, 80012da <__udivmoddi4+0x1fe>
 80012c4:	ebba 030e 	subs.w	r3, sl, lr
 80012c8:	eb64 0406 	sbc.w	r4, r4, r6
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	40cb      	lsrs	r3, r1
 80012d2:	431f      	orrs	r7, r3
 80012d4:	40cc      	lsrs	r4, r1
 80012d6:	e9c5 7400 	strd	r7, r4, [r5]
 80012da:	2100      	movs	r1, #0
 80012dc:	e751      	b.n	8001182 <__udivmoddi4+0xa6>
 80012de:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e2:	f1c2 0320 	rsb	r3, r2, #32
 80012e6:	40d9      	lsrs	r1, r3
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa20 f303 	lsr.w	r3, r0, r3
 80012f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012f8:	fb08 1110 	mls	r1, r8, r0, r1
 80012fc:	4094      	lsls	r4, r2
 80012fe:	431c      	orrs	r4, r3
 8001300:	fa1f f78c 	uxth.w	r7, ip
 8001304:	0c23      	lsrs	r3, r4, #16
 8001306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800130a:	fb00 f107 	mul.w	r1, r0, r7
 800130e:	4299      	cmp	r1, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x248>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f100 36ff 	add.w	r6, r0, #4294967295
 800131a:	d22c      	bcs.n	8001376 <__udivmoddi4+0x29a>
 800131c:	4299      	cmp	r1, r3
 800131e:	d92a      	bls.n	8001376 <__udivmoddi4+0x29a>
 8001320:	3802      	subs	r0, #2
 8001322:	4463      	add	r3, ip
 8001324:	1a5b      	subs	r3, r3, r1
 8001326:	fbb3 f1f8 	udiv	r1, r3, r8
 800132a:	fb08 3311 	mls	r3, r8, r1, r3
 800132e:	b2a4      	uxth	r4, r4
 8001330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001334:	fb01 f307 	mul.w	r3, r1, r7
 8001338:	42a3      	cmp	r3, r4
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0x272>
 800133c:	eb1c 0404 	adds.w	r4, ip, r4
 8001340:	f101 36ff 	add.w	r6, r1, #4294967295
 8001344:	d213      	bcs.n	800136e <__udivmoddi4+0x292>
 8001346:	42a3      	cmp	r3, r4
 8001348:	d911      	bls.n	800136e <__udivmoddi4+0x292>
 800134a:	3902      	subs	r1, #2
 800134c:	4464      	add	r4, ip
 800134e:	1ae4      	subs	r4, r4, r3
 8001350:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001354:	e73b      	b.n	80011ce <__udivmoddi4+0xf2>
 8001356:	4604      	mov	r4, r0
 8001358:	e6f2      	b.n	8001140 <__udivmoddi4+0x64>
 800135a:	4608      	mov	r0, r1
 800135c:	e708      	b.n	8001170 <__udivmoddi4+0x94>
 800135e:	45c2      	cmp	sl, r8
 8001360:	d2af      	bcs.n	80012c2 <__udivmoddi4+0x1e6>
 8001362:	ebb8 0e02 	subs.w	lr, r8, r2
 8001366:	eb63 060c 	sbc.w	r6, r3, ip
 800136a:	3801      	subs	r0, #1
 800136c:	e7a9      	b.n	80012c2 <__udivmoddi4+0x1e6>
 800136e:	4631      	mov	r1, r6
 8001370:	e7ed      	b.n	800134e <__udivmoddi4+0x272>
 8001372:	4603      	mov	r3, r0
 8001374:	e79a      	b.n	80012ac <__udivmoddi4+0x1d0>
 8001376:	4630      	mov	r0, r6
 8001378:	e7d4      	b.n	8001324 <__udivmoddi4+0x248>
 800137a:	46b0      	mov	r8, r6
 800137c:	e781      	b.n	8001282 <__udivmoddi4+0x1a6>
 800137e:	4463      	add	r3, ip
 8001380:	3802      	subs	r0, #2
 8001382:	e74f      	b.n	8001224 <__udivmoddi4+0x148>
 8001384:	4606      	mov	r6, r0
 8001386:	4623      	mov	r3, r4
 8001388:	4608      	mov	r0, r1
 800138a:	e711      	b.n	80011b0 <__udivmoddi4+0xd4>
 800138c:	3e02      	subs	r6, #2
 800138e:	4463      	add	r3, ip
 8001390:	e732      	b.n	80011f8 <__udivmoddi4+0x11c>
 8001392:	bf00      	nop

08001394 <__aeabi_idiv0>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800139e:	23ff      	movs	r3, #255	@ 0xff
 80013a0:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e00c      	b.n	80013c2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 80013a8:	f001 fd44 	bl	8002e34 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 80013ac:	1cf9      	adds	r1, r7, #3
 80013ae:	2364      	movs	r3, #100	@ 0x64
 80013b0:	2201      	movs	r2, #1
 80013b2:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <Wakeup_Idle+0x3c>)
 80013b4:	f004 fe42 	bl	800603c <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013b8:	f001 fd30 	bl	8002e1c <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	ddef      	ble.n	80013a8 <Wakeup_Idle+0x10>
	}
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001bc 	.word	0x200001bc

080013d8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e00c      	b.n	80013fe <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
 80013e4:	f001 fd26 	bl	8002e34 <LTC_nCS_Low>
		HAL_Delay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f002 f823 	bl	8003434 <HAL_Delay>
		LTC_nCS_High();
 80013ee:	f001 fd15 	bl	8002e1c <LTC_nCS_High>
		HAL_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f002 f81e 	bl	8003434 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b07      	cmp	r3, #7
 8001402:	ddef      	ble.n	80013e4 <Wakeup_Sleep+0xc>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001414:	b089      	sub	sp, #36	@ 0x24
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	466b      	mov	r3, sp
 800141c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001426:	7f3b      	ldrb	r3, [r7, #28]
 8001428:	3b01      	subs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	7f3b      	ldrb	r3, [r7, #28]
 800142e:	2200      	movs	r2, #0
 8001430:	4698      	mov	r8, r3
 8001432:	4691      	mov	r9, r2
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001440:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001444:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001448:	7f3b      	ldrb	r3, [r7, #28]
 800144a:	2200      	movs	r2, #0
 800144c:	461c      	mov	r4, r3
 800144e:	4615      	mov	r5, r2
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	00eb      	lsls	r3, r5, #3
 800145a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800145e:	00e2      	lsls	r2, r4, #3
 8001460:	7f3b      	ldrb	r3, [r7, #28]
 8001462:	3307      	adds	r3, #7
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	ebad 0d03 	sub.w	sp, sp, r3
 800146c:	466b      	mov	r3, sp
 800146e:	3300      	adds	r3, #0
 8001470:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001472:	2300      	movs	r3, #0
 8001474:	77bb      	strb	r3, [r7, #30]
 8001476:	e074      	b.n	8001562 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3f      	ldr	r2, [pc, #252]	@ (8001578 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001488:	7fbb      	ldrb	r3, [r7, #30]
 800148a:	4a3b      	ldr	r2, [pc, #236]	@ (8001578 <Read_Cell_Volt+0x168>)
 800148c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	2002      	movs	r0, #2
 800149c:	f000 fa5c 	bl	8001958 <LTC_Pec15_Calc>
 80014a0:	4603      	mov	r3, r0
 80014a2:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80014a4:	8a7b      	ldrh	r3, [r7, #18]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014b4:	f7ff ff70 	bl	8001398 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014b8:	f001 fcbc 	bl	8002e34 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014bc:	f107 0108 	add.w	r1, r7, #8
 80014c0:	2364      	movs	r3, #100	@ 0x64
 80014c2:	2204      	movs	r2, #4
 80014c4:	482d      	ldr	r0, [pc, #180]	@ (800157c <Read_Cell_Volt+0x16c>)
 80014c6:	f004 fdb9 	bl	800603c <HAL_SPI_Transmit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014ce:	7c7b      	ldrb	r3, [r7, #17]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014d4:	7c7b      	ldrb	r3, [r7, #17]
 80014d6:	2201      	movs	r2, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014e8:	7f3b      	ldrb	r3, [r7, #28]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	2364      	movs	r3, #100	@ 0x64
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	4822      	ldr	r0, [pc, #136]	@ (800157c <Read_Cell_Volt+0x16c>)
 80014f2:	f004 fee7 	bl	80062c4 <HAL_SPI_Receive>
 80014f6:	4603      	mov	r3, r0
 80014f8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014fa:	7c7b      	ldrb	r3, [r7, #17]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8001500:	7c7b      	ldrb	r3, [r7, #17]
 8001502:	3304      	adds	r3, #4
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	b25a      	sxtb	r2, r3
 800150c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001516:	f001 fc81 	bl	8002e1c <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800151a:	2300      	movs	r3, #0
 800151c:	777b      	strb	r3, [r7, #29]
 800151e:	e01a      	b.n	8001556 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001520:	7f7b      	ldrb	r3, [r7, #29]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800152a:	7f7a      	ldrb	r2, [r7, #29]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001536:	7fba      	ldrb	r2, [r7, #30]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
			memcpy(
 8001546:	2206      	movs	r2, #6
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	f006 feb1 	bl	80082b2 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	3301      	adds	r3, #1
 8001554:	777b      	strb	r3, [r7, #29]
 8001556:	7f7b      	ldrb	r3, [r7, #29]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d9e1      	bls.n	8001520 <Read_Cell_Volt+0x110>
			i++) {
 800155c:	7fbb      	ldrb	r3, [r7, #30]
 800155e:	3301      	adds	r3, #1
 8001560:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001562:	7fbb      	ldrb	r3, [r7, #30]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d987      	bls.n	8001478 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	46b5      	mov	sp, r6
}
 800156c:	4618      	mov	r0, r3
 800156e:	3724      	adds	r7, #36	@ 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001576:	bf00      	nop
 8001578:	080091c8 	.word	0x080091c8
 800157c:	200001bc 	.word	0x200001bc

08001580 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800158c:	2306      	movs	r3, #6
 800158e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3304      	adds	r3, #4
 8001598:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 800159a:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <LTC_WRCOMM+0xd4>)
 800159c:	2207      	movs	r2, #7
 800159e:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015a2:	2221      	movs	r2, #33	@ 0x21
 80015a4:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 80015a6:	492b      	ldr	r1, [pc, #172]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 f9d5 	bl	8001958 <LTC_Pec15_Calc>
 80015ae:	4603      	mov	r3, r0
 80015b0:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015b2:	8a3b      	ldrh	r3, [r7, #16]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015bc:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015be:	8a3b      	ldrh	r3, [r7, #16]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015c4:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	75bb      	strb	r3, [r7, #22]
 80015ce:	e02d      	b.n	800162c <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015d0:	2300      	movs	r3, #0
 80015d2:	757b      	strb	r3, [r7, #21]
 80015d4:	e00c      	b.n	80015f0 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	441a      	add	r2, r3
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	7811      	ldrb	r1, [r2, #0]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015e2:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	3301      	adds	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015ea:	7d7b      	ldrb	r3, [r7, #21]
 80015ec:	3301      	adds	r3, #1
 80015ee:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015f0:	7d7a      	ldrb	r2, [r7, #21]
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3ee      	bcc.n	80015d6 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015f8:	7d3b      	ldrb	r3, [r7, #20]
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f9ab 	bl	8001958 <LTC_Pec15_Calc>
 8001602:	4603      	mov	r3, r0
 8001604:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	b29a      	uxth	r2, r3
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <LTC_WRCOMM+0xd4>)
 8001612:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	3301      	adds	r3, #1
 8001618:	89fa      	ldrh	r2, [r7, #14]
 800161a:	b2d1      	uxtb	r1, r2
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LTC_WRCOMM+0xd4>)
 800161e:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	3302      	adds	r3, #2
 8001624:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001626:	7dbb      	ldrb	r3, [r7, #22]
 8001628:	3b01      	subs	r3, #1
 800162a:	75bb      	strb	r3, [r7, #22]
 800162c:	7dbb      	ldrb	r3, [r7, #22]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ce      	bne.n	80015d0 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001632:	f7ff feb1 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 8001636:	f001 fbfd 	bl	8002e34 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	b29a      	uxth	r2, r3
 800163e:	2364      	movs	r3, #100	@ 0x64
 8001640:	4904      	ldr	r1, [pc, #16]	@ (8001654 <LTC_WRCOMM+0xd4>)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <LTC_WRCOMM+0xd8>)
 8001644:	f004 fcfa 	bl	800603c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001648:	f001 fbe8 	bl	8002e1c <LTC_nCS_High>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000f0 	.word	0x200000f0
 8001658:	200001bc 	.word	0x200001bc

0800165c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001666:	2307      	movs	r3, #7
 8001668:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800166a:	2323      	movs	r3, #35	@ 0x23
 800166c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	2002      	movs	r0, #2
 8001676:	f000 f96f 	bl	8001958 <LTC_Pec15_Calc>
 800167a:	4603      	mov	r3, r0
 800167c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800167e:	8a7b      	ldrh	r3, [r7, #18]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001688:	8a7b      	ldrh	r3, [r7, #18]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800168e:	f7ff fe83 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 8001692:	f001 fbcf 	bl	8002e34 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001696:	f107 010c 	add.w	r1, r7, #12
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2204      	movs	r2, #4
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <LTC_STCOMM+0x7c>)
 80016a0:	f004 fccc 	bl	800603c <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e008      	b.n	80016bc <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 80016aa:	2364      	movs	r3, #100	@ 0x64
 80016ac:	2201      	movs	r2, #1
 80016ae:	21ff      	movs	r1, #255	@ 0xff
 80016b0:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <LTC_STCOMM+0x7c>)
 80016b2:	f004 fcc3 	bl	800603c <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbef      	blt.n	80016aa <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ca:	f001 fba7 	bl	8002e1c <LTC_nCS_High>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200001bc 	.word	0x200001bc

080016dc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e0:	b089      	sub	sp, #36	@ 0x24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	466b      	mov	r3, sp
 80016e8:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016ee:	2340      	movs	r3, #64	@ 0x40
 80016f0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016f2:	7f3b      	ldrb	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	7f3b      	ldrb	r3, [r7, #28]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4698      	mov	r8, r3
 80016fe:	4691      	mov	r9, r2
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800170c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001710:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001714:	7f3b      	ldrb	r3, [r7, #28]
 8001716:	2200      	movs	r2, #0
 8001718:	461c      	mov	r4, r3
 800171a:	4615      	mov	r5, r2
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	00eb      	lsls	r3, r5, #3
 8001726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172a:	00e2      	lsls	r2, r4, #3
 800172c:	7f3b      	ldrb	r3, [r7, #28]
 800172e:	3307      	adds	r3, #7
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	ebad 0d03 	sub.w	sp, sp, r3
 8001738:	466b      	mov	r3, sp
 800173a:	3300      	adds	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	77bb      	strb	r3, [r7, #30]
 8001742:	e074      	b.n	800182e <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	4a3f      	ldr	r2, [pc, #252]	@ (8001844 <Read_Cell_Temps+0x168>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	b29b      	uxth	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001754:	7fbb      	ldrb	r3, [r7, #30]
 8001756:	4a3b      	ldr	r2, [pc, #236]	@ (8001844 <Read_Cell_Temps+0x168>)
 8001758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4619      	mov	r1, r3
 8001766:	2002      	movs	r0, #2
 8001768:	f000 f8f6 	bl	8001958 <LTC_Pec15_Calc>
 800176c:	4603      	mov	r3, r0
 800176e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001770:	8a7b      	ldrh	r3, [r7, #18]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800177a:	8a7b      	ldrh	r3, [r7, #18]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001780:	f7ff fe0a 	bl	8001398 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001784:	f001 fb56 	bl	8002e34 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001788:	f107 0108 	add.w	r1, r7, #8
 800178c:	2364      	movs	r3, #100	@ 0x64
 800178e:	2204      	movs	r2, #4
 8001790:	482d      	ldr	r0, [pc, #180]	@ (8001848 <Read_Cell_Temps+0x16c>)
 8001792:	f004 fc53 	bl	800603c <HAL_SPI_Transmit>
 8001796:	4603      	mov	r3, r0
 8001798:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800179a:	7c7b      	ldrb	r3, [r7, #17]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80017a0:	7c7b      	ldrb	r3, [r7, #17]
 80017a2:	2201      	movs	r2, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017b4:	7f3b      	ldrb	r3, [r7, #28]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	2364      	movs	r3, #100	@ 0x64
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	4822      	ldr	r0, [pc, #136]	@ (8001848 <Read_Cell_Temps+0x16c>)
 80017be:	f004 fd81 	bl	80062c4 <HAL_SPI_Receive>
 80017c2:	4603      	mov	r3, r0
 80017c4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017c6:	7c7b      	ldrb	r3, [r7, #17]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017cc:	7c7b      	ldrb	r3, [r7, #17]
 80017ce:	3304      	adds	r3, #4
 80017d0:	2201      	movs	r2, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017e2:	f001 fb1b 	bl	8002e1c <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	777b      	strb	r3, [r7, #29]
 80017ea:	e01a      	b.n	8001822 <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017ec:	7f7b      	ldrb	r3, [r7, #29]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017f6:	7f7a      	ldrb	r2, [r7, #29]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8001802:	7fba      	ldrb	r2, [r7, #30]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
			memcpy(
 8001812:	2206      	movs	r2, #6
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fd4b 	bl	80082b2 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800181c:	7f7b      	ldrb	r3, [r7, #29]
 800181e:	3301      	adds	r3, #1
 8001820:	777b      	strb	r3, [r7, #29]
 8001822:	7f7b      	ldrb	r3, [r7, #29]
 8001824:	2b07      	cmp	r3, #7
 8001826:	d9e1      	bls.n	80017ec <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001828:	7fbb      	ldrb	r3, [r7, #30]
 800182a:	3301      	adds	r3, #1
 800182c:	77bb      	strb	r3, [r7, #30]
 800182e:	7fbb      	ldrb	r3, [r7, #30]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d987      	bls.n	8001744 <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	46b5      	mov	sp, r6
}
 8001838:	4618      	mov	r0, r3
 800183a:	3724      	adds	r7, #36	@ 0x24
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001842:	bf00      	nop
 8001844:	080091d0 	.word	0x080091d0
 8001848:	200001bc 	.word	0x200001bc

0800184c <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	460b      	mov	r3, r1
 8001858:	71bb      	strb	r3, [r7, #6]
 800185a:	4613      	mov	r3, r2
 800185c:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	105b      	asrs	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3302      	adds	r3, #2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	01db      	lsls	r3, r3, #7
 8001876:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	b2da      	uxtb	r2, r3
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	4413      	add	r3, r2
 8001882:	b2da      	uxtb	r2, r3
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	4413      	add	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3360      	adds	r3, #96	@ 0x60
 800188c:	b2db      	uxtb	r3, r3
 800188e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4619      	mov	r1, r3
 8001896:	2002      	movs	r0, #2
 8001898:	f000 f85e 	bl	8001958 <LTC_Pec15_Calc>
 800189c:	4603      	mov	r3, r0
 800189e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80018a0:	89bb      	ldrh	r3, [r7, #12]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80018aa:	89bb      	ldrh	r3, [r7, #12]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018b0:	f7ff fd72 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 80018b4:	f001 fabe 	bl	8002e34 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	2364      	movs	r3, #100	@ 0x64
 80018be:	2204      	movs	r2, #4
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <LTC_ADCV+0x88>)
 80018c2:	f004 fbbb 	bl	800603c <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018c6:	f001 faa9 	bl	8002e1c <LTC_nCS_High>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001bc 	.word	0x200001bc

080018d8 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	105b      	asrs	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3304      	adds	r3, #4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	4413      	add	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3360      	adds	r3, #96	@ 0x60
 800190c:	b2db      	uxtb	r3, r3
 800190e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4619      	mov	r1, r3
 8001916:	2002      	movs	r0, #2
 8001918:	f000 f81e 	bl	8001958 <LTC_Pec15_Calc>
 800191c:	4603      	mov	r3, r0
 800191e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	b29b      	uxth	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800192a:	89bb      	ldrh	r3, [r7, #12]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001930:	f7ff fd32 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 8001934:	f001 fa7e 	bl	8002e34 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001938:	f107 0108 	add.w	r1, r7, #8
 800193c:	2364      	movs	r3, #100	@ 0x64
 800193e:	2204      	movs	r2, #4
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <LTC_ADAX+0x7c>)
 8001942:	f004 fb7b 	bl	800603c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001946:	f001 fa69 	bl	8002e1c <LTC_nCS_High>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001bc 	.word	0x200001bc

08001958 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001964:	2310      	movs	r3, #16
 8001966:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001968:	2300      	movs	r3, #0
 800196a:	737b      	strb	r3, [r7, #13]
 800196c:	e017      	b.n	800199e <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	09db      	lsrs	r3, r3, #7
 8001972:	b29b      	uxth	r3, r3
 8001974:	7b7a      	ldrb	r2, [r7, #13]
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440a      	add	r2, r1
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	4053      	eors	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b29a      	uxth	r2, r3
 800198a:	897b      	ldrh	r3, [r7, #10]
 800198c:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <LTC_Pec15_Calc+0x60>)
 800198e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4053      	eors	r3, r2
 8001996:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	3301      	adds	r3, #1
 800199c:	737b      	strb	r3, [r7, #13]
 800199e:	7b7a      	ldrb	r2, [r7, #13]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3e3      	bcc.n	800196e <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	b29b      	uxth	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	080091d4 	.word	0x080091d4

080019bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <MX_ADC1_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80019ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019fa:	f001 fd3f 	bl	800347c <HAL_ADC_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f000 fef0 	bl	80027e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a08:	230f      	movs	r3, #15
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_ADC1_Init+0x74>)
 8001a1a:	f002 f8c5 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a24:	f000 fee0 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000134 	.word	0x20000134
 8001a34:	40012400 	.word	0x40012400

08001a38 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_ADC2_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a66:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a76:	f001 fd01 	bl	800347c <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 feb2 	bl	80027e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a84:	230a      	movs	r3, #10
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a96:	f002 f887 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 fea2 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000164 	.word	0x20000164
 8001ab0:	40012800 	.word	0x40012800

08001ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <HAL_ADC_MspInit+0xdc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12a      	bne.n	8001b2a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001b04:	2320      	movs	r3, #32
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4821      	ldr	r0, [pc, #132]	@ (8001b98 <HAL_ADC_MspInit+0xe4>)
 8001b14:	f003 f8c8 	bl	8004ca8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2012      	movs	r0, #18
 8001b1e:	f002 ff4a 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b22:	2012      	movs	r0, #18
 8001b24:	f002 ff63 	bl	80049ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001b28:	e02e      	b.n	8001b88 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d129      	bne.n	8001b88 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b64:	230f      	movs	r3, #15
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4809      	ldr	r0, [pc, #36]	@ (8001b98 <HAL_ADC_MspInit+0xe4>)
 8001b74:	f003 f898 	bl	8004ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2012      	movs	r0, #18
 8001b7e:	f002 ff1a 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b82:	2012      	movs	r0, #18
 8001b84:	f002 ff33 	bl	80049ee <HAL_NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	@ 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40012400 	.word	0x40012400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	40012800 	.word	0x40012800

08001ba0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <MX_CAN1_Init+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bac:	2209      	movs	r2, #9
 8001bae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bc2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bc6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001bca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bf2:	f002 f975 	bl	8003ee0 <HAL_CAN_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bfc:	f000 fdf4 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000194 	.word	0x20000194
 8001c08:	40006400 	.word	0x40006400

08001c0c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a35      	ldr	r2, [pc, #212]	@ (8001cfc <HAL_CAN_MspInit+0xf0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d163      	bne.n	8001cf4 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c2c:	4b34      	ldr	r3, [pc, #208]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a33      	ldr	r2, [pc, #204]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b2e      	ldr	r3, [pc, #184]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a2d      	ldr	r2, [pc, #180]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4824      	ldr	r0, [pc, #144]	@ (8001d04 <HAL_CAN_MspInit+0xf8>)
 8001c72:	f003 f819 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	481e      	ldr	r0, [pc, #120]	@ (8001d04 <HAL_CAN_MspInit+0xf8>)
 8001c8c:	f003 f80c 	bl	8004ca8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_CAN_MspInit+0xfc>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_CAN_MspInit+0xfc>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	2013      	movs	r0, #19
 8001cba:	f002 fe7c 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001cbe:	2013      	movs	r0, #19
 8001cc0:	f002 fe95 	bl	80049ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2014      	movs	r0, #20
 8001cca:	f002 fe74 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cce:	2014      	movs	r0, #20
 8001cd0:	f002 fe8d 	bl	80049ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2015      	movs	r0, #21
 8001cda:	f002 fe6c 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001cde:	2015      	movs	r0, #21
 8001ce0:	f002 fe85 	bl	80049ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2016      	movs	r0, #22
 8001cea:	f002 fe64 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001cee:	2016      	movs	r0, #22
 8001cf0:	f002 fe7d 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	@ 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40006400 	.word	0x40006400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40010000 	.word	0x40010000

08001d0c <CAN_Start>:

/* USER CODE BEGIN 1 */

uint8_t CAN_TX_HALT = 1; //halt frag to send it to mailbox

HAL_StatusTypeDef CAN_Start() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <CAN_Start+0x10>)
 8001d12:	f002 f9e0 	bl	80040d6 <HAL_CAN_Start>
 8001d16:	4603      	mov	r3, r0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000194 	.word	0x20000194

08001d20 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
    return HAL_CAN_ActivateNotification(&hcan1,  CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d24:	2102      	movs	r1, #2
 8001d26:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <CAN_Activate+0x14>)
 8001d28:	f002 fb1c 	bl	8004364 <HAL_CAN_ActivateNotification>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000194 	.word	0x20000194

08001d38 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(CANMessage *ptr) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	  while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 8001d40:	bf00      	nop
 8001d42:	480a      	ldr	r0, [pc, #40]	@ (8001d6c <CAN_Send+0x34>)
 8001d44:	f002 fada 	bl	80042fc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f9      	beq.n	8001d42 <CAN_Send+0xa>
	    }
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,&ptr->TxMailbox);
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 021c 	add.w	r2, r3, #28
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3318      	adds	r3, #24
 8001d5a:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <CAN_Send+0x34>)
 8001d5c:	f002 f9ff 	bl	800415e <HAL_CAN_AddTxMessage>
 8001d60:	4603      	mov	r3, r0

}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000194 	.word	0x20000194

08001d70 <CAN_SettingsInit>:
//}
//void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
//	CAN_TX_HALT = 0;
//}

void CAN_SettingsInit(CANMessage *ptr) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001d78:	f7ff ffc8 	bl	8001d0c <CAN_Start>
	CAN_Activate();
 8001d7c:	f7ff ffd0 	bl	8001d20 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2208      	movs	r2, #8
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <Set_CAN_Id>:

void Set_CAN_Id(CANMessage *ptr, uint32_t id) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	601a      	str	r2, [r3, #0]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <CAN_Send_Voltage>:

void CAN_Send_Voltage(CANMessage *ptr, uint16_t *read_volt) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001dc4:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 8001dc8:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001dca:	8afb      	ldrh	r3, [r7, #22]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffe6 	bl	8001da0 <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e071      	b.n	8001ebe <CAN_Send_Voltage+0x104>
		if (i % 4 == 0) {
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d156      	bne.n	8001e92 <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dd0c      	ble.n	8001eb2 <CAN_Send_Voltage+0xf8>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001ea2:	8afb      	ldrh	r3, [r7, #22]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001ea8:	8afb      	ldrh	r3, [r7, #22]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff77 	bl	8001da0 <Set_CAN_Id>
		}
		CAN_Send(ptr);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff40 	bl	8001d38 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ec2:	dd8a      	ble.n	8001dda <CAN_Send_Voltage+0x20>
//		printf("voltage\n");
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <CAN_Send_Temperature>:

void CAN_Send_Temperature(CANMessage *ptr, uint16_t *read_temp) {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001ed8:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8001edc:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff5c 	bl	8001da0 <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	737b      	strb	r3, [r7, #13]
 8001eec:	e073      	b.n	8001fd6 <CAN_Send_Temperature+0x108>
		if (i % 4 == 0) {
 8001eee:	7b7b      	ldrb	r3, [r7, #13]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d156      	bne.n	8001fa8 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8001efe:	7b3b      	ldrb	r3, [r7, #12]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8001f0e:	7b3b      	ldrb	r3, [r7, #12]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001f38:	7b3b      	ldrb	r3, [r7, #12]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001f52:	7b3b      	ldrb	r3, [r7, #12]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001f64:	7b3b      	ldrb	r3, [r7, #12]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001f7a:	7b3b      	ldrb	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001fa8:	7b7b      	ldrb	r3, [r7, #13]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <CAN_Send_Temperature+0xfc>
 8001fae:	7b7b      	ldrb	r3, [r7, #13]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8001fba:	89fb      	ldrh	r3, [r7, #14]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff feeb 	bl	8001da0 <Set_CAN_Id>
		}
	CAN_Send(ptr);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff feb4 	bl	8001d38 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	737b      	strb	r3, [r7, #13]
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001fda:	d988      	bls.n	8001eee <CAN_Send_Temperature+0x20>
//	printf("Temperature\n");
	}
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(CANMessage *ptr, struct batteryModule *batt) {
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8001ff0:	f240 6322 	movw	r3, #1570	@ 0x622
 8001ff4:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fed0 	bl	8001da0 <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	b29b      	uxth	r3, r3
 8002016:	b2da      	uxtb	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	b2da      	uxtb	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f8b3 3254 	ldrh.w	r3, [r3, #596]	@ 0x254
 800205e:	b2da      	uxtb	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f8b3 3254 	ldrh.w	r3, [r3, #596]	@ 0x254
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2da      	uxtb	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	CAN_Send(ptr);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fe5d 	bl	8001d38 <CAN_Send>
//	printf("Summary\n");
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 8002094:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002098:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	4619      	mov	r1, r3
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff fe7e 	bl	8001da0 <Set_CAN_Id>
	ptr->data[0] = *faults;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020ee:	0e1b      	lsrs	r3, r3, #24
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	CAN_Send(ptr);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff fe1d 	bl	8001d38 <CAN_Send>
//	printf("Faults\n");
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a35      	ldr	r2, [pc, #212]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b27      	ldr	r3, [pc, #156]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2110      	movs	r1, #16
 8002180:	481e      	ldr	r0, [pc, #120]	@ (80021fc <MX_GPIO_Init+0xf4>)
 8002182:	f002 ff15 	bl	8004fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2102      	movs	r1, #2
 800218a:	481d      	ldr	r0, [pc, #116]	@ (8002200 <MX_GPIO_Init+0xf8>)
 800218c:	f002 ff10 	bl	8004fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2140      	movs	r1, #64	@ 0x40
 8002194:	481b      	ldr	r0, [pc, #108]	@ (8002204 <MX_GPIO_Init+0xfc>)
 8002196:	f002 ff0b 	bl	8004fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 800219a:	2310      	movs	r3, #16
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <MX_GPIO_Init+0xf4>)
 80021b2:	f002 fd79 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <MX_GPIO_Init+0xf8>)
 80021ce:	f002 fd6b 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80021d2:	2340      	movs	r3, #64	@ 0x40
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2302      	movs	r3, #2
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4619      	mov	r1, r3
 80021e8:	4806      	ldr	r0, [pc, #24]	@ (8002204 <MX_GPIO_Init+0xfc>)
 80021ea:	f002 fd5d 	bl	8004ca8 <HAL_GPIO_Init>

}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010800 	.word	0x40010800
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000

08002208 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(batteryModule *batt) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

		HAL_ADC_Start(&hadc1);//start adc with adc1
 8002214:	481e      	ldr	r0, [pc, #120]	@ (8002290 <ReadHVInput+0x88>)
 8002216:	f001 fa09 	bl	800362c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800221a:	f04f 31ff 	mov.w	r1, #4294967295
 800221e:	481c      	ldr	r0, [pc, #112]	@ (8002290 <ReadHVInput+0x88>)
 8002220:	f001 fade 	bl	80037e0 <HAL_ADC_PollForConversion>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);//get adc value and store it in adcValue
 800222a:	4819      	ldr	r0, [pc, #100]	@ (8002290 <ReadHVInput+0x88>)
 800222c:	f001 fbde 	bl	80039ec <HAL_ADC_GetValue>
 8002230:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);//stop adc
 8002232:	4817      	ldr	r0, [pc, #92]	@ (8002290 <ReadHVInput+0x88>)
 8002234:	f001 faa8 	bl	8003788 <HAL_ADC_Stop>

		//calculate voltage based on  resolution and gain on opamp, voltage divider ratio
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7fe fd6f 	bl	8000d1c <__aeabi_ui2f>
 800223e:	4603      	mov	r3, r0
 8002240:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe75 	bl	8000f34 <__aeabi_fdiv>
 800224a:	4603      	mov	r3, r0
 800224c:	4911      	ldr	r1, [pc, #68]	@ (8002294 <ReadHVInput+0x8c>)
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fdbc 	bl	8000dcc <__aeabi_fmul>
 8002254:	4603      	mov	r3, r0
 8002256:	613b      	str	r3, [r7, #16]
		float amcOutput = adcVoltage / GAIN_TLV9001;
 8002258:	490f      	ldr	r1, [pc, #60]	@ (8002298 <ReadHVInput+0x90>)
 800225a:	6938      	ldr	r0, [r7, #16]
 800225c:	f7fe fe6a 	bl	8000f34 <__aeabi_fdiv>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
		float hvInput = amcOutput * DIVIDER_RATIO;
 8002264:	490d      	ldr	r1, [pc, #52]	@ (800229c <ReadHVInput+0x94>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7fe fdb0 	bl	8000dcc <__aeabi_fmul>
 800226c:	4603      	mov	r3, r0
 800226e:	490c      	ldr	r1, [pc, #48]	@ (80022a0 <ReadHVInput+0x98>)
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe5f 	bl	8000f34 <__aeabi_fdiv>
 8002276:	4603      	mov	r3, r0
 8002278:	60bb      	str	r3, [r7, #8]

		batt->pack_voltage = hvInput;
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f7fe fef6 	bl	800106c <__aeabi_f2uiz>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
	}
 8002288:	bf00      	nop
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000134 	.word	0x20000134
 8002294:	40533333 	.word	0x40533333
 8002298:	3fca3d71 	.word	0x3fca3d71
 800229c:	49aae7e0 	.word	0x49aae7e0
 80022a0:	45d4d000 	.word	0x45d4d000

080022a4 <State_of_Charge>:

	void State_of_Charge(batteryModule *batt, uint32_t elapsed_time) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	    uint32_t adcValue = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Start(&hadc2);//start adc with adc1
 80022b2:	482c      	ldr	r0, [pc, #176]	@ (8002364 <State_of_Charge+0xc0>)
 80022b4:	f001 f9ba 	bl	800362c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	4829      	ldr	r0, [pc, #164]	@ (8002364 <State_of_Charge+0xc0>)
 80022be:	f001 fa8f 	bl	80037e0 <HAL_ADC_PollForConversion>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <State_of_Charge+0x2c>
			adcValue = HAL_ADC_GetValue(&hadc2);//get adc value and store it in adcValue
 80022c8:	4826      	ldr	r0, [pc, #152]	@ (8002364 <State_of_Charge+0xc0>)
 80022ca:	f001 fb8f 	bl	80039ec <HAL_ADC_GetValue>
 80022ce:	60f8      	str	r0, [r7, #12]
		}
		HAL_ADC_Stop(&hadc2);//stop adc
 80022d0:	4824      	ldr	r0, [pc, #144]	@ (8002364 <State_of_Charge+0xc0>)
 80022d2:	f001 fa59 	bl	8003788 <HAL_ADC_Stop>
	    float voltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7fe fd20 	bl	8000d1c <__aeabi_ui2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fe26 	bl	8000f34 <__aeabi_fdiv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	491f      	ldr	r1, [pc, #124]	@ (8002368 <State_of_Charge+0xc4>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fd6d 	bl	8000dcc <__aeabi_fmul>
 80022f2:	4603      	mov	r3, r0
 80022f4:	60bb      	str	r3, [r7, #8]
	    batt->current = (voltage / MAX_SHUNT_VOLTAGE) * MAX_SHUNT_AMPAGE;
 80022f6:	491c      	ldr	r1, [pc, #112]	@ (8002368 <State_of_Charge+0xc4>)
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f7fe fe1b 	bl	8000f34 <__aeabi_fdiv>
 80022fe:	4603      	mov	r3, r0
 8002300:	491a      	ldr	r1, [pc, #104]	@ (800236c <State_of_Charge+0xc8>)
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fd62 	bl	8000dcc <__aeabi_fmul>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe feae 	bl	800106c <__aeabi_f2uiz>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
	    batt->soc -= (uint16_t)(batt->current * (float)(elapsed_time / 3600000.0f));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8b3 42bc 	ldrh.w	r4, [r3, #700]	@ 0x2bc
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fcf9 	bl	8000d1c <__aeabi_ui2f>
 800232a:	4605      	mov	r5, r0
 800232c:	6838      	ldr	r0, [r7, #0]
 800232e:	f7fe fcf5 	bl	8000d1c <__aeabi_ui2f>
 8002332:	4603      	mov	r3, r0
 8002334:	490e      	ldr	r1, [pc, #56]	@ (8002370 <State_of_Charge+0xcc>)
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fdfc 	bl	8000f34 <__aeabi_fdiv>
 800233c:	4603      	mov	r3, r0
 800233e:	4619      	mov	r1, r3
 8002340:	4628      	mov	r0, r5
 8002342:	f7fe fd43 	bl	8000dcc <__aeabi_fmul>
 8002346:	4603      	mov	r3, r0
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fe8f 	bl	800106c <__aeabi_f2uiz>
 800234e:	4603      	mov	r3, r0
 8002350:	b29b      	uxth	r3, r3
 8002352:	1ae3      	subs	r3, r4, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8a3 22bc 	strh.w	r2, [r3, #700]	@ 0x2bc
	}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	20000164 	.word	0x20000164
 8002368:	40533333 	.word	0x40533333
 800236c:	48f42400 	.word	0x48f42400
 8002370:	4a5bba00 	.word	0x4a5bba00

08002374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 800237a:	af04      	add	r7, sp, #16
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	CANMessage msg;
	uint8_t safetyFaults = 0;
 800237c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002380:	f2a3 330d 	subw	r3, r3, #781	@ 0x30d
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 8002388:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800238c:	f2a3 330e 	subw	r3, r3, #782	@ 0x30e
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 8002394:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002398:	f2a3 330f 	subw	r3, r3, #783	@ 0x30f
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]

	modPackInfo.soc = MAX_BATTERY_CAPACITY;
 80023a0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80023a4:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80023a8:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 80023ac:	f8a3 22bc 	strh.w	r2, [r3, #700]	@ 0x2bc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b0:	f000 ffde 	bl	8003370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b4:	f000 f93e 	bl	8002634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b8:	f7ff fea6 	bl	8002108 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023bc:	f7ff fafe 	bl	80019bc <MX_ADC1_Init>
  MX_ADC2_Init();
 80023c0:	f7ff fb3a 	bl	8001a38 <MX_ADC2_Init>
  MX_TIM7_Init();
 80023c4:	f000 fe7e 	bl	80030c4 <MX_TIM7_Init>
  MX_SPI1_Init();
 80023c8:	f000 fca0 	bl	8002d0c <MX_SPI1_Init>
  MX_CAN1_Init();
 80023cc:	f7ff fbe8 	bl	8001ba0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80023d0:	f000 fed4 	bl	800317c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fcc9 	bl	8001d70 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 80023de:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	498e      	ldr	r1, [pc, #568]	@ (8002620 <main+0x2ac>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f98e 	bl	8002708 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 80023ec:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 80023f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f9c7 	bl	8002788 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 80023fa:	f000 fd0f 	bl	8002e1c <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	2102      	movs	r1, #2
 8002402:	4888      	ldr	r0, [pc, #544]	@ (8002624 <main+0x2b0>)
 8002404:	f002 fdd4 	bl	8004fb0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800240c:	f001 f812 	bl	8003434 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2102      	movs	r1, #2
 8002414:	4883      	ldr	r0, [pc, #524]	@ (8002624 <main+0x2b0>)
 8002416:	f002 fdcb 	bl	8004fb0 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
	uint8_t indexpause = 8;
 8002420:	2308      	movs	r3, #8
 8002422:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	uint8_t low_volt_hysteresis = 0;
 8002426:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800242a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
	uint8_t high_volt_hysteresis = 0;
 8002432:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002436:	f2a3 3311 	subw	r3, r3, #785	@ 0x311
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
	uint8_t cell_imbalance_hysteresis = 0;
 800243e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002442:	f2a3 3312 	subw	r3, r3, #786	@ 0x312
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]

	//reading cell voltages
	Wakeup_Sleep();
 800244a:	f7fe ffc5 	bl	80013d8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 800244e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fa52 	bl	80028fc <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 8002458:	f7fe ffbe 	bl	80013d8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 800245c:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8002460:	f887 3315 	strb.w	r3, [r7, #789]	@ 0x315
 8002464:	e016      	b.n	8002494 <main+0x120>
		Wakeup_Idle();
 8002466:	f7fe ff97 	bl	8001398 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 800246a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800246e:	f503 7217 	add.w	r2, r3, #604	@ 0x25c
 8002472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002476:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 800247a:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fa50 	bl	8002924 <Read_Temp>
		HAL_Delay(3);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 ffd5 	bl	8003434 <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 800248a:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 800248e:	3301      	adds	r3, #1
 8002490:	f887 3315 	strb.w	r3, [r7, #789]	@ 0x315
 8002494:	f897 2315 	ldrb.w	r2, [r7, #789]	@ 0x315
 8002498:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 800249c:	429a      	cmp	r2, r3
 800249e:	d3e2      	bcc.n	8002466 <main+0xf2>
	}
	Wakeup_Idle();
 80024a0:	f7fe ff7a 	bl	8001398 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 80024a4:	4960      	ldr	r1, [pc, #384]	@ (8002628 <main+0x2b4>)
 80024a6:	2008      	movs	r0, #8
 80024a8:	f7ff f86a 	bl	8001580 <LTC_WRCOMM>
	Wakeup_Idle();
 80024ac:	f7fe ff74 	bl	8001398 <Wakeup_Idle>
	LTC_STCOMM(2);
 80024b0:	2002      	movs	r0, #2
 80024b2:	f7ff f8d3 	bl	800165c <LTC_STCOMM>

	ReadHVInput(&modPackInfo);
 80024b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fea4 	bl	8002208 <ReadHVInput>

	uint32_t prev_soc_time = HAL_GetTick();
 80024c0:	f000 ffae 	bl	8003420 <HAL_GetTick>
 80024c4:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80024c8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80024cc:	210a      	movs	r1, #10
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f937 	bl	8002742 <GpioFixedToggle>
		printf("hello\n");
 80024d4:	4855      	ldr	r0, [pc, #340]	@ (800262c <main+0x2b8>)
 80024d6:	f005 fd49 	bl	8007f6c <puts>
			//reading cell voltages
//			Wakeup_Sleep();
//			printf("volt start\n");
			Read_Volt(modPackInfo.cell_volt);
 80024da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fa0c 	bl	80028fc <Read_Volt>
//			}

			//reading cell temperatures
//			Wakeup_Sleep();
//			printf("Temp start\n");
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80024e4:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 80024e8:	f887 3314 	strb.w	r3, [r7, #788]	@ 0x314
 80024ec:	e011      	b.n	8002512 <main+0x19e>
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80024ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024f2:	f503 7217 	add.w	r2, r3, #604	@ 0x25c
 80024f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024fa:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80024fe:	f897 3314 	ldrb.w	r3, [r7, #788]	@ 0x314
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fa0e 	bl	8002924 <Read_Temp>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002508:	f897 3314 	ldrb.w	r3, [r7, #788]	@ 0x314
 800250c:	3301      	adds	r3, #1
 800250e:	f887 3314 	strb.w	r3, [r7, #788]	@ 0x314
 8002512:	f897 2314 	ldrb.w	r2, [r7, #788]	@ 0x314
 8002516:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 800251a:	429a      	cmp	r2, r3
 800251c:	d3e7      	bcc.n	80024ee <main+0x17a>
//				printf(" Cell: %d, Temp: %d\n", i, modPackInfo.cell_temp[i]);
//				HAL_Delay(1);
			}
			if (indexpause == 8) {
 800251e:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 8002522:	2b08      	cmp	r3, #8
 8002524:	d10c      	bne.n	8002540 <main+0x1cc>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8002526:	4940      	ldr	r1, [pc, #256]	@ (8002628 <main+0x2b4>)
 8002528:	2008      	movs	r0, #8
 800252a:	f7ff f829 	bl	8001580 <LTC_WRCOMM>
				LTC_STCOMM(2);
 800252e:	2002      	movs	r0, #2
 8002530:	f7ff f894 	bl	800165c <LTC_STCOMM>
				tempindex = 8;
 8002534:	2308      	movs	r3, #8
 8002536:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
				indexpause = NUM_THERM_PER_MOD;
 800253a:	230c      	movs	r3, #12
 800253c:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			}
			if (indexpause == NUM_THERM_PER_MOD) {
 8002540:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d10c      	bne.n	8002562 <main+0x1ee>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8002548:	4939      	ldr	r1, [pc, #228]	@ (8002630 <main+0x2bc>)
 800254a:	2008      	movs	r0, #8
 800254c:	f7ff f818 	bl	8001580 <LTC_WRCOMM>
				LTC_STCOMM(2);
 8002550:	2002      	movs	r0, #2
 8002552:	f7ff f883 	bl	800165c <LTC_STCOMM>
				indexpause = 8;
 8002556:	2308      	movs	r3, #8
 8002558:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
				tempindex = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
			}
//			printf("Temp end\n");

//			printf("pack volt start\n");
			ReadHVInput(&modPackInfo);
 8002562:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe4e 	bl	8002208 <ReadHVInput>
//			printf("pack volt end\n");
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);
			State_of_Charge(&modPackInfo,(HAL_GetTick() - prev_soc_time));
 800256c:	f000 ff58 	bl	8003420 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fe90 	bl	80022a4 <State_of_Charge>
			//getting the summary of all cells in the pack
//			printf("cell summary volt start\n");
			Cell_Summary_Voltage(&modPackInfo, &safetyFaults,
 8002584:	f107 0409 	add.w	r4, r7, #9
 8002588:	f107 020a 	add.w	r2, r7, #10
 800258c:	f107 010b 	add.w	r1, r7, #11
 8002590:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002594:	1dbb      	adds	r3, r7, #6
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4623      	mov	r3, r4
 80025a4:	f000 fa00 	bl	80029a8 <Cell_Summary_Voltage>
								&safetyWarnings, &safetyStates, &low_volt_hysteresis,
								&high_volt_hysteresis, &cell_imbalance_hysteresis);
//			printf("cell summary volt end\n");

//			printf("cell summary temp start\n");
			Cell_Summary_Temperature(&modPackInfo, &safetyFaults,&safetyWarnings);
 80025a8:	f107 020a 	add.w	r2, r7, #10
 80025ac:	f107 010b 	add.w	r1, r7, #11
 80025b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fb39 	bl	8002c2c <Cell_Summary_Temperature>

//			} else if (BALANCE) {
//				End_Balance(&safetyFaults);
//			}

			if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 80025ba:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f8f5 	bl	80027ae <TimerPacket_FixedPulse>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f43f af7e 	beq.w	80024c8 <main+0x154>
			//calling all CAN realated methods
//			printf("CAN start\n");
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 80025cc:	f107 040a 	add.w	r4, r7, #10
 80025d0:	f107 020b 	add.w	r2, r7, #11
 80025d4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80025d8:	f107 000c 	add.w	r0, r7, #12
 80025dc:	f107 0309 	add.w	r3, r7, #9
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	f7ff fd4f 	bl	8002086 <CAN_Send_Safety_Checker>
					&safetyWarnings, &safetyStates);
			CAN_Send_Cell_Summary(&msg, &modPackInfo);
 80025e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fcf7 	bl	8001fe6 <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 80025f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fbd9 	bl	8001dba <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 8002608:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800260c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc59 	bl	8001ece <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800261c:	e754      	b.n	80024c8 <main+0x154>
 800261e:	bf00      	nop
 8002620:	40011000 	.word	0x40011000
 8002624:	40010c00 	.word	0x40010c00
 8002628:	20000000 	.word	0x20000000
 800262c:	080091b4 	.word	0x080091b4
 8002630:	20000006 	.word	0x20000006

08002634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b09c      	sub	sp, #112	@ 0x70
 8002638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800263e:	2238      	movs	r2, #56	@ 0x38
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f005 fda6 	bl	8008194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2220      	movs	r2, #32
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f005 fd98 	bl	8008194 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002664:	2301      	movs	r3, #1
 8002666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800266c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800266e:	2304      	movs	r3, #4
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002672:	2301      	movs	r3, #1
 8002674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002676:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800267c:	2302      	movs	r3, #2
 800267e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002686:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800268a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800268c:	2302      	movs	r3, #2
 800268e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002690:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002694:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002696:	2340      	movs	r3, #64	@ 0x40
 8002698:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 fcb8 	bl	8005014 <HAL_RCC_OscConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80026aa:	f000 f89d 	bl	80027e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ae:	230f      	movs	r3, #15
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 ffb8 	bl	8005640 <HAL_RCC_ClockConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026d6:	f000 f887 	bl	80027e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026da:	2302      	movs	r3, #2
 80026dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 f9a0 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026f2:	f000 f879 	bl	80027e8 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80026f6:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <SystemClock_Config+0xd0>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3770      	adds	r7, #112	@ 0x70
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	42420070 	.word	0x42420070

08002708 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	2200      	movs	r2, #0
 800271a:	4619      	mov	r1, r3
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f002 fc47 	bl	8004fb0 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 800274e:	f000 fe67 	bl	8003420 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	1ad2      	subs	r2, r2, r3
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	429a      	cmp	r2, r3
 8002766:	d90b      	bls.n	8002780 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	889b      	ldrh	r3, [r3, #4]
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f002 fc34 	bl	8004fe0 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	609a      	str	r2, [r3, #8]
	}
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80027b6:	f000 fe33 	bl	8003420 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1ad2      	subs	r2, r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d905      	bls.n	80027de <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <Error_Handler+0x8>

080027f4 <Get_Actual_Temps>:
								 { 0x69, 0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F, 0xF9 },
							 	 { 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp, uint16_t data) {
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	603a      	str	r2, [r7, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	460b      	mov	r3, r1
 8002804:	71bb      	strb	r3, [r7, #6]
 8002806:	4613      	mov	r3, r2
 8002808:	80bb      	strh	r3, [r7, #4]
    if (data == 0) {
 800280a:	88bb      	ldrh	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <Get_Actual_Temps+0x3a>
        actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = 999.0f; // error value
 8002810:	79fa      	ldrb	r2, [r7, #7]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	461a      	mov	r2, r3
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	4413      	add	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800282a:	801a      	strh	r2, [r3, #0]
        return;
 800282c:	e059      	b.n	80028e2 <Get_Actual_Temps+0xee>
    }

    float scalar = 30000.0f / (float)(data) - 1.0f;
 800282e:	88bb      	ldrh	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fa73 	bl	8000d1c <__aeabi_ui2f>
 8002836:	4603      	mov	r3, r0
 8002838:	4619      	mov	r1, r3
 800283a:	482b      	ldr	r0, [pc, #172]	@ (80028e8 <Get_Actual_Temps+0xf4>)
 800283c:	f7fe fb7a 	bl	8000f34 <__aeabi_fdiv>
 8002840:	4603      	mov	r3, r0
 8002842:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe f9b6 	bl	8000bb8 <__aeabi_fsub>
 800284c:	4603      	mov	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]
    scalar = ntcSeriesResistance / scalar;
 8002850:	68f9      	ldr	r1, [r7, #12]
 8002852:	4826      	ldr	r0, [pc, #152]	@ (80028ec <Get_Actual_Temps+0xf8>)
 8002854:	f7fe fb6e 	bl	8000f34 <__aeabi_fdiv>
 8002858:	4603      	mov	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]

    float steinhart = scalar / ntcNominal;
 800285c:	4923      	ldr	r1, [pc, #140]	@ (80028ec <Get_Actual_Temps+0xf8>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7fe fb68 	bl	8000f34 <__aeabi_fdiv>
 8002864:	4603      	mov	r3, r0
 8002866:	60bb      	str	r3, [r7, #8]
    steinhart = log(steinhart);
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	f7fd fe49 	bl	8000500 <__aeabi_f2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f006 faa5 	bl	8008dc4 <log>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f945 	bl	8000b10 <__aeabi_d2f>
 8002886:	4603      	mov	r3, r0
 8002888:	60bb      	str	r3, [r7, #8]
    steinhart *= invBetaFactor;
 800288a:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <Get_Actual_Temps+0xfc>)
 800288c:	4619      	mov	r1, r3
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f7fe fa9c 	bl	8000dcc <__aeabi_fmul>
 8002894:	4603      	mov	r3, r0
 8002896:	60bb      	str	r3, [r7, #8]
    steinhart += invNominalTemp;
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <Get_Actual_Temps+0x100>)
 800289a:	4619      	mov	r1, r3
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f7fe f98d 	bl	8000bbc <__addsf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	60bb      	str	r3, [r7, #8]
    steinhart = 1.0f / steinhart;
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80028ac:	f7fe fb42 	bl	8000f34 <__aeabi_fdiv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60bb      	str	r3, [r7, #8]
    steinhart -= 273.15f;
 80028b4:	4910      	ldr	r1, [pc, #64]	@ (80028f8 <Get_Actual_Temps+0x104>)
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f7fe f97e 	bl	8000bb8 <__aeabi_fsub>
 80028bc:	4603      	mov	r3, r0
 80028be:	60bb      	str	r3, [r7, #8]

    actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 80028c0:	79fa      	ldrb	r2, [r7, #7]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	461a      	mov	r2, r3
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	18d4      	adds	r4, r2, r3
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f7fe fbc8 	bl	800106c <__aeabi_f2uiz>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29b      	uxth	r3, r3
 80028e0:	8023      	strh	r3, [r4, #0]
}
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	46ea6000 	.word	0x46ea6000
 80028ec:	461c4000 	.word	0x461c4000
 80028f0:	3998a193 	.word	0x3998a193
 80028f4:	3b5bcf0f 	.word	0x3b5bcf0f
 80028f8:	43889333 	.word	0x43889333

080028fc <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
//	printf("voltage read start\n");
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);//ADC mode: MD_FILTERED, MD_NORMAL, MD_FAST
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2003      	movs	r0, #3
 800290a:	f7fe ff9f 	bl	800184c <LTC_ADCV>
	HAL_Delay(NORMAL_DELAY); //FAST_DELAY, NORMAL_DELAY, FILTERD_DELAY;
 800290e:	2004      	movs	r0, #4
 8002910:	f000 fd90 	bl	8003434 <HAL_Delay>
	Read_Cell_Volt((uint16_t*) read_volt);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe fd7b 	bl	8001410 <Read_Cell_Volt>
//	printf("voltage read end\n");
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	73fb      	strb	r3, [r7, #15]
//	printf("Temperature read start\n");
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4a19      	ldr	r2, [pc, #100]	@ (80029a4 <Read_Temp+0x80>)
 800293e:	4413      	add	r3, r2
 8002940:	4619      	mov	r1, r3
 8002942:	2008      	movs	r0, #8
 8002944:	f7fe fe1c 	bl	8001580 <LTC_WRCOMM>
	LTC_STCOMM(2);
 8002948:	2002      	movs	r0, #2
 800294a:	f7fe fe87 	bl	800165c <LTC_STCOMM>
	//end sending to mux to read temperatures
	LTC_ADAX(MD_FAST, 1); //ADC mode: MD_FILTERED, MD_NORMAL, MD_FAST
 800294e:	2101      	movs	r1, #1
 8002950:	2001      	movs	r0, #1
 8002952:	f7fe ffc1 	bl	80018d8 <LTC_ADAX>
	HAL_Delay(FAST_DELAY); //FAST_DELAY, NORMAL_DELAY, FILTERD_DELAY;
 8002956:	2002      	movs	r0, #2
 8002958:	f000 fd6c 	bl	8003434 <HAL_Delay>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe febd 	bl	80016dc <Read_Cell_Temps>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <Read_Temp+0x76>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002968:	2300      	movs	r3, #0
 800296a:	75fb      	strb	r3, [r7, #23]
 800296c:	e012      	b.n	8002994 <Read_Temp+0x70>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 800296e:	7dfa      	ldrb	r2, [r7, #23]
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002982:	8abb      	ldrh	r3, [r7, #20]
 8002984:	7bf9      	ldrb	r1, [r7, #15]
 8002986:	7df8      	ldrb	r0, [r7, #23]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	f7ff ff33 	bl	80027f4 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	3301      	adds	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b07      	cmp	r3, #7
 8002998:	d9e9      	bls.n	800296e <Read_Temp+0x4a>

		}
	}
//	printf("Temperature read end\n");
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252
	batt->cell_volt_lowest = batt->cell_volt[0];
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8a3 2250 	strh.w	r2, [r3, #592]	@ 0x250

	for (int i = 1; i < NUM_CELLS; i++) {
 80029ca:	2301      	movs	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e11a      	b.n	8002c06 <Cell_Summary_Voltage+0x25e>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 80029de:	429a      	cmp	r2, r3
 80029e0:	d93a      	bls.n	8002a58 <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 80029f6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d906      	bls.n	8002a0c <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	f043 0310 	orr.w	r3, r3, #16
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002a12:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d910      	bls.n	8002a3c <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00c      	beq.n	8002a3c <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f043 0310 	orr.w	r3, r3, #16
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	2102      	movs	r1, #2
 8002a34:	4878      	ldr	r0, [pc, #480]	@ (8002c18 <Cell_Summary_Voltage+0x270>)
 8002a36:	f002 fabb 	bl	8004fb0 <HAL_GPIO_WritePin>
 8002a3a:	e00d      	b.n	8002a58 <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002a42:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d903      	bls.n	8002a52 <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e002      	b.n	8002a58 <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d23a      	bcs.n	8002ae0 <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8a3 2250 	strh.w	r2, [r3, #592]	@ 0x250

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002a7e:	f646 1278 	movw	r2, #27000	@ 0x6978
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d806      	bhi.n	8002a94 <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f043 0320 	orr.w	r3, r3, #32
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002a9a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d810      	bhi.n	8002ac4 <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	f043 0320 	orr.w	r3, r3, #32
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2102      	movs	r1, #2
 8002abc:	4856      	ldr	r0, [pc, #344]	@ (8002c18 <Cell_Summary_Voltage+0x270>)
 8002abe:	f002 fa77 	bl	8004fb0 <HAL_GPIO_WritePin>
 8002ac2:	e00d      	b.n	8002ae0 <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002aca:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d803      	bhi.n	8002ada <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e002      	b.n	8002ae0 <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002af4:	db10      	blt.n	8002b18 <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00c      	beq.n	8002b18 <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4841      	ldr	r0, [pc, #260]	@ (8002c18 <Cell_Summary_Voltage+0x270>)
 8002b12:	f002 fa4d 	bl	8004fb0 <HAL_GPIO_WritePin>
 8002b16:	e011      	b.n	8002b3c <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b2c:	db03      	blt.n	8002b36 <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e002      	b.n	8002b3c <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b50:	db06      	blt.n	8002b60 <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f043 0302 	orr.w	r3, r3, #2
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002b66:	4a2d      	ldr	r2, [pc, #180]	@ (8002c1c <Cell_Summary_Voltage+0x274>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d906      	bls.n	8002b7a <Cell_Summary_Voltage+0x1d2>
			*warnings |= 0b10000000;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002b80:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <Cell_Summary_Voltage+0x278>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d806      	bhi.n	8002b94 <Cell_Summary_Voltage+0x1ec>
			*warnings |= 0b01000000;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <Cell_Summary_Voltage+0x27c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d90b      	bls.n	8002bb8 <Cell_Summary_Voltage+0x210>
			*fault |= 0b10000000;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4819      	ldr	r0, [pc, #100]	@ (8002c18 <Cell_Summary_Voltage+0x270>)
 8002bb4:	f002 f9fc 	bl	8004fb0 <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <Cell_Summary_Voltage+0x280>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d80b      	bhi.n	8002bdc <Cell_Summary_Voltage+0x234>
			*fault |= 0b01000000;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4810      	ldr	r0, [pc, #64]	@ (8002c18 <Cell_Summary_Voltage+0x270>)
 8002bd8:	f002 f9ea 	bl	8004fb0 <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bf0:	db06      	blt.n	8002c00 <Cell_Summary_Voltage+0x258>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3301      	adds	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b5f      	cmp	r3, #95	@ 0x5f
 8002c0a:	f77f aee1 	ble.w	80029d0 <Cell_Summary_Voltage+0x28>
		}
//		if (BALANCE) {
//			*states |= 0b10000000;
//		}
	}
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010c00 	.word	0x40010c00
 8002c1c:	003e5507 	.word	0x003e5507
 8002c20:	002dc6c0 	.word	0x002dc6c0
 8002c24:	003e8f9f 	.word	0x003e8f9f
 8002c28:	002bf200 	.word	0x002bf200

08002c2c <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f8a3 2256 	strh.w	r2, [r3, #598]	@ 0x256
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8a3 2254 	strh.w	r2, [r3, #596]	@ 0x254

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e04f      	b.n	8002cf6 <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8b3 2256 	ldrh.w	r2, [r3, #598]	@ 0x256
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6979      	ldr	r1, [r7, #20]
 8002c60:	3160      	adds	r1, #96	@ 0x60
 8002c62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d224      	bcs.n	8002cb4 <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	3260      	adds	r2, #96	@ 0x60
 8002c70:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8a3 2256 	strh.w	r2, [r3, #598]	@ 0x256
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 8002c80:	2b36      	cmp	r3, #54	@ 0x36
 8002c82:	d906      	bls.n	8002c92 <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 8002c98:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c9a:	d90b      	bls.n	8002cb4 <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002caa:	2201      	movs	r2, #1
 8002cac:	2102      	movs	r1, #2
 8002cae:	4816      	ldr	r0, [pc, #88]	@ (8002d08 <Cell_Summary_Temperature+0xdc>)
 8002cb0:	f002 f97e 	bl	8004fb0 <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8b3 2254 	ldrh.w	r2, [r3, #596]	@ 0x254
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6979      	ldr	r1, [r7, #20]
 8002cbe:	3160      	adds	r1, #96	@ 0x60
 8002cc0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d913      	bls.n	8002cf0 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	3260      	adds	r2, #96	@ 0x60
 8002cce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8a3 2254 	strh.w	r2, [r3, #596]	@ 0x254

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8b3 3254 	ldrh.w	r3, [r3, #596]	@ 0x254
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b5f      	cmp	r3, #95	@ 0x5f
 8002cfa:	ddac      	ble.n	8002c56 <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40010c00 	.word	0x40010c00

08002d0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d12:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <MX_SPI1_Init+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d40:	2228      	movs	r2, #40	@ 0x28
 8002d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d50:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d58:	220a      	movs	r2, #10
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d5c:	4804      	ldr	r0, [pc, #16]	@ (8002d70 <MX_SPI1_Init+0x64>)
 8002d5e:	f003 f8e9 	bl	8005f34 <HAL_SPI_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d68:	f7ff fd3e 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200001bc 	.word	0x200001bc
 8002d74:	40013000 	.word	0x40013000

08002d78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1f      	ldr	r2, [pc, #124]	@ (8002e10 <HAL_SPI_MspInit+0x98>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d137      	bne.n	8002e08 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d98:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <HAL_SPI_MspInit+0x9c>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <HAL_SPI_MspInit+0x9c>)
 8002d9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_SPI_MspInit+0x9c>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <HAL_SPI_MspInit+0x9c>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_SPI_MspInit+0x9c>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <HAL_SPI_MspInit+0x9c>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002dc8:	23a0      	movs	r3, #160	@ 0xa0
 8002dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480f      	ldr	r0, [pc, #60]	@ (8002e18 <HAL_SPI_MspInit+0xa0>)
 8002ddc:	f001 ff64 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002de0:	2340      	movs	r3, #64	@ 0x40
 8002de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4619      	mov	r1, r3
 8002df2:	4809      	ldr	r0, [pc, #36]	@ (8002e18 <HAL_SPI_MspInit+0xa0>)
 8002df4:	f001 ff58 	bl	8004ca8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2023      	movs	r0, #35	@ 0x23
 8002dfe:	f001 fdda 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e02:	2023      	movs	r0, #35	@ 0x23
 8002e04:	f001 fdf3 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40013000 	.word	0x40013000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010800 	.word	0x40010800

08002e1c <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002e20:	2201      	movs	r2, #1
 8002e22:	2110      	movs	r1, #16
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <LTC_nCS_High+0x14>)
 8002e26:	f002 f8c3 	bl	8004fb0 <HAL_GPIO_WritePin>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40010800 	.word	0x40010800

08002e34 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2110      	movs	r1, #16
 8002e3c:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <LTC_nCS_Low+0x14>)
 8002e3e:	f002 f8b7 	bl	8004fb0 <HAL_GPIO_WritePin>
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40010800 	.word	0x40010800

08002e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <HAL_MspInit+0x5c>)
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <HAL_MspInit+0x5c>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6193      	str	r3, [r2, #24]
 8002e5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <HAL_MspInit+0x5c>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <HAL_MspInit+0x5c>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea8 <HAL_MspInit+0x5c>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <HAL_MspInit+0x5c>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_MspInit+0x60>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_MspInit+0x60>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010000 	.word	0x40010000

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <NMI_Handler+0x4>

08002eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <HardFault_Handler+0x4>

08002ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <MemManage_Handler+0x4>

08002ec8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f00:	f000 fa7c 	bl	80033fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f0c:	4803      	ldr	r0, [pc, #12]	@ (8002f1c <ADC1_2_IRQHandler+0x14>)
 8002f0e:	f000 fd79 	bl	8003a04 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002f12:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <ADC1_2_IRQHandler+0x18>)
 8002f14:	f000 fd76 	bl	8003a04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000134 	.word	0x20000134
 8002f20:	20000164 	.word	0x20000164

08002f24 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f28:	4802      	ldr	r0, [pc, #8]	@ (8002f34 <CAN1_TX_IRQHandler+0x10>)
 8002f2a:	f001 fa40 	bl	80043ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000194 	.word	0x20000194

08002f38 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <CAN1_RX0_IRQHandler+0x10>)
 8002f3e:	f001 fa36 	bl	80043ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000194 	.word	0x20000194

08002f4c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <CAN1_RX1_IRQHandler+0x10>)
 8002f52:	f001 fa2c 	bl	80043ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000194 	.word	0x20000194

08002f60 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f64:	4802      	ldr	r0, [pc, #8]	@ (8002f70 <CAN1_SCE_IRQHandler+0x10>)
 8002f66:	f001 fa22 	bl	80043ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000194 	.word	0x20000194

08002f74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f78:	4802      	ldr	r0, [pc, #8]	@ (8002f84 <SPI1_IRQHandler+0x10>)
 8002f7a:	f003 fc65 	bl	8006848 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200001bc 	.word	0x200001bc

08002f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <USART1_IRQHandler+0x10>)
 8002f8e:	f004 f99b 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000264 	.word	0x20000264

08002f9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fa0:	4802      	ldr	r0, [pc, #8]	@ (8002fac <TIM7_IRQHandler+0x10>)
 8002fa2:	f003 fea7 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000218 	.word	0x20000218

08002fb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e00a      	b.n	8002fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fc2:	f3af 8000 	nop.w
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	60ba      	str	r2, [r7, #8]
 8002fce:	b2ca      	uxtb	r2, r1
 8002fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	dbf0      	blt.n	8002fc2 <_read+0x12>
  }

  return len;
 8002fe0:	687b      	ldr	r3, [r7, #4]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003010:	605a      	str	r2, [r3, #4]
  return 0;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <_isatty>:

int _isatty(int file)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
	...

0800304c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003054:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <_sbrk+0x5c>)
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <_sbrk+0x60>)
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <_sbrk+0x64>)
 800306a:	4a12      	ldr	r2, [pc, #72]	@ (80030b4 <_sbrk+0x68>)
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d207      	bcs.n	800308c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800307c:	f005 f8ec 	bl	8008258 <__errno>
 8003080:	4603      	mov	r3, r0
 8003082:	220c      	movs	r2, #12
 8003084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e009      	b.n	80030a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <_sbrk+0x64>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003092:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	4a05      	ldr	r2, [pc, #20]	@ (80030b0 <_sbrk+0x64>)
 800309c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309e:	68fb      	ldr	r3, [r7, #12]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20010000 	.word	0x20010000
 80030ac:	00000400 	.word	0x00000400
 80030b0:	20000214 	.word	0x20000214
 80030b4:	20000400 	.word	0x20000400

080030b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ca:	463b      	mov	r3, r7
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <MX_TIM7_Init+0x64>)
 80030d4:	4a15      	ldr	r2, [pc, #84]	@ (800312c <MX_TIM7_Init+0x68>)
 80030d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <MX_TIM7_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <MX_TIM7_Init+0x64>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80030e4:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <MX_TIM7_Init+0x64>)
 80030e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <MX_TIM7_Init+0x64>)
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030f2:	480d      	ldr	r0, [pc, #52]	@ (8003128 <MX_TIM7_Init+0x64>)
 80030f4:	f003 fdaf 	bl	8006c56 <HAL_TIM_Base_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80030fe:	f7ff fb73 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800310a:	463b      	mov	r3, r7
 800310c:	4619      	mov	r1, r3
 800310e:	4806      	ldr	r0, [pc, #24]	@ (8003128 <MX_TIM7_Init+0x64>)
 8003110:	f003 ff86 	bl	8007020 <HAL_TIMEx_MasterConfigSynchronization>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800311a:	f7ff fb65 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000218 	.word	0x20000218
 800312c:	40001400 	.word	0x40001400

08003130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <HAL_TIM_Base_MspInit+0x44>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d113      	bne.n	800316a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003142:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <HAL_TIM_Base_MspInit+0x48>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4a0c      	ldr	r2, [pc, #48]	@ (8003178 <HAL_TIM_Base_MspInit+0x48>)
 8003148:	f043 0320 	orr.w	r3, r3, #32
 800314c:	61d3      	str	r3, [r2, #28]
 800314e:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <HAL_TIM_Base_MspInit+0x48>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	2037      	movs	r0, #55	@ 0x37
 8003160:	f001 fc29 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003164:	2037      	movs	r0, #55	@ 0x37
 8003166:	f001 fc42 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40001400 	.word	0x40001400
 8003178:	40021000 	.word	0x40021000

0800317c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003180:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 8003182:	4a11      	ldr	r2, [pc, #68]	@ (80031c8 <MX_USART1_UART_Init+0x4c>)
 8003184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8003186:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 8003188:	4a10      	ldr	r2, [pc, #64]	@ (80031cc <MX_USART1_UART_Init+0x50>)
 800318a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003192:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 80031a0:	220c      	movs	r2, #12
 80031a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a4:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <MX_USART1_UART_Init+0x48>)
 80031b2:	f003 ffad 	bl	8007110 <HAL_UART_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80031bc:	f7ff fb14 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000264 	.word	0x20000264
 80031c8:	40013800 	.word	0x40013800
 80031cc:	0003d090 	.word	0x0003d090

080031d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0310 	add.w	r3, r7, #16
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a20      	ldr	r2, [pc, #128]	@ (800326c <HAL_UART_MspInit+0x9c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d139      	bne.n	8003264 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <HAL_UART_MspInit+0xa0>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <HAL_UART_MspInit+0xa0>)
 80031f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031fa:	6193      	str	r3, [r2, #24]
 80031fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <HAL_UART_MspInit+0xa0>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003208:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_UART_MspInit+0xa0>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <HAL_UART_MspInit+0xa0>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b16      	ldr	r3, [pc, #88]	@ (8003270 <HAL_UART_MspInit+0xa0>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2302      	movs	r3, #2
 800322c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322e:	f107 0310 	add.w	r3, r7, #16
 8003232:	4619      	mov	r1, r3
 8003234:	480f      	ldr	r0, [pc, #60]	@ (8003274 <HAL_UART_MspInit+0xa4>)
 8003236:	f001 fd37 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800323a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800323e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	4619      	mov	r1, r3
 800324e:	4809      	ldr	r0, [pc, #36]	@ (8003274 <HAL_UART_MspInit+0xa4>)
 8003250:	f001 fd2a 	bl	8004ca8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2104      	movs	r1, #4
 8003258:	2025      	movs	r0, #37	@ 0x25
 800325a:	f001 fbac 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800325e:	2025      	movs	r0, #37	@ 0x25
 8003260:	f001 fbc5 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40013800 	.word	0x40013800
 8003270:	40021000 	.word	0x40021000
 8003274:	40010800 	.word	0x40010800

08003278 <_write>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len) {					//overloading printf() for UART with DMA
 8003278:	b580      	push	{r7, lr}
 800327a:	b0a8      	sub	sp, #160	@ 0xa0
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
    char buffer[128]; // バッファ
    uint32_t current_tick = HAL_GetTick(); // get current time
 8003284:	f000 f8cc 	bl	8003420 <HAL_GetTick>
 8003288:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    uint32_t elapsed_time = current_tick - last_tick; // get difference from last time
 800328c:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <_write+0xa0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    last_tick = current_tick; //refresh the last time
 800329a:	4a1f      	ldr	r2, [pc, #124]	@ (8003318 <_write+0xa0>)
 800329c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a0:	6013      	str	r3, [r2, #0]

    //format timestamp and elapsed time
    int offset = snprintf(buffer, sizeof(buffer), "[+%lu ms] ", elapsed_time);
 80032a2:	f107 0010 	add.w	r0, r7, #16
 80032a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032aa:	4a1c      	ldr	r2, [pc, #112]	@ (800331c <_write+0xa4>)
 80032ac:	2180      	movs	r1, #128	@ 0x80
 80032ae:	f004 fe65 	bl	8007f7c <sniprintf>
 80032b2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    //copy the message from printf and merge with time stamp
    int copy_len = (len < (sizeof(buffer) - offset - 1)) ? len : (sizeof(buffer) - offset - 1);
 80032b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ba:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4293      	cmp	r3, r2
 80032c2:	bf28      	it	cs
 80032c4:	4613      	movcs	r3, r2
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    strncpy(buffer + offset, ptr, copy_len);
 80032ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ce:	f107 0210 	add.w	r2, r7, #16
 80032d2:	4413      	add	r3, r2
 80032d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 ff62 	bl	80081a4 <strncpy>
    buffer[offset + copy_len] = '\0';
 80032e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032e8:	4413      	add	r3, r2
 80032ea:	33a0      	adds	r3, #160	@ 0xa0
 80032ec:	443b      	add	r3, r7
 80032ee:	2200      	movs	r2, #0
 80032f0:	f803 2c90 	strb.w	r2, [r3, #-144]

    //send with DMA and UART
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fc ff95 	bl	8000228 <strlen>
 80032fe:	4603      	mov	r3, r0
 8003300:	b29a      	uxth	r2, r3
 8003302:	f107 0110 	add.w	r1, r7, #16
 8003306:	2364      	movs	r3, #100	@ 0x64
 8003308:	4805      	ldr	r0, [pc, #20]	@ (8003320 <_write+0xa8>)
 800330a:	f003 ff51 	bl	80071b0 <HAL_UART_Transmit>

    return len;
 800330e:	687b      	ldr	r3, [r7, #4]
}
 8003310:	4618      	mov	r0, r3
 8003312:	37a0      	adds	r7, #160	@ 0xa0
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000260 	.word	0x20000260
 800331c:	080091bc 	.word	0x080091bc
 8003320:	20000264 	.word	0x20000264

08003324 <Reset_Handler>:
 8003324:	f7ff fec8 	bl	80030b8 <SystemInit>
 8003328:	480b      	ldr	r0, [pc, #44]	@ (8003358 <LoopFillZerobss+0xe>)
 800332a:	490c      	ldr	r1, [pc, #48]	@ (800335c <LoopFillZerobss+0x12>)
 800332c:	4a0c      	ldr	r2, [pc, #48]	@ (8003360 <LoopFillZerobss+0x16>)
 800332e:	2300      	movs	r3, #0
 8003330:	e002      	b.n	8003338 <LoopCopyDataInit>

08003332 <CopyDataInit>:
 8003332:	58d4      	ldr	r4, [r2, r3]
 8003334:	50c4      	str	r4, [r0, r3]
 8003336:	3304      	adds	r3, #4

08003338 <LoopCopyDataInit>:
 8003338:	18c4      	adds	r4, r0, r3
 800333a:	428c      	cmp	r4, r1
 800333c:	d3f9      	bcc.n	8003332 <CopyDataInit>
 800333e:	4a09      	ldr	r2, [pc, #36]	@ (8003364 <LoopFillZerobss+0x1a>)
 8003340:	4c09      	ldr	r4, [pc, #36]	@ (8003368 <LoopFillZerobss+0x1e>)
 8003342:	2300      	movs	r3, #0
 8003344:	e001      	b.n	800334a <LoopFillZerobss>

08003346 <FillZerobss>:
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	3204      	adds	r2, #4

0800334a <LoopFillZerobss>:
 800334a:	42a2      	cmp	r2, r4
 800334c:	d3fb      	bcc.n	8003346 <FillZerobss>
 800334e:	f004 ff89 	bl	8008264 <__libc_init_array>
 8003352:	f7ff f80f 	bl	8002374 <main>
 8003356:	4770      	bx	lr
 8003358:	20000000 	.word	0x20000000
 800335c:	200000d4 	.word	0x200000d4
 8003360:	08009670 	.word	0x08009670
 8003364:	200000d4 	.word	0x200000d4
 8003368:	200003fc 	.word	0x200003fc

0800336c <CAN2_RX0_IRQHandler>:
 800336c:	e7fe      	b.n	800336c <CAN2_RX0_IRQHandler>
	...

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003374:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_Init+0x28>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_Init+0x28>)
 800337a:	f043 0310 	orr.w	r3, r3, #16
 800337e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003380:	2003      	movs	r0, #3
 8003382:	f001 fb0d 	bl	80049a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003386:	200f      	movs	r0, #15
 8003388:	f000 f808 	bl	800339c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800338c:	f7ff fd5e 	bl	8002e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000

0800339c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_InitTick+0x54>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_InitTick+0x58>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fb25 	bl	8004a0a <HAL_SYSTICK_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00e      	b.n	80033e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d80a      	bhi.n	80033e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d0:	2200      	movs	r2, #0
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f001 faed 	bl	80049b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033dc:	4a06      	ldr	r2, [pc, #24]	@ (80033f8 <HAL_InitTick+0x5c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000006c 	.word	0x2000006c
 80033f4:	20000074 	.word	0x20000074
 80033f8:	20000070 	.word	0x20000070

080033fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HAL_IncTick+0x1c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_IncTick+0x20>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4413      	add	r3, r2
 800340c:	4a03      	ldr	r2, [pc, #12]	@ (800341c <HAL_IncTick+0x20>)
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000074 	.word	0x20000074
 800341c:	200002ac 	.word	0x200002ac

08003420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return uwTick;
 8003424:	4b02      	ldr	r3, [pc, #8]	@ (8003430 <HAL_GetTick+0x10>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	200002ac 	.word	0x200002ac

08003434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff fff0 	bl	8003420 <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d005      	beq.n	800345a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_Delay+0x44>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800345a:	bf00      	nop
 800345c:	f7ff ffe0 	bl	8003420 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	429a      	cmp	r2, r3
 800346a:	d8f7      	bhi.n	800345c <HAL_Delay+0x28>
  {
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000074 	.word	0x20000074

0800347c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0be      	b.n	800361c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fafa 	bl	8001ab4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fcc3 	bl	8003e4c <ADC_ConversionStop_Disable>
 80034c6:	4603      	mov	r3, r0
 80034c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 8099 	bne.w	800360a <HAL_ADC_Init+0x18e>
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8095 	bne.w	800360a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034e8:	f023 0302 	bic.w	r3, r3, #2
 80034ec:	f043 0202 	orr.w	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7b1b      	ldrb	r3, [r3, #12]
 8003502:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003504:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003514:	d003      	beq.n	800351e <HAL_ADC_Init+0xa2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_ADC_Init+0xa8>
 800351e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003522:	e000      	b.n	8003526 <HAL_ADC_Init+0xaa>
 8003524:	2300      	movs	r3, #0
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7d1b      	ldrb	r3, [r3, #20]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d119      	bne.n	8003568 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7b1b      	ldrb	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	3b01      	subs	r3, #1
 8003542:	035a      	lsls	r2, r3, #13
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e00b      	b.n	8003568 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <HAL_ADC_Init+0x1a8>)
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	430b      	orrs	r3, r1
 800358e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d003      	beq.n	80035a2 <HAL_ADC_Init+0x126>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d104      	bne.n	80035ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	051b      	lsls	r3, r3, #20
 80035aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	430a      	orrs	r2, r1
 80035be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <HAL_ADC_Init+0x1ac>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d10b      	bne.n	80035e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035e6:	e018      	b.n	800361a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	f023 0312 	bic.w	r3, r3, #18
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003608:	e007      	b.n	800361a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	f043 0210 	orr.w	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	ffe1f7fd 	.word	0xffe1f7fd
 8003628:	ff1f0efe 	.word	0xff1f0efe

0800362c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_ADC_Start+0x1a>
 8003642:	2302      	movs	r3, #2
 8003644:	e098      	b.n	8003778 <HAL_ADC_Start+0x14c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fba2 	bl	8003d98 <ADC_Enable>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8087 	bne.w	800376e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <HAL_ADC_Start+0x154>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d105      	bne.n	800368a <HAL_ADC_Start+0x5e>
 800367e:	4b41      	ldr	r3, [pc, #260]	@ (8003784 <HAL_ADC_Start+0x158>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d026      	beq.n	80036f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036b4:	e01d      	b.n	80036f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003784 <HAL_ADC_Start+0x158>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_ADC_Start+0xaa>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003780 <HAL_ADC_Start+0x154>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10d      	bne.n	80036f2 <HAL_ADC_Start+0xc6>
 80036d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003784 <HAL_ADC_Start+0x158>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	f023 0206 	bic.w	r2, r3, #6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800370a:	e002      	b.n	8003712 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f06f 0202 	mvn.w	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800372e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003732:	d113      	bne.n	800375c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <HAL_ADC_Start+0x154>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d105      	bne.n	800374a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800373e:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_ADC_Start+0x158>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	e00c      	b.n	8003776 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	e003      	b.n	8003776 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40012800 	.word	0x40012800
 8003784:	40012400 	.word	0x40012400

08003788 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_Stop+0x1a>
 800379e:	2302      	movs	r3, #2
 80037a0:	e01a      	b.n	80037d8 <HAL_ADC_Stop+0x50>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb4e 	bl	8003e4c <ADC_ConversionStop_Disable>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80037f6:	f7ff fe13 	bl	8003420 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0d3      	b.n	80039ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d131      	bne.n	8003894 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d12a      	bne.n	8003894 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800383e:	e021      	b.n	8003884 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d01d      	beq.n	8003884 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_ADC_PollForConversion+0x7e>
 800384e:	f7ff fde7 	bl	8003420 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d212      	bcs.n	8003884 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0a2      	b.n	80039ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0d6      	beq.n	8003840 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003892:	e070      	b.n	8003976 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003894:	4b4f      	ldr	r3, [pc, #316]	@ (80039d4 <HAL_ADC_PollForConversion+0x1f4>)
 8003896:	681c      	ldr	r4, [r3, #0]
 8003898:	2002      	movs	r0, #2
 800389a:	f002 f9f9 	bl	8005c90 <HAL_RCCEx_GetPeriphCLKFreq>
 800389e:	4603      	mov	r3, r0
 80038a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6919      	ldr	r1, [r3, #16]
 80038aa:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_ADC_PollForConversion+0x1f8>)
 80038ac:	400b      	ands	r3, r1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x104>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68d9      	ldr	r1, [r3, #12]
 80038b8:	4b48      	ldr	r3, [pc, #288]	@ (80039dc <HAL_ADC_PollForConversion+0x1fc>)
 80038ba:	400b      	ands	r3, r1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d111      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x104>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6919      	ldr	r1, [r3, #16]
 80038c6:	4b46      	ldr	r3, [pc, #280]	@ (80039e0 <HAL_ADC_PollForConversion+0x200>)
 80038c8:	400b      	ands	r3, r1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d108      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x100>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68d9      	ldr	r1, [r3, #12]
 80038d4:	4b43      	ldr	r3, [pc, #268]	@ (80039e4 <HAL_ADC_PollForConversion+0x204>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x100>
 80038dc:	2314      	movs	r3, #20
 80038de:	e020      	b.n	8003922 <HAL_ADC_PollForConversion+0x142>
 80038e0:	2329      	movs	r3, #41	@ 0x29
 80038e2:	e01e      	b.n	8003922 <HAL_ADC_PollForConversion+0x142>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_ADC_PollForConversion+0x200>)
 80038ec:	400b      	ands	r3, r1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_ADC_PollForConversion+0x120>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68d9      	ldr	r1, [r3, #12]
 80038f8:	4b3a      	ldr	r3, [pc, #232]	@ (80039e4 <HAL_ADC_PollForConversion+0x204>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_ADC_PollForConversion+0x13c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6919      	ldr	r1, [r3, #16]
 8003906:	4b38      	ldr	r3, [pc, #224]	@ (80039e8 <HAL_ADC_PollForConversion+0x208>)
 8003908:	400b      	ands	r3, r1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_ADC_PollForConversion+0x140>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68d9      	ldr	r1, [r3, #12]
 8003914:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_ADC_PollForConversion+0x208>)
 8003916:	400b      	ands	r3, r1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_ADC_PollForConversion+0x140>
 800391c:	2354      	movs	r3, #84	@ 0x54
 800391e:	e000      	b.n	8003922 <HAL_ADC_PollForConversion+0x142>
 8003920:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003928:	e021      	b.n	800396e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d01a      	beq.n	8003968 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_ADC_PollForConversion+0x168>
 8003938:	f7ff fd72 	bl	8003420 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d20f      	bcs.n	8003968 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d90b      	bls.n	8003968 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e030      	b.n	80039ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d8d9      	bhi.n	800392a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0212 	mvn.w	r2, #18
 800397e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003996:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800399a:	d115      	bne.n	80039c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000006c 	.word	0x2000006c
 80039d8:	24924924 	.word	0x24924924
 80039dc:	00924924 	.word	0x00924924
 80039e0:	12492492 	.word	0x12492492
 80039e4:	00492492 	.word	0x00492492
 80039e8:	00249249 	.word	0x00249249

080039ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03e      	beq.n	8003aa4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d039      	beq.n	8003aa4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003a52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a56:	d11d      	bne.n	8003a94 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d119      	bne.n	8003a94 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0220 	bic.w	r2, r2, #32
 8003a6e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f874 	bl	8003b82 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0212 	mvn.w	r2, #18
 8003aa2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04d      	beq.n	8003b4a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d048      	beq.n	8003b4a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003ada:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003ade:	d012      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d125      	bne.n	8003b3a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003af8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003afc:	d11d      	bne.n	8003b3a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d119      	bne.n	8003b3a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9c7 	bl	8003ece <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 020c 	mvn.w	r2, #12
 8003b48:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d012      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f812 	bl	8003b94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0201 	mvn.w	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x20>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e0dc      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x1da>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d81c      	bhi.n	8003c12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	3b05      	subs	r3, #5
 8003bea:	221f      	movs	r2, #31
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	4019      	ands	r1, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	3b05      	subs	r3, #5
 8003c04:	fa00 f203 	lsl.w	r2, r0, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c10:	e03c      	b.n	8003c8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d81c      	bhi.n	8003c54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	3b23      	subs	r3, #35	@ 0x23
 8003c2c:	221f      	movs	r2, #31
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	4019      	ands	r1, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	3b23      	subs	r3, #35	@ 0x23
 8003c46:	fa00 f203 	lsl.w	r2, r0, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c52:	e01b      	b.n	8003c8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	3b41      	subs	r3, #65	@ 0x41
 8003c66:	221f      	movs	r2, #31
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	4019      	ands	r1, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b41      	subs	r3, #65	@ 0x41
 8003c80:	fa00 f203 	lsl.w	r2, r0, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b09      	cmp	r3, #9
 8003c92:	d91c      	bls.n	8003cce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68d9      	ldr	r1, [r3, #12]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b1e      	subs	r3, #30
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	4019      	ands	r1, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6898      	ldr	r0, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3b1e      	subs	r3, #30
 8003cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	e019      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6919      	ldr	r1, [r3, #16]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	2207      	movs	r2, #7
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	4019      	ands	r1, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6898      	ldr	r0, [r3, #8]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d003      	beq.n	8003d12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d0e:	2b11      	cmp	r3, #17
 8003d10:	d132      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <HAL_ADC_ConfigChannel+0x1e4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d125      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d126      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003d38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d11a      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <HAL_ADC_ConfigChannel+0x1e8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <HAL_ADC_ConfigChannel+0x1ec>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	0c9a      	lsrs	r2, r3, #18
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d58:	e002      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f9      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x1b2>
 8003d66:	e007      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	40012400 	.word	0x40012400
 8003d90:	2000006c 	.word	0x2000006c
 8003d94:	431bde83 	.word	0x431bde83

08003d98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d040      	beq.n	8003e38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <ADC_Enable+0xac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <ADC_Enable+0xb0>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	0c9b      	lsrs	r3, r3, #18
 8003dd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dd4:	e002      	b.n	8003ddc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f9      	bne.n	8003dd6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003de2:	f7ff fb1d 	bl	8003420 <HAL_GetTick>
 8003de6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003de8:	e01f      	b.n	8003e2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dea:	f7ff fb19 	bl	8003420 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d918      	bls.n	8003e2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d011      	beq.n	8003e2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e007      	b.n	8003e3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d1d8      	bne.n	8003dea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000006c 	.word	0x2000006c
 8003e48:	431bde83 	.word	0x431bde83

08003e4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d12e      	bne.n	8003ec4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e76:	f7ff fad3 	bl	8003420 <HAL_GetTick>
 8003e7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e7c:	e01b      	b.n	8003eb6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e7e:	f7ff facf 	bl	8003420 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d914      	bls.n	8003eb6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10d      	bne.n	8003eb6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d0dc      	beq.n	8003e7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0ed      	b.n	80040ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fe84 	bl	8001c0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f14:	f7ff fa84 	bl	8003420 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f1a:	e012      	b.n	8003f42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f1c:	f7ff fa80 	bl	8003420 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b0a      	cmp	r3, #10
 8003f28:	d90b      	bls.n	8003f42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0c5      	b.n	80040ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0e5      	beq.n	8003f1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0202 	bic.w	r2, r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f60:	f7ff fa5e 	bl	8003420 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f66:	e012      	b.n	8003f8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f68:	f7ff fa5a 	bl	8003420 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b0a      	cmp	r3, #10
 8003f74:	d90b      	bls.n	8003f8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e09f      	b.n	80040ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7e1b      	ldrb	r3, [r3, #24]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e007      	b.n	8003fc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7e5b      	ldrb	r3, [r3, #25]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d108      	bne.n	8003fe0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7e9b      	ldrb	r3, [r3, #26]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d108      	bne.n	800400a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0220 	orr.w	r2, r2, #32
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e007      	b.n	800401a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0220 	bic.w	r2, r2, #32
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7edb      	ldrb	r3, [r3, #27]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d108      	bne.n	8004034 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0210 	bic.w	r2, r2, #16
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e007      	b.n	8004044 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0210 	orr.w	r2, r2, #16
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7f1b      	ldrb	r3, [r3, #28]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d108      	bne.n	800405e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e007      	b.n	800406e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0208 	bic.w	r2, r2, #8
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7f5b      	ldrb	r3, [r3, #29]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d108      	bne.n	8004088 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0204 	orr.w	r2, r2, #4
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e007      	b.n	8004098 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0204 	bic.w	r2, r2, #4
 8004096:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	ea42 0103 	orr.w	r1, r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	1e5a      	subs	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d12e      	bne.n	8004148 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004102:	f7ff f98d 	bl	8003420 <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004108:	e012      	b.n	8004130 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800410a:	f7ff f989 	bl	8003420 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b0a      	cmp	r3, #10
 8004116:	d90b      	bls.n	8004130 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2205      	movs	r2, #5
 8004128:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e012      	b.n	8004156 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e006      	b.n	8004156 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800415e:	b480      	push	{r7}
 8004160:	b089      	sub	sp, #36	@ 0x24
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004172:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800417c:	7ffb      	ldrb	r3, [r7, #31]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d003      	beq.n	800418a <HAL_CAN_AddTxMessage+0x2c>
 8004182:	7ffb      	ldrb	r3, [r7, #31]
 8004184:	2b02      	cmp	r3, #2
 8004186:	f040 80ad 	bne.w	80042e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8095 	beq.w	80042d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	0e1b      	lsrs	r3, r3, #24
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80041b4:	2201      	movs	r2, #1
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	409a      	lsls	r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	6809      	ldr	r1, [r1, #0]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	3318      	adds	r3, #24
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	440b      	add	r3, r1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e00f      	b.n	8004202 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80041f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3318      	adds	r3, #24
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	440b      	add	r3, r1
 8004200:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	3318      	adds	r3, #24
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	440b      	add	r3, r1
 8004212:	3304      	adds	r3, #4
 8004214:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	7d1b      	ldrb	r3, [r3, #20]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d111      	bne.n	8004242 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3318      	adds	r3, #24
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6811      	ldr	r1, [r2, #0]
 8004232:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3318      	adds	r3, #24
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	440b      	add	r3, r1
 800423e:	3304      	adds	r3, #4
 8004240:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3307      	adds	r3, #7
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	061a      	lsls	r2, r3, #24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3306      	adds	r3, #6
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3305      	adds	r3, #5
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	4313      	orrs	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	3204      	adds	r2, #4
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	4610      	mov	r0, r2
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	ea43 0200 	orr.w	r2, r3, r0
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	440b      	add	r3, r1
 8004274:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004278:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3303      	adds	r3, #3
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	061a      	lsls	r2, r3, #24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3302      	adds	r3, #2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3301      	adds	r3, #1
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4313      	orrs	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	4610      	mov	r0, r2
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6811      	ldr	r1, [r2, #0]
 80042a0:	ea43 0200 	orr.w	r2, r3, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	440b      	add	r3, r1
 80042aa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80042ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3318      	adds	r3, #24
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	4413      	add	r3, r2
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6811      	ldr	r1, [r2, #0]
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3318      	adds	r3, #24
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	440b      	add	r3, r1
 80042ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e00e      	b.n	80042f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e006      	b.n	80042f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	@ 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800430e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d002      	beq.n	800431c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004316:	7afb      	ldrb	r3, [r7, #11]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d11d      	bne.n	8004358 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3301      	adds	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004374:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d002      	beq.n	8004382 <HAL_CAN_ActivateNotification+0x1e>
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d109      	bne.n	8004396 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6959      	ldr	r1, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e006      	b.n	80043a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08a      	sub	sp, #40	@ 0x28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d07c      	beq.n	80044ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d023      	beq.n	8004446 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f983 	bl	800471c <HAL_CAN_TxMailbox0CompleteCallback>
 8004416:	e016      	b.n	8004446 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
 800442a:	e00c      	b.n	8004446 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
 800443e:	e002      	b.n	8004446 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f986 	bl	8004752 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d024      	beq.n	800449a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004458:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f962 	bl	800472e <HAL_CAN_TxMailbox1CompleteCallback>
 800446a:	e016      	b.n	800449a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	2b00      	cmp	r3, #0
 8004474:	d004      	beq.n	8004480 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800447c:	627b      	str	r3, [r7, #36]	@ 0x24
 800447e:	e00c      	b.n	800449a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
 8004492:	e002      	b.n	800449a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f965 	bl	8004764 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d024      	beq.n	80044ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f941 	bl	8004740 <HAL_CAN_TxMailbox2CompleteCallback>
 80044be:	e016      	b.n	80044ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d2:	e00c      	b.n	80044ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	e002      	b.n	80044ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f944 	bl	8004776 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00c      	beq.n	8004512 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2210      	movs	r2, #16
 8004510:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00b      	beq.n	8004534 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2208      	movs	r2, #8
 800452c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f933 	bl	800479a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f91b 	bl	8004788 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00c      	beq.n	8004576 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2210      	movs	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2208      	movs	r2, #8
 8004590:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f913 	bl	80047be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8fb 	bl	80047ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2210      	movs	r2, #16
 80045d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8fc 	bl	80047d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8f4 	bl	80047e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d07b      	beq.n	80046fc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d072      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004668:	2b00      	cmp	r3, #0
 800466a:	d043      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03e      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800467c:	2b60      	cmp	r3, #96	@ 0x60
 800467e:	d02b      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x32a>
 8004680:	2b60      	cmp	r3, #96	@ 0x60
 8004682:	d82e      	bhi.n	80046e2 <HAL_CAN_IRQHandler+0x334>
 8004684:	2b50      	cmp	r3, #80	@ 0x50
 8004686:	d022      	beq.n	80046ce <HAL_CAN_IRQHandler+0x320>
 8004688:	2b50      	cmp	r3, #80	@ 0x50
 800468a:	d82a      	bhi.n	80046e2 <HAL_CAN_IRQHandler+0x334>
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d019      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x316>
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d826      	bhi.n	80046e2 <HAL_CAN_IRQHandler+0x334>
 8004694:	2b30      	cmp	r3, #48	@ 0x30
 8004696:	d010      	beq.n	80046ba <HAL_CAN_IRQHandler+0x30c>
 8004698:	2b30      	cmp	r3, #48	@ 0x30
 800469a:	d822      	bhi.n	80046e2 <HAL_CAN_IRQHandler+0x334>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d002      	beq.n	80046a6 <HAL_CAN_IRQHandler+0x2f8>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d005      	beq.n	80046b0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80046a4:	e01d      	b.n	80046e2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046ae:	e019      	b.n	80046e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	f043 0310 	orr.w	r3, r3, #16
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046b8:	e014      	b.n	80046e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	f043 0320 	orr.w	r3, r3, #32
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046c2:	e00f      	b.n	80046e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046cc:	e00a      	b.n	80046e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046d6:	e005      	b.n	80046e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046e0:	e000      	b.n	80046e4 <HAL_CAN_IRQHandler+0x336>
            break;
 80046e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80046f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2204      	movs	r2, #4
 80046fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f870 	bl	80047f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004714:	bf00      	nop
 8004716:	3728      	adds	r7, #40	@ 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr

08004752 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
	...

08004808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <__NVIC_SetPriorityGrouping+0x44>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483a:	4a04      	ldr	r2, [pc, #16]	@ (800484c <__NVIC_SetPriorityGrouping+0x44>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	60d3      	str	r3, [r2, #12]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004854:	4b04      	ldr	r3, [pc, #16]	@ (8004868 <__NVIC_GetPriorityGrouping+0x18>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0307 	and.w	r3, r3, #7
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db0b      	blt.n	8004896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4906      	ldr	r1, [pc, #24]	@ (80048a0 <__NVIC_EnableIRQ+0x34>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2001      	movs	r0, #1
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100

080048a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db0a      	blt.n	80048ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	490c      	ldr	r1, [pc, #48]	@ (80048f0 <__NVIC_SetPriority+0x4c>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	440b      	add	r3, r1
 80048c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048cc:	e00a      	b.n	80048e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4908      	ldr	r1, [pc, #32]	@ (80048f4 <__NVIC_SetPriority+0x50>)
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	3b04      	subs	r3, #4
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	761a      	strb	r2, [r3, #24]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e100 	.word	0xe000e100
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	@ 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f1c3 0307 	rsb	r3, r3, #7
 8004912:	2b04      	cmp	r3, #4
 8004914:	bf28      	it	cs
 8004916:	2304      	movcs	r3, #4
 8004918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3304      	adds	r3, #4
 800491e:	2b06      	cmp	r3, #6
 8004920:	d902      	bls.n	8004928 <NVIC_EncodePriority+0x30>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3b03      	subs	r3, #3
 8004926:	e000      	b.n	800492a <NVIC_EncodePriority+0x32>
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	401a      	ands	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	43d9      	mvns	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	4313      	orrs	r3, r2
         );
}
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	@ 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800496c:	d301      	bcc.n	8004972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004972:	4a0a      	ldr	r2, [pc, #40]	@ (800499c <SysTick_Config+0x40>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800497a:	210f      	movs	r1, #15
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	f7ff ff90 	bl	80048a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <SysTick_Config+0x40>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800498a:	4b04      	ldr	r3, [pc, #16]	@ (800499c <SysTick_Config+0x40>)
 800498c:	2207      	movs	r2, #7
 800498e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	e000e010 	.word	0xe000e010

080049a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff2d 	bl	8004808 <__NVIC_SetPriorityGrouping>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	4603      	mov	r3, r0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c8:	f7ff ff42 	bl	8004850 <__NVIC_GetPriorityGrouping>
 80049cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	6978      	ldr	r0, [r7, #20]
 80049d4:	f7ff ff90 	bl	80048f8 <NVIC_EncodePriority>
 80049d8:	4602      	mov	r2, r0
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff5f 	bl	80048a4 <__NVIC_SetPriority>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff35 	bl	800486c <__NVIC_EnableIRQ>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffa2 	bl	800495c <SysTick_Config>
 8004a18:	4603      	mov	r3, r0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d008      	beq.n	8004a4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e020      	b.n	8004a8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 020e 	bic.w	r2, r2, #14
 8004a5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d005      	beq.n	8004abc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e0d6      	b.n	8004c6a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 020e 	bic.w	r2, r2, #14
 8004aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b64      	ldr	r3, [pc, #400]	@ (8004c74 <HAL_DMA_Abort_IT+0x1dc>)
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d958      	bls.n	8004b9a <HAL_DMA_Abort_IT+0x102>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a62      	ldr	r2, [pc, #392]	@ (8004c78 <HAL_DMA_Abort_IT+0x1e0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d04f      	beq.n	8004b92 <HAL_DMA_Abort_IT+0xfa>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a61      	ldr	r2, [pc, #388]	@ (8004c7c <HAL_DMA_Abort_IT+0x1e4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d048      	beq.n	8004b8e <HAL_DMA_Abort_IT+0xf6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5f      	ldr	r2, [pc, #380]	@ (8004c80 <HAL_DMA_Abort_IT+0x1e8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d040      	beq.n	8004b88 <HAL_DMA_Abort_IT+0xf0>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8004c84 <HAL_DMA_Abort_IT+0x1ec>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d038      	beq.n	8004b82 <HAL_DMA_Abort_IT+0xea>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a5c      	ldr	r2, [pc, #368]	@ (8004c88 <HAL_DMA_Abort_IT+0x1f0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d030      	beq.n	8004b7c <HAL_DMA_Abort_IT+0xe4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c8c <HAL_DMA_Abort_IT+0x1f4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d028      	beq.n	8004b76 <HAL_DMA_Abort_IT+0xde>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a52      	ldr	r2, [pc, #328]	@ (8004c74 <HAL_DMA_Abort_IT+0x1dc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d020      	beq.n	8004b70 <HAL_DMA_Abort_IT+0xd8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a57      	ldr	r2, [pc, #348]	@ (8004c90 <HAL_DMA_Abort_IT+0x1f8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d019      	beq.n	8004b6c <HAL_DMA_Abort_IT+0xd4>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a55      	ldr	r2, [pc, #340]	@ (8004c94 <HAL_DMA_Abort_IT+0x1fc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d012      	beq.n	8004b68 <HAL_DMA_Abort_IT+0xd0>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a54      	ldr	r2, [pc, #336]	@ (8004c98 <HAL_DMA_Abort_IT+0x200>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00a      	beq.n	8004b62 <HAL_DMA_Abort_IT+0xca>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a52      	ldr	r2, [pc, #328]	@ (8004c9c <HAL_DMA_Abort_IT+0x204>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d102      	bne.n	8004b5c <HAL_DMA_Abort_IT+0xc4>
 8004b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b5a:	e01b      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b60:	e018      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b66:	e015      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	e013      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e011      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b74:	e00e      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b7a:	e00b      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b80:	e008      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b86:	e005      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b8c:	e002      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b8e:	2310      	movs	r3, #16
 8004b90:	e000      	b.n	8004b94 <HAL_DMA_Abort_IT+0xfc>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4a42      	ldr	r2, [pc, #264]	@ (8004ca0 <HAL_DMA_Abort_IT+0x208>)
 8004b96:	6053      	str	r3, [r2, #4]
 8004b98:	e057      	b.n	8004c4a <HAL_DMA_Abort_IT+0x1b2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a36      	ldr	r2, [pc, #216]	@ (8004c78 <HAL_DMA_Abort_IT+0x1e0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d04f      	beq.n	8004c44 <HAL_DMA_Abort_IT+0x1ac>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a34      	ldr	r2, [pc, #208]	@ (8004c7c <HAL_DMA_Abort_IT+0x1e4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d048      	beq.n	8004c40 <HAL_DMA_Abort_IT+0x1a8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a33      	ldr	r2, [pc, #204]	@ (8004c80 <HAL_DMA_Abort_IT+0x1e8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d040      	beq.n	8004c3a <HAL_DMA_Abort_IT+0x1a2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a31      	ldr	r2, [pc, #196]	@ (8004c84 <HAL_DMA_Abort_IT+0x1ec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d038      	beq.n	8004c34 <HAL_DMA_Abort_IT+0x19c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <HAL_DMA_Abort_IT+0x1f0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d030      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x196>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c8c <HAL_DMA_Abort_IT+0x1f4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d028      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x190>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a26      	ldr	r2, [pc, #152]	@ (8004c74 <HAL_DMA_Abort_IT+0x1dc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d020      	beq.n	8004c22 <HAL_DMA_Abort_IT+0x18a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c90 <HAL_DMA_Abort_IT+0x1f8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d019      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x186>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a29      	ldr	r2, [pc, #164]	@ (8004c94 <HAL_DMA_Abort_IT+0x1fc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d012      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x182>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	@ (8004c98 <HAL_DMA_Abort_IT+0x200>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00a      	beq.n	8004c14 <HAL_DMA_Abort_IT+0x17c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <HAL_DMA_Abort_IT+0x204>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d102      	bne.n	8004c0e <HAL_DMA_Abort_IT+0x176>
 8004c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0c:	e01b      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c12:	e018      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c18:	e015      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	e013      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e011      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c26:	e00e      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c2c:	e00b      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c32:	e008      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c38:	e005      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c3e:	e002      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c40:	2310      	movs	r3, #16
 8004c42:	e000      	b.n	8004c46 <HAL_DMA_Abort_IT+0x1ae>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4a17      	ldr	r2, [pc, #92]	@ (8004ca4 <HAL_DMA_Abort_IT+0x20c>)
 8004c48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
    } 
  }
  return status;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40020080 	.word	0x40020080
 8004c78:	40020008 	.word	0x40020008
 8004c7c:	4002001c 	.word	0x4002001c
 8004c80:	40020030 	.word	0x40020030
 8004c84:	40020044 	.word	0x40020044
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	4002006c 	.word	0x4002006c
 8004c90:	40020408 	.word	0x40020408
 8004c94:	4002041c 	.word	0x4002041c
 8004c98:	40020430 	.word	0x40020430
 8004c9c:	40020444 	.word	0x40020444
 8004ca0:	40020400 	.word	0x40020400
 8004ca4:	40020000 	.word	0x40020000

08004ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b08b      	sub	sp, #44	@ 0x2c
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cba:	e169      	b.n	8004f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	f040 8158 	bne.w	8004f8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a9a      	ldr	r2, [pc, #616]	@ (8004f48 <HAL_GPIO_Init+0x2a0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d05e      	beq.n	8004da2 <HAL_GPIO_Init+0xfa>
 8004ce4:	4a98      	ldr	r2, [pc, #608]	@ (8004f48 <HAL_GPIO_Init+0x2a0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d875      	bhi.n	8004dd6 <HAL_GPIO_Init+0x12e>
 8004cea:	4a98      	ldr	r2, [pc, #608]	@ (8004f4c <HAL_GPIO_Init+0x2a4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d058      	beq.n	8004da2 <HAL_GPIO_Init+0xfa>
 8004cf0:	4a96      	ldr	r2, [pc, #600]	@ (8004f4c <HAL_GPIO_Init+0x2a4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d86f      	bhi.n	8004dd6 <HAL_GPIO_Init+0x12e>
 8004cf6:	4a96      	ldr	r2, [pc, #600]	@ (8004f50 <HAL_GPIO_Init+0x2a8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d052      	beq.n	8004da2 <HAL_GPIO_Init+0xfa>
 8004cfc:	4a94      	ldr	r2, [pc, #592]	@ (8004f50 <HAL_GPIO_Init+0x2a8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d869      	bhi.n	8004dd6 <HAL_GPIO_Init+0x12e>
 8004d02:	4a94      	ldr	r2, [pc, #592]	@ (8004f54 <HAL_GPIO_Init+0x2ac>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d04c      	beq.n	8004da2 <HAL_GPIO_Init+0xfa>
 8004d08:	4a92      	ldr	r2, [pc, #584]	@ (8004f54 <HAL_GPIO_Init+0x2ac>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d863      	bhi.n	8004dd6 <HAL_GPIO_Init+0x12e>
 8004d0e:	4a92      	ldr	r2, [pc, #584]	@ (8004f58 <HAL_GPIO_Init+0x2b0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d046      	beq.n	8004da2 <HAL_GPIO_Init+0xfa>
 8004d14:	4a90      	ldr	r2, [pc, #576]	@ (8004f58 <HAL_GPIO_Init+0x2b0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d85d      	bhi.n	8004dd6 <HAL_GPIO_Init+0x12e>
 8004d1a:	2b12      	cmp	r3, #18
 8004d1c:	d82a      	bhi.n	8004d74 <HAL_GPIO_Init+0xcc>
 8004d1e:	2b12      	cmp	r3, #18
 8004d20:	d859      	bhi.n	8004dd6 <HAL_GPIO_Init+0x12e>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <HAL_GPIO_Init+0x80>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004da3 	.word	0x08004da3
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004d8f 	.word	0x08004d8f
 8004d34:	08004dd1 	.word	0x08004dd1
 8004d38:	08004dd7 	.word	0x08004dd7
 8004d3c:	08004dd7 	.word	0x08004dd7
 8004d40:	08004dd7 	.word	0x08004dd7
 8004d44:	08004dd7 	.word	0x08004dd7
 8004d48:	08004dd7 	.word	0x08004dd7
 8004d4c:	08004dd7 	.word	0x08004dd7
 8004d50:	08004dd7 	.word	0x08004dd7
 8004d54:	08004dd7 	.word	0x08004dd7
 8004d58:	08004dd7 	.word	0x08004dd7
 8004d5c:	08004dd7 	.word	0x08004dd7
 8004d60:	08004dd7 	.word	0x08004dd7
 8004d64:	08004dd7 	.word	0x08004dd7
 8004d68:	08004dd7 	.word	0x08004dd7
 8004d6c:	08004d85 	.word	0x08004d85
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	4a79      	ldr	r2, [pc, #484]	@ (8004f5c <HAL_GPIO_Init+0x2b4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d7a:	e02c      	b.n	8004dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	623b      	str	r3, [r7, #32]
          break;
 8004d82:	e029      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	623b      	str	r3, [r7, #32]
          break;
 8004d8c:	e024      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	3308      	adds	r3, #8
 8004d94:	623b      	str	r3, [r7, #32]
          break;
 8004d96:	e01f      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	623b      	str	r3, [r7, #32]
          break;
 8004da0:	e01a      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004daa:	2304      	movs	r3, #4
 8004dac:	623b      	str	r3, [r7, #32]
          break;
 8004dae:	e013      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004db8:	2308      	movs	r3, #8
 8004dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	611a      	str	r2, [r3, #16]
          break;
 8004dc2:	e009      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	615a      	str	r2, [r3, #20]
          break;
 8004dce:	e003      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	623b      	str	r3, [r7, #32]
          break;
 8004dd4:	e000      	b.n	8004dd8 <HAL_GPIO_Init+0x130>
          break;
 8004dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2bff      	cmp	r3, #255	@ 0xff
 8004ddc:	d801      	bhi.n	8004de2 <HAL_GPIO_Init+0x13a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	e001      	b.n	8004de6 <HAL_GPIO_Init+0x13e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2bff      	cmp	r3, #255	@ 0xff
 8004dec:	d802      	bhi.n	8004df4 <HAL_GPIO_Init+0x14c>
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	e002      	b.n	8004dfa <HAL_GPIO_Init+0x152>
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	3b08      	subs	r3, #8
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	210f      	movs	r1, #15
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	6a39      	ldr	r1, [r7, #32]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80b1 	beq.w	8004f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e28:	4b4d      	ldr	r3, [pc, #308]	@ (8004f60 <HAL_GPIO_Init+0x2b8>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f60 <HAL_GPIO_Init+0x2b8>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6193      	str	r3, [r2, #24]
 8004e34:	4b4a      	ldr	r3, [pc, #296]	@ (8004f60 <HAL_GPIO_Init+0x2b8>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e40:	4a48      	ldr	r2, [pc, #288]	@ (8004f64 <HAL_GPIO_Init+0x2bc>)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	089b      	lsrs	r3, r3, #2
 8004e46:	3302      	adds	r3, #2
 8004e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	220f      	movs	r2, #15
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4013      	ands	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a40      	ldr	r2, [pc, #256]	@ (8004f68 <HAL_GPIO_Init+0x2c0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_GPIO_Init+0x1ec>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f6c <HAL_GPIO_Init+0x2c4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00d      	beq.n	8004e90 <HAL_GPIO_Init+0x1e8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <HAL_GPIO_Init+0x2c8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <HAL_GPIO_Init+0x1e4>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f74 <HAL_GPIO_Init+0x2cc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_GPIO_Init+0x1e0>
 8004e84:	2303      	movs	r3, #3
 8004e86:	e006      	b.n	8004e96 <HAL_GPIO_Init+0x1ee>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e004      	b.n	8004e96 <HAL_GPIO_Init+0x1ee>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e002      	b.n	8004e96 <HAL_GPIO_Init+0x1ee>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_GPIO_Init+0x1ee>
 8004e94:	2300      	movs	r3, #0
 8004e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e98:	f002 0203 	and.w	r2, r2, #3
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	4093      	lsls	r3, r2
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ea6:	492f      	ldr	r1, [pc, #188]	@ (8004f64 <HAL_GPIO_Init+0x2bc>)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	089b      	lsrs	r3, r3, #2
 8004eac:	3302      	adds	r3, #2
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	492c      	ldr	r1, [pc, #176]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]
 8004ecc:	e006      	b.n	8004edc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ece:	4b2a      	ldr	r3, [pc, #168]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	4928      	ldr	r1, [pc, #160]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ee8:	4b23      	ldr	r3, [pc, #140]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4922      	ldr	r1, [pc, #136]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60cb      	str	r3, [r1, #12]
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ef6:	4b20      	ldr	r3, [pc, #128]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	491e      	ldr	r1, [pc, #120]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d006      	beq.n	8004f1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f10:	4b19      	ldr	r3, [pc, #100]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4918      	ldr	r1, [pc, #96]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]
 8004f1c:	e006      	b.n	8004f2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f1e:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	4914      	ldr	r1, [pc, #80]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d021      	beq.n	8004f7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	490e      	ldr	r1, [pc, #56]	@ (8004f78 <HAL_GPIO_Init+0x2d0>)
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]
 8004f44:	e021      	b.n	8004f8a <HAL_GPIO_Init+0x2e2>
 8004f46:	bf00      	nop
 8004f48:	10320000 	.word	0x10320000
 8004f4c:	10310000 	.word	0x10310000
 8004f50:	10220000 	.word	0x10220000
 8004f54:	10210000 	.word	0x10210000
 8004f58:	10120000 	.word	0x10120000
 8004f5c:	10110000 	.word	0x10110000
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010800 	.word	0x40010800
 8004f6c:	40010c00 	.word	0x40010c00
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40011400 	.word	0x40011400
 8004f78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_GPIO_Init+0x304>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	4909      	ldr	r1, [pc, #36]	@ (8004fac <HAL_GPIO_Init+0x304>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f47f ae8e 	bne.w	8004cbc <HAL_GPIO_Init+0x14>
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	372c      	adds	r7, #44	@ 0x2c
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	40010400 	.word	0x40010400

08004fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc0:	787b      	ldrb	r3, [r7, #1]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004fcc:	e003      	b.n	8004fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fce:	887b      	ldrh	r3, [r7, #2]
 8004fd0:	041a      	lsls	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	041a      	lsls	r2, r3, #16
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	43d9      	mvns	r1, r3
 8004ffe:	887b      	ldrh	r3, [r7, #2]
 8005000:	400b      	ands	r3, r1
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	611a      	str	r2, [r3, #16]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
	...

08005014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e304      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8087 	beq.w	8005142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005034:	4b92      	ldr	r3, [pc, #584]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b04      	cmp	r3, #4
 800503e:	d00c      	beq.n	800505a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005040:	4b8f      	ldr	r3, [pc, #572]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	2b08      	cmp	r3, #8
 800504a:	d112      	bne.n	8005072 <HAL_RCC_OscConfig+0x5e>
 800504c:	4b8c      	ldr	r3, [pc, #560]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005058:	d10b      	bne.n	8005072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505a:	4b89      	ldr	r3, [pc, #548]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d06c      	beq.n	8005140 <HAL_RCC_OscConfig+0x12c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d168      	bne.n	8005140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e2de      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507a:	d106      	bne.n	800508a <HAL_RCC_OscConfig+0x76>
 800507c:	4b80      	ldr	r3, [pc, #512]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7f      	ldr	r2, [pc, #508]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e02e      	b.n	80050e8 <HAL_RCC_OscConfig+0xd4>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x98>
 8005092:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7a      	ldr	r2, [pc, #488]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b78      	ldr	r3, [pc, #480]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a77      	ldr	r2, [pc, #476]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e01d      	b.n	80050e8 <HAL_RCC_OscConfig+0xd4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0xbc>
 80050b6:	4b72      	ldr	r3, [pc, #456]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a71      	ldr	r2, [pc, #452]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6e      	ldr	r2, [pc, #440]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0xd4>
 80050d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b68      	ldr	r3, [pc, #416]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a67      	ldr	r2, [pc, #412]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe f996 	bl	8003420 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe f992 	bl	8003420 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	@ 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e292      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0xe4>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fe f982 	bl	8003420 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005120:	f7fe f97e 	bl	8003420 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	@ 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e27e      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005132:	4b53      	ldr	r3, [pc, #332]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x10c>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d063      	beq.n	8005216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800514e:	4b4c      	ldr	r3, [pc, #304]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800515a:	4b49      	ldr	r3, [pc, #292]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b08      	cmp	r3, #8
 8005164:	d11c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x18c>
 8005166:	4b46      	ldr	r3, [pc, #280]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d116      	bne.n	80051a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	4b43      	ldr	r3, [pc, #268]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_RCC_OscConfig+0x176>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e252      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	4b3d      	ldr	r3, [pc, #244]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4939      	ldr	r1, [pc, #228]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	e03a      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a8:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <HAL_RCC_OscConfig+0x270>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fe f937 	bl	8003420 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fe f933 	bl	8003420 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e233      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4927      	ldr	r1, [pc, #156]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b26      	ldr	r3, [pc, #152]	@ (8005284 <HAL_RCC_OscConfig+0x270>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fe f916 	bl	8003420 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fe f912 	bl	8003420 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e212      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520a:	4b1d      	ldr	r3, [pc, #116]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03a      	beq.n	8005298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d019      	beq.n	800525e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <HAL_RCC_OscConfig+0x274>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005230:	f7fe f8f6 	bl	8003420 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005238:	f7fe f8f2 	bl	8003420 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e1f2      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524a:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <HAL_RCC_OscConfig+0x26c>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005256:	2001      	movs	r0, #1
 8005258:	f000 fbca 	bl	80059f0 <RCC_Delay>
 800525c:	e01c      	b.n	8005298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <HAL_RCC_OscConfig+0x274>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005264:	f7fe f8dc 	bl	8003420 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526a:	e00f      	b.n	800528c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526c:	f7fe f8d8 	bl	8003420 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d908      	bls.n	800528c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e1d8      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	42420000 	.word	0x42420000
 8005288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	4b9b      	ldr	r3, [pc, #620]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e9      	bne.n	800526c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a6 	beq.w	80053f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052aa:	4b94      	ldr	r3, [pc, #592]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10d      	bne.n	80052d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b6:	4b91      	ldr	r3, [pc, #580]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4a90      	ldr	r2, [pc, #576]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	61d3      	str	r3, [r2, #28]
 80052c2:	4b8e      	ldr	r3, [pc, #568]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b8b      	ldr	r3, [pc, #556]	@ (8005500 <HAL_RCC_OscConfig+0x4ec>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b88      	ldr	r3, [pc, #544]	@ (8005500 <HAL_RCC_OscConfig+0x4ec>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a87      	ldr	r2, [pc, #540]	@ (8005500 <HAL_RCC_OscConfig+0x4ec>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fe f899 	bl	8003420 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fe f895 	bl	8003420 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	@ 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e195      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b7e      	ldr	r3, [pc, #504]	@ (8005500 <HAL_RCC_OscConfig+0x4ec>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x312>
 8005318:	4b78      	ldr	r3, [pc, #480]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4a77      	ldr	r2, [pc, #476]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6213      	str	r3, [r2, #32]
 8005324:	e02d      	b.n	8005382 <HAL_RCC_OscConfig+0x36e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x334>
 800532e:	4b73      	ldr	r3, [pc, #460]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a72      	ldr	r2, [pc, #456]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	6213      	str	r3, [r2, #32]
 800533a:	4b70      	ldr	r3, [pc, #448]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a6f      	ldr	r2, [pc, #444]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	6213      	str	r3, [r2, #32]
 8005346:	e01c      	b.n	8005382 <HAL_RCC_OscConfig+0x36e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b05      	cmp	r3, #5
 800534e:	d10c      	bne.n	800536a <HAL_RCC_OscConfig+0x356>
 8005350:	4b6a      	ldr	r3, [pc, #424]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4a69      	ldr	r2, [pc, #420]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	6213      	str	r3, [r2, #32]
 800535c:	4b67      	ldr	r3, [pc, #412]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4a66      	ldr	r2, [pc, #408]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6213      	str	r3, [r2, #32]
 8005368:	e00b      	b.n	8005382 <HAL_RCC_OscConfig+0x36e>
 800536a:	4b64      	ldr	r3, [pc, #400]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a63      	ldr	r2, [pc, #396]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4b61      	ldr	r3, [pc, #388]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4a60      	ldr	r2, [pc, #384]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d015      	beq.n	80053b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538a:	f7fe f849 	bl	8003420 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005390:	e00a      	b.n	80053a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005392:	f7fe f845 	bl	8003420 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e143      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	4b54      	ldr	r3, [pc, #336]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ee      	beq.n	8005392 <HAL_RCC_OscConfig+0x37e>
 80053b4:	e014      	b.n	80053e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b6:	f7fe f833 	bl	8003420 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053be:	f7fe f82f 	bl	8003420 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e12d      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d4:	4b49      	ldr	r3, [pc, #292]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ee      	bne.n	80053be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4b45      	ldr	r3, [pc, #276]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4a44      	ldr	r2, [pc, #272]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 808c 	beq.w	8005514 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80053fc:	4b3f      	ldr	r3, [pc, #252]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005408:	d10e      	bne.n	8005428 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800540a:	4b3c      	ldr	r3, [pc, #240]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005412:	2b08      	cmp	r3, #8
 8005414:	d108      	bne.n	8005428 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005416:	4b39      	ldr	r3, [pc, #228]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005422:	d101      	bne.n	8005428 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e103      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	2b02      	cmp	r3, #2
 800542e:	d14e      	bne.n	80054ce <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005430:	4b32      	ldr	r3, [pc, #200]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800543c:	4b2f      	ldr	r3, [pc, #188]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0ef      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005450:	4b2c      	ldr	r3, [pc, #176]	@ (8005504 <HAL_RCC_OscConfig+0x4f0>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fd ffe3 	bl	8003420 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800545e:	f7fd ffdf 	bl	8003420 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b64      	cmp	r3, #100	@ 0x64
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0df      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005470:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800547c:	4b1f      	ldr	r3, [pc, #124]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	491c      	ldr	r1, [pc, #112]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800548a:	4313      	orrs	r3, r2
 800548c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800548e:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549a:	4918      	ldr	r1, [pc, #96]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80054a0:	4b18      	ldr	r3, [pc, #96]	@ (8005504 <HAL_RCC_OscConfig+0x4f0>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a6:	f7fd ffbb 	bl	8003420 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054ae:	f7fd ffb7 	bl	8003420 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b64      	cmp	r3, #100	@ 0x64
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e0b7      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054c0:	4b0e      	ldr	r3, [pc, #56]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x49a>
 80054cc:	e022      	b.n	8005514 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80054ce:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <HAL_RCC_OscConfig+0x4e8>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80054da:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <HAL_RCC_OscConfig+0x4f0>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fd ff9e 	bl	8003420 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80054e6:	e00f      	b.n	8005508 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054e8:	f7fd ff9a 	bl	8003420 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	@ 0x64
 80054f4:	d908      	bls.n	8005508 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e09a      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
 8005504:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005508:	4b4b      	ldr	r3, [pc, #300]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e9      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8088 	beq.w	800562e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800551e:	4b46      	ldr	r3, [pc, #280]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b08      	cmp	r3, #8
 8005528:	d068      	beq.n	80055fc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d14d      	bne.n	80055ce <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b42      	ldr	r3, [pc, #264]	@ (800563c <HAL_RCC_OscConfig+0x628>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fd ff72 	bl	8003420 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005540:	f7fd ff6e 	bl	8003420 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e06e      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005552:	4b39      	ldr	r3, [pc, #228]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005566:	d10f      	bne.n	8005588 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005568:	4b33      	ldr	r3, [pc, #204]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 800556a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4931      	ldr	r1, [pc, #196]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 8005572:	4313      	orrs	r3, r2
 8005574:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005576:	4b30      	ldr	r3, [pc, #192]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	f023 020f 	bic.w	r2, r3, #15
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	492d      	ldr	r1, [pc, #180]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 8005584:	4313      	orrs	r3, r2
 8005586:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005588:	4b2b      	ldr	r3, [pc, #172]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	430b      	orrs	r3, r1
 800559a:	4927      	ldr	r1, [pc, #156]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a0:	4b26      	ldr	r3, [pc, #152]	@ (800563c <HAL_RCC_OscConfig+0x628>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a6:	f7fd ff3b 	bl	8003420 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ae:	f7fd ff37 	bl	8003420 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e037      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x59a>
 80055cc:	e02f      	b.n	800562e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b1b      	ldr	r3, [pc, #108]	@ (800563c <HAL_RCC_OscConfig+0x628>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7fd ff24 	bl	8003420 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055dc:	f7fd ff20 	bl	8003420 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e020      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x5c8>
 80055fa:	e018      	b.n	800562e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e013      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_OscConfig+0x624>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	429a      	cmp	r2, r3
 800561a:	d106      	bne.n	800562a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d001      	beq.n	800562e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	42420060 	.word	0x42420060

08005640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0d0      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005654:	4b6a      	ldr	r3, [pc, #424]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d910      	bls.n	8005684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b67      	ldr	r3, [pc, #412]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4965      	ldr	r1, [pc, #404]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b63      	ldr	r3, [pc, #396]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0b8      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d020      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800569c:	4b59      	ldr	r3, [pc, #356]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a58      	ldr	r2, [pc, #352]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b4:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a52      	ldr	r2, [pc, #328]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80056ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80056be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c0:	4b50      	ldr	r3, [pc, #320]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	494d      	ldr	r1, [pc, #308]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d040      	beq.n	8005760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e6:	4b47      	ldr	r3, [pc, #284]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d115      	bne.n	800571e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e07f      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fe:	4b41      	ldr	r3, [pc, #260]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e073      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570e:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06b      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800571e:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4936      	ldr	r1, [pc, #216]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005730:	f7fd fe76 	bl	8003420 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	e00a      	b.n	800574e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005738:	f7fd fe72 	bl	8003420 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e053      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	4b2d      	ldr	r3, [pc, #180]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f003 020c 	and.w	r2, r3, #12
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	429a      	cmp	r2, r3
 800575e:	d1eb      	bne.n	8005738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005760:	4b27      	ldr	r3, [pc, #156]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d210      	bcs.n	8005790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b24      	ldr	r3, [pc, #144]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 0207 	bic.w	r2, r3, #7
 8005776:	4922      	ldr	r1, [pc, #136]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b20      	ldr	r3, [pc, #128]	@ (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e032      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800579c:	4b19      	ldr	r3, [pc, #100]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4916      	ldr	r1, [pc, #88]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	490e      	ldr	r1, [pc, #56]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ce:	f000 f821 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80057d2:	4602      	mov	r2, r0
 80057d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	490a      	ldr	r1, [pc, #40]	@ (8005808 <HAL_RCC_ClockConfig+0x1c8>)
 80057e0:	5ccb      	ldrb	r3, [r1, r3]
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	4a09      	ldr	r2, [pc, #36]	@ (800580c <HAL_RCC_ClockConfig+0x1cc>)
 80057e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057ea:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <HAL_RCC_ClockConfig+0x1d0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd fdd4 	bl	800339c <HAL_InitTick>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40022000 	.word	0x40022000
 8005804:	40021000 	.word	0x40021000
 8005808:	080095d4 	.word	0x080095d4
 800580c:	2000006c 	.word	0x2000006c
 8005810:	20000070 	.word	0x20000070

08005814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005818:	b08e      	sub	sp, #56	@ 0x38
 800581a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005820:	2300      	movs	r3, #0
 8005822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005824:	2300      	movs	r3, #0
 8005826:	637b      	str	r3, [r7, #52]	@ 0x34
 8005828:	2300      	movs	r3, #0
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	623b      	str	r3, [r7, #32]
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005838:	4b4e      	ldr	r3, [pc, #312]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b04      	cmp	r3, #4
 8005846:	d002      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0x3a>
 8005848:	2b08      	cmp	r3, #8
 800584a:	d003      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x40>
 800584c:	e089      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800584e:	4b4a      	ldr	r3, [pc, #296]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x164>)
 8005850:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005852:	e089      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	0c9b      	lsrs	r3, r3, #18
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	4b47      	ldr	r3, [pc, #284]	@ (800597c <HAL_RCC_GetSysClockFreq+0x168>)
 800585e:	5c9b      	ldrb	r3, [r3, r2]
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d072      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800586c:	4b41      	ldr	r3, [pc, #260]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	f003 020f 	and.w	r2, r3, #15
 8005874:	4b42      	ldr	r3, [pc, #264]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005876:	5c9b      	ldrb	r3, [r3, r2]
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800587a:	4b3e      	ldr	r3, [pc, #248]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d053      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005886:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	3301      	adds	r3, #1
 8005892:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005894:	4b37      	ldr	r3, [pc, #220]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 8005896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	3302      	adds	r3, #2
 80058a0:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2200      	movs	r2, #0
 80058a6:	469a      	mov	sl, r3
 80058a8:	4693      	mov	fp, r2
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2200      	movs	r2, #0
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	617a      	str	r2, [r7, #20]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	fb03 f20b 	mul.w	r2, r3, fp
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fb0a f303 	mul.w	r3, sl, r3
 80058be:	4413      	add	r3, r2
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	fbaa 0102 	umull	r0, r1, sl, r2
 80058c6:	440b      	add	r3, r1
 80058c8:	4619      	mov	r1, r3
 80058ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x164>)
 80058cc:	fb03 f201 	mul.w	r2, r3, r1
 80058d0:	2300      	movs	r3, #0
 80058d2:	fb00 f303 	mul.w	r3, r0, r3
 80058d6:	4413      	add	r3, r2
 80058d8:	4a27      	ldr	r2, [pc, #156]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x164>)
 80058da:	fba0 4502 	umull	r4, r5, r0, r2
 80058de:	442b      	add	r3, r5
 80058e0:	461d      	mov	r5, r3
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2200      	movs	r2, #0
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	60fa      	str	r2, [r7, #12]
 80058ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ec:	2200      	movs	r2, #0
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058fc:	4652      	mov	r2, sl
 80058fe:	fb02 f203 	mul.w	r2, r2, r3
 8005902:	465b      	mov	r3, fp
 8005904:	4684      	mov	ip, r0
 8005906:	fb0c f303 	mul.w	r3, ip, r3
 800590a:	4413      	add	r3, r2
 800590c:	4602      	mov	r2, r0
 800590e:	4651      	mov	r1, sl
 8005910:	fba2 8901 	umull	r8, r9, r2, r1
 8005914:	444b      	add	r3, r9
 8005916:	4699      	mov	r9, r3
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fb fbc4 	bl	80010ac <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4613      	mov	r3, r2
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
 800592c:	e007      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	4a11      	ldr	r2, [pc, #68]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x164>)
 8005932:	fb03 f202 	mul.w	r2, r3, r2
 8005936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800593e:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <HAL_RCC_GetSysClockFreq+0x168>)
 8005940:	7b5b      	ldrb	r3, [r3, #13]
 8005942:	461a      	mov	r2, r3
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	4293      	cmp	r3, r2
 8005948:	d108      	bne.n	800595c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005950:	e004      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	4a0b      	ldr	r2, [pc, #44]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x170>)
 8005956:	fb02 f303 	mul.w	r3, r2, r3
 800595a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005960:	e002      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005962:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x174>)
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800596a:	4618      	mov	r0, r3
 800596c:	3738      	adds	r7, #56	@ 0x38
 800596e:	46bd      	mov	sp, r7
 8005970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005974:	40021000 	.word	0x40021000
 8005978:	017d7840 	.word	0x017d7840
 800597c:	080095ec 	.word	0x080095ec
 8005980:	080095fc 	.word	0x080095fc
 8005984:	003d0900 	.word	0x003d0900
 8005988:	007a1200 	.word	0x007a1200

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005990:	4b02      	ldr	r3, [pc, #8]	@ (800599c <HAL_RCC_GetHCLKFreq+0x10>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	2000006c 	.word	0x2000006c

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a4:	f7ff fff2 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	@ (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	080095e4 	.word	0x080095e4

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff ffde 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	@ (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	080095e4 	.word	0x080095e4

080059f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <RCC_Delay+0x34>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <RCC_Delay+0x38>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	0a5b      	lsrs	r3, r3, #9
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a0c:	bf00      	nop
  }
  while (Delay --);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	60fa      	str	r2, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f9      	bne.n	8005a0c <RCC_Delay+0x1c>
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	2000006c 	.word	0x2000006c
 8005a28:	10624dd3 	.word	0x10624dd3

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d07d      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a50:	4b8b      	ldr	r3, [pc, #556]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5c:	4b88      	ldr	r3, [pc, #544]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	4a87      	ldr	r2, [pc, #540]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	61d3      	str	r3, [r2, #28]
 8005a68:	4b85      	ldr	r3, [pc, #532]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a74:	2301      	movs	r3, #1
 8005a76:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a78:	4b82      	ldr	r3, [pc, #520]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d118      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a84:	4b7f      	ldr	r3, [pc, #508]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7e      	ldr	r2, [pc, #504]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a90:	f7fd fcc6 	bl	8003420 <HAL_GetTick>
 8005a94:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	e008      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a98:	f7fd fcc2 	bl	8003420 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	@ 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e0e5      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aaa:	4b76      	ldr	r3, [pc, #472]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ab6:	4b72      	ldr	r3, [pc, #456]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005abe:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d02e      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d027      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005adc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ade:	4b6a      	ldr	r3, [pc, #424]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae4:	4b68      	ldr	r3, [pc, #416]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005aea:	4a65      	ldr	r2, [pc, #404]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d014      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7fd fc91 	bl	8003420 <HAL_GetTick>
 8005afe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	e00a      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b02:	f7fd fc8d 	bl	8003420 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0ae      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b18:	4b59      	ldr	r3, [pc, #356]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0ee      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b24:	4b56      	ldr	r3, [pc, #344]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4953      	ldr	r1, [pc, #332]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b36:	7efb      	ldrb	r3, [r7, #27]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3c:	4b50      	ldr	r3, [pc, #320]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4a4f      	ldr	r2, [pc, #316]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b54:	4b4a      	ldr	r3, [pc, #296]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4947      	ldr	r1, [pc, #284]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005b72:	4b43      	ldr	r3, [pc, #268]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	4940      	ldr	r1, [pc, #256]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005b90:	4b3b      	ldr	r3, [pc, #236]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	4938      	ldr	r1, [pc, #224]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005ba2:	4b37      	ldr	r3, [pc, #220]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d105      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005bae:	4b34      	ldr	r3, [pc, #208]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d148      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d138      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005bdc:	4b28      	ldr	r3, [pc, #160]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e042      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005bf0:	4b23      	ldr	r3, [pc, #140]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	4920      	ldr	r1, [pc, #128]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005c02:	4b1f      	ldr	r3, [pc, #124]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	491c      	ldr	r1, [pc, #112]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005c14:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1a:	f7fd fc01 	bl	8003420 <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c22:	f7fd fbfd 	bl	8003420 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b64      	cmp	r3, #100	@ 0x64
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e020      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c34:	4b12      	ldr	r3, [pc, #72]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005c40:	e009      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005c42:	4b0f      	ldr	r3, [pc, #60]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d001      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e00f      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c62:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4904      	ldr	r1, [pc, #16]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40007000 	.word	0x40007000
 8005c88:	42420440 	.word	0x42420440
 8005c8c:	42420070 	.word	0x42420070

08005c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	2b0f      	cmp	r3, #15
 8005cbe:	f200 811d 	bhi.w	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005e7d 	.word	0x08005e7d
 8005ccc:	08005ee1 	.word	0x08005ee1
 8005cd0:	08005efd 	.word	0x08005efd
 8005cd4:	08005ddb 	.word	0x08005ddb
 8005cd8:	08005efd 	.word	0x08005efd
 8005cdc:	08005efd 	.word	0x08005efd
 8005ce0:	08005efd 	.word	0x08005efd
 8005ce4:	08005e2d 	.word	0x08005e2d
 8005ce8:	08005efd 	.word	0x08005efd
 8005cec:	08005efd 	.word	0x08005efd
 8005cf0:	08005efd 	.word	0x08005efd
 8005cf4:	08005efd 	.word	0x08005efd
 8005cf8:	08005efd 	.word	0x08005efd
 8005cfc:	08005efd 	.word	0x08005efd
 8005d00:	08005efd 	.word	0x08005efd
 8005d04:	08005d09 	.word	0x08005d09
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005d08:	4b83      	ldr	r3, [pc, #524]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005d0e:	4b82      	ldr	r3, [pc, #520]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80f2 	beq.w	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	0c9b      	lsrs	r3, r3, #18
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	4a7d      	ldr	r2, [pc, #500]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005d26:	5cd3      	ldrb	r3, [r2, r3]
 8005d28:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d03b      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005d34:	4b78      	ldr	r3, [pc, #480]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	4a78      	ldr	r2, [pc, #480]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d3e:	5cd3      	ldrb	r3, [r2, r3]
 8005d40:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005d42:	4b75      	ldr	r3, [pc, #468]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01c      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005d4e:	4b72      	ldr	r3, [pc, #456]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005d5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	3302      	adds	r3, #2
 8005d68:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	fb03 f202 	mul.w	r2, r3, r2
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d86:	e007      	b.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005d88:	4a66      	ldr	r2, [pc, #408]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005d98:	4b60      	ldr	r3, [pc, #384]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005d9a:	7b5b      	ldrb	r3, [r3, #13]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4a5e      	ldr	r2, [pc, #376]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8005db6:	4b58      	ldr	r3, [pc, #352]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc2:	d102      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005dc8:	e09a      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4a57      	ldr	r2, [pc, #348]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	623b      	str	r3, [r7, #32]
      break;
 8005dd8:	e092      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8005dda:	4b4f      	ldr	r3, [pc, #316]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005de6:	f7ff fd15 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8005dea:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005dec:	e08a      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005dee:	4b4a      	ldr	r3, [pc, #296]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8084 	beq.w	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005dfc:	4b46      	ldr	r3, [pc, #280]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005e0a:	4b43      	ldr	r3, [pc, #268]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	0b1b      	lsrs	r3, r3, #12
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	3302      	adds	r3, #2
 8005e16:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005e18:	4a42      	ldr	r2, [pc, #264]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	623b      	str	r3, [r7, #32]
      break;
 8005e2a:	e06b      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8005e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005e38:	f7ff fcec 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8005e3c:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005e3e:	e063      	b.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005e40:	4b35      	ldr	r3, [pc, #212]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d05d      	beq.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005e4c:	4b32      	ldr	r3, [pc, #200]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	0b1b      	lsrs	r3, r3, #12
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	3302      	adds	r3, #2
 8005e66:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005e68:	4a2e      	ldr	r2, [pc, #184]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	623b      	str	r3, [r7, #32]
      break;
 8005e7a:	e045      	b.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005e7c:	4b26      	ldr	r3, [pc, #152]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8c:	d108      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8005e98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9c:	623b      	str	r3, [r7, #32]
 8005e9e:	e01e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eaa:	d109      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005eac:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8005eb8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	e00e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eca:	d11f      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005ecc:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d019      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 8005ed8:	4b15      	ldr	r3, [pc, #84]	@ (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005eda:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005edc:	e016      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005ede:	e015      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ee0:	f7ff fd72 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	0b9b      	lsrs	r3, r3, #14
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	623b      	str	r3, [r7, #32]
      break;
 8005efa:	e008      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 8005efc:	bf00      	nop
 8005efe:	e006      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005f00:	bf00      	nop
 8005f02:	e004      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005f04:	bf00      	nop
 8005f06:	e002      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005f08:	bf00      	nop
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005f0c:	bf00      	nop
    }
  }
  return (frequency);
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3728      	adds	r7, #40	@ 0x28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	0800960c 	.word	0x0800960c
 8005f20:	0800961c 	.word	0x0800961c
 8005f24:	017d7840 	.word	0x017d7840
 8005f28:	003d0900 	.word	0x003d0900
 8005f2c:	aaaaaaab 	.word	0xaaaaaaab
 8005f30:	0002faf0 	.word	0x0002faf0

08005f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e076      	b.n	8006034 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f56:	d009      	beq.n	8005f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
 8005f5e:	e005      	b.n	8005f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc fef6 	bl	8002d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff0:	ea42 0103 	orr.w	r1, r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	0c1a      	lsrs	r2, r3, #16
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f002 0204 	and.w	r2, r2, #4
 8006012:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006022:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604c:	f7fd f9e8 	bl	8003420 <HAL_GetTick>
 8006050:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d001      	beq.n	8006066 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
 8006064:	e12a      	b.n	80062bc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_SPI_Transmit+0x36>
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e122      	b.n	80062bc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_SPI_Transmit+0x48>
 8006080:	2302      	movs	r3, #2
 8006082:	e11b      	b.n	80062bc <HAL_SPI_Transmit+0x280>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2203      	movs	r2, #3
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d2:	d10f      	bne.n	80060f4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d007      	beq.n	8006112 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800611a:	d152      	bne.n	80061c2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0xee>
 8006124:	8b7b      	ldrh	r3, [r7, #26]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d145      	bne.n	80061b6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613a:	1c9a      	adds	r2, r3, #2
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800614e:	e032      	b.n	80061b6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d112      	bne.n	8006184 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006162:	881a      	ldrh	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616e:	1c9a      	adds	r2, r3, #2
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006182:	e018      	b.n	80061b6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006184:	f7fd f94c 	bl	8003420 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d803      	bhi.n	800619c <HAL_SPI_Transmit+0x160>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d102      	bne.n	80061a2 <HAL_SPI_Transmit+0x166>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e082      	b.n	80062bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1c7      	bne.n	8006150 <HAL_SPI_Transmit+0x114>
 80061c0:	e053      	b.n	800626a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_SPI_Transmit+0x194>
 80061ca:	8b7b      	ldrh	r3, [r7, #26]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d147      	bne.n	8006260 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061f6:	e033      	b.n	8006260 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d113      	bne.n	800622e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800622c:	e018      	b.n	8006260 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800622e:	f7fd f8f7 	bl	8003420 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d803      	bhi.n	8006246 <HAL_SPI_Transmit+0x20a>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d102      	bne.n	800624c <HAL_SPI_Transmit+0x210>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e02d      	b.n	80062bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1c6      	bne.n	80061f8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fcc0 	bl	8006bf4 <SPI_EndRxTxTransaction>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80062ba:	2300      	movs	r3, #0
  }
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e104      	b.n	80064ee <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ec:	d112      	bne.n	8006314 <HAL_SPI_Receive+0x50>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2204      	movs	r2, #4
 80062fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f8f3 	bl	80064f6 <HAL_SPI_TransmitReceive>
 8006310:	4603      	mov	r3, r0
 8006312:	e0ec      	b.n	80064ee <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006314:	f7fd f884 	bl	8003420 <HAL_GetTick>
 8006318:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_SPI_Receive+0x62>
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0e1      	b.n	80064ee <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_SPI_Receive+0x74>
 8006334:	2302      	movs	r3, #2
 8006336:	e0da      	b.n	80064ee <HAL_SPI_Receive+0x22a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2204      	movs	r2, #4
 8006344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006386:	d10f      	bne.n	80063a8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d007      	beq.n	80063c6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d170      	bne.n	80064b0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063ce:	e035      	b.n	800643c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d115      	bne.n	800640a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f103 020c 	add.w	r2, r3, #12
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	7812      	ldrb	r2, [r2, #0]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006408:	e018      	b.n	800643c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800640a:	f7fd f809 	bl	8003420 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_Receive+0x15e>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d102      	bne.n	8006428 <HAL_SPI_Receive+0x164>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e058      	b.n	80064ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1c4      	bne.n	80063d0 <HAL_SPI_Receive+0x10c>
 8006446:	e038      	b.n	80064ba <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b01      	cmp	r3, #1
 8006454:	d113      	bne.n	800647e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	b292      	uxth	r2, r2
 8006462:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	1c9a      	adds	r2, r3, #2
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800647c:	e018      	b.n	80064b0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647e:	f7fc ffcf 	bl	8003420 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d803      	bhi.n	8006496 <HAL_SPI_Receive+0x1d2>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d102      	bne.n	800649c <HAL_SPI_Receive+0x1d8>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01e      	b.n	80064ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1c6      	bne.n	8006448 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fb46 	bl	8006b50 <SPI_EndRxTransaction>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b08a      	sub	sp, #40	@ 0x28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006504:	2301      	movs	r3, #1
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006508:	f7fc ff8a 	bl	8003420 <HAL_GetTick>
 800650c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006514:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006520:	7ffb      	ldrb	r3, [r7, #31]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d00c      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x4a>
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800652c:	d106      	bne.n	800653c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <HAL_SPI_TransmitReceive+0x46>
 8006536:	7ffb      	ldrb	r3, [r7, #31]
 8006538:	2b04      	cmp	r3, #4
 800653a:	d001      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
 800653e:	e17f      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x5c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x5c>
 800654c:	887b      	ldrh	r3, [r7, #2]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e174      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x6e>
 8006560:	2302      	movs	r3, #2
 8006562:	e16d      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b04      	cmp	r3, #4
 8006576:	d003      	beq.n	8006580 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2205      	movs	r2, #5
 800657c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	887a      	ldrh	r2, [r7, #2]
 8006596:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	887a      	ldrh	r2, [r7, #2]
 80065a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	887a      	ldrh	r2, [r7, #2]
 80065a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	d007      	beq.n	80065d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065dc:	d17e      	bne.n	80066dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_TransmitReceive+0xf6>
 80065e6:	8afb      	ldrh	r3, [r7, #22]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d16c      	bne.n	80066c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f0:	881a      	ldrh	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006610:	e059      	b.n	80066c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d11b      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x162>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d016      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x162>
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	2b01      	cmp	r3, #1
 800662e:	d113      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d119      	bne.n	800669a <HAL_SPI_TransmitReceive+0x1a4>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d014      	beq.n	800669a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	b292      	uxth	r2, r2
 800667c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006696:	2301      	movs	r3, #1
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800669a:	f7fc fec1 	bl	8003420 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d80d      	bhi.n	80066c6 <HAL_SPI_TransmitReceive+0x1d0>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d009      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e0bc      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1a0      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x11c>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d19b      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x11c>
 80066da:	e082      	b.n	80067e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_SPI_TransmitReceive+0x1f4>
 80066e4:	8afb      	ldrh	r3, [r7, #22]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d171      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	7812      	ldrb	r2, [r2, #0]
 80066f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006710:	e05d      	b.n	80067ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d11c      	bne.n	800675a <HAL_SPI_TransmitReceive+0x264>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d017      	beq.n	800675a <HAL_SPI_TransmitReceive+0x264>
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	2b01      	cmp	r3, #1
 800672e:	d114      	bne.n	800675a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d119      	bne.n	800679c <HAL_SPI_TransmitReceive+0x2a6>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d014      	beq.n	800679c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006798:	2301      	movs	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800679c:	f7fc fe40 	bl	8003420 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d803      	bhi.n	80067b4 <HAL_SPI_TransmitReceive+0x2be>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d102      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x2c4>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e038      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d19c      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x21c>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d197      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fa04 	bl	8006bf4 <SPI_EndRxTxTransaction>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e01d      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800683e:	2300      	movs	r3, #0
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3728      	adds	r7, #40	@ 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10e      	bne.n	8006888 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
    return;
 8006886:	e0b7      	b.n	80069f8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <HAL_SPI_IRQHandler+0x5e>
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
    return;
 80068a4:	e0a8      	b.n	80069f8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d105      	bne.n	80068bc <HAL_SPI_IRQHandler+0x74>
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 809e 	beq.w	80069f8 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 8098 	beq.w	80069f8 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d023      	beq.n	800691a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d011      	beq.n	8006902 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e2:	f043 0204 	orr.w	r2, r3, #4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	e00b      	b.n	800691a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	693b      	ldr	r3, [r7, #16]
        return;
 8006918:	e06e      	b.n	80069f8 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d014      	beq.n	800694e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	f043 0201 	orr.w	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04f      	beq.n	80069f6 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006964:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <HAL_SPI_IRQHandler+0x13a>
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d034      	beq.n	80069ec <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0203 	bic.w	r2, r2, #3
 8006990:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d011      	beq.n	80069be <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699e:	4a18      	ldr	r2, [pc, #96]	@ (8006a00 <HAL_SPI_IRQHandler+0x1b8>)
 80069a0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe f876 	bl	8004a98 <HAL_DMA_Abort_IT>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006a00 <HAL_SPI_IRQHandler+0x1b8>)
 80069cc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe f860 	bl	8004a98 <HAL_DMA_Abort_IT>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80069ea:	e003      	b.n	80069f4 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f809 	bl	8006a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069f2:	e000      	b.n	80069f6 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80069f4:	bf00      	nop
    return;
 80069f6:	bf00      	nop
  }
}
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	08006a17 	.word	0x08006a17

08006a04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ffe7 	bl	8006a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a50:	f7fc fce6 	bl	8003420 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a60:	f7fc fcde 	bl	8003420 <HAL_GetTick>
 8006a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a66:	4b39      	ldr	r3, [pc, #228]	@ (8006b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	015b      	lsls	r3, r3, #5
 8006a6c:	0d1b      	lsrs	r3, r3, #20
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a76:	e054      	b.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d050      	beq.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a80:	f7fc fcce 	bl	8003420 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d902      	bls.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d13d      	bne.n	8006b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aae:	d111      	bne.n	8006ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab8:	d004      	beq.n	8006ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac2:	d107      	bne.n	8006ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006adc:	d10f      	bne.n	8006afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e017      	b.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	2300      	movne	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d19b      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2000006c 	.word	0x2000006c

08006b50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b64:	d111      	bne.n	8006b8a <SPI_EndRxTransaction+0x3a>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b6e:	d004      	beq.n	8006b7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b78:	d107      	bne.n	8006b8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b92:	d117      	bne.n	8006bc4 <SPI_EndRxTransaction+0x74>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9c:	d112      	bne.n	8006bc4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff ff49 	bl	8006a40 <SPI_WaitFlagStateUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01a      	beq.n	8006bea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e013      	b.n	8006bec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff ff36 	bl	8006a40 <SPI_WaitFlagStateUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e000      	b.n	8006bec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2201      	movs	r2, #1
 8006c08:	2102      	movs	r1, #2
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff ff18 	bl	8006a40 <SPI_WaitFlagStateUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e013      	b.n	8006c4e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2180      	movs	r1, #128	@ 0x80
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ff05 	bl	8006a40 <SPI_WaitFlagStateUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e000      	b.n	8006c4e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e041      	b.n	8006cec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7fc fa57 	bl	8003130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f000 f94b 	bl	8006f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d020      	beq.n	8006d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01b      	beq.n	8006d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0202 	mvn.w	r2, #2
 8006d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8da 	bl	8006ef8 <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f8cd 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8dc 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d020      	beq.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01b      	beq.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0204 	mvn.w	r2, #4
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8b4 	bl	8006ef8 <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8a7 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f8b6 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d020      	beq.n	8006df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01b      	beq.n	8006df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0208 	mvn.w	r2, #8
 8006dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f88e 	bl	8006ef8 <HAL_TIM_IC_CaptureCallback>
 8006ddc:	e005      	b.n	8006dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f881 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f890 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 0310 	and.w	r3, r3, #16
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d020      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0210 	mvn.w	r2, #16
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2208      	movs	r2, #8
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f868 	bl	8006ef8 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f85b 	bl	8006ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f86a 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00c      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0201 	mvn.w	r2, #1
 8006e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f83a 	bl	8006ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f93d 	bl	80070fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f83a 	bl	8006f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00c      	beq.n	8006ecc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0220 	mvn.w	r2, #32
 8006ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f910 	bl	80070ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
	...

08006f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a33      	ldr	r2, [pc, #204]	@ (8007010 <TIM_Base_SetConfig+0xe0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00f      	beq.n	8006f68 <TIM_Base_SetConfig+0x38>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4e:	d00b      	beq.n	8006f68 <TIM_Base_SetConfig+0x38>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a30      	ldr	r2, [pc, #192]	@ (8007014 <TIM_Base_SetConfig+0xe4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <TIM_Base_SetConfig+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8007018 <TIM_Base_SetConfig+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_Base_SetConfig+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a2e      	ldr	r2, [pc, #184]	@ (800701c <TIM_Base_SetConfig+0xec>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d108      	bne.n	8006f7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a24      	ldr	r2, [pc, #144]	@ (8007010 <TIM_Base_SetConfig+0xe0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00f      	beq.n	8006fa2 <TIM_Base_SetConfig+0x72>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f88:	d00b      	beq.n	8006fa2 <TIM_Base_SetConfig+0x72>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	@ (8007014 <TIM_Base_SetConfig+0xe4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_Base_SetConfig+0x72>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a20      	ldr	r2, [pc, #128]	@ (8007018 <TIM_Base_SetConfig+0xe8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_Base_SetConfig+0x72>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800701c <TIM_Base_SetConfig+0xec>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d108      	bne.n	8006fb4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a0d      	ldr	r2, [pc, #52]	@ (8007010 <TIM_Base_SetConfig+0xe0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d103      	bne.n	8006fe8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f023 0201 	bic.w	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	611a      	str	r2, [r3, #16]
  }
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00

08007020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007034:	2302      	movs	r3, #2
 8007036:	e04b      	b.n	80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007084:	d00e      	beq.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d009      	beq.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a13      	ldr	r2, [pc, #76]	@ (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a12      	ldr	r2, [pc, #72]	@ (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d10c      	bne.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00

080070ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e042      	b.n	80071a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fc f84a 	bl	80031d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	@ 0x24
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd63 	bl	8007c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	@ 0x28
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d175      	bne.n	80072bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Transmit+0x2c>
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e06e      	b.n	80072be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2221      	movs	r2, #33	@ 0x21
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ee:	f7fc f917 	bl	8003420 <HAL_GetTick>
 80071f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	88fa      	ldrh	r2, [r7, #6]
 80071fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007208:	d108      	bne.n	800721c <HAL_UART_Transmit+0x6c>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	e003      	b.n	8007224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007224:	e02e      	b.n	8007284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2200      	movs	r2, #0
 800722e:	2180      	movs	r1, #128	@ 0x80
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fb01 	bl	8007838 <UART_WaitOnFlagUntilTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e03a      	b.n	80072be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800725c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	3302      	adds	r3, #2
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	e007      	b.n	8007276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	3301      	adds	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1cb      	bne.n	8007226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	2140      	movs	r1, #64	@ 0x40
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 facd 	bl	8007838 <UART_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e006      	b.n	80072be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b0ba      	sub	sp, #232	@ 0xe8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_UART_IRQHandler+0x66>
 800731a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fbbc 	bl	8007aa4 <UART_Receive_IT>
      return;
 800732c:	e25b      	b.n	80077e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800732e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80de 	beq.w	80074f4 <HAL_UART_IRQHandler+0x22c>
 8007338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80d1 	beq.w	80074f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <HAL_UART_IRQHandler+0xae>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736e:	f043 0201 	orr.w	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <HAL_UART_IRQHandler+0xd2>
 8007382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007392:	f043 0202 	orr.w	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_UART_IRQHandler+0xf6>
 80073a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f043 0204 	orr.w	r2, r3, #4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d011      	beq.n	80073ee <HAL_UART_IRQHandler+0x126>
 80073ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d105      	bne.n	80073e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	f043 0208 	orr.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 81f2 	beq.w	80077dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <HAL_UART_IRQHandler+0x14e>
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fb47 	bl	8007aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <HAL_UART_IRQHandler+0x17a>
 800743a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d04f      	beq.n	80074e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa51 	bl	80078ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d041      	beq.n	80074da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800746c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3314      	adds	r3, #20
 800747e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007482:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800748e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800749a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1d9      	bne.n	8007456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d013      	beq.n	80074d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ae:	4a7e      	ldr	r2, [pc, #504]	@ (80076a8 <HAL_UART_IRQHandler+0x3e0>)
 80074b0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fd faee 	bl	8004a98 <HAL_DMA_Abort_IT>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d0:	e00e      	b.n	80074f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f99c 	bl	8007810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	e00a      	b.n	80074f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f998 	bl	8007810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	e006      	b.n	80074f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f994 	bl	8007810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80074ee:	e175      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f0:	bf00      	nop
    return;
 80074f2:	e173      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 814f 	bne.w	800779c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 8148 	beq.w	800779c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8141 	beq.w	800779c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80b6 	beq.w	80076ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800754c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8145 	beq.w	80077e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800755a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800755e:	429a      	cmp	r2, r3
 8007560:	f080 813e 	bcs.w	80077e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800756a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b20      	cmp	r3, #32
 8007574:	f000 8088 	beq.w	8007688 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800758e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007596:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80075a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1d9      	bne.n	8007578 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3314      	adds	r3, #20
 80075ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80075d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80075ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80075f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80075fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e1      	bne.n	80075c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3314      	adds	r3, #20
 8007620:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007624:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007626:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800762a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e3      	bne.n	8007600 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007658:	f023 0310 	bic.w	r3, r3, #16
 800765c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800766a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800766c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e3      	bne.n	8007646 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd f9cd 	bl	8004a22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007696:	b29b      	uxth	r3, r3
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	b29b      	uxth	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8bf 	bl	8007822 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076a4:	e09c      	b.n	80077e0 <HAL_UART_IRQHandler+0x518>
 80076a6:	bf00      	nop
 80076a8:	080079af 	.word	0x080079af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 808e 	beq.w	80077e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80076c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8089 	beq.w	80077e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	330c      	adds	r3, #12
 80076d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80076f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80076f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e3      	bne.n	80076d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3314      	adds	r3, #20
 8007710:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	623b      	str	r3, [r7, #32]
   return(result);
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3314      	adds	r3, #20
 800772a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800772e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e3      	bne.n	800770a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0310 	bic.w	r3, r3, #16
 8007766:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007774:	61fa      	str	r2, [r7, #28]
 8007776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	617b      	str	r3, [r7, #20]
   return(result);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e3      	bne.n	8007750 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800778e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f844 	bl	8007822 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800779a:	e023      	b.n	80077e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <HAL_UART_IRQHandler+0x4f4>
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f90e 	bl	80079d6 <UART_Transmit_IT>
    return;
 80077ba:	e014      	b.n	80077e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00e      	beq.n	80077e6 <HAL_UART_IRQHandler+0x51e>
 80077c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f94d 	bl	8007a74 <UART_EndTransmit_IT>
    return;
 80077da:	e004      	b.n	80077e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80077dc:	bf00      	nop
 80077de:	e002      	b.n	80077e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80077e0:	bf00      	nop
 80077e2:	e000      	b.n	80077e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80077e4:	bf00      	nop
  }
}
 80077e6:	37e8      	adds	r7, #232	@ 0xe8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007848:	e03b      	b.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d037      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007852:	f7fb fde5 	bl	8003420 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	429a      	cmp	r2, r3
 8007860:	d302      	bcc.n	8007868 <UART_WaitOnFlagUntilTimeout+0x30>
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e03a      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d023      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b80      	cmp	r3, #128	@ 0x80
 800787e:	d020      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	d01d      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b08      	cmp	r3, #8
 8007892:	d116      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f81d 	bl	80078ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2208      	movs	r2, #8
 80078b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e00f      	b.n	80078e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4013      	ands	r3, r2
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bf0c      	ite	eq
 80078d2:	2301      	moveq	r3, #1
 80078d4:	2300      	movne	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d0b4      	beq.n	800784a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b095      	sub	sp, #84	@ 0x54
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	330c      	adds	r3, #12
 80078f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007912:	643a      	str	r2, [r7, #64]	@ 0x40
 8007914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007918:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e5      	bne.n	80078f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3314      	adds	r3, #20
 800792c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	61fb      	str	r3, [r7, #28]
   return(result);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3314      	adds	r3, #20
 8007944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800794c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795e:	2b01      	cmp	r3, #1
 8007960:	d119      	bne.n	8007996 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	330c      	adds	r3, #12
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f023 0310 	bic.w	r3, r3, #16
 8007978:	647b      	str	r3, [r7, #68]	@ 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	330c      	adds	r3, #12
 8007980:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007982:	61ba      	str	r2, [r7, #24]
 8007984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e5      	bne.n	8007962 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80079a4:	bf00      	nop
 80079a6:	3754      	adds	r7, #84	@ 0x54
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr

080079ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff ff21 	bl	8007810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b21      	cmp	r3, #33	@ 0x21
 80079e8:	d13e      	bne.n	8007a68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f2:	d114      	bne.n	8007a1e <UART_Transmit_IT+0x48>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d110      	bne.n	8007a1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	1c9a      	adds	r2, r3, #2
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	621a      	str	r2, [r3, #32]
 8007a1c:	e008      	b.n	8007a30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	1c59      	adds	r1, r3, #1
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6211      	str	r1, [r2, #32]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10f      	bne.n	8007a64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	4770      	bx	lr

08007a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fea9 	bl	80077ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08c      	sub	sp, #48	@ 0x30
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b22      	cmp	r3, #34	@ 0x22
 8007ab6:	f040 80ae 	bne.w	8007c16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac2:	d117      	bne.n	8007af4 <UART_Receive_IT+0x50>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d113      	bne.n	8007af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007af2:	e026      	b.n	8007b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b06:	d007      	beq.n	8007b18 <UART_Receive_IT+0x74>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <UART_Receive_IT+0x82>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	e008      	b.n	8007b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d15d      	bne.n	8007c12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0220 	bic.w	r2, r2, #32
 8007b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0201 	bic.w	r2, r2, #1
 8007b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d135      	bne.n	8007c08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f023 0310 	bic.w	r3, r3, #16
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc2:	623a      	str	r2, [r7, #32]
 8007bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	69f9      	ldr	r1, [r7, #28]
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	d10a      	bne.n	8007bfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fe0e 	bl	8007822 <HAL_UARTEx_RxEventCallback>
 8007c06:	e002      	b.n	8007c0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fdf8 	bl	80077fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e002      	b.n	8007c18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e000      	b.n	8007c18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c16:	2302      	movs	r3, #2
  }
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3730      	adds	r7, #48	@ 0x30
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007c5a:	f023 030c 	bic.w	r3, r3, #12
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	430b      	orrs	r3, r1
 8007c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a2c      	ldr	r2, [pc, #176]	@ (8007d34 <UART_SetConfig+0x114>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d103      	bne.n	8007c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7fd fe9e 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	e002      	b.n	8007c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fd fe86 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8007c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009a      	lsls	r2, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cac:	4a22      	ldr	r2, [pc, #136]	@ (8007d38 <UART_SetConfig+0x118>)
 8007cae:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	0119      	lsls	r1, r3, #4
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009a      	lsls	r2, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d38 <UART_SetConfig+0x118>)
 8007cce:	fba3 0302 	umull	r0, r3, r3, r2
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	2064      	movs	r0, #100	@ 0x64
 8007cd6:	fb00 f303 	mul.w	r3, r0, r3
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	3332      	adds	r3, #50	@ 0x32
 8007ce0:	4a15      	ldr	r2, [pc, #84]	@ (8007d38 <UART_SetConfig+0x118>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cec:	4419      	add	r1, r3
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009a      	lsls	r2, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d04:	4b0c      	ldr	r3, [pc, #48]	@ (8007d38 <UART_SetConfig+0x118>)
 8007d06:	fba3 0302 	umull	r0, r3, r3, r2
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	2064      	movs	r0, #100	@ 0x64
 8007d0e:	fb00 f303 	mul.w	r3, r0, r3
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	3332      	adds	r3, #50	@ 0x32
 8007d18:	4a07      	ldr	r2, [pc, #28]	@ (8007d38 <UART_SetConfig+0x118>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	f003 020f 	and.w	r2, r3, #15
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	440a      	add	r2, r1
 8007d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d2c:	bf00      	nop
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40013800 	.word	0x40013800
 8007d38:	51eb851f 	.word	0x51eb851f

08007d3c <std>:
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	4604      	mov	r4, r0
 8007d42:	e9c0 3300 	strd	r3, r3, [r0]
 8007d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d4a:	6083      	str	r3, [r0, #8]
 8007d4c:	8181      	strh	r1, [r0, #12]
 8007d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d50:	81c2      	strh	r2, [r0, #14]
 8007d52:	6183      	str	r3, [r0, #24]
 8007d54:	4619      	mov	r1, r3
 8007d56:	2208      	movs	r2, #8
 8007d58:	305c      	adds	r0, #92	@ 0x5c
 8007d5a:	f000 fa1b 	bl	8008194 <memset>
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <std+0x58>)
 8007d60:	6224      	str	r4, [r4, #32]
 8007d62:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <std+0x5c>)
 8007d66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d68:	4b0c      	ldr	r3, [pc, #48]	@ (8007d9c <std+0x60>)
 8007d6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <std+0x64>)
 8007d6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d70:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <std+0x68>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d006      	beq.n	8007d84 <std+0x48>
 8007d76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d7a:	4294      	cmp	r4, r2
 8007d7c:	d002      	beq.n	8007d84 <std+0x48>
 8007d7e:	33d0      	adds	r3, #208	@ 0xd0
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d105      	bne.n	8007d90 <std+0x54>
 8007d84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d8c:	f000 ba8e 	b.w	80082ac <__retarget_lock_init_recursive>
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	bf00      	nop
 8007d94:	08007fe5 	.word	0x08007fe5
 8007d98:	08008007 	.word	0x08008007
 8007d9c:	0800803f 	.word	0x0800803f
 8007da0:	08008063 	.word	0x08008063
 8007da4:	200002b0 	.word	0x200002b0

08007da8 <stdio_exit_handler>:
 8007da8:	4a02      	ldr	r2, [pc, #8]	@ (8007db4 <stdio_exit_handler+0xc>)
 8007daa:	4903      	ldr	r1, [pc, #12]	@ (8007db8 <stdio_exit_handler+0x10>)
 8007dac:	4803      	ldr	r0, [pc, #12]	@ (8007dbc <stdio_exit_handler+0x14>)
 8007dae:	f000 b869 	b.w	8007e84 <_fwalk_sglue>
 8007db2:	bf00      	nop
 8007db4:	20000078 	.word	0x20000078
 8007db8:	08008b91 	.word	0x08008b91
 8007dbc:	20000088 	.word	0x20000088

08007dc0 <cleanup_stdio>:
 8007dc0:	6841      	ldr	r1, [r0, #4]
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <cleanup_stdio+0x34>)
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4299      	cmp	r1, r3
 8007dc8:	4604      	mov	r4, r0
 8007dca:	d001      	beq.n	8007dd0 <cleanup_stdio+0x10>
 8007dcc:	f000 fee0 	bl	8008b90 <_fflush_r>
 8007dd0:	68a1      	ldr	r1, [r4, #8]
 8007dd2:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <cleanup_stdio+0x38>)
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d002      	beq.n	8007dde <cleanup_stdio+0x1e>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fed9 	bl	8008b90 <_fflush_r>
 8007dde:	68e1      	ldr	r1, [r4, #12]
 8007de0:	4b06      	ldr	r3, [pc, #24]	@ (8007dfc <cleanup_stdio+0x3c>)
 8007de2:	4299      	cmp	r1, r3
 8007de4:	d004      	beq.n	8007df0 <cleanup_stdio+0x30>
 8007de6:	4620      	mov	r0, r4
 8007de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dec:	f000 bed0 	b.w	8008b90 <_fflush_r>
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop
 8007df4:	200002b0 	.word	0x200002b0
 8007df8:	20000318 	.word	0x20000318
 8007dfc:	20000380 	.word	0x20000380

08007e00 <global_stdio_init.part.0>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4b0b      	ldr	r3, [pc, #44]	@ (8007e30 <global_stdio_init.part.0+0x30>)
 8007e04:	4c0b      	ldr	r4, [pc, #44]	@ (8007e34 <global_stdio_init.part.0+0x34>)
 8007e06:	4a0c      	ldr	r2, [pc, #48]	@ (8007e38 <global_stdio_init.part.0+0x38>)
 8007e08:	4620      	mov	r0, r4
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f7ff ff94 	bl	8007d3c <std>
 8007e14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e18:	2201      	movs	r2, #1
 8007e1a:	2109      	movs	r1, #9
 8007e1c:	f7ff ff8e 	bl	8007d3c <std>
 8007e20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e24:	2202      	movs	r2, #2
 8007e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2a:	2112      	movs	r1, #18
 8007e2c:	f7ff bf86 	b.w	8007d3c <std>
 8007e30:	200003e8 	.word	0x200003e8
 8007e34:	200002b0 	.word	0x200002b0
 8007e38:	08007da9 	.word	0x08007da9

08007e3c <__sfp_lock_acquire>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	@ (8007e44 <__sfp_lock_acquire+0x8>)
 8007e3e:	f000 ba36 	b.w	80082ae <__retarget_lock_acquire_recursive>
 8007e42:	bf00      	nop
 8007e44:	200003f1 	.word	0x200003f1

08007e48 <__sfp_lock_release>:
 8007e48:	4801      	ldr	r0, [pc, #4]	@ (8007e50 <__sfp_lock_release+0x8>)
 8007e4a:	f000 ba31 	b.w	80082b0 <__retarget_lock_release_recursive>
 8007e4e:	bf00      	nop
 8007e50:	200003f1 	.word	0x200003f1

08007e54 <__sinit>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	f7ff fff0 	bl	8007e3c <__sfp_lock_acquire>
 8007e5c:	6a23      	ldr	r3, [r4, #32]
 8007e5e:	b11b      	cbz	r3, 8007e68 <__sinit+0x14>
 8007e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e64:	f7ff bff0 	b.w	8007e48 <__sfp_lock_release>
 8007e68:	4b04      	ldr	r3, [pc, #16]	@ (8007e7c <__sinit+0x28>)
 8007e6a:	6223      	str	r3, [r4, #32]
 8007e6c:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <__sinit+0x2c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f5      	bne.n	8007e60 <__sinit+0xc>
 8007e74:	f7ff ffc4 	bl	8007e00 <global_stdio_init.part.0>
 8007e78:	e7f2      	b.n	8007e60 <__sinit+0xc>
 8007e7a:	bf00      	nop
 8007e7c:	08007dc1 	.word	0x08007dc1
 8007e80:	200003e8 	.word	0x200003e8

08007e84 <_fwalk_sglue>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	4607      	mov	r7, r0
 8007e8a:	4688      	mov	r8, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	2600      	movs	r6, #0
 8007e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e94:	f1b9 0901 	subs.w	r9, r9, #1
 8007e98:	d505      	bpl.n	8007ea6 <_fwalk_sglue+0x22>
 8007e9a:	6824      	ldr	r4, [r4, #0]
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	d1f7      	bne.n	8007e90 <_fwalk_sglue+0xc>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d907      	bls.n	8007ebc <_fwalk_sglue+0x38>
 8007eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	d003      	beq.n	8007ebc <_fwalk_sglue+0x38>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	47c0      	blx	r8
 8007eba:	4306      	orrs	r6, r0
 8007ebc:	3568      	adds	r5, #104	@ 0x68
 8007ebe:	e7e9      	b.n	8007e94 <_fwalk_sglue+0x10>

08007ec0 <_puts_r>:
 8007ec0:	6a03      	ldr	r3, [r0, #32]
 8007ec2:	b570      	push	{r4, r5, r6, lr}
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	460e      	mov	r6, r1
 8007ec8:	6884      	ldr	r4, [r0, #8]
 8007eca:	b90b      	cbnz	r3, 8007ed0 <_puts_r+0x10>
 8007ecc:	f7ff ffc2 	bl	8007e54 <__sinit>
 8007ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ed2:	07db      	lsls	r3, r3, #31
 8007ed4:	d405      	bmi.n	8007ee2 <_puts_r+0x22>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	0598      	lsls	r0, r3, #22
 8007eda:	d402      	bmi.n	8007ee2 <_puts_r+0x22>
 8007edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ede:	f000 f9e6 	bl	80082ae <__retarget_lock_acquire_recursive>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	0719      	lsls	r1, r3, #28
 8007ee6:	d502      	bpl.n	8007eee <_puts_r+0x2e>
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d135      	bne.n	8007f5a <_puts_r+0x9a>
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 f8f9 	bl	80080e8 <__swsetup_r>
 8007ef6:	b380      	cbz	r0, 8007f5a <_puts_r+0x9a>
 8007ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8007efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007efe:	07da      	lsls	r2, r3, #31
 8007f00:	d405      	bmi.n	8007f0e <_puts_r+0x4e>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	059b      	lsls	r3, r3, #22
 8007f06:	d402      	bmi.n	8007f0e <_puts_r+0x4e>
 8007f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f0a:	f000 f9d1 	bl	80082b0 <__retarget_lock_release_recursive>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	bd70      	pop	{r4, r5, r6, pc}
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da04      	bge.n	8007f20 <_puts_r+0x60>
 8007f16:	69a2      	ldr	r2, [r4, #24]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	dc17      	bgt.n	8007f4c <_puts_r+0x8c>
 8007f1c:	290a      	cmp	r1, #10
 8007f1e:	d015      	beq.n	8007f4c <_puts_r+0x8c>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	6022      	str	r2, [r4, #0]
 8007f26:	7019      	strb	r1, [r3, #0]
 8007f28:	68a3      	ldr	r3, [r4, #8]
 8007f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	2900      	cmp	r1, #0
 8007f34:	d1ed      	bne.n	8007f12 <_puts_r+0x52>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da11      	bge.n	8007f5e <_puts_r+0x9e>
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	210a      	movs	r1, #10
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f000 f893 	bl	800806a <__swbuf_r>
 8007f44:	3001      	adds	r0, #1
 8007f46:	d0d7      	beq.n	8007ef8 <_puts_r+0x38>
 8007f48:	250a      	movs	r5, #10
 8007f4a:	e7d7      	b.n	8007efc <_puts_r+0x3c>
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f88b 	bl	800806a <__swbuf_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d1e7      	bne.n	8007f28 <_puts_r+0x68>
 8007f58:	e7ce      	b.n	8007ef8 <_puts_r+0x38>
 8007f5a:	3e01      	subs	r6, #1
 8007f5c:	e7e4      	b.n	8007f28 <_puts_r+0x68>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	6022      	str	r2, [r4, #0]
 8007f64:	220a      	movs	r2, #10
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e7ee      	b.n	8007f48 <_puts_r+0x88>
	...

08007f6c <puts>:
 8007f6c:	4b02      	ldr	r3, [pc, #8]	@ (8007f78 <puts+0xc>)
 8007f6e:	4601      	mov	r1, r0
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	f7ff bfa5 	b.w	8007ec0 <_puts_r>
 8007f76:	bf00      	nop
 8007f78:	20000084 	.word	0x20000084

08007f7c <sniprintf>:
 8007f7c:	b40c      	push	{r2, r3}
 8007f7e:	b530      	push	{r4, r5, lr}
 8007f80:	4b17      	ldr	r3, [pc, #92]	@ (8007fe0 <sniprintf+0x64>)
 8007f82:	1e0c      	subs	r4, r1, #0
 8007f84:	681d      	ldr	r5, [r3, #0]
 8007f86:	b09d      	sub	sp, #116	@ 0x74
 8007f88:	da08      	bge.n	8007f9c <sniprintf+0x20>
 8007f8a:	238b      	movs	r3, #139	@ 0x8b
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	b01d      	add	sp, #116	@ 0x74
 8007f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f98:	b002      	add	sp, #8
 8007f9a:	4770      	bx	lr
 8007f9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fa4:	bf0c      	ite	eq
 8007fa6:	4623      	moveq	r3, r4
 8007fa8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fb4:	9002      	str	r0, [sp, #8]
 8007fb6:	9006      	str	r0, [sp, #24]
 8007fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	ab21      	add	r3, sp, #132	@ 0x84
 8007fc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fc2:	a902      	add	r1, sp, #8
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	f000 fad5 	bl	8008574 <_svfiprintf_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	bfbc      	itt	lt
 8007fce:	238b      	movlt	r3, #139	@ 0x8b
 8007fd0:	602b      	strlt	r3, [r5, #0]
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d0dd      	beq.n	8007f92 <sniprintf+0x16>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e7d9      	b.n	8007f92 <sniprintf+0x16>
 8007fde:	bf00      	nop
 8007fe0:	20000084 	.word	0x20000084

08007fe4 <__sread>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fec:	f000 f910 	bl	8008210 <_read_r>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	bfab      	itete	ge
 8007ff4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff8:	181b      	addge	r3, r3, r0
 8007ffa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ffe:	bfac      	ite	ge
 8008000:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008002:	81a3      	strhlt	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__swrite>:
 8008006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800a:	461f      	mov	r7, r3
 800800c:	898b      	ldrh	r3, [r1, #12]
 800800e:	4605      	mov	r5, r0
 8008010:	05db      	lsls	r3, r3, #23
 8008012:	460c      	mov	r4, r1
 8008014:	4616      	mov	r6, r2
 8008016:	d505      	bpl.n	8008024 <__swrite+0x1e>
 8008018:	2302      	movs	r3, #2
 800801a:	2200      	movs	r2, #0
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	f000 f8e4 	bl	80081ec <_lseek_r>
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	4632      	mov	r2, r6
 8008028:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	4628      	mov	r0, r5
 8008030:	463b      	mov	r3, r7
 8008032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803a:	f000 b8fb 	b.w	8008234 <_write_r>

0800803e <__sseek>:
 800803e:	b510      	push	{r4, lr}
 8008040:	460c      	mov	r4, r1
 8008042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008046:	f000 f8d1 	bl	80081ec <_lseek_r>
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	bf15      	itete	ne
 8008050:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008052:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008056:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800805a:	81a3      	strheq	r3, [r4, #12]
 800805c:	bf18      	it	ne
 800805e:	81a3      	strhne	r3, [r4, #12]
 8008060:	bd10      	pop	{r4, pc}

08008062 <__sclose>:
 8008062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008066:	f000 b8b1 	b.w	80081cc <_close_r>

0800806a <__swbuf_r>:
 800806a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806c:	460e      	mov	r6, r1
 800806e:	4614      	mov	r4, r2
 8008070:	4605      	mov	r5, r0
 8008072:	b118      	cbz	r0, 800807c <__swbuf_r+0x12>
 8008074:	6a03      	ldr	r3, [r0, #32]
 8008076:	b90b      	cbnz	r3, 800807c <__swbuf_r+0x12>
 8008078:	f7ff feec 	bl	8007e54 <__sinit>
 800807c:	69a3      	ldr	r3, [r4, #24]
 800807e:	60a3      	str	r3, [r4, #8]
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	071a      	lsls	r2, r3, #28
 8008084:	d501      	bpl.n	800808a <__swbuf_r+0x20>
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	b943      	cbnz	r3, 800809c <__swbuf_r+0x32>
 800808a:	4621      	mov	r1, r4
 800808c:	4628      	mov	r0, r5
 800808e:	f000 f82b 	bl	80080e8 <__swsetup_r>
 8008092:	b118      	cbz	r0, 800809c <__swbuf_r+0x32>
 8008094:	f04f 37ff 	mov.w	r7, #4294967295
 8008098:	4638      	mov	r0, r7
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	6922      	ldr	r2, [r4, #16]
 80080a0:	b2f6      	uxtb	r6, r6
 80080a2:	1a98      	subs	r0, r3, r2
 80080a4:	6963      	ldr	r3, [r4, #20]
 80080a6:	4637      	mov	r7, r6
 80080a8:	4283      	cmp	r3, r0
 80080aa:	dc05      	bgt.n	80080b8 <__swbuf_r+0x4e>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 fd6e 	bl	8008b90 <_fflush_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1ed      	bne.n	8008094 <__swbuf_r+0x2a>
 80080b8:	68a3      	ldr	r3, [r4, #8]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	6022      	str	r2, [r4, #0]
 80080c4:	701e      	strb	r6, [r3, #0]
 80080c6:	6962      	ldr	r2, [r4, #20]
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d004      	beq.n	80080d8 <__swbuf_r+0x6e>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	07db      	lsls	r3, r3, #31
 80080d2:	d5e1      	bpl.n	8008098 <__swbuf_r+0x2e>
 80080d4:	2e0a      	cmp	r6, #10
 80080d6:	d1df      	bne.n	8008098 <__swbuf_r+0x2e>
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 fd58 	bl	8008b90 <_fflush_r>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d0d9      	beq.n	8008098 <__swbuf_r+0x2e>
 80080e4:	e7d6      	b.n	8008094 <__swbuf_r+0x2a>
	...

080080e8 <__swsetup_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4b29      	ldr	r3, [pc, #164]	@ (8008190 <__swsetup_r+0xa8>)
 80080ec:	4605      	mov	r5, r0
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	460c      	mov	r4, r1
 80080f2:	b118      	cbz	r0, 80080fc <__swsetup_r+0x14>
 80080f4:	6a03      	ldr	r3, [r0, #32]
 80080f6:	b90b      	cbnz	r3, 80080fc <__swsetup_r+0x14>
 80080f8:	f7ff feac 	bl	8007e54 <__sinit>
 80080fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008100:	0719      	lsls	r1, r3, #28
 8008102:	d422      	bmi.n	800814a <__swsetup_r+0x62>
 8008104:	06da      	lsls	r2, r3, #27
 8008106:	d407      	bmi.n	8008118 <__swsetup_r+0x30>
 8008108:	2209      	movs	r2, #9
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	e033      	b.n	8008180 <__swsetup_r+0x98>
 8008118:	0758      	lsls	r0, r3, #29
 800811a:	d512      	bpl.n	8008142 <__swsetup_r+0x5a>
 800811c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800811e:	b141      	cbz	r1, 8008132 <__swsetup_r+0x4a>
 8008120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008124:	4299      	cmp	r1, r3
 8008126:	d002      	beq.n	800812e <__swsetup_r+0x46>
 8008128:	4628      	mov	r0, r5
 800812a:	f000 f8d1 	bl	80082d0 <_free_r>
 800812e:	2300      	movs	r3, #0
 8008130:	6363      	str	r3, [r4, #52]	@ 0x34
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	2300      	movs	r3, #0
 800813c:	6063      	str	r3, [r4, #4]
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f043 0308 	orr.w	r3, r3, #8
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	b94b      	cbnz	r3, 8008162 <__swsetup_r+0x7a>
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008158:	d003      	beq.n	8008162 <__swsetup_r+0x7a>
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f000 fd64 	bl	8008c2a <__smakebuf_r>
 8008162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008166:	f013 0201 	ands.w	r2, r3, #1
 800816a:	d00a      	beq.n	8008182 <__swsetup_r+0x9a>
 800816c:	2200      	movs	r2, #0
 800816e:	60a2      	str	r2, [r4, #8]
 8008170:	6962      	ldr	r2, [r4, #20]
 8008172:	4252      	negs	r2, r2
 8008174:	61a2      	str	r2, [r4, #24]
 8008176:	6922      	ldr	r2, [r4, #16]
 8008178:	b942      	cbnz	r2, 800818c <__swsetup_r+0xa4>
 800817a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800817e:	d1c5      	bne.n	800810c <__swsetup_r+0x24>
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	0799      	lsls	r1, r3, #30
 8008184:	bf58      	it	pl
 8008186:	6962      	ldrpl	r2, [r4, #20]
 8008188:	60a2      	str	r2, [r4, #8]
 800818a:	e7f4      	b.n	8008176 <__swsetup_r+0x8e>
 800818c:	2000      	movs	r0, #0
 800818e:	e7f7      	b.n	8008180 <__swsetup_r+0x98>
 8008190:	20000084 	.word	0x20000084

08008194 <memset>:
 8008194:	4603      	mov	r3, r0
 8008196:	4402      	add	r2, r0
 8008198:	4293      	cmp	r3, r2
 800819a:	d100      	bne.n	800819e <memset+0xa>
 800819c:	4770      	bx	lr
 800819e:	f803 1b01 	strb.w	r1, [r3], #1
 80081a2:	e7f9      	b.n	8008198 <memset+0x4>

080081a4 <strncpy>:
 80081a4:	4603      	mov	r3, r0
 80081a6:	b510      	push	{r4, lr}
 80081a8:	3901      	subs	r1, #1
 80081aa:	b132      	cbz	r2, 80081ba <strncpy+0x16>
 80081ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081b0:	3a01      	subs	r2, #1
 80081b2:	f803 4b01 	strb.w	r4, [r3], #1
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d1f7      	bne.n	80081aa <strncpy+0x6>
 80081ba:	2100      	movs	r1, #0
 80081bc:	441a      	add	r2, r3
 80081be:	4293      	cmp	r3, r2
 80081c0:	d100      	bne.n	80081c4 <strncpy+0x20>
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	f803 1b01 	strb.w	r1, [r3], #1
 80081c8:	e7f9      	b.n	80081be <strncpy+0x1a>
	...

080081cc <_close_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	2300      	movs	r3, #0
 80081d0:	4d05      	ldr	r5, [pc, #20]	@ (80081e8 <_close_r+0x1c>)
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7fa ff07 	bl	8002fea <_close>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d102      	bne.n	80081e6 <_close_r+0x1a>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	b103      	cbz	r3, 80081e6 <_close_r+0x1a>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	200003ec 	.word	0x200003ec

080081ec <_lseek_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	4611      	mov	r1, r2
 80081f4:	2200      	movs	r2, #0
 80081f6:	4d05      	ldr	r5, [pc, #20]	@ (800820c <_lseek_r+0x20>)
 80081f8:	602a      	str	r2, [r5, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f7fa ff19 	bl	8003032 <_lseek>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_lseek_r+0x1e>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_lseek_r+0x1e>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	200003ec 	.word	0x200003ec

08008210 <_read_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	2200      	movs	r2, #0
 800821a:	4d05      	ldr	r5, [pc, #20]	@ (8008230 <_read_r+0x20>)
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7fa fec6 	bl	8002fb0 <_read>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_read_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_read_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	200003ec 	.word	0x200003ec

08008234 <_write_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4604      	mov	r4, r0
 8008238:	4608      	mov	r0, r1
 800823a:	4611      	mov	r1, r2
 800823c:	2200      	movs	r2, #0
 800823e:	4d05      	ldr	r5, [pc, #20]	@ (8008254 <_write_r+0x20>)
 8008240:	602a      	str	r2, [r5, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	f7fb f818 	bl	8003278 <_write>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_write_r+0x1e>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_write_r+0x1e>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	200003ec 	.word	0x200003ec

08008258 <__errno>:
 8008258:	4b01      	ldr	r3, [pc, #4]	@ (8008260 <__errno+0x8>)
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000084 	.word	0x20000084

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	2600      	movs	r6, #0
 8008268:	4d0c      	ldr	r5, [pc, #48]	@ (800829c <__libc_init_array+0x38>)
 800826a:	4c0d      	ldr	r4, [pc, #52]	@ (80082a0 <__libc_init_array+0x3c>)
 800826c:	1b64      	subs	r4, r4, r5
 800826e:	10a4      	asrs	r4, r4, #2
 8008270:	42a6      	cmp	r6, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	f000 ff92 	bl	800919c <_init>
 8008278:	2600      	movs	r6, #0
 800827a:	4d0a      	ldr	r5, [pc, #40]	@ (80082a4 <__libc_init_array+0x40>)
 800827c:	4c0a      	ldr	r4, [pc, #40]	@ (80082a8 <__libc_init_array+0x44>)
 800827e:	1b64      	subs	r4, r4, r5
 8008280:	10a4      	asrs	r4, r4, #2
 8008282:	42a6      	cmp	r6, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f855 3b04 	ldr.w	r3, [r5], #4
 800828c:	4798      	blx	r3
 800828e:	3601      	adds	r6, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f855 3b04 	ldr.w	r3, [r5], #4
 8008296:	4798      	blx	r3
 8008298:	3601      	adds	r6, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	08009668 	.word	0x08009668
 80082a0:	08009668 	.word	0x08009668
 80082a4:	08009668 	.word	0x08009668
 80082a8:	0800966c 	.word	0x0800966c

080082ac <__retarget_lock_init_recursive>:
 80082ac:	4770      	bx	lr

080082ae <__retarget_lock_acquire_recursive>:
 80082ae:	4770      	bx	lr

080082b0 <__retarget_lock_release_recursive>:
 80082b0:	4770      	bx	lr

080082b2 <memcpy>:
 80082b2:	440a      	add	r2, r1
 80082b4:	4291      	cmp	r1, r2
 80082b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ba:	d100      	bne.n	80082be <memcpy+0xc>
 80082bc:	4770      	bx	lr
 80082be:	b510      	push	{r4, lr}
 80082c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c4:	4291      	cmp	r1, r2
 80082c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ca:	d1f9      	bne.n	80082c0 <memcpy+0xe>
 80082cc:	bd10      	pop	{r4, pc}
	...

080082d0 <_free_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4605      	mov	r5, r0
 80082d4:	2900      	cmp	r1, #0
 80082d6:	d040      	beq.n	800835a <_free_r+0x8a>
 80082d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082dc:	1f0c      	subs	r4, r1, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfb8      	it	lt
 80082e2:	18e4      	addlt	r4, r4, r3
 80082e4:	f000 f8de 	bl	80084a4 <__malloc_lock>
 80082e8:	4a1c      	ldr	r2, [pc, #112]	@ (800835c <_free_r+0x8c>)
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	b933      	cbnz	r3, 80082fc <_free_r+0x2c>
 80082ee:	6063      	str	r3, [r4, #4]
 80082f0:	6014      	str	r4, [r2, #0]
 80082f2:	4628      	mov	r0, r5
 80082f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f8:	f000 b8da 	b.w	80084b0 <__malloc_unlock>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d908      	bls.n	8008312 <_free_r+0x42>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	1821      	adds	r1, r4, r0
 8008304:	428b      	cmp	r3, r1
 8008306:	bf01      	itttt	eq
 8008308:	6819      	ldreq	r1, [r3, #0]
 800830a:	685b      	ldreq	r3, [r3, #4]
 800830c:	1809      	addeq	r1, r1, r0
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	e7ed      	b.n	80082ee <_free_r+0x1e>
 8008312:	461a      	mov	r2, r3
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b10b      	cbz	r3, 800831c <_free_r+0x4c>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d9fa      	bls.n	8008312 <_free_r+0x42>
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	1850      	adds	r0, r2, r1
 8008320:	42a0      	cmp	r0, r4
 8008322:	d10b      	bne.n	800833c <_free_r+0x6c>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	4401      	add	r1, r0
 8008328:	1850      	adds	r0, r2, r1
 800832a:	4283      	cmp	r3, r0
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	d1e0      	bne.n	80082f2 <_free_r+0x22>
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	4408      	add	r0, r1
 8008336:	6010      	str	r0, [r2, #0]
 8008338:	6053      	str	r3, [r2, #4]
 800833a:	e7da      	b.n	80082f2 <_free_r+0x22>
 800833c:	d902      	bls.n	8008344 <_free_r+0x74>
 800833e:	230c      	movs	r3, #12
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	e7d6      	b.n	80082f2 <_free_r+0x22>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	1821      	adds	r1, r4, r0
 8008348:	428b      	cmp	r3, r1
 800834a:	bf01      	itttt	eq
 800834c:	6819      	ldreq	r1, [r3, #0]
 800834e:	685b      	ldreq	r3, [r3, #4]
 8008350:	1809      	addeq	r1, r1, r0
 8008352:	6021      	streq	r1, [r4, #0]
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	6054      	str	r4, [r2, #4]
 8008358:	e7cb      	b.n	80082f2 <_free_r+0x22>
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	200003f8 	.word	0x200003f8

08008360 <sbrk_aligned>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4e0f      	ldr	r6, [pc, #60]	@ (80083a0 <sbrk_aligned+0x40>)
 8008364:	460c      	mov	r4, r1
 8008366:	6831      	ldr	r1, [r6, #0]
 8008368:	4605      	mov	r5, r0
 800836a:	b911      	cbnz	r1, 8008372 <sbrk_aligned+0x12>
 800836c:	f000 fcd6 	bl	8008d1c <_sbrk_r>
 8008370:	6030      	str	r0, [r6, #0]
 8008372:	4621      	mov	r1, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f000 fcd1 	bl	8008d1c <_sbrk_r>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d103      	bne.n	8008386 <sbrk_aligned+0x26>
 800837e:	f04f 34ff 	mov.w	r4, #4294967295
 8008382:	4620      	mov	r0, r4
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	1cc4      	adds	r4, r0, #3
 8008388:	f024 0403 	bic.w	r4, r4, #3
 800838c:	42a0      	cmp	r0, r4
 800838e:	d0f8      	beq.n	8008382 <sbrk_aligned+0x22>
 8008390:	1a21      	subs	r1, r4, r0
 8008392:	4628      	mov	r0, r5
 8008394:	f000 fcc2 	bl	8008d1c <_sbrk_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d1f2      	bne.n	8008382 <sbrk_aligned+0x22>
 800839c:	e7ef      	b.n	800837e <sbrk_aligned+0x1e>
 800839e:	bf00      	nop
 80083a0:	200003f4 	.word	0x200003f4

080083a4 <_malloc_r>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	1ccd      	adds	r5, r1, #3
 80083aa:	f025 0503 	bic.w	r5, r5, #3
 80083ae:	3508      	adds	r5, #8
 80083b0:	2d0c      	cmp	r5, #12
 80083b2:	bf38      	it	cc
 80083b4:	250c      	movcc	r5, #12
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	4606      	mov	r6, r0
 80083ba:	db01      	blt.n	80083c0 <_malloc_r+0x1c>
 80083bc:	42a9      	cmp	r1, r5
 80083be:	d904      	bls.n	80083ca <_malloc_r+0x26>
 80083c0:	230c      	movs	r3, #12
 80083c2:	6033      	str	r3, [r6, #0]
 80083c4:	2000      	movs	r0, #0
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084a0 <_malloc_r+0xfc>
 80083ce:	f000 f869 	bl	80084a4 <__malloc_lock>
 80083d2:	f8d8 3000 	ldr.w	r3, [r8]
 80083d6:	461c      	mov	r4, r3
 80083d8:	bb44      	cbnz	r4, 800842c <_malloc_r+0x88>
 80083da:	4629      	mov	r1, r5
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff ffbf 	bl	8008360 <sbrk_aligned>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	4604      	mov	r4, r0
 80083e6:	d158      	bne.n	800849a <_malloc_r+0xf6>
 80083e8:	f8d8 4000 	ldr.w	r4, [r8]
 80083ec:	4627      	mov	r7, r4
 80083ee:	2f00      	cmp	r7, #0
 80083f0:	d143      	bne.n	800847a <_malloc_r+0xd6>
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	d04b      	beq.n	800848e <_malloc_r+0xea>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	4639      	mov	r1, r7
 80083fa:	4630      	mov	r0, r6
 80083fc:	eb04 0903 	add.w	r9, r4, r3
 8008400:	f000 fc8c 	bl	8008d1c <_sbrk_r>
 8008404:	4581      	cmp	r9, r0
 8008406:	d142      	bne.n	800848e <_malloc_r+0xea>
 8008408:	6821      	ldr	r1, [r4, #0]
 800840a:	4630      	mov	r0, r6
 800840c:	1a6d      	subs	r5, r5, r1
 800840e:	4629      	mov	r1, r5
 8008410:	f7ff ffa6 	bl	8008360 <sbrk_aligned>
 8008414:	3001      	adds	r0, #1
 8008416:	d03a      	beq.n	800848e <_malloc_r+0xea>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	442b      	add	r3, r5
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	f8d8 3000 	ldr.w	r3, [r8]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	bb62      	cbnz	r2, 8008480 <_malloc_r+0xdc>
 8008426:	f8c8 7000 	str.w	r7, [r8]
 800842a:	e00f      	b.n	800844c <_malloc_r+0xa8>
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	1b52      	subs	r2, r2, r5
 8008430:	d420      	bmi.n	8008474 <_malloc_r+0xd0>
 8008432:	2a0b      	cmp	r2, #11
 8008434:	d917      	bls.n	8008466 <_malloc_r+0xc2>
 8008436:	1961      	adds	r1, r4, r5
 8008438:	42a3      	cmp	r3, r4
 800843a:	6025      	str	r5, [r4, #0]
 800843c:	bf18      	it	ne
 800843e:	6059      	strne	r1, [r3, #4]
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	bf08      	it	eq
 8008444:	f8c8 1000 	streq.w	r1, [r8]
 8008448:	5162      	str	r2, [r4, r5]
 800844a:	604b      	str	r3, [r1, #4]
 800844c:	4630      	mov	r0, r6
 800844e:	f000 f82f 	bl	80084b0 <__malloc_unlock>
 8008452:	f104 000b 	add.w	r0, r4, #11
 8008456:	1d23      	adds	r3, r4, #4
 8008458:	f020 0007 	bic.w	r0, r0, #7
 800845c:	1ac2      	subs	r2, r0, r3
 800845e:	bf1c      	itt	ne
 8008460:	1a1b      	subne	r3, r3, r0
 8008462:	50a3      	strne	r3, [r4, r2]
 8008464:	e7af      	b.n	80083c6 <_malloc_r+0x22>
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	42a3      	cmp	r3, r4
 800846a:	bf0c      	ite	eq
 800846c:	f8c8 2000 	streq.w	r2, [r8]
 8008470:	605a      	strne	r2, [r3, #4]
 8008472:	e7eb      	b.n	800844c <_malloc_r+0xa8>
 8008474:	4623      	mov	r3, r4
 8008476:	6864      	ldr	r4, [r4, #4]
 8008478:	e7ae      	b.n	80083d8 <_malloc_r+0x34>
 800847a:	463c      	mov	r4, r7
 800847c:	687f      	ldr	r7, [r7, #4]
 800847e:	e7b6      	b.n	80083ee <_malloc_r+0x4a>
 8008480:	461a      	mov	r2, r3
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	42a3      	cmp	r3, r4
 8008486:	d1fb      	bne.n	8008480 <_malloc_r+0xdc>
 8008488:	2300      	movs	r3, #0
 800848a:	6053      	str	r3, [r2, #4]
 800848c:	e7de      	b.n	800844c <_malloc_r+0xa8>
 800848e:	230c      	movs	r3, #12
 8008490:	4630      	mov	r0, r6
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f000 f80c 	bl	80084b0 <__malloc_unlock>
 8008498:	e794      	b.n	80083c4 <_malloc_r+0x20>
 800849a:	6005      	str	r5, [r0, #0]
 800849c:	e7d6      	b.n	800844c <_malloc_r+0xa8>
 800849e:	bf00      	nop
 80084a0:	200003f8 	.word	0x200003f8

080084a4 <__malloc_lock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	@ (80084ac <__malloc_lock+0x8>)
 80084a6:	f7ff bf02 	b.w	80082ae <__retarget_lock_acquire_recursive>
 80084aa:	bf00      	nop
 80084ac:	200003f0 	.word	0x200003f0

080084b0 <__malloc_unlock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__malloc_unlock+0x8>)
 80084b2:	f7ff befd 	b.w	80082b0 <__retarget_lock_release_recursive>
 80084b6:	bf00      	nop
 80084b8:	200003f0 	.word	0x200003f0

080084bc <__ssputs_r>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	461f      	mov	r7, r3
 80084c2:	688e      	ldr	r6, [r1, #8]
 80084c4:	4682      	mov	sl, r0
 80084c6:	42be      	cmp	r6, r7
 80084c8:	460c      	mov	r4, r1
 80084ca:	4690      	mov	r8, r2
 80084cc:	680b      	ldr	r3, [r1, #0]
 80084ce:	d82d      	bhi.n	800852c <__ssputs_r+0x70>
 80084d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084d8:	d026      	beq.n	8008528 <__ssputs_r+0x6c>
 80084da:	6965      	ldr	r5, [r4, #20]
 80084dc:	6909      	ldr	r1, [r1, #16]
 80084de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e2:	eba3 0901 	sub.w	r9, r3, r1
 80084e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ea:	1c7b      	adds	r3, r7, #1
 80084ec:	444b      	add	r3, r9
 80084ee:	106d      	asrs	r5, r5, #1
 80084f0:	429d      	cmp	r5, r3
 80084f2:	bf38      	it	cc
 80084f4:	461d      	movcc	r5, r3
 80084f6:	0553      	lsls	r3, r2, #21
 80084f8:	d527      	bpl.n	800854a <__ssputs_r+0x8e>
 80084fa:	4629      	mov	r1, r5
 80084fc:	f7ff ff52 	bl	80083a4 <_malloc_r>
 8008500:	4606      	mov	r6, r0
 8008502:	b360      	cbz	r0, 800855e <__ssputs_r+0xa2>
 8008504:	464a      	mov	r2, r9
 8008506:	6921      	ldr	r1, [r4, #16]
 8008508:	f7ff fed3 	bl	80082b2 <memcpy>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	6126      	str	r6, [r4, #16]
 800851a:	444e      	add	r6, r9
 800851c:	6026      	str	r6, [r4, #0]
 800851e:	463e      	mov	r6, r7
 8008520:	6165      	str	r5, [r4, #20]
 8008522:	eba5 0509 	sub.w	r5, r5, r9
 8008526:	60a5      	str	r5, [r4, #8]
 8008528:	42be      	cmp	r6, r7
 800852a:	d900      	bls.n	800852e <__ssputs_r+0x72>
 800852c:	463e      	mov	r6, r7
 800852e:	4632      	mov	r2, r6
 8008530:	4641      	mov	r1, r8
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	f000 fbb5 	bl	8008ca2 <memmove>
 8008538:	2000      	movs	r0, #0
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	1b9b      	subs	r3, r3, r6
 800853e:	60a3      	str	r3, [r4, #8]
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	4433      	add	r3, r6
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	462a      	mov	r2, r5
 800854c:	f000 fc04 	bl	8008d58 <_realloc_r>
 8008550:	4606      	mov	r6, r0
 8008552:	2800      	cmp	r0, #0
 8008554:	d1e0      	bne.n	8008518 <__ssputs_r+0x5c>
 8008556:	4650      	mov	r0, sl
 8008558:	6921      	ldr	r1, [r4, #16]
 800855a:	f7ff feb9 	bl	80082d0 <_free_r>
 800855e:	230c      	movs	r3, #12
 8008560:	f8ca 3000 	str.w	r3, [sl]
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
 800856a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	e7e9      	b.n	8008546 <__ssputs_r+0x8a>
	...

08008574 <_svfiprintf_r>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	4698      	mov	r8, r3
 800857a:	898b      	ldrh	r3, [r1, #12]
 800857c:	4607      	mov	r7, r0
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	460d      	mov	r5, r1
 8008582:	4614      	mov	r4, r2
 8008584:	b09d      	sub	sp, #116	@ 0x74
 8008586:	d510      	bpl.n	80085aa <_svfiprintf_r+0x36>
 8008588:	690b      	ldr	r3, [r1, #16]
 800858a:	b973      	cbnz	r3, 80085aa <_svfiprintf_r+0x36>
 800858c:	2140      	movs	r1, #64	@ 0x40
 800858e:	f7ff ff09 	bl	80083a4 <_malloc_r>
 8008592:	6028      	str	r0, [r5, #0]
 8008594:	6128      	str	r0, [r5, #16]
 8008596:	b930      	cbnz	r0, 80085a6 <_svfiprintf_r+0x32>
 8008598:	230c      	movs	r3, #12
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b01d      	add	sp, #116	@ 0x74
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	2340      	movs	r3, #64	@ 0x40
 80085a8:	616b      	str	r3, [r5, #20]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ae:	2320      	movs	r3, #32
 80085b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085b4:	2330      	movs	r3, #48	@ 0x30
 80085b6:	f04f 0901 	mov.w	r9, #1
 80085ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80085be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008758 <_svfiprintf_r+0x1e4>
 80085c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085c6:	4623      	mov	r3, r4
 80085c8:	469a      	mov	sl, r3
 80085ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ce:	b10a      	cbz	r2, 80085d4 <_svfiprintf_r+0x60>
 80085d0:	2a25      	cmp	r2, #37	@ 0x25
 80085d2:	d1f9      	bne.n	80085c8 <_svfiprintf_r+0x54>
 80085d4:	ebba 0b04 	subs.w	fp, sl, r4
 80085d8:	d00b      	beq.n	80085f2 <_svfiprintf_r+0x7e>
 80085da:	465b      	mov	r3, fp
 80085dc:	4622      	mov	r2, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff ff6b 	bl	80084bc <__ssputs_r>
 80085e6:	3001      	adds	r0, #1
 80085e8:	f000 80a7 	beq.w	800873a <_svfiprintf_r+0x1c6>
 80085ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ee:	445a      	add	r2, fp
 80085f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80085f2:	f89a 3000 	ldrb.w	r3, [sl]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 809f 	beq.w	800873a <_svfiprintf_r+0x1c6>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008606:	f10a 0a01 	add.w	sl, sl, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	9307      	str	r3, [sp, #28]
 800860e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008612:	931a      	str	r3, [sp, #104]	@ 0x68
 8008614:	4654      	mov	r4, sl
 8008616:	2205      	movs	r2, #5
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	484e      	ldr	r0, [pc, #312]	@ (8008758 <_svfiprintf_r+0x1e4>)
 800861e:	f000 fb8d 	bl	8008d3c <memchr>
 8008622:	9a04      	ldr	r2, [sp, #16]
 8008624:	b9d8      	cbnz	r0, 800865e <_svfiprintf_r+0xea>
 8008626:	06d0      	lsls	r0, r2, #27
 8008628:	bf44      	itt	mi
 800862a:	2320      	movmi	r3, #32
 800862c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008630:	0711      	lsls	r1, r2, #28
 8008632:	bf44      	itt	mi
 8008634:	232b      	movmi	r3, #43	@ 0x2b
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863a:	f89a 3000 	ldrb.w	r3, [sl]
 800863e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008640:	d015      	beq.n	800866e <_svfiprintf_r+0xfa>
 8008642:	4654      	mov	r4, sl
 8008644:	2000      	movs	r0, #0
 8008646:	f04f 0c0a 	mov.w	ip, #10
 800864a:	9a07      	ldr	r2, [sp, #28]
 800864c:	4621      	mov	r1, r4
 800864e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008652:	3b30      	subs	r3, #48	@ 0x30
 8008654:	2b09      	cmp	r3, #9
 8008656:	d94b      	bls.n	80086f0 <_svfiprintf_r+0x17c>
 8008658:	b1b0      	cbz	r0, 8008688 <_svfiprintf_r+0x114>
 800865a:	9207      	str	r2, [sp, #28]
 800865c:	e014      	b.n	8008688 <_svfiprintf_r+0x114>
 800865e:	eba0 0308 	sub.w	r3, r0, r8
 8008662:	fa09 f303 	lsl.w	r3, r9, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	46a2      	mov	sl, r4
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	e7d2      	b.n	8008614 <_svfiprintf_r+0xa0>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	9103      	str	r1, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfbb      	ittet	lt
 800867a:	425b      	neglt	r3, r3
 800867c:	f042 0202 	orrlt.w	r2, r2, #2
 8008680:	9307      	strge	r3, [sp, #28]
 8008682:	9307      	strlt	r3, [sp, #28]
 8008684:	bfb8      	it	lt
 8008686:	9204      	strlt	r2, [sp, #16]
 8008688:	7823      	ldrb	r3, [r4, #0]
 800868a:	2b2e      	cmp	r3, #46	@ 0x2e
 800868c:	d10a      	bne.n	80086a4 <_svfiprintf_r+0x130>
 800868e:	7863      	ldrb	r3, [r4, #1]
 8008690:	2b2a      	cmp	r3, #42	@ 0x2a
 8008692:	d132      	bne.n	80086fa <_svfiprintf_r+0x186>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	3402      	adds	r4, #2
 8008698:	1d1a      	adds	r2, r3, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	9203      	str	r2, [sp, #12]
 800869e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800875c <_svfiprintf_r+0x1e8>
 80086a8:	2203      	movs	r2, #3
 80086aa:	4650      	mov	r0, sl
 80086ac:	7821      	ldrb	r1, [r4, #0]
 80086ae:	f000 fb45 	bl	8008d3c <memchr>
 80086b2:	b138      	cbz	r0, 80086c4 <_svfiprintf_r+0x150>
 80086b4:	2240      	movs	r2, #64	@ 0x40
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	eba0 000a 	sub.w	r0, r0, sl
 80086bc:	4082      	lsls	r2, r0
 80086be:	4313      	orrs	r3, r2
 80086c0:	3401      	adds	r4, #1
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c8:	2206      	movs	r2, #6
 80086ca:	4825      	ldr	r0, [pc, #148]	@ (8008760 <_svfiprintf_r+0x1ec>)
 80086cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d0:	f000 fb34 	bl	8008d3c <memchr>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d036      	beq.n	8008746 <_svfiprintf_r+0x1d2>
 80086d8:	4b22      	ldr	r3, [pc, #136]	@ (8008764 <_svfiprintf_r+0x1f0>)
 80086da:	bb1b      	cbnz	r3, 8008724 <_svfiprintf_r+0x1b0>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	3307      	adds	r3, #7
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	3308      	adds	r3, #8
 80086e6:	9303      	str	r3, [sp, #12]
 80086e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ea:	4433      	add	r3, r6
 80086ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ee:	e76a      	b.n	80085c6 <_svfiprintf_r+0x52>
 80086f0:	460c      	mov	r4, r1
 80086f2:	2001      	movs	r0, #1
 80086f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f8:	e7a8      	b.n	800864c <_svfiprintf_r+0xd8>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f04f 0c0a 	mov.w	ip, #10
 8008700:	4619      	mov	r1, r3
 8008702:	3401      	adds	r4, #1
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	4620      	mov	r0, r4
 8008708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800870c:	3a30      	subs	r2, #48	@ 0x30
 800870e:	2a09      	cmp	r2, #9
 8008710:	d903      	bls.n	800871a <_svfiprintf_r+0x1a6>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0c6      	beq.n	80086a4 <_svfiprintf_r+0x130>
 8008716:	9105      	str	r1, [sp, #20]
 8008718:	e7c4      	b.n	80086a4 <_svfiprintf_r+0x130>
 800871a:	4604      	mov	r4, r0
 800871c:	2301      	movs	r3, #1
 800871e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008722:	e7f0      	b.n	8008706 <_svfiprintf_r+0x192>
 8008724:	ab03      	add	r3, sp, #12
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	462a      	mov	r2, r5
 800872a:	4638      	mov	r0, r7
 800872c:	4b0e      	ldr	r3, [pc, #56]	@ (8008768 <_svfiprintf_r+0x1f4>)
 800872e:	a904      	add	r1, sp, #16
 8008730:	f3af 8000 	nop.w
 8008734:	1c42      	adds	r2, r0, #1
 8008736:	4606      	mov	r6, r0
 8008738:	d1d6      	bne.n	80086e8 <_svfiprintf_r+0x174>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	065b      	lsls	r3, r3, #25
 800873e:	f53f af2d 	bmi.w	800859c <_svfiprintf_r+0x28>
 8008742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008744:	e72c      	b.n	80085a0 <_svfiprintf_r+0x2c>
 8008746:	ab03      	add	r3, sp, #12
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	462a      	mov	r2, r5
 800874c:	4638      	mov	r0, r7
 800874e:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <_svfiprintf_r+0x1f4>)
 8008750:	a904      	add	r1, sp, #16
 8008752:	f000 f87d 	bl	8008850 <_printf_i>
 8008756:	e7ed      	b.n	8008734 <_svfiprintf_r+0x1c0>
 8008758:	0800962c 	.word	0x0800962c
 800875c:	08009632 	.word	0x08009632
 8008760:	08009636 	.word	0x08009636
 8008764:	00000000 	.word	0x00000000
 8008768:	080084bd 	.word	0x080084bd

0800876c <_printf_common>:
 800876c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	4616      	mov	r6, r2
 8008772:	4698      	mov	r8, r3
 8008774:	688a      	ldr	r2, [r1, #8]
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	4607      	mov	r7, r0
 800877a:	4293      	cmp	r3, r2
 800877c:	bfb8      	it	lt
 800877e:	4613      	movlt	r3, r2
 8008780:	6033      	str	r3, [r6, #0]
 8008782:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008786:	460c      	mov	r4, r1
 8008788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800878c:	b10a      	cbz	r2, 8008792 <_printf_common+0x26>
 800878e:	3301      	adds	r3, #1
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	0699      	lsls	r1, r3, #26
 8008796:	bf42      	ittt	mi
 8008798:	6833      	ldrmi	r3, [r6, #0]
 800879a:	3302      	addmi	r3, #2
 800879c:	6033      	strmi	r3, [r6, #0]
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	f015 0506 	ands.w	r5, r5, #6
 80087a4:	d106      	bne.n	80087b4 <_printf_common+0x48>
 80087a6:	f104 0a19 	add.w	sl, r4, #25
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	6832      	ldr	r2, [r6, #0]
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dc2b      	bgt.n	800880c <_printf_common+0xa0>
 80087b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087b8:	6822      	ldr	r2, [r4, #0]
 80087ba:	3b00      	subs	r3, #0
 80087bc:	bf18      	it	ne
 80087be:	2301      	movne	r3, #1
 80087c0:	0692      	lsls	r2, r2, #26
 80087c2:	d430      	bmi.n	8008826 <_printf_common+0xba>
 80087c4:	4641      	mov	r1, r8
 80087c6:	4638      	mov	r0, r7
 80087c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087cc:	47c8      	blx	r9
 80087ce:	3001      	adds	r0, #1
 80087d0:	d023      	beq.n	800881a <_printf_common+0xae>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	6922      	ldr	r2, [r4, #16]
 80087d6:	f003 0306 	and.w	r3, r3, #6
 80087da:	2b04      	cmp	r3, #4
 80087dc:	bf14      	ite	ne
 80087de:	2500      	movne	r5, #0
 80087e0:	6833      	ldreq	r3, [r6, #0]
 80087e2:	f04f 0600 	mov.w	r6, #0
 80087e6:	bf08      	it	eq
 80087e8:	68e5      	ldreq	r5, [r4, #12]
 80087ea:	f104 041a 	add.w	r4, r4, #26
 80087ee:	bf08      	it	eq
 80087f0:	1aed      	subeq	r5, r5, r3
 80087f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087f6:	bf08      	it	eq
 80087f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfc4      	itt	gt
 8008800:	1a9b      	subgt	r3, r3, r2
 8008802:	18ed      	addgt	r5, r5, r3
 8008804:	42b5      	cmp	r5, r6
 8008806:	d11a      	bne.n	800883e <_printf_common+0xd2>
 8008808:	2000      	movs	r0, #0
 800880a:	e008      	b.n	800881e <_printf_common+0xb2>
 800880c:	2301      	movs	r3, #1
 800880e:	4652      	mov	r2, sl
 8008810:	4641      	mov	r1, r8
 8008812:	4638      	mov	r0, r7
 8008814:	47c8      	blx	r9
 8008816:	3001      	adds	r0, #1
 8008818:	d103      	bne.n	8008822 <_printf_common+0xb6>
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008822:	3501      	adds	r5, #1
 8008824:	e7c1      	b.n	80087aa <_printf_common+0x3e>
 8008826:	2030      	movs	r0, #48	@ 0x30
 8008828:	18e1      	adds	r1, r4, r3
 800882a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008834:	4422      	add	r2, r4
 8008836:	3302      	adds	r3, #2
 8008838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800883c:	e7c2      	b.n	80087c4 <_printf_common+0x58>
 800883e:	2301      	movs	r3, #1
 8008840:	4622      	mov	r2, r4
 8008842:	4641      	mov	r1, r8
 8008844:	4638      	mov	r0, r7
 8008846:	47c8      	blx	r9
 8008848:	3001      	adds	r0, #1
 800884a:	d0e6      	beq.n	800881a <_printf_common+0xae>
 800884c:	3601      	adds	r6, #1
 800884e:	e7d9      	b.n	8008804 <_printf_common+0x98>

08008850 <_printf_i>:
 8008850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	7e0f      	ldrb	r7, [r1, #24]
 8008856:	4691      	mov	r9, r2
 8008858:	2f78      	cmp	r7, #120	@ 0x78
 800885a:	4680      	mov	r8, r0
 800885c:	460c      	mov	r4, r1
 800885e:	469a      	mov	sl, r3
 8008860:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008866:	d807      	bhi.n	8008878 <_printf_i+0x28>
 8008868:	2f62      	cmp	r7, #98	@ 0x62
 800886a:	d80a      	bhi.n	8008882 <_printf_i+0x32>
 800886c:	2f00      	cmp	r7, #0
 800886e:	f000 80d3 	beq.w	8008a18 <_printf_i+0x1c8>
 8008872:	2f58      	cmp	r7, #88	@ 0x58
 8008874:	f000 80ba 	beq.w	80089ec <_printf_i+0x19c>
 8008878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800887c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008880:	e03a      	b.n	80088f8 <_printf_i+0xa8>
 8008882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008886:	2b15      	cmp	r3, #21
 8008888:	d8f6      	bhi.n	8008878 <_printf_i+0x28>
 800888a:	a101      	add	r1, pc, #4	@ (adr r1, 8008890 <_printf_i+0x40>)
 800888c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088fd 	.word	0x080088fd
 8008898:	08008879 	.word	0x08008879
 800889c:	08008879 	.word	0x08008879
 80088a0:	08008879 	.word	0x08008879
 80088a4:	08008879 	.word	0x08008879
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008879 	.word	0x08008879
 80088b0:	08008879 	.word	0x08008879
 80088b4:	08008879 	.word	0x08008879
 80088b8:	08008879 	.word	0x08008879
 80088bc:	080089ff 	.word	0x080089ff
 80088c0:	08008927 	.word	0x08008927
 80088c4:	080089b9 	.word	0x080089b9
 80088c8:	08008879 	.word	0x08008879
 80088cc:	08008879 	.word	0x08008879
 80088d0:	08008a21 	.word	0x08008a21
 80088d4:	08008879 	.word	0x08008879
 80088d8:	08008927 	.word	0x08008927
 80088dc:	08008879 	.word	0x08008879
 80088e0:	08008879 	.word	0x08008879
 80088e4:	080089c1 	.word	0x080089c1
 80088e8:	6833      	ldr	r3, [r6, #0]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6032      	str	r2, [r6, #0]
 80088f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088f8:	2301      	movs	r3, #1
 80088fa:	e09e      	b.n	8008a3a <_printf_i+0x1ea>
 80088fc:	6833      	ldr	r3, [r6, #0]
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	1d19      	adds	r1, r3, #4
 8008902:	6031      	str	r1, [r6, #0]
 8008904:	0606      	lsls	r6, r0, #24
 8008906:	d501      	bpl.n	800890c <_printf_i+0xbc>
 8008908:	681d      	ldr	r5, [r3, #0]
 800890a:	e003      	b.n	8008914 <_printf_i+0xc4>
 800890c:	0645      	lsls	r5, r0, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0xb8>
 8008910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008914:	2d00      	cmp	r5, #0
 8008916:	da03      	bge.n	8008920 <_printf_i+0xd0>
 8008918:	232d      	movs	r3, #45	@ 0x2d
 800891a:	426d      	negs	r5, r5
 800891c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008920:	230a      	movs	r3, #10
 8008922:	4859      	ldr	r0, [pc, #356]	@ (8008a88 <_printf_i+0x238>)
 8008924:	e011      	b.n	800894a <_printf_i+0xfa>
 8008926:	6821      	ldr	r1, [r4, #0]
 8008928:	6833      	ldr	r3, [r6, #0]
 800892a:	0608      	lsls	r0, r1, #24
 800892c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008930:	d402      	bmi.n	8008938 <_printf_i+0xe8>
 8008932:	0649      	lsls	r1, r1, #25
 8008934:	bf48      	it	mi
 8008936:	b2ad      	uxthmi	r5, r5
 8008938:	2f6f      	cmp	r7, #111	@ 0x6f
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	bf14      	ite	ne
 800893e:	230a      	movne	r3, #10
 8008940:	2308      	moveq	r3, #8
 8008942:	4851      	ldr	r0, [pc, #324]	@ (8008a88 <_printf_i+0x238>)
 8008944:	2100      	movs	r1, #0
 8008946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800894a:	6866      	ldr	r6, [r4, #4]
 800894c:	2e00      	cmp	r6, #0
 800894e:	bfa8      	it	ge
 8008950:	6821      	ldrge	r1, [r4, #0]
 8008952:	60a6      	str	r6, [r4, #8]
 8008954:	bfa4      	itt	ge
 8008956:	f021 0104 	bicge.w	r1, r1, #4
 800895a:	6021      	strge	r1, [r4, #0]
 800895c:	b90d      	cbnz	r5, 8008962 <_printf_i+0x112>
 800895e:	2e00      	cmp	r6, #0
 8008960:	d04b      	beq.n	80089fa <_printf_i+0x1aa>
 8008962:	4616      	mov	r6, r2
 8008964:	fbb5 f1f3 	udiv	r1, r5, r3
 8008968:	fb03 5711 	mls	r7, r3, r1, r5
 800896c:	5dc7      	ldrb	r7, [r0, r7]
 800896e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008972:	462f      	mov	r7, r5
 8008974:	42bb      	cmp	r3, r7
 8008976:	460d      	mov	r5, r1
 8008978:	d9f4      	bls.n	8008964 <_printf_i+0x114>
 800897a:	2b08      	cmp	r3, #8
 800897c:	d10b      	bne.n	8008996 <_printf_i+0x146>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	07df      	lsls	r7, r3, #31
 8008982:	d508      	bpl.n	8008996 <_printf_i+0x146>
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	6861      	ldr	r1, [r4, #4]
 8008988:	4299      	cmp	r1, r3
 800898a:	bfde      	ittt	le
 800898c:	2330      	movle	r3, #48	@ 0x30
 800898e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008996:	1b92      	subs	r2, r2, r6
 8008998:	6122      	str	r2, [r4, #16]
 800899a:	464b      	mov	r3, r9
 800899c:	4621      	mov	r1, r4
 800899e:	4640      	mov	r0, r8
 80089a0:	f8cd a000 	str.w	sl, [sp]
 80089a4:	aa03      	add	r2, sp, #12
 80089a6:	f7ff fee1 	bl	800876c <_printf_common>
 80089aa:	3001      	adds	r0, #1
 80089ac:	d14a      	bne.n	8008a44 <_printf_i+0x1f4>
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	b004      	add	sp, #16
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	f043 0320 	orr.w	r3, r3, #32
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	2778      	movs	r7, #120	@ 0x78
 80089c2:	4832      	ldr	r0, [pc, #200]	@ (8008a8c <_printf_i+0x23c>)
 80089c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	6831      	ldr	r1, [r6, #0]
 80089cc:	061f      	lsls	r7, r3, #24
 80089ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80089d2:	d402      	bmi.n	80089da <_printf_i+0x18a>
 80089d4:	065f      	lsls	r7, r3, #25
 80089d6:	bf48      	it	mi
 80089d8:	b2ad      	uxthmi	r5, r5
 80089da:	6031      	str	r1, [r6, #0]
 80089dc:	07d9      	lsls	r1, r3, #31
 80089de:	bf44      	itt	mi
 80089e0:	f043 0320 	orrmi.w	r3, r3, #32
 80089e4:	6023      	strmi	r3, [r4, #0]
 80089e6:	b11d      	cbz	r5, 80089f0 <_printf_i+0x1a0>
 80089e8:	2310      	movs	r3, #16
 80089ea:	e7ab      	b.n	8008944 <_printf_i+0xf4>
 80089ec:	4826      	ldr	r0, [pc, #152]	@ (8008a88 <_printf_i+0x238>)
 80089ee:	e7e9      	b.n	80089c4 <_printf_i+0x174>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	f023 0320 	bic.w	r3, r3, #32
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	e7f6      	b.n	80089e8 <_printf_i+0x198>
 80089fa:	4616      	mov	r6, r2
 80089fc:	e7bd      	b.n	800897a <_printf_i+0x12a>
 80089fe:	6833      	ldr	r3, [r6, #0]
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	1d18      	adds	r0, r3, #4
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	6030      	str	r0, [r6, #0]
 8008a08:	062e      	lsls	r6, r5, #24
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	d501      	bpl.n	8008a12 <_printf_i+0x1c2>
 8008a0e:	6019      	str	r1, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <_printf_i+0x1c8>
 8008a12:	0668      	lsls	r0, r5, #25
 8008a14:	d5fb      	bpl.n	8008a0e <_printf_i+0x1be>
 8008a16:	8019      	strh	r1, [r3, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4616      	mov	r6, r2
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	e7bc      	b.n	800899a <_printf_i+0x14a>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	2100      	movs	r1, #0
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	6032      	str	r2, [r6, #0]
 8008a28:	681e      	ldr	r6, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f985 	bl	8008d3c <memchr>
 8008a32:	b108      	cbz	r0, 8008a38 <_printf_i+0x1e8>
 8008a34:	1b80      	subs	r0, r0, r6
 8008a36:	6060      	str	r0, [r4, #4]
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a42:	e7aa      	b.n	800899a <_printf_i+0x14a>
 8008a44:	4632      	mov	r2, r6
 8008a46:	4649      	mov	r1, r9
 8008a48:	4640      	mov	r0, r8
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	47d0      	blx	sl
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0ad      	beq.n	80089ae <_printf_i+0x15e>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	079b      	lsls	r3, r3, #30
 8008a56:	d413      	bmi.n	8008a80 <_printf_i+0x230>
 8008a58:	68e0      	ldr	r0, [r4, #12]
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	4298      	cmp	r0, r3
 8008a5e:	bfb8      	it	lt
 8008a60:	4618      	movlt	r0, r3
 8008a62:	e7a6      	b.n	80089b2 <_printf_i+0x162>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4632      	mov	r2, r6
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	47d0      	blx	sl
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d09d      	beq.n	80089ae <_printf_i+0x15e>
 8008a72:	3501      	adds	r5, #1
 8008a74:	68e3      	ldr	r3, [r4, #12]
 8008a76:	9903      	ldr	r1, [sp, #12]
 8008a78:	1a5b      	subs	r3, r3, r1
 8008a7a:	42ab      	cmp	r3, r5
 8008a7c:	dcf2      	bgt.n	8008a64 <_printf_i+0x214>
 8008a7e:	e7eb      	b.n	8008a58 <_printf_i+0x208>
 8008a80:	2500      	movs	r5, #0
 8008a82:	f104 0619 	add.w	r6, r4, #25
 8008a86:	e7f5      	b.n	8008a74 <_printf_i+0x224>
 8008a88:	0800963d 	.word	0x0800963d
 8008a8c:	0800964e 	.word	0x0800964e

08008a90 <__sflush_r>:
 8008a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	0716      	lsls	r6, r2, #28
 8008a98:	4605      	mov	r5, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	d454      	bmi.n	8008b48 <__sflush_r+0xb8>
 8008a9e:	684b      	ldr	r3, [r1, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc02      	bgt.n	8008aaa <__sflush_r+0x1a>
 8008aa4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd48      	ble.n	8008b3c <__sflush_r+0xac>
 8008aaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	d045      	beq.n	8008b3c <__sflush_r+0xac>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ab6:	682f      	ldr	r7, [r5, #0]
 8008ab8:	6a21      	ldr	r1, [r4, #32]
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	d030      	beq.n	8008b20 <__sflush_r+0x90>
 8008abe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	0759      	lsls	r1, r3, #29
 8008ac4:	d505      	bpl.n	8008ad2 <__sflush_r+0x42>
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008acc:	b10b      	cbz	r3, 8008ad2 <__sflush_r+0x42>
 8008ace:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ad0:	1ad2      	subs	r2, r2, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	47b0      	blx	r6
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	d106      	bne.n	8008af0 <__sflush_r+0x60>
 8008ae2:	6829      	ldr	r1, [r5, #0]
 8008ae4:	291d      	cmp	r1, #29
 8008ae6:	d82b      	bhi.n	8008b40 <__sflush_r+0xb0>
 8008ae8:	4a28      	ldr	r2, [pc, #160]	@ (8008b8c <__sflush_r+0xfc>)
 8008aea:	410a      	asrs	r2, r1
 8008aec:	07d6      	lsls	r6, r2, #31
 8008aee:	d427      	bmi.n	8008b40 <__sflush_r+0xb0>
 8008af0:	2200      	movs	r2, #0
 8008af2:	6062      	str	r2, [r4, #4]
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	04d9      	lsls	r1, r3, #19
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	d504      	bpl.n	8008b06 <__sflush_r+0x76>
 8008afc:	1c42      	adds	r2, r0, #1
 8008afe:	d101      	bne.n	8008b04 <__sflush_r+0x74>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	b903      	cbnz	r3, 8008b06 <__sflush_r+0x76>
 8008b04:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b08:	602f      	str	r7, [r5, #0]
 8008b0a:	b1b9      	cbz	r1, 8008b3c <__sflush_r+0xac>
 8008b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b10:	4299      	cmp	r1, r3
 8008b12:	d002      	beq.n	8008b1a <__sflush_r+0x8a>
 8008b14:	4628      	mov	r0, r5
 8008b16:	f7ff fbdb 	bl	80082d0 <_free_r>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b1e:	e00d      	b.n	8008b3c <__sflush_r+0xac>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b0      	blx	r6
 8008b26:	4602      	mov	r2, r0
 8008b28:	1c50      	adds	r0, r2, #1
 8008b2a:	d1c9      	bne.n	8008ac0 <__sflush_r+0x30>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0c6      	beq.n	8008ac0 <__sflush_r+0x30>
 8008b32:	2b1d      	cmp	r3, #29
 8008b34:	d001      	beq.n	8008b3a <__sflush_r+0xaa>
 8008b36:	2b16      	cmp	r3, #22
 8008b38:	d11d      	bne.n	8008b76 <__sflush_r+0xe6>
 8008b3a:	602f      	str	r7, [r5, #0]
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e021      	b.n	8008b84 <__sflush_r+0xf4>
 8008b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b44:	b21b      	sxth	r3, r3
 8008b46:	e01a      	b.n	8008b7e <__sflush_r+0xee>
 8008b48:	690f      	ldr	r7, [r1, #16]
 8008b4a:	2f00      	cmp	r7, #0
 8008b4c:	d0f6      	beq.n	8008b3c <__sflush_r+0xac>
 8008b4e:	0793      	lsls	r3, r2, #30
 8008b50:	bf18      	it	ne
 8008b52:	2300      	movne	r3, #0
 8008b54:	680e      	ldr	r6, [r1, #0]
 8008b56:	bf08      	it	eq
 8008b58:	694b      	ldreq	r3, [r1, #20]
 8008b5a:	1bf6      	subs	r6, r6, r7
 8008b5c:	600f      	str	r7, [r1, #0]
 8008b5e:	608b      	str	r3, [r1, #8]
 8008b60:	2e00      	cmp	r6, #0
 8008b62:	ddeb      	ble.n	8008b3c <__sflush_r+0xac>
 8008b64:	4633      	mov	r3, r6
 8008b66:	463a      	mov	r2, r7
 8008b68:	4628      	mov	r0, r5
 8008b6a:	6a21      	ldr	r1, [r4, #32]
 8008b6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008b70:	47e0      	blx	ip
 8008b72:	2800      	cmp	r0, #0
 8008b74:	dc07      	bgt.n	8008b86 <__sflush_r+0xf6>
 8008b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b86:	4407      	add	r7, r0
 8008b88:	1a36      	subs	r6, r6, r0
 8008b8a:	e7e9      	b.n	8008b60 <__sflush_r+0xd0>
 8008b8c:	dfbffffe 	.word	0xdfbffffe

08008b90 <_fflush_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	690b      	ldr	r3, [r1, #16]
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b913      	cbnz	r3, 8008ba0 <_fflush_r+0x10>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	b118      	cbz	r0, 8008baa <_fflush_r+0x1a>
 8008ba2:	6a03      	ldr	r3, [r0, #32]
 8008ba4:	b90b      	cbnz	r3, 8008baa <_fflush_r+0x1a>
 8008ba6:	f7ff f955 	bl	8007e54 <__sinit>
 8008baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f3      	beq.n	8008b9a <_fflush_r+0xa>
 8008bb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bb4:	07d0      	lsls	r0, r2, #31
 8008bb6:	d404      	bmi.n	8008bc2 <_fflush_r+0x32>
 8008bb8:	0599      	lsls	r1, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <_fflush_r+0x32>
 8008bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bbe:	f7ff fb76 	bl	80082ae <__retarget_lock_acquire_recursive>
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f7ff ff63 	bl	8008a90 <__sflush_r>
 8008bca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bcc:	4605      	mov	r5, r0
 8008bce:	07da      	lsls	r2, r3, #31
 8008bd0:	d4e4      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	059b      	lsls	r3, r3, #22
 8008bd6:	d4e1      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bda:	f7ff fb69 	bl	80082b0 <__retarget_lock_release_recursive>
 8008bde:	e7dd      	b.n	8008b9c <_fflush_r+0xc>

08008be0 <__swhatbuf_r>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	460c      	mov	r4, r1
 8008be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be8:	4615      	mov	r5, r2
 8008bea:	2900      	cmp	r1, #0
 8008bec:	461e      	mov	r6, r3
 8008bee:	b096      	sub	sp, #88	@ 0x58
 8008bf0:	da0c      	bge.n	8008c0c <__swhatbuf_r+0x2c>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bfa:	bf14      	ite	ne
 8008bfc:	2340      	movne	r3, #64	@ 0x40
 8008bfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c02:	2000      	movs	r0, #0
 8008c04:	6031      	str	r1, [r6, #0]
 8008c06:	602b      	str	r3, [r5, #0]
 8008c08:	b016      	add	sp, #88	@ 0x58
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	466a      	mov	r2, sp
 8008c0e:	f000 f863 	bl	8008cd8 <_fstat_r>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	dbed      	blt.n	8008bf2 <__swhatbuf_r+0x12>
 8008c16:	9901      	ldr	r1, [sp, #4]
 8008c18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c20:	4259      	negs	r1, r3
 8008c22:	4159      	adcs	r1, r3
 8008c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c28:	e7eb      	b.n	8008c02 <__swhatbuf_r+0x22>

08008c2a <__smakebuf_r>:
 8008c2a:	898b      	ldrh	r3, [r1, #12]
 8008c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c2e:	079d      	lsls	r5, r3, #30
 8008c30:	4606      	mov	r6, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	d507      	bpl.n	8008c46 <__smakebuf_r+0x1c>
 8008c36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	6123      	str	r3, [r4, #16]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	6163      	str	r3, [r4, #20]
 8008c42:	b003      	add	sp, #12
 8008c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c46:	466a      	mov	r2, sp
 8008c48:	ab01      	add	r3, sp, #4
 8008c4a:	f7ff ffc9 	bl	8008be0 <__swhatbuf_r>
 8008c4e:	9f00      	ldr	r7, [sp, #0]
 8008c50:	4605      	mov	r5, r0
 8008c52:	4639      	mov	r1, r7
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff fba5 	bl	80083a4 <_malloc_r>
 8008c5a:	b948      	cbnz	r0, 8008c70 <__smakebuf_r+0x46>
 8008c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c60:	059a      	lsls	r2, r3, #22
 8008c62:	d4ee      	bmi.n	8008c42 <__smakebuf_r+0x18>
 8008c64:	f023 0303 	bic.w	r3, r3, #3
 8008c68:	f043 0302 	orr.w	r3, r3, #2
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	e7e2      	b.n	8008c36 <__smakebuf_r+0xc>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	9b01      	ldr	r3, [sp, #4]
 8008c7e:	6020      	str	r0, [r4, #0]
 8008c80:	b15b      	cbz	r3, 8008c9a <__smakebuf_r+0x70>
 8008c82:	4630      	mov	r0, r6
 8008c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c88:	f000 f838 	bl	8008cfc <_isatty_r>
 8008c8c:	b128      	cbz	r0, 8008c9a <__smakebuf_r+0x70>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f023 0303 	bic.w	r3, r3, #3
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	431d      	orrs	r5, r3
 8008c9e:	81a5      	strh	r5, [r4, #12]
 8008ca0:	e7cf      	b.n	8008c42 <__smakebuf_r+0x18>

08008ca2 <memmove>:
 8008ca2:	4288      	cmp	r0, r1
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	eb01 0402 	add.w	r4, r1, r2
 8008caa:	d902      	bls.n	8008cb2 <memmove+0x10>
 8008cac:	4284      	cmp	r4, r0
 8008cae:	4623      	mov	r3, r4
 8008cb0:	d807      	bhi.n	8008cc2 <memmove+0x20>
 8008cb2:	1e43      	subs	r3, r0, #1
 8008cb4:	42a1      	cmp	r1, r4
 8008cb6:	d008      	beq.n	8008cca <memmove+0x28>
 8008cb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cc0:	e7f8      	b.n	8008cb4 <memmove+0x12>
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	4402      	add	r2, r0
 8008cc6:	428a      	cmp	r2, r1
 8008cc8:	d100      	bne.n	8008ccc <memmove+0x2a>
 8008cca:	bd10      	pop	{r4, pc}
 8008ccc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cd4:	e7f7      	b.n	8008cc6 <memmove+0x24>
	...

08008cd8 <_fstat_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4d06      	ldr	r5, [pc, #24]	@ (8008cf8 <_fstat_r+0x20>)
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f7fa f98b 	bl	8003000 <_fstat>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d102      	bne.n	8008cf4 <_fstat_r+0x1c>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b103      	cbz	r3, 8008cf4 <_fstat_r+0x1c>
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200003ec 	.word	0x200003ec

08008cfc <_isatty_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4d05      	ldr	r5, [pc, #20]	@ (8008d18 <_isatty_r+0x1c>)
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7fa f989 	bl	800301e <_isatty>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_isatty_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_isatty_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	200003ec 	.word	0x200003ec

08008d1c <_sbrk_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4d05      	ldr	r5, [pc, #20]	@ (8008d38 <_sbrk_r+0x1c>)
 8008d22:	4604      	mov	r4, r0
 8008d24:	4608      	mov	r0, r1
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	f7fa f990 	bl	800304c <_sbrk>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_sbrk_r+0x1a>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_sbrk_r+0x1a>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	200003ec 	.word	0x200003ec

08008d3c <memchr>:
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	b2c9      	uxtb	r1, r1
 8008d42:	4402      	add	r2, r0
 8008d44:	4293      	cmp	r3, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	d101      	bne.n	8008d4e <memchr+0x12>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e003      	b.n	8008d56 <memchr+0x1a>
 8008d4e:	7804      	ldrb	r4, [r0, #0]
 8008d50:	3301      	adds	r3, #1
 8008d52:	428c      	cmp	r4, r1
 8008d54:	d1f6      	bne.n	8008d44 <memchr+0x8>
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <_realloc_r>:
 8008d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4615      	mov	r5, r2
 8008d60:	460c      	mov	r4, r1
 8008d62:	b921      	cbnz	r1, 8008d6e <_realloc_r+0x16>
 8008d64:	4611      	mov	r1, r2
 8008d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	f7ff bb1b 	b.w	80083a4 <_malloc_r>
 8008d6e:	b92a      	cbnz	r2, 8008d7c <_realloc_r+0x24>
 8008d70:	f7ff faae 	bl	80082d0 <_free_r>
 8008d74:	2400      	movs	r4, #0
 8008d76:	4620      	mov	r0, r4
 8008d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7c:	f000 f81a 	bl	8008db4 <_malloc_usable_size_r>
 8008d80:	4285      	cmp	r5, r0
 8008d82:	4606      	mov	r6, r0
 8008d84:	d802      	bhi.n	8008d8c <_realloc_r+0x34>
 8008d86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d8a:	d8f4      	bhi.n	8008d76 <_realloc_r+0x1e>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4640      	mov	r0, r8
 8008d90:	f7ff fb08 	bl	80083a4 <_malloc_r>
 8008d94:	4607      	mov	r7, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d0ec      	beq.n	8008d74 <_realloc_r+0x1c>
 8008d9a:	42b5      	cmp	r5, r6
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4621      	mov	r1, r4
 8008da0:	bf28      	it	cs
 8008da2:	4632      	movcs	r2, r6
 8008da4:	f7ff fa85 	bl	80082b2 <memcpy>
 8008da8:	4621      	mov	r1, r4
 8008daa:	4640      	mov	r0, r8
 8008dac:	f7ff fa90 	bl	80082d0 <_free_r>
 8008db0:	463c      	mov	r4, r7
 8008db2:	e7e0      	b.n	8008d76 <_realloc_r+0x1e>

08008db4 <_malloc_usable_size_r>:
 8008db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db8:	1f18      	subs	r0, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfbc      	itt	lt
 8008dbe:	580b      	ldrlt	r3, [r1, r0]
 8008dc0:	18c0      	addlt	r0, r0, r3
 8008dc2:	4770      	bx	lr

08008dc4 <log>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	f000 f835 	bl	8008e38 <__ieee754_log>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	460f      	mov	r7, r1
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7f7 fe83 	bl	8000ae4 <__aeabi_dcmpun>
 8008dde:	b998      	cbnz	r0, 8008e08 <log+0x44>
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fe72 	bl	8000ad0 <__aeabi_dcmpgt>
 8008dec:	b960      	cbnz	r0, 8008e08 <log+0x44>
 8008dee:	2200      	movs	r2, #0
 8008df0:	2300      	movs	r3, #0
 8008df2:	4620      	mov	r0, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	f7f7 fe43 	bl	8000a80 <__aeabi_dcmpeq>
 8008dfa:	b140      	cbz	r0, 8008e0e <log+0x4a>
 8008dfc:	f7ff fa2c 	bl	8008258 <__errno>
 8008e00:	2322      	movs	r3, #34	@ 0x22
 8008e02:	2600      	movs	r6, #0
 8008e04:	4f06      	ldr	r7, [pc, #24]	@ (8008e20 <log+0x5c>)
 8008e06:	6003      	str	r3, [r0, #0]
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e0e:	f7ff fa23 	bl	8008258 <__errno>
 8008e12:	2321      	movs	r3, #33	@ 0x21
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	4803      	ldr	r0, [pc, #12]	@ (8008e24 <log+0x60>)
 8008e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e1c:	f000 b804 	b.w	8008e28 <nan>
 8008e20:	fff00000 	.word	0xfff00000
 8008e24:	08009631 	.word	0x08009631

08008e28 <nan>:
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4901      	ldr	r1, [pc, #4]	@ (8008e30 <nan+0x8>)
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	7ff80000 	.word	0x7ff80000
 8008e34:	00000000 	.word	0x00000000

08008e38 <__ieee754_log>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	460d      	mov	r5, r1
 8008e46:	b087      	sub	sp, #28
 8008e48:	da24      	bge.n	8008e94 <__ieee754_log+0x5c>
 8008e4a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8008e4e:	4304      	orrs	r4, r0
 8008e50:	d108      	bne.n	8008e64 <__ieee754_log+0x2c>
 8008e52:	2200      	movs	r2, #0
 8008e54:	2300      	movs	r3, #0
 8008e56:	2000      	movs	r0, #0
 8008e58:	49cb      	ldr	r1, [pc, #812]	@ (8009188 <__ieee754_log+0x350>)
 8008e5a:	f7f7 fcd3 	bl	8000804 <__aeabi_ddiv>
 8008e5e:	b007      	add	sp, #28
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	2900      	cmp	r1, #0
 8008e66:	da04      	bge.n	8008e72 <__ieee754_log+0x3a>
 8008e68:	f7f7 f9ea 	bl	8000240 <__aeabi_dsub>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e7f3      	b.n	8008e5a <__ieee754_log+0x22>
 8008e72:	2200      	movs	r2, #0
 8008e74:	4bc5      	ldr	r3, [pc, #788]	@ (800918c <__ieee754_log+0x354>)
 8008e76:	f7f7 fb9b 	bl	80005b0 <__aeabi_dmul>
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	4602      	mov	r2, r0
 8008e80:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8008e84:	48c2      	ldr	r0, [pc, #776]	@ (8009190 <__ieee754_log+0x358>)
 8008e86:	4285      	cmp	r5, r0
 8008e88:	dd06      	ble.n	8008e98 <__ieee754_log+0x60>
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f7f7 f9d9 	bl	8000244 <__adddf3>
 8008e92:	e7e4      	b.n	8008e5e <__ieee754_log+0x26>
 8008e94:	2100      	movs	r1, #0
 8008e96:	e7f5      	b.n	8008e84 <__ieee754_log+0x4c>
 8008e98:	152c      	asrs	r4, r5, #20
 8008e9a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8008e9e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008ea2:	440c      	add	r4, r1
 8008ea4:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8008ea8:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8008eac:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8008eb0:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8008eb4:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8008eb8:	ea41 0305 	orr.w	r3, r1, r5
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4bb4      	ldr	r3, [pc, #720]	@ (8009194 <__ieee754_log+0x35c>)
 8008ec4:	f7f7 f9bc 	bl	8000240 <__aeabi_dsub>
 8008ec8:	1cab      	adds	r3, r5, #2
 8008eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	4682      	mov	sl, r0
 8008ed2:	468b      	mov	fp, r1
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8008edc:	dc53      	bgt.n	8008f86 <__ieee754_log+0x14e>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f7f7 fdce 	bl	8000a80 <__aeabi_dcmpeq>
 8008ee4:	b1d0      	cbz	r0, 8008f1c <__ieee754_log+0xe4>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	f000 8120 	beq.w	800912c <__ieee754_log+0x2f4>
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7f7 faf5 	bl	80004dc <__aeabi_i2d>
 8008ef2:	a391      	add	r3, pc, #580	@ (adr r3, 8009138 <__ieee754_log+0x300>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	4606      	mov	r6, r0
 8008efa:	460f      	mov	r7, r1
 8008efc:	f7f7 fb58 	bl	80005b0 <__aeabi_dmul>
 8008f00:	a38f      	add	r3, pc, #572	@ (adr r3, 8009140 <__ieee754_log+0x308>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	f7f7 fb4f 	bl	80005b0 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	e7b8      	b.n	8008e8e <__ieee754_log+0x56>
 8008f1c:	a38a      	add	r3, pc, #552	@ (adr r3, 8009148 <__ieee754_log+0x310>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	4650      	mov	r0, sl
 8008f24:	4659      	mov	r1, fp
 8008f26:	f7f7 fb43 	bl	80005b0 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	2000      	movs	r0, #0
 8008f30:	4999      	ldr	r1, [pc, #612]	@ (8009198 <__ieee754_log+0x360>)
 8008f32:	f7f7 f985 	bl	8000240 <__aeabi_dsub>
 8008f36:	4652      	mov	r2, sl
 8008f38:	4606      	mov	r6, r0
 8008f3a:	460f      	mov	r7, r1
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4650      	mov	r0, sl
 8008f40:	4659      	mov	r1, fp
 8008f42:	f7f7 fb35 	bl	80005b0 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fb2f 	bl	80005b0 <__aeabi_dmul>
 8008f52:	4606      	mov	r6, r0
 8008f54:	460f      	mov	r7, r1
 8008f56:	b914      	cbnz	r4, 8008f5e <__ieee754_log+0x126>
 8008f58:	4632      	mov	r2, r6
 8008f5a:	463b      	mov	r3, r7
 8008f5c:	e0a0      	b.n	80090a0 <__ieee754_log+0x268>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7f7 fabc 	bl	80004dc <__aeabi_i2d>
 8008f64:	a374      	add	r3, pc, #464	@ (adr r3, 8009138 <__ieee754_log+0x300>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	f7f7 fb1f 	bl	80005b0 <__aeabi_dmul>
 8008f72:	a373      	add	r3, pc, #460	@ (adr r3, 8009140 <__ieee754_log+0x308>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	4604      	mov	r4, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	f7f7 fb16 	bl	80005b0 <__aeabi_dmul>
 8008f84:	e0a5      	b.n	80090d2 <__ieee754_log+0x29a>
 8008f86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008f8a:	f7f7 f95b 	bl	8000244 <__adddf3>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4650      	mov	r0, sl
 8008f94:	4659      	mov	r1, fp
 8008f96:	f7f7 fc35 	bl	8000804 <__aeabi_ddiv>
 8008f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f7f7 fa9c 	bl	80004dc <__aeabi_i2d>
 8008fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fac:	4610      	mov	r0, r2
 8008fae:	4619      	mov	r1, r3
 8008fb0:	f7f7 fafe 	bl	80005b0 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fbc:	f7f7 faf8 	bl	80005b0 <__aeabi_dmul>
 8008fc0:	a363      	add	r3, pc, #396	@ (adr r3, 8009150 <__ieee754_log+0x318>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	4680      	mov	r8, r0
 8008fc8:	4689      	mov	r9, r1
 8008fca:	f7f7 faf1 	bl	80005b0 <__aeabi_dmul>
 8008fce:	a362      	add	r3, pc, #392	@ (adr r3, 8009158 <__ieee754_log+0x320>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f936 	bl	8000244 <__adddf3>
 8008fd8:	4642      	mov	r2, r8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	f7f7 fae8 	bl	80005b0 <__aeabi_dmul>
 8008fe0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009160 <__ieee754_log+0x328>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 f92d 	bl	8000244 <__adddf3>
 8008fea:	4642      	mov	r2, r8
 8008fec:	464b      	mov	r3, r9
 8008fee:	f7f7 fadf 	bl	80005b0 <__aeabi_dmul>
 8008ff2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009168 <__ieee754_log+0x330>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f7f7 f924 	bl	8000244 <__adddf3>
 8008ffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009000:	f7f7 fad6 	bl	80005b0 <__aeabi_dmul>
 8009004:	a35a      	add	r3, pc, #360	@ (adr r3, 8009170 <__ieee754_log+0x338>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 facd 	bl	80005b0 <__aeabi_dmul>
 8009016:	a358      	add	r3, pc, #352	@ (adr r3, 8009178 <__ieee754_log+0x340>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 f912 	bl	8000244 <__adddf3>
 8009020:	4642      	mov	r2, r8
 8009022:	464b      	mov	r3, r9
 8009024:	f7f7 fac4 	bl	80005b0 <__aeabi_dmul>
 8009028:	a355      	add	r3, pc, #340	@ (adr r3, 8009180 <__ieee754_log+0x348>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f909 	bl	8000244 <__adddf3>
 8009032:	4642      	mov	r2, r8
 8009034:	464b      	mov	r3, r9
 8009036:	f7f7 fabb 	bl	80005b0 <__aeabi_dmul>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009042:	f7f7 f8ff 	bl	8000244 <__adddf3>
 8009046:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800904a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800904e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009052:	3551      	adds	r5, #81	@ 0x51
 8009054:	4335      	orrs	r5, r6
 8009056:	2d00      	cmp	r5, #0
 8009058:	4680      	mov	r8, r0
 800905a:	4689      	mov	r9, r1
 800905c:	dd48      	ble.n	80090f0 <__ieee754_log+0x2b8>
 800905e:	2200      	movs	r2, #0
 8009060:	4b4d      	ldr	r3, [pc, #308]	@ (8009198 <__ieee754_log+0x360>)
 8009062:	4650      	mov	r0, sl
 8009064:	4659      	mov	r1, fp
 8009066:	f7f7 faa3 	bl	80005b0 <__aeabi_dmul>
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	f7f7 fa9f 	bl	80005b0 <__aeabi_dmul>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 f8e1 	bl	8000244 <__adddf3>
 8009082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009086:	f7f7 fa93 	bl	80005b0 <__aeabi_dmul>
 800908a:	4680      	mov	r8, r0
 800908c:	4689      	mov	r9, r1
 800908e:	b964      	cbnz	r4, 80090aa <__ieee754_log+0x272>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4630      	mov	r0, r6
 8009096:	4639      	mov	r1, r7
 8009098:	f7f7 f8d2 	bl	8000240 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4650      	mov	r0, sl
 80090a2:	4659      	mov	r1, fp
 80090a4:	f7f7 f8cc 	bl	8000240 <__aeabi_dsub>
 80090a8:	e6d9      	b.n	8008e5e <__ieee754_log+0x26>
 80090aa:	a323      	add	r3, pc, #140	@ (adr r3, 8009138 <__ieee754_log+0x300>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b4:	f7f7 fa7c 	bl	80005b0 <__aeabi_dmul>
 80090b8:	a321      	add	r3, pc, #132	@ (adr r3, 8009140 <__ieee754_log+0x308>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c6:	f7f7 fa73 	bl	80005b0 <__aeabi_dmul>
 80090ca:	4642      	mov	r2, r8
 80090cc:	464b      	mov	r3, r9
 80090ce:	f7f7 f8b9 	bl	8000244 <__adddf3>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4630      	mov	r0, r6
 80090d8:	4639      	mov	r1, r7
 80090da:	f7f7 f8b1 	bl	8000240 <__aeabi_dsub>
 80090de:	4652      	mov	r2, sl
 80090e0:	465b      	mov	r3, fp
 80090e2:	f7f7 f8ad 	bl	8000240 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	e7d9      	b.n	80090a4 <__ieee754_log+0x26c>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4650      	mov	r0, sl
 80090f6:	4659      	mov	r1, fp
 80090f8:	f7f7 f8a2 	bl	8000240 <__aeabi_dsub>
 80090fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009100:	f7f7 fa56 	bl	80005b0 <__aeabi_dmul>
 8009104:	4606      	mov	r6, r0
 8009106:	460f      	mov	r7, r1
 8009108:	2c00      	cmp	r4, #0
 800910a:	f43f af25 	beq.w	8008f58 <__ieee754_log+0x120>
 800910e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009138 <__ieee754_log+0x300>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009118:	f7f7 fa4a 	bl	80005b0 <__aeabi_dmul>
 800911c:	a308      	add	r3, pc, #32	@ (adr r3, 8009140 <__ieee754_log+0x308>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912a:	e729      	b.n	8008f80 <__ieee754_log+0x148>
 800912c:	2000      	movs	r0, #0
 800912e:	2100      	movs	r1, #0
 8009130:	e695      	b.n	8008e5e <__ieee754_log+0x26>
 8009132:	bf00      	nop
 8009134:	f3af 8000 	nop.w
 8009138:	fee00000 	.word	0xfee00000
 800913c:	3fe62e42 	.word	0x3fe62e42
 8009140:	35793c76 	.word	0x35793c76
 8009144:	3dea39ef 	.word	0x3dea39ef
 8009148:	55555555 	.word	0x55555555
 800914c:	3fd55555 	.word	0x3fd55555
 8009150:	df3e5244 	.word	0xdf3e5244
 8009154:	3fc2f112 	.word	0x3fc2f112
 8009158:	96cb03de 	.word	0x96cb03de
 800915c:	3fc74664 	.word	0x3fc74664
 8009160:	94229359 	.word	0x94229359
 8009164:	3fd24924 	.word	0x3fd24924
 8009168:	55555593 	.word	0x55555593
 800916c:	3fe55555 	.word	0x3fe55555
 8009170:	d078c69f 	.word	0xd078c69f
 8009174:	3fc39a09 	.word	0x3fc39a09
 8009178:	1d8e78af 	.word	0x1d8e78af
 800917c:	3fcc71c5 	.word	0x3fcc71c5
 8009180:	9997fa04 	.word	0x9997fa04
 8009184:	3fd99999 	.word	0x3fd99999
 8009188:	c3500000 	.word	0xc3500000
 800918c:	43500000 	.word	0x43500000
 8009190:	7fefffff 	.word	0x7fefffff
 8009194:	3ff00000 	.word	0x3ff00000
 8009198:	3fe00000 	.word	0x3fe00000

0800919c <_init>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr

080091a8 <_fini>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr
