
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ebc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080090a4  080090a4  0000a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009550  08009550  0000b0d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009550  08009550  0000a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009558  08009558  0000b0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009558  08009558  0000a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800955c  0800955c  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009560  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000d4  08009634  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08009634  0000b3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001510a  00000000  00000000  0000b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b66  00000000  00000000  00020207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00023d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5f  00000000  00000000  00025160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228c8  00000000  00000000  000260bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3a6  00000000  00000000  00048987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfe38  00000000  00000000  00062d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122b65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  00122ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00128918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000d4 	.word	0x200000d4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800908c 	.word	0x0800908c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000d8 	.word	0x200000d8
 8000224:	0800908c 	.word	0x0800908c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_frsub>:
 8000bb0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb4:	e002      	b.n	8000bbc <__addsf3>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fsub>:
 8000bb8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bbc <__addsf3>:
 8000bbc:	0042      	lsls	r2, r0, #1
 8000bbe:	bf1f      	itttt	ne
 8000bc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc4:	ea92 0f03 	teqne	r2, r3
 8000bc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd0:	d06a      	beq.n	8000ca8 <__addsf3+0xec>
 8000bd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bda:	bfc1      	itttt	gt
 8000bdc:	18d2      	addgt	r2, r2, r3
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	4048      	eorgt	r0, r1
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	bfb8      	it	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	2b19      	cmp	r3, #25
 8000bea:	bf88      	it	hi
 8000bec:	4770      	bxhi	lr
 8000bee:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c06:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0a:	bf18      	it	ne
 8000c0c:	4249      	negne	r1, r1
 8000c0e:	ea92 0f03 	teq	r2, r3
 8000c12:	d03f      	beq.n	8000c94 <__addsf3+0xd8>
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	fa41 fc03 	asr.w	ip, r1, r3
 8000c1c:	eb10 000c 	adds.w	r0, r0, ip
 8000c20:	f1c3 0320 	rsb	r3, r3, #32
 8000c24:	fa01 f103 	lsl.w	r1, r1, r3
 8000c28:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__addsf3+0x78>
 8000c2e:	4249      	negs	r1, r1
 8000c30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c34:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c38:	d313      	bcc.n	8000c62 <__addsf3+0xa6>
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c3e:	d306      	bcc.n	8000c4e <__addsf3+0x92>
 8000c40:	0840      	lsrs	r0, r0, #1
 8000c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c46:	f102 0201 	add.w	r2, r2, #1
 8000c4a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c4c:	d251      	bcs.n	8000cf2 <__addsf3+0x136>
 8000c4e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	ea40 0003 	orr.w	r0, r0, r3
 8000c60:	4770      	bx	lr
 8000c62:	0049      	lsls	r1, r1, #1
 8000c64:	eb40 0000 	adc.w	r0, r0, r0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c70:	d2ed      	bcs.n	8000c4e <__addsf3+0x92>
 8000c72:	fab0 fc80 	clz	ip, r0
 8000c76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c82:	bfaa      	itet	ge
 8000c84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c88:	4252      	neglt	r2, r2
 8000c8a:	4318      	orrge	r0, r3
 8000c8c:	bfbc      	itt	lt
 8000c8e:	40d0      	lsrlt	r0, r2
 8000c90:	4318      	orrlt	r0, r3
 8000c92:	4770      	bx	lr
 8000c94:	f092 0f00 	teq	r2, #0
 8000c98:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c9c:	bf06      	itte	eq
 8000c9e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	3201      	addeq	r2, #1
 8000ca4:	3b01      	subne	r3, #1
 8000ca6:	e7b5      	b.n	8000c14 <__addsf3+0x58>
 8000ca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb0:	bf18      	it	ne
 8000cb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb6:	d021      	beq.n	8000cfc <__addsf3+0x140>
 8000cb8:	ea92 0f03 	teq	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <__addsf3+0x10c>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea90 0f01 	teq	r0, r1
 8000ccc:	bf1c      	itt	ne
 8000cce:	2000      	movne	r0, #0
 8000cd0:	4770      	bxne	lr
 8000cd2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cd6:	d104      	bne.n	8000ce2 <__addsf3+0x126>
 8000cd8:	0040      	lsls	r0, r0, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ce6:	bf3c      	itt	cc
 8000ce8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cec:	4770      	bxcc	lr
 8000cee:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d00:	bf16      	itet	ne
 8000d02:	4608      	movne	r0, r1
 8000d04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d08:	4601      	movne	r1, r0
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	bf06      	itte	eq
 8000d0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d12:	ea90 0f01 	teqeq	r0, r1
 8000d16:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_ui2f>:
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e004      	b.n	8000d2c <__aeabi_i2f+0x8>
 8000d22:	bf00      	nop

08000d24 <__aeabi_i2f>:
 8000d24:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d28:	bf48      	it	mi
 8000d2a:	4240      	negmi	r0, r0
 8000d2c:	ea5f 0c00 	movs.w	ip, r0
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d38:	4601      	mov	r1, r0
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	e01c      	b.n	8000d7a <__aeabi_l2f+0x2a>

08000d40 <__aeabi_ul2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <__aeabi_l2f+0x14>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_l2f>:
 8000d50:	ea50 0201 	orrs.w	r2, r0, r1
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_l2f+0x14>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	ea5f 0c01 	movs.w	ip, r1
 8000d68:	bf02      	ittt	eq
 8000d6a:	4684      	moveq	ip, r0
 8000d6c:	4601      	moveq	r1, r0
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d74:	bf08      	it	eq
 8000d76:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d7e:	fabc f28c 	clz	r2, ip
 8000d82:	3a08      	subs	r2, #8
 8000d84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d88:	db10      	blt.n	8000dac <__aeabi_l2f+0x5c>
 8000d8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8e:	4463      	add	r3, ip
 8000d90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	f020 0001 	biceq.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	f102 0220 	add.w	r2, r2, #32
 8000db0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fmul>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d06f      	beq.n	8000ec4 <__aeabi_fmul+0xf8>
 8000de4:	441a      	add	r2, r3
 8000de6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dea:	0240      	lsls	r0, r0, #9
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df2:	d01e      	beq.n	8000e32 <__aeabi_fmul+0x66>
 8000df4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e00:	fba0 3101 	umull	r3, r1, r0, r1
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e08:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e0c:	bf3e      	ittt	cc
 8000e0e:	0049      	lslcc	r1, r1, #1
 8000e10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	ea40 0001 	orr.w	r0, r0, r1
 8000e1a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e1e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e20:	d81d      	bhi.n	8000e5e <__aeabi_fmul+0x92>
 8000e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2a:	bf08      	it	eq
 8000e2c:	f020 0001 	biceq.w	r0, r0, #1
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	0249      	lsleq	r1, r1, #9
 8000e3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e46:	3a7f      	subs	r2, #127	@ 0x7f
 8000e48:	bfc2      	ittt	gt
 8000e4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e52:	4770      	bxgt	lr
 8000e54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	dc5d      	bgt.n	8000f1c <__aeabi_fmul+0x150>
 8000e60:	f112 0f19 	cmn.w	r2, #25
 8000e64:	bfdc      	itt	le
 8000e66:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6a:	4770      	bxle	lr
 8000e6c:	f1c2 0200 	rsb	r2, r2, #0
 8000e70:	0041      	lsls	r1, r0, #1
 8000e72:	fa21 f102 	lsr.w	r1, r1, r2
 8000e76:	f1c2 0220 	rsb	r2, r2, #32
 8000e7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e82:	f140 0000 	adc.w	r0, r0, #0
 8000e86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8a:	bf08      	it	eq
 8000e8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e90:	4770      	bx	lr
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xce>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xe6>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fmul+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	bf18      	it	ne
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d00a      	beq.n	8000eea <__aeabi_fmul+0x11e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ede:	d1d8      	bne.n	8000e92 <__aeabi_fmul+0xc6>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f090 0f00 	teq	r0, #0
 8000eee:	bf17      	itett	ne
 8000ef0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef4:	4608      	moveq	r0, r1
 8000ef6:	f091 0f00 	teqne	r1, #0
 8000efa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000efe:	d014      	beq.n	8000f2a <__aeabi_fmul+0x15e>
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d101      	bne.n	8000f0a <__aeabi_fmul+0x13e>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d10f      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f0a:	ea93 0f0c 	teq	r3, ip
 8000f0e:	d103      	bne.n	8000f18 <__aeabi_fmul+0x14c>
 8000f10:	024b      	lsls	r3, r1, #9
 8000f12:	bf18      	it	ne
 8000f14:	4608      	movne	r0, r1
 8000f16:	d108      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f28:	4770      	bx	lr
 8000f2a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f2e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_fdiv>:
 8000f34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f42:	ea92 0f0c 	teqne	r2, ip
 8000f46:	ea93 0f0c 	teqne	r3, ip
 8000f4a:	d069      	beq.n	8001020 <__aeabi_fdiv+0xec>
 8000f4c:	eba2 0203 	sub.w	r2, r2, r3
 8000f50:	ea80 0c01 	eor.w	ip, r0, r1
 8000f54:	0249      	lsls	r1, r1, #9
 8000f56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5a:	d037      	beq.n	8000fcc <__aeabi_fdiv+0x98>
 8000f5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf38      	it	cc
 8000f70:	005b      	lslcc	r3, r3, #1
 8000f72:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f76:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	bf24      	itt	cs
 8000f7e:	1a5b      	subcs	r3, r3, r1
 8000f80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f88:	bf24      	itt	cs
 8000f8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f96:	bf24      	itt	cs
 8000f98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000faa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb6:	d1e0      	bne.n	8000f7a <__aeabi_fdiv+0x46>
 8000fb8:	2afd      	cmp	r2, #253	@ 0xfd
 8000fba:	f63f af50 	bhi.w	8000e5e <__aeabi_fmul+0x92>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc4:	bf08      	it	eq
 8000fc6:	f020 0001 	biceq.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd4:	327f      	adds	r2, #127	@ 0x7f
 8000fd6:	bfc2      	ittt	gt
 8000fd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe0:	4770      	bxgt	lr
 8000fe2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	3a01      	subs	r2, #1
 8000fec:	e737      	b.n	8000e5e <__aeabi_fmul+0x92>
 8000fee:	f092 0f00 	teq	r2, #0
 8000ff2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0040      	lsleq	r0, r0, #1
 8000ffa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ffe:	3a01      	subeq	r2, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xc2>
 8001002:	ea40 000c 	orr.w	r0, r0, ip
 8001006:	f093 0f00 	teq	r3, #0
 800100a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0049      	lsleq	r1, r1, #1
 8001012:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001016:	3b01      	subeq	r3, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xda>
 800101a:	ea41 010c 	orr.w	r1, r1, ip
 800101e:	e795      	b.n	8000f4c <__aeabi_fdiv+0x18>
 8001020:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001024:	ea92 0f0c 	teq	r2, ip
 8001028:	d108      	bne.n	800103c <__aeabi_fdiv+0x108>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	f47f af7d 	bne.w	8000f2a <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	f47f af70 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001038:	4608      	mov	r0, r1
 800103a:	e776      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	d104      	bne.n	800104c <__aeabi_fdiv+0x118>
 8001042:	024b      	lsls	r3, r1, #9
 8001044:	f43f af4c 	beq.w	8000ee0 <__aeabi_fmul+0x114>
 8001048:	4608      	mov	r0, r1
 800104a:	e76e      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800104c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001050:	bf18      	it	ne
 8001052:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	d1ca      	bne.n	8000fee <__aeabi_fdiv+0xba>
 8001058:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800105c:	f47f af5c 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001060:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001064:	f47f af3c 	bne.w	8000ee0 <__aeabi_fmul+0x114>
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800106a:	bf00      	nop

0800106c <__aeabi_f2uiz>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	d20e      	bcs.n	800108e <__aeabi_f2uiz+0x22>
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001074:	d30b      	bcc.n	800108e <__aeabi_f2uiz+0x22>
 8001076:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d409      	bmi.n	8001094 <__aeabi_f2uiz+0x28>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	4770      	bx	lr
 8001094:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001098:	d101      	bne.n	800109e <__aeabi_f2uiz+0x32>
 800109a:	0242      	lsls	r2, r0, #9
 800109c:	d102      	bne.n	80010a4 <__aeabi_f2uiz+0x38>
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_uldivmod>:
 80010ac:	b953      	cbnz	r3, 80010c4 <__aeabi_uldivmod+0x18>
 80010ae:	b94a      	cbnz	r2, 80010c4 <__aeabi_uldivmod+0x18>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	bf08      	it	eq
 80010b4:	2800      	cmpeq	r0, #0
 80010b6:	bf1c      	itt	ne
 80010b8:	f04f 31ff 	movne.w	r1, #4294967295
 80010bc:	f04f 30ff 	movne.w	r0, #4294967295
 80010c0:	f000 b968 	b.w	8001394 <__aeabi_idiv0>
 80010c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010cc:	f000 f806 	bl	80010dc <__udivmoddi4>
 80010d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9d08      	ldr	r5, [sp, #32]
 80010e2:	460c      	mov	r4, r1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d14e      	bne.n	8001186 <__udivmoddi4+0xaa>
 80010e8:	4694      	mov	ip, r2
 80010ea:	458c      	cmp	ip, r1
 80010ec:	4686      	mov	lr, r0
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	d962      	bls.n	80011ba <__udivmoddi4+0xde>
 80010f4:	b14a      	cbz	r2, 800110a <__udivmoddi4+0x2e>
 80010f6:	f1c2 0320 	rsb	r3, r2, #32
 80010fa:	4091      	lsls	r1, r2
 80010fc:	fa20 f303 	lsr.w	r3, r0, r3
 8001100:	fa0c fc02 	lsl.w	ip, ip, r2
 8001104:	4319      	orrs	r1, r3
 8001106:	fa00 fe02 	lsl.w	lr, r0, r2
 800110a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800110e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001112:	fb07 1114 	mls	r1, r7, r4, r1
 8001116:	fa1f f68c 	uxth.w	r6, ip
 800111a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001122:	fb04 f106 	mul.w	r1, r4, r6
 8001126:	4299      	cmp	r1, r3
 8001128:	d90a      	bls.n	8001140 <__udivmoddi4+0x64>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001132:	f080 8110 	bcs.w	8001356 <__udivmoddi4+0x27a>
 8001136:	4299      	cmp	r1, r3
 8001138:	f240 810d 	bls.w	8001356 <__udivmoddi4+0x27a>
 800113c:	3c02      	subs	r4, #2
 800113e:	4463      	add	r3, ip
 8001140:	1a59      	subs	r1, r3, r1
 8001142:	fbb1 f0f7 	udiv	r0, r1, r7
 8001146:	fb07 1110 	mls	r1, r7, r0, r1
 800114a:	fb00 f606 	mul.w	r6, r0, r6
 800114e:	fa1f f38e 	uxth.w	r3, lr
 8001152:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001156:	429e      	cmp	r6, r3
 8001158:	d90a      	bls.n	8001170 <__udivmoddi4+0x94>
 800115a:	eb1c 0303 	adds.w	r3, ip, r3
 800115e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001162:	f080 80fa 	bcs.w	800135a <__udivmoddi4+0x27e>
 8001166:	429e      	cmp	r6, r3
 8001168:	f240 80f7 	bls.w	800135a <__udivmoddi4+0x27e>
 800116c:	4463      	add	r3, ip
 800116e:	3802      	subs	r0, #2
 8001170:	2100      	movs	r1, #0
 8001172:	1b9b      	subs	r3, r3, r6
 8001174:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001178:	b11d      	cbz	r5, 8001182 <__udivmoddi4+0xa6>
 800117a:	40d3      	lsrs	r3, r2
 800117c:	2200      	movs	r2, #0
 800117e:	e9c5 3200 	strd	r3, r2, [r5]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d905      	bls.n	8001196 <__udivmoddi4+0xba>
 800118a:	b10d      	cbz	r5, 8001190 <__udivmoddi4+0xb4>
 800118c:	e9c5 0100 	strd	r0, r1, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	4608      	mov	r0, r1
 8001194:	e7f5      	b.n	8001182 <__udivmoddi4+0xa6>
 8001196:	fab3 f183 	clz	r1, r3
 800119a:	2900      	cmp	r1, #0
 800119c:	d146      	bne.n	800122c <__udivmoddi4+0x150>
 800119e:	42a3      	cmp	r3, r4
 80011a0:	d302      	bcc.n	80011a8 <__udivmoddi4+0xcc>
 80011a2:	4290      	cmp	r0, r2
 80011a4:	f0c0 80ee 	bcc.w	8001384 <__udivmoddi4+0x2a8>
 80011a8:	1a86      	subs	r6, r0, r2
 80011aa:	eb64 0303 	sbc.w	r3, r4, r3
 80011ae:	2001      	movs	r0, #1
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d0e6      	beq.n	8001182 <__udivmoddi4+0xa6>
 80011b4:	e9c5 6300 	strd	r6, r3, [r5]
 80011b8:	e7e3      	b.n	8001182 <__udivmoddi4+0xa6>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	f040 808f 	bne.w	80012de <__udivmoddi4+0x202>
 80011c0:	eba1 040c 	sub.w	r4, r1, ip
 80011c4:	2101      	movs	r1, #1
 80011c6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ca:	fa1f f78c 	uxth.w	r7, ip
 80011ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80011d2:	fb08 4416 	mls	r4, r8, r6, r4
 80011d6:	fb07 f006 	mul.w	r0, r7, r6
 80011da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d908      	bls.n	80011f8 <__udivmoddi4+0x11c>
 80011e6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x11a>
 80011f0:	4298      	cmp	r0, r3
 80011f2:	f200 80cb 	bhi.w	800138c <__udivmoddi4+0x2b0>
 80011f6:	4626      	mov	r6, r4
 80011f8:	1a1c      	subs	r4, r3, r0
 80011fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80011fe:	fb08 4410 	mls	r4, r8, r0, r4
 8001202:	fb00 f707 	mul.w	r7, r0, r7
 8001206:	fa1f f38e 	uxth.w	r3, lr
 800120a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800120e:	429f      	cmp	r7, r3
 8001210:	d908      	bls.n	8001224 <__udivmoddi4+0x148>
 8001212:	eb1c 0303 	adds.w	r3, ip, r3
 8001216:	f100 34ff 	add.w	r4, r0, #4294967295
 800121a:	d202      	bcs.n	8001222 <__udivmoddi4+0x146>
 800121c:	429f      	cmp	r7, r3
 800121e:	f200 80ae 	bhi.w	800137e <__udivmoddi4+0x2a2>
 8001222:	4620      	mov	r0, r4
 8001224:	1bdb      	subs	r3, r3, r7
 8001226:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800122a:	e7a5      	b.n	8001178 <__udivmoddi4+0x9c>
 800122c:	f1c1 0720 	rsb	r7, r1, #32
 8001230:	408b      	lsls	r3, r1
 8001232:	fa22 fc07 	lsr.w	ip, r2, r7
 8001236:	ea4c 0c03 	orr.w	ip, ip, r3
 800123a:	fa24 f607 	lsr.w	r6, r4, r7
 800123e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001242:	fbb6 f8f9 	udiv	r8, r6, r9
 8001246:	fa1f fe8c 	uxth.w	lr, ip
 800124a:	fb09 6618 	mls	r6, r9, r8, r6
 800124e:	fa20 f307 	lsr.w	r3, r0, r7
 8001252:	408c      	lsls	r4, r1
 8001254:	fa00 fa01 	lsl.w	sl, r0, r1
 8001258:	fb08 f00e 	mul.w	r0, r8, lr
 800125c:	431c      	orrs	r4, r3
 800125e:	0c23      	lsrs	r3, r4, #16
 8001260:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001264:	4298      	cmp	r0, r3
 8001266:	fa02 f201 	lsl.w	r2, r2, r1
 800126a:	d90a      	bls.n	8001282 <__udivmoddi4+0x1a6>
 800126c:	eb1c 0303 	adds.w	r3, ip, r3
 8001270:	f108 36ff 	add.w	r6, r8, #4294967295
 8001274:	f080 8081 	bcs.w	800137a <__udivmoddi4+0x29e>
 8001278:	4298      	cmp	r0, r3
 800127a:	d97e      	bls.n	800137a <__udivmoddi4+0x29e>
 800127c:	f1a8 0802 	sub.w	r8, r8, #2
 8001280:	4463      	add	r3, ip
 8001282:	1a1e      	subs	r6, r3, r0
 8001284:	fbb6 f3f9 	udiv	r3, r6, r9
 8001288:	fb09 6613 	mls	r6, r9, r3, r6
 800128c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001290:	b2a4      	uxth	r4, r4
 8001292:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001296:	45a6      	cmp	lr, r4
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x1d0>
 800129a:	eb1c 0404 	adds.w	r4, ip, r4
 800129e:	f103 30ff 	add.w	r0, r3, #4294967295
 80012a2:	d266      	bcs.n	8001372 <__udivmoddi4+0x296>
 80012a4:	45a6      	cmp	lr, r4
 80012a6:	d964      	bls.n	8001372 <__udivmoddi4+0x296>
 80012a8:	3b02      	subs	r3, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012b0:	fba0 8302 	umull	r8, r3, r0, r2
 80012b4:	eba4 040e 	sub.w	r4, r4, lr
 80012b8:	429c      	cmp	r4, r3
 80012ba:	46c6      	mov	lr, r8
 80012bc:	461e      	mov	r6, r3
 80012be:	d350      	bcc.n	8001362 <__udivmoddi4+0x286>
 80012c0:	d04d      	beq.n	800135e <__udivmoddi4+0x282>
 80012c2:	b155      	cbz	r5, 80012da <__udivmoddi4+0x1fe>
 80012c4:	ebba 030e 	subs.w	r3, sl, lr
 80012c8:	eb64 0406 	sbc.w	r4, r4, r6
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	40cb      	lsrs	r3, r1
 80012d2:	431f      	orrs	r7, r3
 80012d4:	40cc      	lsrs	r4, r1
 80012d6:	e9c5 7400 	strd	r7, r4, [r5]
 80012da:	2100      	movs	r1, #0
 80012dc:	e751      	b.n	8001182 <__udivmoddi4+0xa6>
 80012de:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e2:	f1c2 0320 	rsb	r3, r2, #32
 80012e6:	40d9      	lsrs	r1, r3
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa20 f303 	lsr.w	r3, r0, r3
 80012f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012f8:	fb08 1110 	mls	r1, r8, r0, r1
 80012fc:	4094      	lsls	r4, r2
 80012fe:	431c      	orrs	r4, r3
 8001300:	fa1f f78c 	uxth.w	r7, ip
 8001304:	0c23      	lsrs	r3, r4, #16
 8001306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800130a:	fb00 f107 	mul.w	r1, r0, r7
 800130e:	4299      	cmp	r1, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x248>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f100 36ff 	add.w	r6, r0, #4294967295
 800131a:	d22c      	bcs.n	8001376 <__udivmoddi4+0x29a>
 800131c:	4299      	cmp	r1, r3
 800131e:	d92a      	bls.n	8001376 <__udivmoddi4+0x29a>
 8001320:	3802      	subs	r0, #2
 8001322:	4463      	add	r3, ip
 8001324:	1a5b      	subs	r3, r3, r1
 8001326:	fbb3 f1f8 	udiv	r1, r3, r8
 800132a:	fb08 3311 	mls	r3, r8, r1, r3
 800132e:	b2a4      	uxth	r4, r4
 8001330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001334:	fb01 f307 	mul.w	r3, r1, r7
 8001338:	42a3      	cmp	r3, r4
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0x272>
 800133c:	eb1c 0404 	adds.w	r4, ip, r4
 8001340:	f101 36ff 	add.w	r6, r1, #4294967295
 8001344:	d213      	bcs.n	800136e <__udivmoddi4+0x292>
 8001346:	42a3      	cmp	r3, r4
 8001348:	d911      	bls.n	800136e <__udivmoddi4+0x292>
 800134a:	3902      	subs	r1, #2
 800134c:	4464      	add	r4, ip
 800134e:	1ae4      	subs	r4, r4, r3
 8001350:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001354:	e73b      	b.n	80011ce <__udivmoddi4+0xf2>
 8001356:	4604      	mov	r4, r0
 8001358:	e6f2      	b.n	8001140 <__udivmoddi4+0x64>
 800135a:	4608      	mov	r0, r1
 800135c:	e708      	b.n	8001170 <__udivmoddi4+0x94>
 800135e:	45c2      	cmp	sl, r8
 8001360:	d2af      	bcs.n	80012c2 <__udivmoddi4+0x1e6>
 8001362:	ebb8 0e02 	subs.w	lr, r8, r2
 8001366:	eb63 060c 	sbc.w	r6, r3, ip
 800136a:	3801      	subs	r0, #1
 800136c:	e7a9      	b.n	80012c2 <__udivmoddi4+0x1e6>
 800136e:	4631      	mov	r1, r6
 8001370:	e7ed      	b.n	800134e <__udivmoddi4+0x272>
 8001372:	4603      	mov	r3, r0
 8001374:	e79a      	b.n	80012ac <__udivmoddi4+0x1d0>
 8001376:	4630      	mov	r0, r6
 8001378:	e7d4      	b.n	8001324 <__udivmoddi4+0x248>
 800137a:	46b0      	mov	r8, r6
 800137c:	e781      	b.n	8001282 <__udivmoddi4+0x1a6>
 800137e:	4463      	add	r3, ip
 8001380:	3802      	subs	r0, #2
 8001382:	e74f      	b.n	8001224 <__udivmoddi4+0x148>
 8001384:	4606      	mov	r6, r0
 8001386:	4623      	mov	r3, r4
 8001388:	4608      	mov	r0, r1
 800138a:	e711      	b.n	80011b0 <__udivmoddi4+0xd4>
 800138c:	3e02      	subs	r6, #2
 800138e:	4463      	add	r3, ip
 8001390:	e732      	b.n	80011f8 <__udivmoddi4+0x11c>
 8001392:	bf00      	nop

08001394 <__aeabi_idiv0>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800139e:	23ff      	movs	r3, #255	@ 0xff
 80013a0:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e00c      	b.n	80013c2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 80013a8:	f001 fcbe 	bl	8002d28 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 80013ac:	1cf9      	adds	r1, r7, #3
 80013ae:	2364      	movs	r3, #100	@ 0x64
 80013b0:	2201      	movs	r2, #1
 80013b2:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <Wakeup_Idle+0x3c>)
 80013b4:	f004 fdbc 	bl	8005f30 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013b8:	f001 fcaa 	bl	8002d10 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	ddef      	ble.n	80013a8 <Wakeup_Idle+0x10>
	}
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001bc 	.word	0x200001bc

080013d8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e00c      	b.n	80013fe <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
 80013e4:	f001 fca0 	bl	8002d28 <LTC_nCS_Low>
		HAL_Delay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f001 ff9d 	bl	8003328 <HAL_Delay>
		LTC_nCS_High();
 80013ee:	f001 fc8f 	bl	8002d10 <LTC_nCS_High>
		HAL_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f001 ff98 	bl	8003328 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b07      	cmp	r3, #7
 8001402:	ddef      	ble.n	80013e4 <Wakeup_Sleep+0xc>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001414:	b089      	sub	sp, #36	@ 0x24
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	466b      	mov	r3, sp
 800141c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001426:	7f3b      	ldrb	r3, [r7, #28]
 8001428:	3b01      	subs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	7f3b      	ldrb	r3, [r7, #28]
 800142e:	2200      	movs	r2, #0
 8001430:	4698      	mov	r8, r3
 8001432:	4691      	mov	r9, r2
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001440:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001444:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001448:	7f3b      	ldrb	r3, [r7, #28]
 800144a:	2200      	movs	r2, #0
 800144c:	461c      	mov	r4, r3
 800144e:	4615      	mov	r5, r2
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	00eb      	lsls	r3, r5, #3
 800145a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800145e:	00e2      	lsls	r2, r4, #3
 8001460:	7f3b      	ldrb	r3, [r7, #28]
 8001462:	3307      	adds	r3, #7
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	ebad 0d03 	sub.w	sp, sp, r3
 800146c:	466b      	mov	r3, sp
 800146e:	3300      	adds	r3, #0
 8001470:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001472:	2300      	movs	r3, #0
 8001474:	77bb      	strb	r3, [r7, #30]
 8001476:	e074      	b.n	8001562 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3f      	ldr	r2, [pc, #252]	@ (8001578 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001488:	7fbb      	ldrb	r3, [r7, #30]
 800148a:	4a3b      	ldr	r2, [pc, #236]	@ (8001578 <Read_Cell_Volt+0x168>)
 800148c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	2002      	movs	r0, #2
 800149c:	f000 fa5c 	bl	8001958 <LTC_Pec15_Calc>
 80014a0:	4603      	mov	r3, r0
 80014a2:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80014a4:	8a7b      	ldrh	r3, [r7, #18]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014b4:	f7ff ff70 	bl	8001398 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014b8:	f001 fc36 	bl	8002d28 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014bc:	f107 0108 	add.w	r1, r7, #8
 80014c0:	2364      	movs	r3, #100	@ 0x64
 80014c2:	2204      	movs	r2, #4
 80014c4:	482d      	ldr	r0, [pc, #180]	@ (800157c <Read_Cell_Volt+0x16c>)
 80014c6:	f004 fd33 	bl	8005f30 <HAL_SPI_Transmit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014ce:	7c7b      	ldrb	r3, [r7, #17]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014d4:	7c7b      	ldrb	r3, [r7, #17]
 80014d6:	2201      	movs	r2, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014e8:	7f3b      	ldrb	r3, [r7, #28]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	2364      	movs	r3, #100	@ 0x64
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	4822      	ldr	r0, [pc, #136]	@ (800157c <Read_Cell_Volt+0x16c>)
 80014f2:	f004 fe61 	bl	80061b8 <HAL_SPI_Receive>
 80014f6:	4603      	mov	r3, r0
 80014f8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014fa:	7c7b      	ldrb	r3, [r7, #17]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8001500:	7c7b      	ldrb	r3, [r7, #17]
 8001502:	3304      	adds	r3, #4
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	b25a      	sxtb	r2, r3
 800150c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001516:	f001 fbfb 	bl	8002d10 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800151a:	2300      	movs	r3, #0
 800151c:	777b      	strb	r3, [r7, #29]
 800151e:	e01a      	b.n	8001556 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001520:	7f7b      	ldrb	r3, [r7, #29]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800152a:	7f7a      	ldrb	r2, [r7, #29]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001536:	7fba      	ldrb	r2, [r7, #30]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
			memcpy(
 8001546:	2206      	movs	r2, #6
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fe2b 	bl	80081a6 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	3301      	adds	r3, #1
 8001554:	777b      	strb	r3, [r7, #29]
 8001556:	7f7b      	ldrb	r3, [r7, #29]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d9e1      	bls.n	8001520 <Read_Cell_Volt+0x110>
			i++) {
 800155c:	7fbb      	ldrb	r3, [r7, #30]
 800155e:	3301      	adds	r3, #1
 8001560:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001562:	7fbb      	ldrb	r3, [r7, #30]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d987      	bls.n	8001478 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	46b5      	mov	sp, r6
}
 800156c:	4618      	mov	r0, r3
 800156e:	3724      	adds	r7, #36	@ 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001576:	bf00      	nop
 8001578:	080090b8 	.word	0x080090b8
 800157c:	200001bc 	.word	0x200001bc

08001580 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800158c:	2306      	movs	r3, #6
 800158e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3304      	adds	r3, #4
 8001598:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 800159a:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <LTC_WRCOMM+0xd4>)
 800159c:	2207      	movs	r2, #7
 800159e:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015a2:	2221      	movs	r2, #33	@ 0x21
 80015a4:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 80015a6:	492b      	ldr	r1, [pc, #172]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 f9d5 	bl	8001958 <LTC_Pec15_Calc>
 80015ae:	4603      	mov	r3, r0
 80015b0:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015b2:	8a3b      	ldrh	r3, [r7, #16]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015bc:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015be:	8a3b      	ldrh	r3, [r7, #16]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015c4:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	75bb      	strb	r3, [r7, #22]
 80015ce:	e02d      	b.n	800162c <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015d0:	2300      	movs	r3, #0
 80015d2:	757b      	strb	r3, [r7, #21]
 80015d4:	e00c      	b.n	80015f0 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	441a      	add	r2, r3
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	7811      	ldrb	r1, [r2, #0]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <LTC_WRCOMM+0xd4>)
 80015e2:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	3301      	adds	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015ea:	7d7b      	ldrb	r3, [r7, #21]
 80015ec:	3301      	adds	r3, #1
 80015ee:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015f0:	7d7a      	ldrb	r2, [r7, #21]
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3ee      	bcc.n	80015d6 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015f8:	7d3b      	ldrb	r3, [r7, #20]
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f9ab 	bl	8001958 <LTC_Pec15_Calc>
 8001602:	4603      	mov	r3, r0
 8001604:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	b29a      	uxth	r2, r3
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <LTC_WRCOMM+0xd4>)
 8001612:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	3301      	adds	r3, #1
 8001618:	89fa      	ldrh	r2, [r7, #14]
 800161a:	b2d1      	uxtb	r1, r2
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LTC_WRCOMM+0xd4>)
 800161e:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	3302      	adds	r3, #2
 8001624:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001626:	7dbb      	ldrb	r3, [r7, #22]
 8001628:	3b01      	subs	r3, #1
 800162a:	75bb      	strb	r3, [r7, #22]
 800162c:	7dbb      	ldrb	r3, [r7, #22]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ce      	bne.n	80015d0 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001632:	f7ff feb1 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 8001636:	f001 fb77 	bl	8002d28 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	b29a      	uxth	r2, r3
 800163e:	2364      	movs	r3, #100	@ 0x64
 8001640:	4904      	ldr	r1, [pc, #16]	@ (8001654 <LTC_WRCOMM+0xd4>)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <LTC_WRCOMM+0xd8>)
 8001644:	f004 fc74 	bl	8005f30 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001648:	f001 fb62 	bl	8002d10 <LTC_nCS_High>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000f0 	.word	0x200000f0
 8001658:	200001bc 	.word	0x200001bc

0800165c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001666:	2307      	movs	r3, #7
 8001668:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800166a:	2323      	movs	r3, #35	@ 0x23
 800166c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	2002      	movs	r0, #2
 8001676:	f000 f96f 	bl	8001958 <LTC_Pec15_Calc>
 800167a:	4603      	mov	r3, r0
 800167c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800167e:	8a7b      	ldrh	r3, [r7, #18]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001688:	8a7b      	ldrh	r3, [r7, #18]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800168e:	f7ff fe83 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 8001692:	f001 fb49 	bl	8002d28 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001696:	f107 010c 	add.w	r1, r7, #12
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2204      	movs	r2, #4
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <LTC_STCOMM+0x7c>)
 80016a0:	f004 fc46 	bl	8005f30 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e008      	b.n	80016bc <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 80016aa:	2364      	movs	r3, #100	@ 0x64
 80016ac:	2201      	movs	r2, #1
 80016ae:	21ff      	movs	r1, #255	@ 0xff
 80016b0:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <LTC_STCOMM+0x7c>)
 80016b2:	f004 fc3d 	bl	8005f30 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbef      	blt.n	80016aa <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ca:	f001 fb21 	bl	8002d10 <LTC_nCS_High>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200001bc 	.word	0x200001bc

080016dc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e0:	b089      	sub	sp, #36	@ 0x24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	466b      	mov	r3, sp
 80016e8:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016ee:	2340      	movs	r3, #64	@ 0x40
 80016f0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016f2:	7f3b      	ldrb	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	7f3b      	ldrb	r3, [r7, #28]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4698      	mov	r8, r3
 80016fe:	4691      	mov	r9, r2
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800170c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001710:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001714:	7f3b      	ldrb	r3, [r7, #28]
 8001716:	2200      	movs	r2, #0
 8001718:	461c      	mov	r4, r3
 800171a:	4615      	mov	r5, r2
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	00eb      	lsls	r3, r5, #3
 8001726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172a:	00e2      	lsls	r2, r4, #3
 800172c:	7f3b      	ldrb	r3, [r7, #28]
 800172e:	3307      	adds	r3, #7
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	ebad 0d03 	sub.w	sp, sp, r3
 8001738:	466b      	mov	r3, sp
 800173a:	3300      	adds	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	77bb      	strb	r3, [r7, #30]
 8001742:	e074      	b.n	800182e <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	4a3f      	ldr	r2, [pc, #252]	@ (8001844 <Read_Cell_Temps+0x168>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	b29b      	uxth	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001754:	7fbb      	ldrb	r3, [r7, #30]
 8001756:	4a3b      	ldr	r2, [pc, #236]	@ (8001844 <Read_Cell_Temps+0x168>)
 8001758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4619      	mov	r1, r3
 8001766:	2002      	movs	r0, #2
 8001768:	f000 f8f6 	bl	8001958 <LTC_Pec15_Calc>
 800176c:	4603      	mov	r3, r0
 800176e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001770:	8a7b      	ldrh	r3, [r7, #18]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800177a:	8a7b      	ldrh	r3, [r7, #18]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001780:	f7ff fe0a 	bl	8001398 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001784:	f001 fad0 	bl	8002d28 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001788:	f107 0108 	add.w	r1, r7, #8
 800178c:	2364      	movs	r3, #100	@ 0x64
 800178e:	2204      	movs	r2, #4
 8001790:	482d      	ldr	r0, [pc, #180]	@ (8001848 <Read_Cell_Temps+0x16c>)
 8001792:	f004 fbcd 	bl	8005f30 <HAL_SPI_Transmit>
 8001796:	4603      	mov	r3, r0
 8001798:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800179a:	7c7b      	ldrb	r3, [r7, #17]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80017a0:	7c7b      	ldrb	r3, [r7, #17]
 80017a2:	2201      	movs	r2, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017b4:	7f3b      	ldrb	r3, [r7, #28]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	2364      	movs	r3, #100	@ 0x64
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	4822      	ldr	r0, [pc, #136]	@ (8001848 <Read_Cell_Temps+0x16c>)
 80017be:	f004 fcfb 	bl	80061b8 <HAL_SPI_Receive>
 80017c2:	4603      	mov	r3, r0
 80017c4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017c6:	7c7b      	ldrb	r3, [r7, #17]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017cc:	7c7b      	ldrb	r3, [r7, #17]
 80017ce:	3304      	adds	r3, #4
 80017d0:	2201      	movs	r2, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017e2:	f001 fa95 	bl	8002d10 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	777b      	strb	r3, [r7, #29]
 80017ea:	e01a      	b.n	8001822 <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017ec:	7f7b      	ldrb	r3, [r7, #29]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017f6:	7f7a      	ldrb	r2, [r7, #29]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8001802:	7fba      	ldrb	r2, [r7, #30]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
			memcpy(
 8001812:	2206      	movs	r2, #6
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fcc5 	bl	80081a6 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800181c:	7f7b      	ldrb	r3, [r7, #29]
 800181e:	3301      	adds	r3, #1
 8001820:	777b      	strb	r3, [r7, #29]
 8001822:	7f7b      	ldrb	r3, [r7, #29]
 8001824:	2b07      	cmp	r3, #7
 8001826:	d9e1      	bls.n	80017ec <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001828:	7fbb      	ldrb	r3, [r7, #30]
 800182a:	3301      	adds	r3, #1
 800182c:	77bb      	strb	r3, [r7, #30]
 800182e:	7fbb      	ldrb	r3, [r7, #30]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d987      	bls.n	8001744 <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	46b5      	mov	sp, r6
}
 8001838:	4618      	mov	r0, r3
 800183a:	3724      	adds	r7, #36	@ 0x24
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001842:	bf00      	nop
 8001844:	080090c0 	.word	0x080090c0
 8001848:	200001bc 	.word	0x200001bc

0800184c <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	460b      	mov	r3, r1
 8001858:	71bb      	strb	r3, [r7, #6]
 800185a:	4613      	mov	r3, r2
 800185c:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	105b      	asrs	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3302      	adds	r3, #2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	01db      	lsls	r3, r3, #7
 8001876:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	b2da      	uxtb	r2, r3
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	4413      	add	r3, r2
 8001882:	b2da      	uxtb	r2, r3
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	4413      	add	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3360      	adds	r3, #96	@ 0x60
 800188c:	b2db      	uxtb	r3, r3
 800188e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4619      	mov	r1, r3
 8001896:	2002      	movs	r0, #2
 8001898:	f000 f85e 	bl	8001958 <LTC_Pec15_Calc>
 800189c:	4603      	mov	r3, r0
 800189e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80018a0:	89bb      	ldrh	r3, [r7, #12]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80018aa:	89bb      	ldrh	r3, [r7, #12]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018b0:	f7ff fd72 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 80018b4:	f001 fa38 	bl	8002d28 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	2364      	movs	r3, #100	@ 0x64
 80018be:	2204      	movs	r2, #4
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <LTC_ADCV+0x88>)
 80018c2:	f004 fb35 	bl	8005f30 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018c6:	f001 fa23 	bl	8002d10 <LTC_nCS_High>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001bc 	.word	0x200001bc

080018d8 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	105b      	asrs	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3304      	adds	r3, #4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	4413      	add	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3360      	adds	r3, #96	@ 0x60
 800190c:	b2db      	uxtb	r3, r3
 800190e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4619      	mov	r1, r3
 8001916:	2002      	movs	r0, #2
 8001918:	f000 f81e 	bl	8001958 <LTC_Pec15_Calc>
 800191c:	4603      	mov	r3, r0
 800191e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	b29b      	uxth	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800192a:	89bb      	ldrh	r3, [r7, #12]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001930:	f7ff fd32 	bl	8001398 <Wakeup_Idle>
	LTC_nCS_Low();
 8001934:	f001 f9f8 	bl	8002d28 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001938:	f107 0108 	add.w	r1, r7, #8
 800193c:	2364      	movs	r3, #100	@ 0x64
 800193e:	2204      	movs	r2, #4
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <LTC_ADAX+0x7c>)
 8001942:	f004 faf5 	bl	8005f30 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001946:	f001 f9e3 	bl	8002d10 <LTC_nCS_High>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001bc 	.word	0x200001bc

08001958 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001964:	2310      	movs	r3, #16
 8001966:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001968:	2300      	movs	r3, #0
 800196a:	737b      	strb	r3, [r7, #13]
 800196c:	e017      	b.n	800199e <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	09db      	lsrs	r3, r3, #7
 8001972:	b29b      	uxth	r3, r3
 8001974:	7b7a      	ldrb	r2, [r7, #13]
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440a      	add	r2, r1
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	4053      	eors	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b29a      	uxth	r2, r3
 800198a:	897b      	ldrh	r3, [r7, #10]
 800198c:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <LTC_Pec15_Calc+0x60>)
 800198e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4053      	eors	r3, r2
 8001996:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	3301      	adds	r3, #1
 800199c:	737b      	strb	r3, [r7, #13]
 800199e:	7b7a      	ldrb	r2, [r7, #13]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3e3      	bcc.n	800196e <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	b29b      	uxth	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	080090c4 	.word	0x080090c4

080019bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <MX_ADC1_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80019ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <MX_ADC1_Init+0x74>)
 80019fa:	f001 fcb9 	bl	8003370 <HAL_ADC_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f000 fe6a 	bl	80026dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a08:	230f      	movs	r3, #15
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_ADC1_Init+0x74>)
 8001a1a:	f002 f83f 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a24:	f000 fe5a 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000134 	.word	0x20000134
 8001a34:	40012400 	.word	0x40012400

08001a38 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_ADC2_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a66:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a76:	f001 fc7b 	bl	8003370 <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 fe2c 	bl	80026dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a84:	230a      	movs	r3, #10
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_ADC2_Init+0x74>)
 8001a96:	f002 f801 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 fe1c 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000164 	.word	0x20000164
 8001ab0:	40012800 	.word	0x40012800

08001ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <HAL_ADC_MspInit+0xdc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12a      	bne.n	8001b2a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001b04:	2320      	movs	r3, #32
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4821      	ldr	r0, [pc, #132]	@ (8001b98 <HAL_ADC_MspInit+0xe4>)
 8001b14:	f003 f842 	bl	8004b9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2012      	movs	r0, #18
 8001b1e:	f002 fec4 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b22:	2012      	movs	r0, #18
 8001b24:	f002 fedd 	bl	80048e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001b28:	e02e      	b.n	8001b88 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b9c <HAL_ADC_MspInit+0xe8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d129      	bne.n	8001b88 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a10      	ldr	r2, [pc, #64]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_ADC_MspInit+0xe0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b64:	230f      	movs	r3, #15
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4809      	ldr	r0, [pc, #36]	@ (8001b98 <HAL_ADC_MspInit+0xe4>)
 8001b74:	f003 f812 	bl	8004b9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2012      	movs	r0, #18
 8001b7e:	f002 fe94 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b82:	2012      	movs	r0, #18
 8001b84:	f002 fead 	bl	80048e2 <HAL_NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	@ 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40012400 	.word	0x40012400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	40012800 	.word	0x40012800

08001ba0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <MX_CAN1_Init+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bac:	2209      	movs	r2, #9
 8001bae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bc2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bc6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001bca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_CAN1_Init+0x64>)
 8001bf2:	f002 f8ef 	bl	8003dd4 <HAL_CAN_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bfc:	f000 fd6e 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000194 	.word	0x20000194
 8001c08:	40006400 	.word	0x40006400

08001c0c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a35      	ldr	r2, [pc, #212]	@ (8001cfc <HAL_CAN_MspInit+0xf0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d163      	bne.n	8001cf4 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c2c:	4b34      	ldr	r3, [pc, #208]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a33      	ldr	r2, [pc, #204]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b2e      	ldr	r3, [pc, #184]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a2d      	ldr	r2, [pc, #180]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_CAN_MspInit+0xf4>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4824      	ldr	r0, [pc, #144]	@ (8001d04 <HAL_CAN_MspInit+0xf8>)
 8001c72:	f002 ff93 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	481e      	ldr	r0, [pc, #120]	@ (8001d04 <HAL_CAN_MspInit+0xf8>)
 8001c8c:	f002 ff86 	bl	8004b9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_CAN_MspInit+0xfc>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	4a16      	ldr	r2, [pc, #88]	@ (8001d08 <HAL_CAN_MspInit+0xfc>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	2013      	movs	r0, #19
 8001cba:	f002 fdf6 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001cbe:	2013      	movs	r0, #19
 8001cc0:	f002 fe0f 	bl	80048e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2014      	movs	r0, #20
 8001cca:	f002 fdee 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cce:	2014      	movs	r0, #20
 8001cd0:	f002 fe07 	bl	80048e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2015      	movs	r0, #21
 8001cda:	f002 fde6 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001cde:	2015      	movs	r0, #21
 8001ce0:	f002 fdff 	bl	80048e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2016      	movs	r0, #22
 8001cea:	f002 fdde 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001cee:	2016      	movs	r0, #22
 8001cf0:	f002 fdf7 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	@ 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40006400 	.word	0x40006400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40010000 	.word	0x40010000

08001d0c <CAN_Start>:

/* USER CODE BEGIN 1 */

uint8_t CAN_TX_HALT = 1; //halt frag to send it to mailbox

HAL_StatusTypeDef CAN_Start() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <CAN_Start+0x10>)
 8001d12:	f002 f95a 	bl	8003fca <HAL_CAN_Start>
 8001d16:	4603      	mov	r3, r0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000194 	.word	0x20000194

08001d20 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
    return HAL_CAN_ActivateNotification(&hcan1,  CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d24:	2102      	movs	r1, #2
 8001d26:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <CAN_Activate+0x14>)
 8001d28:	f002 fa96 	bl	8004258 <HAL_CAN_ActivateNotification>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000194 	.word	0x20000194

08001d38 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(CANMessage *ptr) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	  while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 8001d40:	bf00      	nop
 8001d42:	480a      	ldr	r0, [pc, #40]	@ (8001d6c <CAN_Send+0x34>)
 8001d44:	f002 fa54 	bl	80041f0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f9      	beq.n	8001d42 <CAN_Send+0xa>
	    }
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,&ptr->TxMailbox);
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 021c 	add.w	r2, r3, #28
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3318      	adds	r3, #24
 8001d5a:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <CAN_Send+0x34>)
 8001d5c:	f002 f979 	bl	8004052 <HAL_CAN_AddTxMessage>
 8001d60:	4603      	mov	r3, r0

}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000194 	.word	0x20000194

08001d70 <CAN_SettingsInit>:
//}
//void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
//	CAN_TX_HALT = 0;
//}

void CAN_SettingsInit(CANMessage *ptr) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001d78:	f7ff ffc8 	bl	8001d0c <CAN_Start>
	CAN_Activate();
 8001d7c:	f7ff ffd0 	bl	8001d20 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2208      	movs	r2, #8
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <Set_CAN_Id>:

void Set_CAN_Id(CANMessage *ptr, uint32_t id) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	601a      	str	r2, [r3, #0]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <CAN_Send_Voltage>:

void CAN_Send_Voltage(CANMessage *ptr, uint16_t *read_volt) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001dc4:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 8001dc8:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001dca:	8afb      	ldrh	r3, [r7, #22]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffe6 	bl	8001da0 <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e071      	b.n	8001ebe <CAN_Send_Voltage+0x104>
		if (i % 4 == 0) {
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d156      	bne.n	8001e92 <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dd0c      	ble.n	8001eb2 <CAN_Send_Voltage+0xf8>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001ea2:	8afb      	ldrh	r3, [r7, #22]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001ea8:	8afb      	ldrh	r3, [r7, #22]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff77 	bl	8001da0 <Set_CAN_Id>
		}
		CAN_Send(ptr);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff40 	bl	8001d38 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ec2:	dd8a      	ble.n	8001dda <CAN_Send_Voltage+0x20>
//		printf("voltage\n");
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <CAN_Send_Temperature>:

void CAN_Send_Temperature(CANMessage *ptr, uint16_t *read_temp) {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001ed8:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8001edc:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff5c 	bl	8001da0 <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	737b      	strb	r3, [r7, #13]
 8001eec:	e073      	b.n	8001fd6 <CAN_Send_Temperature+0x108>
		if (i % 4 == 0) {
 8001eee:	7b7b      	ldrb	r3, [r7, #13]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d156      	bne.n	8001fa8 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8001efe:	7b3b      	ldrb	r3, [r7, #12]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8001f0e:	7b3b      	ldrb	r3, [r7, #12]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001f38:	7b3b      	ldrb	r3, [r7, #12]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001f52:	7b3b      	ldrb	r3, [r7, #12]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001f64:	7b3b      	ldrb	r3, [r7, #12]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001f7a:	7b3b      	ldrb	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001fa8:	7b7b      	ldrb	r3, [r7, #13]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <CAN_Send_Temperature+0xfc>
 8001fae:	7b7b      	ldrb	r3, [r7, #13]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8001fba:	89fb      	ldrh	r3, [r7, #14]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff feeb 	bl	8001da0 <Set_CAN_Id>
		}
	CAN_Send(ptr);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff feb4 	bl	8001d38 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	737b      	strb	r3, [r7, #13]
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001fda:	d988      	bls.n	8001eee <CAN_Send_Temperature+0x20>
//	printf("Temperature\n");
	}
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(CANMessage *ptr, struct batteryModule *batt) {
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8001ff0:	f240 6322 	movw	r3, #1570	@ 0x622
 8001ff4:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fed0 	bl	8001da0 <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002006:	b2da      	uxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	b29b      	uxth	r3, r3
 8002016:	b2da      	uxtb	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	b2da      	uxtb	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f8b3 3254 	ldrh.w	r3, [r3, #596]	@ 0x254
 800205e:	b2da      	uxtb	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f8b3 3254 	ldrh.w	r3, [r3, #596]	@ 0x254
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2da      	uxtb	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	CAN_Send(ptr);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fe5d 	bl	8001d38 <CAN_Send>
//	printf("Summary\n");
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 8002094:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002098:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	4619      	mov	r1, r3
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff fe7e 	bl	8001da0 <Set_CAN_Id>
	ptr->data[0] = *faults;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80020ee:	0e1b      	lsrs	r3, r3, #24
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	CAN_Send(ptr);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff fe1d 	bl	8001d38 <CAN_Send>
//	printf("Faults\n");
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a35      	ldr	r2, [pc, #212]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	4b30      	ldr	r3, [pc, #192]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b27      	ldr	r3, [pc, #156]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <MX_GPIO_Init+0xf0>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2110      	movs	r1, #16
 8002180:	481e      	ldr	r0, [pc, #120]	@ (80021fc <MX_GPIO_Init+0xf4>)
 8002182:	f002 fe8f 	bl	8004ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2102      	movs	r1, #2
 800218a:	481d      	ldr	r0, [pc, #116]	@ (8002200 <MX_GPIO_Init+0xf8>)
 800218c:	f002 fe8a 	bl	8004ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2140      	movs	r1, #64	@ 0x40
 8002194:	481b      	ldr	r0, [pc, #108]	@ (8002204 <MX_GPIO_Init+0xfc>)
 8002196:	f002 fe85 	bl	8004ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 800219a:	2310      	movs	r3, #16
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <MX_GPIO_Init+0xf4>)
 80021b2:	f002 fcf3 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <MX_GPIO_Init+0xf8>)
 80021ce:	f002 fce5 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80021d2:	2340      	movs	r3, #64	@ 0x40
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2302      	movs	r3, #2
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4619      	mov	r1, r3
 80021e8:	4806      	ldr	r0, [pc, #24]	@ (8002204 <MX_GPIO_Init+0xfc>)
 80021ea:	f002 fcd7 	bl	8004b9c <HAL_GPIO_Init>

}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010800 	.word	0x40010800
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000

08002208 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(uint32_t *read_volt_HV) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

		HAL_ADC_Start(&hadc1);//start adc with adc1
 8002214:	481e      	ldr	r0, [pc, #120]	@ (8002290 <ReadHVInput+0x88>)
 8002216:	f001 f983 	bl	8003520 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800221a:	f04f 31ff 	mov.w	r1, #4294967295
 800221e:	481c      	ldr	r0, [pc, #112]	@ (8002290 <ReadHVInput+0x88>)
 8002220:	f001 fa58 	bl	80036d4 <HAL_ADC_PollForConversion>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);//get adc value and store it in adcValue
 800222a:	4819      	ldr	r0, [pc, #100]	@ (8002290 <ReadHVInput+0x88>)
 800222c:	f001 fb58 	bl	80038e0 <HAL_ADC_GetValue>
 8002230:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);//stop adc
 8002232:	4817      	ldr	r0, [pc, #92]	@ (8002290 <ReadHVInput+0x88>)
 8002234:	f001 fa22 	bl	800367c <HAL_ADC_Stop>

		//calculate voltage based on  resolution and gain on opamp, voltage divider ratio
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7fe fd6f 	bl	8000d1c <__aeabi_ui2f>
 800223e:	4603      	mov	r3, r0
 8002240:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe75 	bl	8000f34 <__aeabi_fdiv>
 800224a:	4603      	mov	r3, r0
 800224c:	4911      	ldr	r1, [pc, #68]	@ (8002294 <ReadHVInput+0x8c>)
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fdbc 	bl	8000dcc <__aeabi_fmul>
 8002254:	4603      	mov	r3, r0
 8002256:	613b      	str	r3, [r7, #16]
		float amcOutput = adcVoltage / GAIN_TLV9001;
 8002258:	490f      	ldr	r1, [pc, #60]	@ (8002298 <ReadHVInput+0x90>)
 800225a:	6938      	ldr	r0, [r7, #16]
 800225c:	f7fe fe6a 	bl	8000f34 <__aeabi_fdiv>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
		float hvInput = amcOutput * DIVIDER_RATIO;
 8002264:	490d      	ldr	r1, [pc, #52]	@ (800229c <ReadHVInput+0x94>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7fe fdb0 	bl	8000dcc <__aeabi_fmul>
 800226c:	4603      	mov	r3, r0
 800226e:	490c      	ldr	r1, [pc, #48]	@ (80022a0 <ReadHVInput+0x98>)
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe5f 	bl	8000f34 <__aeabi_fdiv>
 8002276:	4603      	mov	r3, r0
 8002278:	60bb      	str	r3, [r7, #8]

		*read_volt_HV = (uint32_t)(hvInput);
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f7fe fef6 	bl	800106c <__aeabi_f2uiz>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
	}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000134 	.word	0x20000134
 8002294:	40533333 	.word	0x40533333
 8002298:	3fca3d71 	.word	0x3fca3d71
 800229c:	49aae7e0 	.word	0x49aae7e0
 80022a0:	45d4d000 	.word	0x45d4d000

080022a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 80022aa:	af04      	add	r7, sp, #16
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	CANMessage msg;
	uint8_t safetyFaults = 0;
 80022ac:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80022b0:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 80022b8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80022bc:	f2a3 3302 	subw	r3, r3, #770	@ 0x302
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 80022c4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80022c8:	f2a3 3303 	subw	r3, r3, #771	@ 0x303
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d0:	f000 ffc8 	bl	8003264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d4:	f000 f928 	bl	8002528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d8:	f7ff ff16 	bl	8002108 <MX_GPIO_Init>
  MX_ADC1_Init();
 80022dc:	f7ff fb6e 	bl	80019bc <MX_ADC1_Init>
  MX_ADC2_Init();
 80022e0:	f7ff fbaa 	bl	8001a38 <MX_ADC2_Init>
  MX_TIM7_Init();
 80022e4:	f000 fe68 	bl	8002fb8 <MX_TIM7_Init>
  MX_SPI1_Init();
 80022e8:	f000 fc8a 	bl	8002c00 <MX_SPI1_Init>
  MX_CAN1_Init();
 80022ec:	f7ff fc58 	bl	8001ba0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80022f0:	f000 febe 	bl	8003070 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fd39 	bl	8001d70 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 80022fe:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 8002302:	2240      	movs	r2, #64	@ 0x40
 8002304:	4983      	ldr	r1, [pc, #524]	@ (8002514 <main+0x270>)
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f978 	bl	80025fc <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 800230c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002310:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f9b1 	bl	800267c <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 800231a:	f000 fcf9 	bl	8002d10 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2102      	movs	r1, #2
 8002322:	487d      	ldr	r0, [pc, #500]	@ (8002518 <main+0x274>)
 8002324:	f002 fdbe 	bl	8004ea4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002328:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800232c:	f000 fffc 	bl	8003328 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2102      	movs	r1, #2
 8002334:	4878      	ldr	r0, [pc, #480]	@ (8002518 <main+0x274>)
 8002336:	f002 fdb5 	bl	8004ea4 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
	uint8_t indexpause = 8;
 8002340:	2308      	movs	r3, #8
 8002342:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
	uint8_t low_volt_hysteresis = 0;
 8002346:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800234a:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
	uint8_t high_volt_hysteresis = 0;
 8002352:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002356:	f2a3 3305 	subw	r3, r3, #773	@ 0x305
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
	uint8_t cell_imbalance_hysteresis = 0;
 800235e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002362:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]

	//reading cell voltages
	Wakeup_Sleep();
 800236a:	f7ff f835 	bl	80013d8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 800236e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fa3c 	bl	80027f0 <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 8002378:	f7ff f82e 	bl	80013d8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 800237c:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 8002380:	f887 3305 	strb.w	r3, [r7, #773]	@ 0x305
 8002384:	e016      	b.n	80023b4 <main+0x110>
		Wakeup_Idle();
 8002386:	f7ff f807 	bl	8001398 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 800238a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238e:	f503 7217 	add.w	r2, r3, #604	@ 0x25c
 8002392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002396:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 800239a:	f897 3305 	ldrb.w	r3, [r7, #773]	@ 0x305
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fa3a 	bl	8002818 <Read_Temp>
		HAL_Delay(3);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 ffbf 	bl	8003328 <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80023aa:	f897 3305 	ldrb.w	r3, [r7, #773]	@ 0x305
 80023ae:	3301      	adds	r3, #1
 80023b0:	f887 3305 	strb.w	r3, [r7, #773]	@ 0x305
 80023b4:	f897 2305 	ldrb.w	r2, [r7, #773]	@ 0x305
 80023b8:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3e2      	bcc.n	8002386 <main+0xe2>
	}
	Wakeup_Idle();
 80023c0:	f7fe ffea 	bl	8001398 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 80023c4:	4955      	ldr	r1, [pc, #340]	@ (800251c <main+0x278>)
 80023c6:	2008      	movs	r0, #8
 80023c8:	f7ff f8da 	bl	8001580 <LTC_WRCOMM>
	Wakeup_Idle();
 80023cc:	f7fe ffe4 	bl	8001398 <Wakeup_Idle>
	LTC_STCOMM(2);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f7ff f943 	bl	800165c <LTC_STCOMM>

	ReadHVInput(&modPackInfo.pack_voltage);
 80023d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff12 	bl	8002208 <ReadHVInput>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80023e4:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 80023e8:	210a      	movs	r1, #10
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f923 	bl	8002636 <GpioFixedToggle>
		printf("hello\n");
 80023f0:	484b      	ldr	r0, [pc, #300]	@ (8002520 <main+0x27c>)
 80023f2:	f005 fd35 	bl	8007e60 <puts>
			//reading cell voltages
//			Wakeup_Sleep();
//			printf("volt start\n");
			Read_Volt(modPackInfo.cell_volt);
 80023f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f9f8 	bl	80027f0 <Read_Volt>
//			}

			//reading cell temperatures
//			Wakeup_Sleep();
//			printf("Temp start\n");
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002400:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 8002404:	f887 3304 	strb.w	r3, [r7, #772]	@ 0x304
 8002408:	e011      	b.n	800242e <main+0x18a>
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 800240a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240e:	f503 7217 	add.w	r2, r3, #604	@ 0x25c
 8002412:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002416:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 800241a:	f897 3304 	ldrb.w	r3, [r7, #772]	@ 0x304
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f9fa 	bl	8002818 <Read_Temp>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002424:	f897 3304 	ldrb.w	r3, [r7, #772]	@ 0x304
 8002428:	3301      	adds	r3, #1
 800242a:	f887 3304 	strb.w	r3, [r7, #772]	@ 0x304
 800242e:	f897 2304 	ldrb.w	r2, [r7, #772]	@ 0x304
 8002432:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 8002436:	429a      	cmp	r2, r3
 8002438:	d3e7      	bcc.n	800240a <main+0x166>
//				printf(" Cell: %d, Temp: %d\n", i, modPackInfo.cell_temp[i]);
//				HAL_Delay(1);
			}
			if (indexpause == 8) {
 800243a:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 800243e:	2b08      	cmp	r3, #8
 8002440:	d10c      	bne.n	800245c <main+0x1b8>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8002442:	4936      	ldr	r1, [pc, #216]	@ (800251c <main+0x278>)
 8002444:	2008      	movs	r0, #8
 8002446:	f7ff f89b 	bl	8001580 <LTC_WRCOMM>
				LTC_STCOMM(2);
 800244a:	2002      	movs	r0, #2
 800244c:	f7ff f906 	bl	800165c <LTC_STCOMM>
				tempindex = 8;
 8002450:	2308      	movs	r3, #8
 8002452:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
				indexpause = NUM_THERM_PER_MOD;
 8002456:	230c      	movs	r3, #12
 8002458:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
			}
			if (indexpause == NUM_THERM_PER_MOD) {
 800245c:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d10c      	bne.n	800247e <main+0x1da>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8002464:	492f      	ldr	r1, [pc, #188]	@ (8002524 <main+0x280>)
 8002466:	2008      	movs	r0, #8
 8002468:	f7ff f88a 	bl	8001580 <LTC_WRCOMM>
				LTC_STCOMM(2);
 800246c:	2002      	movs	r0, #2
 800246e:	f7ff f8f5 	bl	800165c <LTC_STCOMM>
				indexpause = 8;
 8002472:	2308      	movs	r3, #8
 8002474:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306
				tempindex = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
			}
//			printf("Temp end\n");

//			printf("pack volt start\n");
			ReadHVInput(&modPackInfo.pack_voltage);
 800247e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002482:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff febe 	bl	8002208 <ReadHVInput>
//			printf("pack volt end\n");
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

			//getting the summary of all cells in the pack
//			printf("cell summary volt start\n");
			Cell_Summary_Voltage(&modPackInfo, &safetyFaults,
 800248c:	1d7c      	adds	r4, r7, #5
 800248e:	1dba      	adds	r2, r7, #6
 8002490:	1df9      	adds	r1, r7, #7
 8002492:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002496:	1cbb      	adds	r3, r7, #2
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	1cfb      	adds	r3, r7, #3
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	4623      	mov	r3, r4
 80024a4:	f000 f9fa 	bl	800289c <Cell_Summary_Voltage>
								&safetyWarnings, &safetyStates, &low_volt_hysteresis,
								&high_volt_hysteresis, &cell_imbalance_hysteresis);
//			printf("cell summary volt end\n");

//			printf("cell summary temp start\n");
			Cell_Summary_Temperature(&modPackInfo, &safetyFaults,&safetyWarnings);
 80024a8:	1dba      	adds	r2, r7, #6
 80024aa:	1df9      	adds	r1, r7, #7
 80024ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fb35 	bl	8002b20 <Cell_Summary_Temperature>

//			} else if (BALANCE) {
//				End_Balance(&safetyFaults);
//			}

			if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 80024b6:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f8f1 	bl	80026a2 <TimerPacket_FixedPulse>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d08e      	beq.n	80023e4 <main+0x140>
			//calling all CAN realated methods
//			printf("CAN start\n");
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 80024c6:	1dbc      	adds	r4, r7, #6
 80024c8:	1dfa      	adds	r2, r7, #7
 80024ca:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80024ce:	f107 0008 	add.w	r0, r7, #8
 80024d2:	1d7b      	adds	r3, r7, #5
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	4623      	mov	r3, r4
 80024d8:	f7ff fdd5 	bl	8002086 <CAN_Send_Safety_Checker>
					&safetyWarnings, &safetyStates);
			CAN_Send_Cell_Summary(&msg, &modPackInfo);
 80024dc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd7d 	bl	8001fe6 <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 80024ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fc5f 	bl	8001dba <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 80024fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002500:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fcdf 	bl	8001ece <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002510:	e768      	b.n	80023e4 <main+0x140>
 8002512:	bf00      	nop
 8002514:	40011000 	.word	0x40011000
 8002518:	40010c00 	.word	0x40010c00
 800251c:	20000000 	.word	0x20000000
 8002520:	080090a4 	.word	0x080090a4
 8002524:	20000006 	.word	0x20000006

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b09c      	sub	sp, #112	@ 0x70
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002532:	2238      	movs	r2, #56	@ 0x38
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f005 fda6 	bl	8008088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2220      	movs	r2, #32
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fd98 	bl	8008088 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002558:	2301      	movs	r3, #1
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800255c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002560:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002562:	2304      	movs	r3, #4
 8002564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002566:	2301      	movs	r3, #1
 8002568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800256a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002570:	2302      	movs	r3, #2
 8002572:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002578:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800257a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800257e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002580:	2302      	movs	r3, #2
 8002582:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002584:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002588:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800258a:	2340      	movs	r3, #64	@ 0x40
 800258c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800258e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fcb8 	bl	8004f08 <HAL_RCC_OscConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800259e:	f000 f89d 	bl	80026dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a2:	230f      	movs	r3, #15
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 ffb8 	bl	8005534 <HAL_RCC_ClockConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80025ca:	f000 f887 	bl	80026dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025ce:	2302      	movs	r3, #2
 80025d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80025d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f9a0 	bl	8005920 <HAL_RCCEx_PeriphCLKConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025e6:	f000 f879 	bl	80026dc <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80025ea:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <SystemClock_Config+0xd0>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	3770      	adds	r7, #112	@ 0x70
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	42420070 	.word	0x42420070

080025fc <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	68b8      	ldr	r0, [r7, #8]
 8002612:	f002 fc47 	bl	8004ea4 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002642:	f000 fe67 	bl	8003314 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	1ad2      	subs	r2, r2, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	429a      	cmp	r2, r3
 800265a:	d90b      	bls.n	8002674 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	889b      	ldrh	r3, [r3, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f002 fc34 	bl	8004ed4 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
	}
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80026aa:	f000 fe33 	bl	8003314 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d905      	bls.n	80026d2 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <Error_Handler+0x8>

080026e8 <Get_Actual_Temps>:
								 { 0x69, 0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F, 0xF9 },
							 	 { 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp, uint16_t data) {
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	603a      	str	r2, [r7, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
 80026f6:	460b      	mov	r3, r1
 80026f8:	71bb      	strb	r3, [r7, #6]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80bb      	strh	r3, [r7, #4]
    if (data == 0) {
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10e      	bne.n	8002722 <Get_Actual_Temps+0x3a>
        actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = 999.0f; // error value
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	461a      	mov	r2, r3
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800271e:	801a      	strh	r2, [r3, #0]
        return;
 8002720:	e059      	b.n	80027d6 <Get_Actual_Temps+0xee>
    }

    float scalar = 30000.0f / (float)(data) - 1.0f;
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe faf9 	bl	8000d1c <__aeabi_ui2f>
 800272a:	4603      	mov	r3, r0
 800272c:	4619      	mov	r1, r3
 800272e:	482b      	ldr	r0, [pc, #172]	@ (80027dc <Get_Actual_Temps+0xf4>)
 8002730:	f7fe fc00 	bl	8000f34 <__aeabi_fdiv>
 8002734:	4603      	mov	r3, r0
 8002736:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fa3c 	bl	8000bb8 <__aeabi_fsub>
 8002740:	4603      	mov	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]
    scalar = ntcSeriesResistance / scalar;
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	4826      	ldr	r0, [pc, #152]	@ (80027e0 <Get_Actual_Temps+0xf8>)
 8002748:	f7fe fbf4 	bl	8000f34 <__aeabi_fdiv>
 800274c:	4603      	mov	r3, r0
 800274e:	60fb      	str	r3, [r7, #12]

    float steinhart = scalar / ntcNominal;
 8002750:	4923      	ldr	r1, [pc, #140]	@ (80027e0 <Get_Actual_Temps+0xf8>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7fe fbee 	bl	8000f34 <__aeabi_fdiv>
 8002758:	4603      	mov	r3, r0
 800275a:	60bb      	str	r3, [r7, #8]
    steinhart = log(steinhart);
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f7fd fecf 	bl	8000500 <__aeabi_f2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f006 faa5 	bl	8008cb8 <log>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe f9cb 	bl	8000b10 <__aeabi_d2f>
 800277a:	4603      	mov	r3, r0
 800277c:	60bb      	str	r3, [r7, #8]
    steinhart *= invBetaFactor;
 800277e:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <Get_Actual_Temps+0xfc>)
 8002780:	4619      	mov	r1, r3
 8002782:	68b8      	ldr	r0, [r7, #8]
 8002784:	f7fe fb22 	bl	8000dcc <__aeabi_fmul>
 8002788:	4603      	mov	r3, r0
 800278a:	60bb      	str	r3, [r7, #8]
    steinhart += invNominalTemp;
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <Get_Actual_Temps+0x100>)
 800278e:	4619      	mov	r1, r3
 8002790:	68b8      	ldr	r0, [r7, #8]
 8002792:	f7fe fa13 	bl	8000bbc <__addsf3>
 8002796:	4603      	mov	r3, r0
 8002798:	60bb      	str	r3, [r7, #8]
    steinhart = 1.0f / steinhart;
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80027a0:	f7fe fbc8 	bl	8000f34 <__aeabi_fdiv>
 80027a4:	4603      	mov	r3, r0
 80027a6:	60bb      	str	r3, [r7, #8]
    steinhart -= 273.15f;
 80027a8:	4910      	ldr	r1, [pc, #64]	@ (80027ec <Get_Actual_Temps+0x104>)
 80027aa:	68b8      	ldr	r0, [r7, #8]
 80027ac:	f7fe fa04 	bl	8000bb8 <__aeabi_fsub>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60bb      	str	r3, [r7, #8]

    actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 80027b4:	79fa      	ldrb	r2, [r7, #7]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	461a      	mov	r2, r3
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	18d4      	adds	r4, r2, r3
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	f7fe fc4e 	bl	800106c <__aeabi_f2uiz>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8023      	strh	r3, [r4, #0]
}
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	46ea6000 	.word	0x46ea6000
 80027e0:	461c4000 	.word	0x461c4000
 80027e4:	3998a193 	.word	0x3998a193
 80027e8:	3b5bcf0f 	.word	0x3b5bcf0f
 80027ec:	43889333 	.word	0x43889333

080027f0 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
//	printf("voltage read start\n");
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);//ADC mode: MD_FILTERED, MD_NORMAL, MD_FAST
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	2003      	movs	r0, #3
 80027fe:	f7ff f825 	bl	800184c <LTC_ADCV>
	HAL_Delay(NORMAL_DELAY); //FAST_DELAY, NORMAL_DELAY, FILTERD_DELAY;
 8002802:	2004      	movs	r0, #4
 8002804:	f000 fd90 	bl	8003328 <HAL_Delay>
	Read_Cell_Volt((uint16_t*) read_volt);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fe01 	bl	8001410 <Read_Cell_Volt>
//	printf("voltage read end\n");
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	73fb      	strb	r3, [r7, #15]
//	printf("Temperature read start\n");
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4a19      	ldr	r2, [pc, #100]	@ (8002898 <Read_Temp+0x80>)
 8002832:	4413      	add	r3, r2
 8002834:	4619      	mov	r1, r3
 8002836:	2008      	movs	r0, #8
 8002838:	f7fe fea2 	bl	8001580 <LTC_WRCOMM>
	LTC_STCOMM(2);
 800283c:	2002      	movs	r0, #2
 800283e:	f7fe ff0d 	bl	800165c <LTC_STCOMM>
	//end sending to mux to read temperatures
	LTC_ADAX(MD_FAST, 1); //ADC mode: MD_FILTERED, MD_NORMAL, MD_FAST
 8002842:	2101      	movs	r1, #1
 8002844:	2001      	movs	r0, #1
 8002846:	f7ff f847 	bl	80018d8 <LTC_ADAX>
	HAL_Delay(FAST_DELAY); //FAST_DELAY, NORMAL_DELAY, FILTERD_DELAY;
 800284a:	2002      	movs	r0, #2
 800284c:	f000 fd6c 	bl	8003328 <HAL_Delay>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fe ff43 	bl	80016dc <Read_Cell_Temps>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d118      	bne.n	800288e <Read_Temp+0x76>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]
 8002860:	e012      	b.n	8002888 <Read_Temp+0x70>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8002862:	7dfa      	ldrb	r2, [r7, #23]
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002876:	8abb      	ldrh	r3, [r7, #20]
 8002878:	7bf9      	ldrb	r1, [r7, #15]
 800287a:	7df8      	ldrb	r0, [r7, #23]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	f7ff ff33 	bl	80026e8 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	3301      	adds	r3, #1
 8002886:	75fb      	strb	r3, [r7, #23]
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b07      	cmp	r3, #7
 800288c:	d9e9      	bls.n	8002862 <Read_Temp+0x4a>

		}
	}
//	printf("Temperature read end\n");
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000000c 	.word	0x2000000c

0800289c <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252
	batt->cell_volt_lowest = batt->cell_volt[0];
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8a3 2250 	strh.w	r2, [r3, #592]	@ 0x250

	for (int i = 1; i < NUM_CELLS; i++) {
 80028be:	2301      	movs	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e11a      	b.n	8002afa <Cell_Summary_Voltage+0x25e>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d93a      	bls.n	800294c <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f8a3 2252 	strh.w	r2, [r3, #594]	@ 0x252

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 80028ea:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d906      	bls.n	8002900 <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002906:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800290a:	4293      	cmp	r3, r2
 800290c:	d910      	bls.n	8002930 <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f043 0310 	orr.w	r3, r3, #16
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002924:	2201      	movs	r2, #1
 8002926:	2102      	movs	r1, #2
 8002928:	4878      	ldr	r0, [pc, #480]	@ (8002b0c <Cell_Summary_Voltage+0x270>)
 800292a:	f002 fabb 	bl	8004ea4 <HAL_GPIO_WritePin>
 800292e:	e00d      	b.n	800294c <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002936:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800293a:	4293      	cmp	r3, r2
 800293c:	d903      	bls.n	8002946 <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e002      	b.n	800294c <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 800295a:	429a      	cmp	r2, r3
 800295c:	d23a      	bcs.n	80029d4 <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f8a3 2250 	strh.w	r2, [r3, #592]	@ 0x250

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002972:	f646 1278 	movw	r2, #27000	@ 0x6978
 8002976:	4293      	cmp	r3, r2
 8002978:	d806      	bhi.n	8002988 <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	f043 0320 	orr.w	r3, r3, #32
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 800298e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002992:	4293      	cmp	r3, r2
 8002994:	d810      	bhi.n	80029b8 <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00c      	beq.n	80029b8 <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	2102      	movs	r1, #2
 80029b0:	4856      	ldr	r0, [pc, #344]	@ (8002b0c <Cell_Summary_Voltage+0x270>)
 80029b2:	f002 fa77 	bl	8004ea4 <HAL_GPIO_WritePin>
 80029b6:	e00d      	b.n	80029d4 <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 80029be:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d803      	bhi.n	80029ce <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e002      	b.n	80029d4 <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80029e8:	db10      	blt.n	8002a0c <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 80029ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2102      	movs	r1, #2
 8002a04:	4841      	ldr	r0, [pc, #260]	@ (8002b0c <Cell_Summary_Voltage+0x270>)
 8002a06:	f002 fa4d 	bl	8004ea4 <HAL_GPIO_WritePin>
 8002a0a:	e011      	b.n	8002a30 <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002a20:	db03      	blt.n	8002a2a <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e002      	b.n	8002a30 <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a44:	db06      	blt.n	8002a54 <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <Cell_Summary_Voltage+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d906      	bls.n	8002a6e <Cell_Summary_Voltage+0x1d2>
			*warnings |= 0b10000000;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002a74:	4a27      	ldr	r2, [pc, #156]	@ (8002b14 <Cell_Summary_Voltage+0x278>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d806      	bhi.n	8002a88 <Cell_Summary_Voltage+0x1ec>
			*warnings |= 0b01000000;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002a8e:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <Cell_Summary_Voltage+0x27c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d90b      	bls.n	8002aac <Cell_Summary_Voltage+0x210>
			*fault |= 0b10000000;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4819      	ldr	r0, [pc, #100]	@ (8002b0c <Cell_Summary_Voltage+0x270>)
 8002aa8:	f002 f9fc 	bl	8004ea4 <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b1c <Cell_Summary_Voltage+0x280>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d80b      	bhi.n	8002ad0 <Cell_Summary_Voltage+0x234>
			*fault |= 0b01000000;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4810      	ldr	r0, [pc, #64]	@ (8002b0c <Cell_Summary_Voltage+0x270>)
 8002acc:	f002 f9ea 	bl	8004ea4 <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f8b3 3252 	ldrh.w	r3, [r3, #594]	@ 0x252
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3250 	ldrh.w	r3, [r3, #592]	@ 0x250
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ae4:	db06      	blt.n	8002af4 <Cell_Summary_Voltage+0x258>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b5f      	cmp	r3, #95	@ 0x5f
 8002afe:	f77f aee1 	ble.w	80028c4 <Cell_Summary_Voltage+0x28>
		}
//		if (BALANCE) {
//			*states |= 0b10000000;
//		}
	}
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40010c00 	.word	0x40010c00
 8002b10:	003e5507 	.word	0x003e5507
 8002b14:	002dc6c0 	.word	0x002dc6c0
 8002b18:	003e8f9f 	.word	0x003e8f9f
 8002b1c:	002bf200 	.word	0x002bf200

08002b20 <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8a3 2256 	strh.w	r2, [r3, #598]	@ 0x256
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8a3 2254 	strh.w	r2, [r3, #596]	@ 0x254

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e04f      	b.n	8002bea <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 2256 	ldrh.w	r2, [r3, #598]	@ 0x256
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	3160      	adds	r1, #96	@ 0x60
 8002b56:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d224      	bcs.n	8002ba8 <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	3260      	adds	r2, #96	@ 0x60
 8002b64:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8a3 2256 	strh.w	r2, [r3, #598]	@ 0x256
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 8002b74:	2b36      	cmp	r3, #54	@ 0x36
 8002b76:	d906      	bls.n	8002b86 <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8b3 3256 	ldrh.w	r3, [r3, #598]	@ 0x256
 8002b8c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b8e:	d90b      	bls.n	8002ba8 <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4816      	ldr	r0, [pc, #88]	@ (8002bfc <Cell_Summary_Temperature+0xdc>)
 8002ba4:	f002 f97e 	bl	8004ea4 <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8b3 2254 	ldrh.w	r2, [r3, #596]	@ 0x254
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	3160      	adds	r1, #96	@ 0x60
 8002bb4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d913      	bls.n	8002be4 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	3260      	adds	r2, #96	@ 0x60
 8002bc2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8a3 2254 	strh.w	r2, [r3, #596]	@ 0x254

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8b3 3254 	ldrh.w	r3, [r3, #596]	@ 0x254
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b5f      	cmp	r3, #95	@ 0x5f
 8002bee:	ddac      	ble.n	8002b4a <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40010c00 	.word	0x40010c00

08002c00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c04:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c06:	4a18      	ldr	r2, [pc, #96]	@ (8002c68 <MX_SPI1_Init+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c0a:	4b16      	ldr	r3, [pc, #88]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c32:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c34:	2228      	movs	r2, #40	@ 0x28
 8002c36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c44:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c4c:	220a      	movs	r2, #10
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c50:	4804      	ldr	r0, [pc, #16]	@ (8002c64 <MX_SPI1_Init+0x64>)
 8002c52:	f003 f8e9 	bl	8005e28 <HAL_SPI_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c5c:	f7ff fd3e 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200001bc 	.word	0x200001bc
 8002c68:	40013000 	.word	0x40013000

08002c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <HAL_SPI_MspInit+0x98>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d137      	bne.n	8002cfc <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_SPI_MspInit+0x9c>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_SPI_MspInit+0x9c>)
 8002c92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <HAL_SPI_MspInit+0x9c>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <HAL_SPI_MspInit+0x9c>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <HAL_SPI_MspInit+0x9c>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_SPI_MspInit+0x9c>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002cbc:	23a0      	movs	r3, #160	@ 0xa0
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480f      	ldr	r0, [pc, #60]	@ (8002d0c <HAL_SPI_MspInit+0xa0>)
 8002cd0:	f001 ff64 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cd4:	2340      	movs	r3, #64	@ 0x40
 8002cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4809      	ldr	r0, [pc, #36]	@ (8002d0c <HAL_SPI_MspInit+0xa0>)
 8002ce8:	f001 ff58 	bl	8004b9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2023      	movs	r0, #35	@ 0x23
 8002cf2:	f001 fdda 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002cf6:	2023      	movs	r0, #35	@ 0x23
 8002cf8:	f001 fdf3 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013000 	.word	0x40013000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010800 	.word	0x40010800

08002d10 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002d14:	2201      	movs	r2, #1
 8002d16:	2110      	movs	r1, #16
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <LTC_nCS_High+0x14>)
 8002d1a:	f002 f8c3 	bl	8004ea4 <HAL_GPIO_WritePin>
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40010800 	.word	0x40010800

08002d28 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2110      	movs	r1, #16
 8002d30:	4802      	ldr	r0, [pc, #8]	@ (8002d3c <LTC_nCS_Low+0x14>)
 8002d32:	f002 f8b7 	bl	8004ea4 <HAL_GPIO_WritePin>
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40010800 	.word	0x40010800

08002d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_MspInit+0x5c>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <HAL_MspInit+0x5c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6193      	str	r3, [r2, #24]
 8002d52:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_MspInit+0x5c>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <HAL_MspInit+0x5c>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <HAL_MspInit+0x5c>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	61d3      	str	r3, [r2, #28]
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <HAL_MspInit+0x5c>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_MspInit+0x60>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_MspInit+0x60>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <NMI_Handler+0x4>

08002dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <MemManage_Handler+0x4>

08002dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df4:	f000 fa7c 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e00:	4803      	ldr	r0, [pc, #12]	@ (8002e10 <ADC1_2_IRQHandler+0x14>)
 8002e02:	f000 fd79 	bl	80038f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e06:	4803      	ldr	r0, [pc, #12]	@ (8002e14 <ADC1_2_IRQHandler+0x18>)
 8002e08:	f000 fd76 	bl	80038f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000134 	.word	0x20000134
 8002e14:	20000164 	.word	0x20000164

08002e18 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <CAN1_TX_IRQHandler+0x10>)
 8002e1e:	f001 fa40 	bl	80042a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000194 	.word	0x20000194

08002e2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <CAN1_RX0_IRQHandler+0x10>)
 8002e32:	f001 fa36 	bl	80042a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000194 	.word	0x20000194

08002e40 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <CAN1_RX1_IRQHandler+0x10>)
 8002e46:	f001 fa2c 	bl	80042a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000194 	.word	0x20000194

08002e54 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <CAN1_SCE_IRQHandler+0x10>)
 8002e5a:	f001 fa22 	bl	80042a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000194 	.word	0x20000194

08002e68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	@ (8002e78 <SPI1_IRQHandler+0x10>)
 8002e6e:	f003 fc65 	bl	800673c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200001bc 	.word	0x200001bc

08002e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e80:	4802      	ldr	r0, [pc, #8]	@ (8002e8c <USART1_IRQHandler+0x10>)
 8002e82:	f004 f99b 	bl	80071bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000264 	.word	0x20000264

08002e90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e94:	4802      	ldr	r0, [pc, #8]	@ (8002ea0 <TIM7_IRQHandler+0x10>)
 8002e96:	f003 fea7 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000218 	.word	0x20000218

08002ea4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e00a      	b.n	8002ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eb6:	f3af 8000 	nop.w
 8002eba:	4601      	mov	r1, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	b2ca      	uxtb	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dbf0      	blt.n	8002eb6 <_read+0x12>
  }

  return len;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f04:	605a      	str	r2, [r3, #4]
  return 0;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <_isatty>:

int _isatty(int file)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
	...

08002f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f48:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <_sbrk+0x5c>)
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <_sbrk+0x60>)
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f54:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <_sbrk+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <_sbrk+0x64>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	@ (8002fa8 <_sbrk+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f62:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <_sbrk+0x64>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d207      	bcs.n	8002f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f70:	f005 f8ec 	bl	800814c <__errno>
 8002f74:	4603      	mov	r3, r0
 8002f76:	220c      	movs	r2, #12
 8002f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	e009      	b.n	8002f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f80:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f86:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <_sbrk+0x64>)
 8002f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20010000 	.word	0x20010000
 8002fa0:	00000400 	.word	0x00000400
 8002fa4:	20000214 	.word	0x20000214
 8002fa8:	20000400 	.word	0x20000400

08002fac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <MX_TIM7_Init+0x64>)
 8002fc8:	4a15      	ldr	r2, [pc, #84]	@ (8003020 <MX_TIM7_Init+0x68>)
 8002fca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	@ (800301c <MX_TIM7_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd2:	4b12      	ldr	r3, [pc, #72]	@ (800301c <MX_TIM7_Init+0x64>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002fd8:	4b10      	ldr	r3, [pc, #64]	@ (800301c <MX_TIM7_Init+0x64>)
 8002fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fde:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <MX_TIM7_Init+0x64>)
 8002fe2:	2280      	movs	r2, #128	@ 0x80
 8002fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002fe6:	480d      	ldr	r0, [pc, #52]	@ (800301c <MX_TIM7_Init+0x64>)
 8002fe8:	f003 fdaf 	bl	8006b4a <HAL_TIM_Base_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002ff2:	f7ff fb73 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ffe:	463b      	mov	r3, r7
 8003000:	4619      	mov	r1, r3
 8003002:	4806      	ldr	r0, [pc, #24]	@ (800301c <MX_TIM7_Init+0x64>)
 8003004:	f003 ff86 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800300e:	f7ff fb65 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000218 	.word	0x20000218
 8003020:	40001400 	.word	0x40001400

08003024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <HAL_TIM_Base_MspInit+0x44>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d113      	bne.n	800305e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <HAL_TIM_Base_MspInit+0x48>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4a0c      	ldr	r2, [pc, #48]	@ (800306c <HAL_TIM_Base_MspInit+0x48>)
 800303c:	f043 0320 	orr.w	r3, r3, #32
 8003040:	61d3      	str	r3, [r2, #28]
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_TIM_Base_MspInit+0x48>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	2037      	movs	r0, #55	@ 0x37
 8003054:	f001 fc29 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003058:	2037      	movs	r0, #55	@ 0x37
 800305a:	f001 fc42 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40001400 	.word	0x40001400
 800306c:	40021000 	.word	0x40021000

08003070 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 8003076:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 8003078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800307a:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 800307c:	4a10      	ldr	r2, [pc, #64]	@ (80030c0 <MX_USART1_UART_Init+0x50>)
 800307e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003080:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003086:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 800308e:	2200      	movs	r2, #0
 8003090:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003092:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 8003094:	220c      	movs	r2, #12
 8003096:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003098:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_USART1_UART_Init+0x48>)
 80030a6:	f003 ffad 	bl	8007004 <HAL_UART_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80030b0:	f7ff fb14 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000264 	.word	0x20000264
 80030bc:	40013800 	.word	0x40013800
 80030c0:	0003d090 	.word	0x0003d090

080030c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <HAL_UART_MspInit+0x9c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d139      	bne.n	8003158 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <HAL_UART_MspInit+0xa0>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <HAL_UART_MspInit+0xa0>)
 80030ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ee:	6193      	str	r3, [r2, #24]
 80030f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <HAL_UART_MspInit+0xa0>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_UART_MspInit+0xa0>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <HAL_UART_MspInit+0xa0>)
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	6193      	str	r3, [r2, #24]
 8003108:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <HAL_UART_MspInit+0xa0>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2302      	movs	r3, #2
 8003120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4619      	mov	r1, r3
 8003128:	480f      	ldr	r0, [pc, #60]	@ (8003168 <HAL_UART_MspInit+0xa4>)
 800312a:	f001 fd37 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800312e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	4619      	mov	r1, r3
 8003142:	4809      	ldr	r0, [pc, #36]	@ (8003168 <HAL_UART_MspInit+0xa4>)
 8003144:	f001 fd2a 	bl	8004b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2104      	movs	r1, #4
 800314c:	2025      	movs	r0, #37	@ 0x25
 800314e:	f001 fbac 	bl	80048aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003152:	2025      	movs	r0, #37	@ 0x25
 8003154:	f001 fbc5 	bl	80048e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40013800 	.word	0x40013800
 8003164:	40021000 	.word	0x40021000
 8003168:	40010800 	.word	0x40010800

0800316c <_write>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len) {					//overloading printf() for UART with DMA
 800316c:	b580      	push	{r7, lr}
 800316e:	b0a8      	sub	sp, #160	@ 0xa0
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
    char buffer[128]; // バッファ
    uint32_t current_tick = HAL_GetTick(); // get current time
 8003178:	f000 f8cc 	bl	8003314 <HAL_GetTick>
 800317c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    uint32_t elapsed_time = current_tick - last_tick; // get difference from last time
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <_write+0xa0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    last_tick = current_tick; //refresh the last time
 800318e:	4a1f      	ldr	r2, [pc, #124]	@ (800320c <_write+0xa0>)
 8003190:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003194:	6013      	str	r3, [r2, #0]

    //format timestamp and elapsed time
    int offset = snprintf(buffer, sizeof(buffer), "[+%lu ms] ", elapsed_time);
 8003196:	f107 0010 	add.w	r0, r7, #16
 800319a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800319e:	4a1c      	ldr	r2, [pc, #112]	@ (8003210 <_write+0xa4>)
 80031a0:	2180      	movs	r1, #128	@ 0x80
 80031a2:	f004 fe65 	bl	8007e70 <sniprintf>
 80031a6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    //copy the message from printf and merge with time stamp
    int copy_len = (len < (sizeof(buffer) - offset - 1)) ? len : (sizeof(buffer) - offset - 1);
 80031aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ae:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf28      	it	cs
 80031b8:	4613      	movcs	r3, r2
 80031ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    strncpy(buffer + offset, ptr, copy_len);
 80031be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031c2:	f107 0210 	add.w	r2, r7, #16
 80031c6:	4413      	add	r3, r2
 80031c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 ff62 	bl	8008098 <strncpy>
    buffer[offset + copy_len] = '\0';
 80031d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031dc:	4413      	add	r3, r2
 80031de:	33a0      	adds	r3, #160	@ 0xa0
 80031e0:	443b      	add	r3, r7
 80031e2:	2200      	movs	r2, #0
 80031e4:	f803 2c90 	strb.w	r2, [r3, #-144]

    //send with DMA and UART
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f81b 	bl	8000228 <strlen>
 80031f2:	4603      	mov	r3, r0
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	f107 0110 	add.w	r1, r7, #16
 80031fa:	2364      	movs	r3, #100	@ 0x64
 80031fc:	4805      	ldr	r0, [pc, #20]	@ (8003214 <_write+0xa8>)
 80031fe:	f003 ff51 	bl	80070a4 <HAL_UART_Transmit>

    return len;
 8003202:	687b      	ldr	r3, [r7, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	37a0      	adds	r7, #160	@ 0xa0
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000260 	.word	0x20000260
 8003210:	080090ac 	.word	0x080090ac
 8003214:	20000264 	.word	0x20000264

08003218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003218:	f7ff fec8 	bl	8002fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800321c:	480b      	ldr	r0, [pc, #44]	@ (800324c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800321e:	490c      	ldr	r1, [pc, #48]	@ (8003250 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003220:	4a0c      	ldr	r2, [pc, #48]	@ (8003254 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a09      	ldr	r2, [pc, #36]	@ (8003258 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003234:	4c09      	ldr	r4, [pc, #36]	@ (800325c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003242:	f004 ff89 	bl	8008158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003246:	f7ff f82d 	bl	80022a4 <main>
  bx lr
 800324a:	4770      	bx	lr
  ldr r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003250:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8003254:	08009560 	.word	0x08009560
  ldr r2, =_sbss
 8003258:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 800325c:	200003fc 	.word	0x200003fc

08003260 <CAN2_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003260:	e7fe      	b.n	8003260 <CAN2_RX0_IRQHandler>
	...

08003264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_Init+0x28>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_Init+0x28>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f001 fb0d 	bl	8004894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	200f      	movs	r0, #15
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fd5e 	bl	8002d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fb25 	bl	80048fe <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f001 faed 	bl	80048aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	@ (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	2000006c 	.word	0x2000006c
 80032e8:	20000074 	.word	0x20000074
 80032ec:	20000070 	.word	0x20000070

080032f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_IncTick+0x1c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_IncTick+0x20>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a03      	ldr	r2, [pc, #12]	@ (8003310 <HAL_IncTick+0x20>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	20000074 	.word	0x20000074
 8003310:	200002ac 	.word	0x200002ac

08003314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b02      	ldr	r3, [pc, #8]	@ (8003324 <HAL_GetTick+0x10>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	200002ac 	.word	0x200002ac

08003328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003330:	f7ff fff0 	bl	8003314 <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d005      	beq.n	800334e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_Delay+0x44>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800334e:	bf00      	nop
 8003350:	f7ff ffe0 	bl	8003314 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	429a      	cmp	r2, r3
 800335e:	d8f7      	bhi.n	8003350 <HAL_Delay+0x28>
  {
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000074 	.word	0x20000074

08003370 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0be      	b.n	8003510 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe fb80 	bl	8001ab4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fcc3 	bl	8003d40 <ADC_ConversionStop_Disable>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 8099 	bne.w	80034fe <HAL_ADC_Init+0x18e>
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 8095 	bne.w	80034fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033dc:	f023 0302 	bic.w	r3, r3, #2
 80033e0:	f043 0202 	orr.w	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7b1b      	ldrb	r3, [r3, #12]
 80033f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003408:	d003      	beq.n	8003412 <HAL_ADC_Init+0xa2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_ADC_Init+0xa8>
 8003412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003416:	e000      	b.n	800341a <HAL_ADC_Init+0xaa>
 8003418:	2300      	movs	r3, #0
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7d1b      	ldrb	r3, [r3, #20]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d119      	bne.n	800345c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7b1b      	ldrb	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	3b01      	subs	r3, #1
 8003436:	035a      	lsls	r2, r3, #13
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e00b      	b.n	800345c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	4b28      	ldr	r3, [pc, #160]	@ (8003518 <HAL_ADC_Init+0x1a8>)
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	430b      	orrs	r3, r1
 8003482:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348c:	d003      	beq.n	8003496 <HAL_ADC_Init+0x126>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d104      	bne.n	80034a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	3b01      	subs	r3, #1
 800349c:	051b      	lsls	r3, r3, #20
 800349e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	4b18      	ldr	r3, [pc, #96]	@ (800351c <HAL_ADC_Init+0x1ac>)
 80034bc:	4013      	ands	r3, r2
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d10b      	bne.n	80034dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034da:	e018      	b.n	800350e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	f023 0312 	bic.w	r3, r3, #18
 80034e4:	f043 0210 	orr.w	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034fc:	e007      	b.n	800350e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	ffe1f7fd 	.word	0xffe1f7fd
 800351c:	ff1f0efe 	.word	0xff1f0efe

08003520 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_ADC_Start+0x1a>
 8003536:	2302      	movs	r3, #2
 8003538:	e098      	b.n	800366c <HAL_ADC_Start+0x14c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fba2 	bl	8003c8c <ADC_Enable>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8087 	bne.w	8003662 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a41      	ldr	r2, [pc, #260]	@ (8003674 <HAL_ADC_Start+0x154>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d105      	bne.n	800357e <HAL_ADC_Start+0x5e>
 8003572:	4b41      	ldr	r3, [pc, #260]	@ (8003678 <HAL_ADC_Start+0x158>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d115      	bne.n	80035aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d026      	beq.n	80035e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035a8:	e01d      	b.n	80035e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003678 <HAL_ADC_Start+0x158>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_ADC_Start+0xaa>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003674 <HAL_ADC_Start+0x154>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10d      	bne.n	80035e6 <HAL_ADC_Start+0xc6>
 80035ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_ADC_Start+0x158>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	f023 0206 	bic.w	r2, r3, #6
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035fe:	e002      	b.n	8003606 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0202 	mvn.w	r2, #2
 8003616:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003622:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003626:	d113      	bne.n	8003650 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_ADC_Start+0x154>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d105      	bne.n	800363e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003632:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <HAL_ADC_Start+0x158>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	e00c      	b.n	800366a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e003      	b.n	800366a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40012800 	.word	0x40012800
 8003678:	40012400 	.word	0x40012400

0800367c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_ADC_Stop+0x1a>
 8003692:	2302      	movs	r3, #2
 8003694:	e01a      	b.n	80036cc <HAL_ADC_Stop+0x50>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fb4e 	bl	8003d40 <ADC_ConversionStop_Disable>
 80036a4:	4603      	mov	r3, r0
 80036a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80036ea:	f7ff fe13 	bl	8003314 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0d3      	b.n	80038be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d131      	bne.n	8003788 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800372e:	2b00      	cmp	r3, #0
 8003730:	d12a      	bne.n	8003788 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003732:	e021      	b.n	8003778 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d01d      	beq.n	8003778 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_ADC_PollForConversion+0x7e>
 8003742:	f7ff fde7 	bl	8003314 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d212      	bcs.n	8003778 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0a2      	b.n	80038be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0d6      	beq.n	8003734 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003786:	e070      	b.n	800386a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003788:	4b4f      	ldr	r3, [pc, #316]	@ (80038c8 <HAL_ADC_PollForConversion+0x1f4>)
 800378a:	681c      	ldr	r4, [r3, #0]
 800378c:	2002      	movs	r0, #2
 800378e:	f002 f9f9 	bl	8005b84 <HAL_RCCEx_GetPeriphCLKFreq>
 8003792:	4603      	mov	r3, r0
 8003794:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <HAL_ADC_PollForConversion+0x1f8>)
 80037a0:	400b      	ands	r3, r1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x104>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68d9      	ldr	r1, [r3, #12]
 80037ac:	4b48      	ldr	r3, [pc, #288]	@ (80038d0 <HAL_ADC_PollForConversion+0x1fc>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x104>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6919      	ldr	r1, [r3, #16]
 80037ba:	4b46      	ldr	r3, [pc, #280]	@ (80038d4 <HAL_ADC_PollForConversion+0x200>)
 80037bc:	400b      	ands	r3, r1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_ADC_PollForConversion+0x100>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68d9      	ldr	r1, [r3, #12]
 80037c8:	4b43      	ldr	r3, [pc, #268]	@ (80038d8 <HAL_ADC_PollForConversion+0x204>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_PollForConversion+0x100>
 80037d0:	2314      	movs	r3, #20
 80037d2:	e020      	b.n	8003816 <HAL_ADC_PollForConversion+0x142>
 80037d4:	2329      	movs	r3, #41	@ 0x29
 80037d6:	e01e      	b.n	8003816 <HAL_ADC_PollForConversion+0x142>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_ADC_PollForConversion+0x200>)
 80037e0:	400b      	ands	r3, r1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_ADC_PollForConversion+0x120>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68d9      	ldr	r1, [r3, #12]
 80037ec:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_ADC_PollForConversion+0x204>)
 80037ee:	400b      	ands	r3, r1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_ADC_PollForConversion+0x13c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6919      	ldr	r1, [r3, #16]
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_ADC_PollForConversion+0x208>)
 80037fc:	400b      	ands	r3, r1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <HAL_ADC_PollForConversion+0x140>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68d9      	ldr	r1, [r3, #12]
 8003808:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_ADC_PollForConversion+0x208>)
 800380a:	400b      	ands	r3, r1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_PollForConversion+0x140>
 8003810:	2354      	movs	r3, #84	@ 0x54
 8003812:	e000      	b.n	8003816 <HAL_ADC_PollForConversion+0x142>
 8003814:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800381c:	e021      	b.n	8003862 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d01a      	beq.n	800385c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_ADC_PollForConversion+0x168>
 800382c:	f7ff fd72 	bl	8003314 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d20f      	bcs.n	800385c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d90b      	bls.n	800385c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	f043 0204 	orr.w	r2, r3, #4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e030      	b.n	80038be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	429a      	cmp	r2, r3
 8003868:	d8d9      	bhi.n	800381e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f06f 0212 	mvn.w	r2, #18
 8003872:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800388a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800388e:	d115      	bne.n	80038bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd90      	pop	{r4, r7, pc}
 80038c6:	bf00      	nop
 80038c8:	2000006c 	.word	0x2000006c
 80038cc:	24924924 	.word	0x24924924
 80038d0:	00924924 	.word	0x00924924
 80038d4:	12492492 	.word	0x12492492
 80038d8:	00492492 	.word	0x00492492
 80038dc:	00249249 	.word	0x00249249

080038e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03e      	beq.n	8003998 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d039      	beq.n	8003998 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003946:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800394a:	d11d      	bne.n	8003988 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003950:	2b00      	cmp	r3, #0
 8003952:	d119      	bne.n	8003988 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0220 	bic.w	r2, r2, #32
 8003962:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f874 	bl	8003a76 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0212 	mvn.w	r2, #18
 8003996:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04d      	beq.n	8003a3e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d048      	beq.n	8003a3e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80039ce:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80039d2:	d012      	beq.n	80039fa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d125      	bne.n	8003a2e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80039ec:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80039f0:	d11d      	bne.n	8003a2e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d119      	bne.n	8003a2e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a08:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9c7 	bl	8003dc2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 020c 	mvn.w	r2, #12
 8003a3c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f812 	bl	8003a88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0201 	mvn.w	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x20>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0dc      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x1da>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d81c      	bhi.n	8003b06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	3b05      	subs	r3, #5
 8003ade:	221f      	movs	r2, #31
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4019      	ands	r1, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3b05      	subs	r3, #5
 8003af8:	fa00 f203 	lsl.w	r2, r0, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b04:	e03c      	b.n	8003b80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d81c      	bhi.n	8003b48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b23      	subs	r3, #35	@ 0x23
 8003b20:	221f      	movs	r2, #31
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	4019      	ands	r1, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	3b23      	subs	r3, #35	@ 0x23
 8003b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b46:	e01b      	b.n	8003b80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	3b41      	subs	r3, #65	@ 0x41
 8003b5a:	221f      	movs	r2, #31
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	4019      	ands	r1, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	3b41      	subs	r3, #65	@ 0x41
 8003b74:	fa00 f203 	lsl.w	r2, r0, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	d91c      	bls.n	8003bc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68d9      	ldr	r1, [r3, #12]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	3b1e      	subs	r3, #30
 8003b9a:	2207      	movs	r2, #7
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	4019      	ands	r1, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6898      	ldr	r0, [r3, #8]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3b1e      	subs	r3, #30
 8003bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	e019      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6919      	ldr	r1, [r3, #16]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	4019      	ands	r1, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6898      	ldr	r0, [r3, #8]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	fa00 f203 	lsl.w	r2, r0, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d003      	beq.n	8003c06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c02:	2b11      	cmp	r3, #17
 8003c04:	d132      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d125      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d126      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003c2c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d11a      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c36:	4b13      	ldr	r3, [pc, #76]	@ (8003c84 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a13      	ldr	r2, [pc, #76]	@ (8003c88 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	0c9a      	lsrs	r2, r3, #18
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f9      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x1b2>
 8003c5a:	e007      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40012400 	.word	0x40012400
 8003c84:	2000006c 	.word	0x2000006c
 8003c88:	431bde83 	.word	0x431bde83

08003c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d040      	beq.n	8003d2c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cba:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <ADC_Enable+0xac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ADC_Enable+0xb0>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	0c9b      	lsrs	r3, r3, #18
 8003cc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003cc8:	e002      	b.n	8003cd0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f9      	bne.n	8003cca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cd6:	f7ff fb1d 	bl	8003314 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003cdc:	e01f      	b.n	8003d1e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cde:	f7ff fb19 	bl	8003314 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d918      	bls.n	8003d1e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d011      	beq.n	8003d1e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d1d8      	bne.n	8003cde <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000006c 	.word	0x2000006c
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d12e      	bne.n	8003db8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d6a:	f7ff fad3 	bl	8003314 <HAL_GetTick>
 8003d6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d70:	e01b      	b.n	8003daa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d72:	f7ff facf 	bl	8003314 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d914      	bls.n	8003daa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10d      	bne.n	8003daa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e007      	b.n	8003dba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d0dc      	beq.n	8003d72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0ed      	b.n	8003fc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd ff0a 	bl	8001c0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e08:	f7ff fa84 	bl	8003314 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e0e:	e012      	b.n	8003e36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e10:	f7ff fa80 	bl	8003314 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b0a      	cmp	r3, #10
 8003e1c:	d90b      	bls.n	8003e36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2205      	movs	r2, #5
 8003e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0c5      	b.n	8003fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0e5      	beq.n	8003e10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0202 	bic.w	r2, r2, #2
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e54:	f7ff fa5e 	bl	8003314 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e5a:	e012      	b.n	8003e82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e5c:	f7ff fa5a 	bl	8003314 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b0a      	cmp	r3, #10
 8003e68:	d90b      	bls.n	8003e82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2205      	movs	r2, #5
 8003e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e09f      	b.n	8003fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	7e1b      	ldrb	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d108      	bne.n	8003eaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e007      	b.n	8003eba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7e5b      	ldrb	r3, [r3, #25]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d108      	bne.n	8003ed4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e007      	b.n	8003ee4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7e9b      	ldrb	r3, [r3, #26]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d108      	bne.n	8003efe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0220 	orr.w	r2, r2, #32
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e007      	b.n	8003f0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0220 	bic.w	r2, r2, #32
 8003f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7edb      	ldrb	r3, [r3, #27]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d108      	bne.n	8003f28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0210 	bic.w	r2, r2, #16
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e007      	b.n	8003f38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0210 	orr.w	r2, r2, #16
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7f1b      	ldrb	r3, [r3, #28]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d108      	bne.n	8003f52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0208 	orr.w	r2, r2, #8
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e007      	b.n	8003f62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0208 	bic.w	r2, r2, #8
 8003f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7f5b      	ldrb	r3, [r3, #29]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d108      	bne.n	8003f7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0204 	orr.w	r2, r2, #4
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e007      	b.n	8003f8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0204 	bic.w	r2, r2, #4
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d12e      	bne.n	800403c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff6:	f7ff f98d 	bl	8003314 <HAL_GetTick>
 8003ffa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ffc:	e012      	b.n	8004024 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ffe:	f7ff f989 	bl	8003314 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b0a      	cmp	r3, #10
 800400a:	d90b      	bls.n	8004024 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2205      	movs	r2, #5
 800401c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e012      	b.n	800404a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e006      	b.n	800404a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004052:	b480      	push	{r7}
 8004054:	b089      	sub	sp, #36	@ 0x24
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004066:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d003      	beq.n	800407e <HAL_CAN_AddTxMessage+0x2c>
 8004076:	7ffb      	ldrb	r3, [r7, #31]
 8004078:	2b02      	cmp	r3, #2
 800407a:	f040 80ad 	bne.w	80041d8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8095 	beq.w	80041c8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	0e1b      	lsrs	r3, r3, #24
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040a8:	2201      	movs	r2, #1
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	409a      	lsls	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	6809      	ldr	r1, [r1, #0]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3318      	adds	r3, #24
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	440b      	add	r3, r1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e00f      	b.n	80040f6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80040ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3318      	adds	r3, #24
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	440b      	add	r3, r1
 80040f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3318      	adds	r3, #24
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	440b      	add	r3, r1
 8004106:	3304      	adds	r3, #4
 8004108:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	7d1b      	ldrb	r3, [r3, #20]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d111      	bne.n	8004136 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	3318      	adds	r3, #24
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	4413      	add	r3, r2
 800411e:	3304      	adds	r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3318      	adds	r3, #24
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	440b      	add	r3, r1
 8004132:	3304      	adds	r3, #4
 8004134:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3307      	adds	r3, #7
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	061a      	lsls	r2, r3, #24
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3306      	adds	r3, #6
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3305      	adds	r3, #5
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	4313      	orrs	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	3204      	adds	r2, #4
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	4610      	mov	r0, r2
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	6811      	ldr	r1, [r2, #0]
 800415e:	ea43 0200 	orr.w	r2, r3, r0
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	440b      	add	r3, r1
 8004168:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800416c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3303      	adds	r3, #3
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	061a      	lsls	r2, r3, #24
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3302      	adds	r3, #2
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3301      	adds	r3, #1
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	4313      	orrs	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	4610      	mov	r0, r2
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	6811      	ldr	r1, [r2, #0]
 8004194:	ea43 0200 	orr.w	r2, r3, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	440b      	add	r3, r1
 800419e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80041a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3318      	adds	r3, #24
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4413      	add	r3, r2
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6811      	ldr	r1, [r2, #0]
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	3318      	adds	r3, #24
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	440b      	add	r3, r1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e00e      	b.n	80041e6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e006      	b.n	80041e6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3724      	adds	r7, #36	@ 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004202:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d002      	beq.n	8004210 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d11d      	bne.n	800424c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3301      	adds	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004268:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d002      	beq.n	8004276 <HAL_CAN_ActivateNotification+0x1e>
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d109      	bne.n	800428a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6959      	ldr	r1, [r3, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e006      	b.n	8004298 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08a      	sub	sp, #40	@ 0x28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d07c      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d023      	beq.n	800433a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f983 	bl	8004610 <HAL_CAN_TxMailbox0CompleteCallback>
 800430a:	e016      	b.n	800433a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
 800431e:	e00c      	b.n	800433a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
 8004332:	e002      	b.n	800433a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f986 	bl	8004646 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d024      	beq.n	800438e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800434c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f962 	bl	8004622 <HAL_CAN_TxMailbox1CompleteCallback>
 800435e:	e016      	b.n	800438e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
 8004372:	e00c      	b.n	800438e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	e002      	b.n	800438e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f965 	bl	8004658 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d024      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80043a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f941 	bl	8004634 <HAL_CAN_TxMailbox2CompleteCallback>
 80043b2:	e016      	b.n	80043e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c6:	e00c      	b.n	80043e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043da:	e002      	b.n	80043e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f944 	bl	800466a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2208      	movs	r2, #8
 8004420:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f933 	bl	800468e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f91b 	bl	800467c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2210      	movs	r2, #16
 8004468:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2208      	movs	r2, #8
 8004484:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f913 	bl	80046b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8fb 	bl	80046a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2210      	movs	r2, #16
 80044c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8fc 	bl	80046c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8f4 	bl	80046d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d07b      	beq.n	80045f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d072      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	f043 0302 	orr.w	r3, r3, #2
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455c:	2b00      	cmp	r3, #0
 800455e:	d043      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	d03e      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d02b      	beq.n	80045cc <HAL_CAN_IRQHandler+0x32a>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d82e      	bhi.n	80045d6 <HAL_CAN_IRQHandler+0x334>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d022      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x320>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d82a      	bhi.n	80045d6 <HAL_CAN_IRQHandler+0x334>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d019      	beq.n	80045b8 <HAL_CAN_IRQHandler+0x316>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d826      	bhi.n	80045d6 <HAL_CAN_IRQHandler+0x334>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d010      	beq.n	80045ae <HAL_CAN_IRQHandler+0x30c>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d822      	bhi.n	80045d6 <HAL_CAN_IRQHandler+0x334>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d002      	beq.n	800459a <HAL_CAN_IRQHandler+0x2f8>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d005      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004598:	e01d      	b.n	80045d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	f043 0308 	orr.w	r3, r3, #8
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045a2:	e019      	b.n	80045d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	f043 0310 	orr.w	r3, r3, #16
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045ac:	e014      	b.n	80045d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	f043 0320 	orr.w	r3, r3, #32
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045b6:	e00f      	b.n	80045d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045c0:	e00a      	b.n	80045d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045ca:	e005      	b.n	80045d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045d4:	e000      	b.n	80045d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80045d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80045e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2204      	movs	r2, #4
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f870 	bl	80046e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004608:	bf00      	nop
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
	...

080046fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <__NVIC_SetPriorityGrouping+0x44>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004718:	4013      	ands	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800472c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800472e:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <__NVIC_SetPriorityGrouping+0x44>)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	60d3      	str	r3, [r2, #12]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004748:	4b04      	ldr	r3, [pc, #16]	@ (800475c <__NVIC_GetPriorityGrouping+0x18>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 0307 	and.w	r3, r3, #7
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db0b      	blt.n	800478a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	4906      	ldr	r1, [pc, #24]	@ (8004794 <__NVIC_EnableIRQ+0x34>)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2001      	movs	r0, #1
 8004782:	fa00 f202 	lsl.w	r2, r0, r2
 8004786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	e000e100 	.word	0xe000e100

08004798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0a      	blt.n	80047c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	@ (80047e4 <__NVIC_SetPriority+0x4c>)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c0:	e00a      	b.n	80047d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4908      	ldr	r1, [pc, #32]	@ (80047e8 <__NVIC_SetPriority+0x50>)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3b04      	subs	r3, #4
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	761a      	strb	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e100 	.word	0xe000e100
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f1c3 0307 	rsb	r3, r3, #7
 8004806:	2b04      	cmp	r3, #4
 8004808:	bf28      	it	cs
 800480a:	2304      	movcs	r3, #4
 800480c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3304      	adds	r3, #4
 8004812:	2b06      	cmp	r3, #6
 8004814:	d902      	bls.n	800481c <NVIC_EncodePriority+0x30>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3b03      	subs	r3, #3
 800481a:	e000      	b.n	800481e <NVIC_EncodePriority+0x32>
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	401a      	ands	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004834:	f04f 31ff 	mov.w	r1, #4294967295
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	43d9      	mvns	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	4313      	orrs	r3, r2
         );
}
 8004846:	4618      	mov	r0, r3
 8004848:	3724      	adds	r7, #36	@ 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004860:	d301      	bcc.n	8004866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004862:	2301      	movs	r3, #1
 8004864:	e00f      	b.n	8004886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004866:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <SysTick_Config+0x40>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3b01      	subs	r3, #1
 800486c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800486e:	210f      	movs	r1, #15
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	f7ff ff90 	bl	8004798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <SysTick_Config+0x40>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <SysTick_Config+0x40>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010

08004894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff2d 	bl	80046fc <__NVIC_SetPriorityGrouping>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	4603      	mov	r3, r0
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048bc:	f7ff ff42 	bl	8004744 <__NVIC_GetPriorityGrouping>
 80048c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7ff ff90 	bl	80047ec <NVIC_EncodePriority>
 80048cc:	4602      	mov	r2, r0
 80048ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff5f 	bl	8004798 <__NVIC_SetPriority>
}
 80048da:	bf00      	nop
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	4603      	mov	r3, r0
 80048ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff ff35 	bl	8004760 <__NVIC_EnableIRQ>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ffa2 	bl	8004850 <SysTick_Config>
 800490c:	4603      	mov	r3, r0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d008      	beq.n	8004940 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e020      	b.n	8004982 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 020e 	bic.w	r2, r2, #14
 800494e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	2101      	movs	r1, #1
 800496a:	fa01 f202 	lsl.w	r2, r1, r2
 800496e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d005      	beq.n	80049b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2204      	movs	r2, #4
 80049a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
 80049ae:	e0d6      	b.n	8004b5e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 020e 	bic.w	r2, r2, #14
 80049be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b64      	ldr	r3, [pc, #400]	@ (8004b68 <HAL_DMA_Abort_IT+0x1dc>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d958      	bls.n	8004a8e <HAL_DMA_Abort_IT+0x102>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a62      	ldr	r2, [pc, #392]	@ (8004b6c <HAL_DMA_Abort_IT+0x1e0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d04f      	beq.n	8004a86 <HAL_DMA_Abort_IT+0xfa>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a61      	ldr	r2, [pc, #388]	@ (8004b70 <HAL_DMA_Abort_IT+0x1e4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d048      	beq.n	8004a82 <HAL_DMA_Abort_IT+0xf6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004b74 <HAL_DMA_Abort_IT+0x1e8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d040      	beq.n	8004a7c <HAL_DMA_Abort_IT+0xf0>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004b78 <HAL_DMA_Abort_IT+0x1ec>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d038      	beq.n	8004a76 <HAL_DMA_Abort_IT+0xea>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a5c      	ldr	r2, [pc, #368]	@ (8004b7c <HAL_DMA_Abort_IT+0x1f0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d030      	beq.n	8004a70 <HAL_DMA_Abort_IT+0xe4>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a5b      	ldr	r2, [pc, #364]	@ (8004b80 <HAL_DMA_Abort_IT+0x1f4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d028      	beq.n	8004a6a <HAL_DMA_Abort_IT+0xde>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a52      	ldr	r2, [pc, #328]	@ (8004b68 <HAL_DMA_Abort_IT+0x1dc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d020      	beq.n	8004a64 <HAL_DMA_Abort_IT+0xd8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a57      	ldr	r2, [pc, #348]	@ (8004b84 <HAL_DMA_Abort_IT+0x1f8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d019      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xd4>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a55      	ldr	r2, [pc, #340]	@ (8004b88 <HAL_DMA_Abort_IT+0x1fc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d012      	beq.n	8004a5c <HAL_DMA_Abort_IT+0xd0>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a54      	ldr	r2, [pc, #336]	@ (8004b8c <HAL_DMA_Abort_IT+0x200>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00a      	beq.n	8004a56 <HAL_DMA_Abort_IT+0xca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a52      	ldr	r2, [pc, #328]	@ (8004b90 <HAL_DMA_Abort_IT+0x204>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d102      	bne.n	8004a50 <HAL_DMA_Abort_IT+0xc4>
 8004a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a4e:	e01b      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a54:	e018      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a5a:	e015      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	e013      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e011      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a68:	e00e      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a6a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a6e:	e00b      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a74:	e008      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a7a:	e005      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a80:	e002      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a82:	2310      	movs	r3, #16
 8004a84:	e000      	b.n	8004a88 <HAL_DMA_Abort_IT+0xfc>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4a42      	ldr	r2, [pc, #264]	@ (8004b94 <HAL_DMA_Abort_IT+0x208>)
 8004a8a:	6053      	str	r3, [r2, #4]
 8004a8c:	e057      	b.n	8004b3e <HAL_DMA_Abort_IT+0x1b2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a36      	ldr	r2, [pc, #216]	@ (8004b6c <HAL_DMA_Abort_IT+0x1e0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d04f      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x1ac>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a34      	ldr	r2, [pc, #208]	@ (8004b70 <HAL_DMA_Abort_IT+0x1e4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d048      	beq.n	8004b34 <HAL_DMA_Abort_IT+0x1a8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a33      	ldr	r2, [pc, #204]	@ (8004b74 <HAL_DMA_Abort_IT+0x1e8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d040      	beq.n	8004b2e <HAL_DMA_Abort_IT+0x1a2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a31      	ldr	r2, [pc, #196]	@ (8004b78 <HAL_DMA_Abort_IT+0x1ec>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d038      	beq.n	8004b28 <HAL_DMA_Abort_IT+0x19c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a30      	ldr	r2, [pc, #192]	@ (8004b7c <HAL_DMA_Abort_IT+0x1f0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d030      	beq.n	8004b22 <HAL_DMA_Abort_IT+0x196>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b80 <HAL_DMA_Abort_IT+0x1f4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d028      	beq.n	8004b1c <HAL_DMA_Abort_IT+0x190>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a26      	ldr	r2, [pc, #152]	@ (8004b68 <HAL_DMA_Abort_IT+0x1dc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d020      	beq.n	8004b16 <HAL_DMA_Abort_IT+0x18a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b84 <HAL_DMA_Abort_IT+0x1f8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d019      	beq.n	8004b12 <HAL_DMA_Abort_IT+0x186>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a29      	ldr	r2, [pc, #164]	@ (8004b88 <HAL_DMA_Abort_IT+0x1fc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d012      	beq.n	8004b0e <HAL_DMA_Abort_IT+0x182>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a27      	ldr	r2, [pc, #156]	@ (8004b8c <HAL_DMA_Abort_IT+0x200>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00a      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x17c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a26      	ldr	r2, [pc, #152]	@ (8004b90 <HAL_DMA_Abort_IT+0x204>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d102      	bne.n	8004b02 <HAL_DMA_Abort_IT+0x176>
 8004afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b00:	e01b      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b06:	e018      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b0c:	e015      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	e013      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e011      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b1a:	e00e      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b20:	e00b      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b26:	e008      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b2c:	e005      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b32:	e002      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b34:	2310      	movs	r3, #16
 8004b36:	e000      	b.n	8004b3a <HAL_DMA_Abort_IT+0x1ae>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <HAL_DMA_Abort_IT+0x20c>)
 8004b3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
    } 
  }
  return status;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40020080 	.word	0x40020080
 8004b6c:	40020008 	.word	0x40020008
 8004b70:	4002001c 	.word	0x4002001c
 8004b74:	40020030 	.word	0x40020030
 8004b78:	40020044 	.word	0x40020044
 8004b7c:	40020058 	.word	0x40020058
 8004b80:	4002006c 	.word	0x4002006c
 8004b84:	40020408 	.word	0x40020408
 8004b88:	4002041c 	.word	0x4002041c
 8004b8c:	40020430 	.word	0x40020430
 8004b90:	40020444 	.word	0x40020444
 8004b94:	40020400 	.word	0x40020400
 8004b98:	40020000 	.word	0x40020000

08004b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b08b      	sub	sp, #44	@ 0x2c
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bae:	e169      	b.n	8004e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	f040 8158 	bne.w	8004e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a9a      	ldr	r2, [pc, #616]	@ (8004e3c <HAL_GPIO_Init+0x2a0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d05e      	beq.n	8004c96 <HAL_GPIO_Init+0xfa>
 8004bd8:	4a98      	ldr	r2, [pc, #608]	@ (8004e3c <HAL_GPIO_Init+0x2a0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d875      	bhi.n	8004cca <HAL_GPIO_Init+0x12e>
 8004bde:	4a98      	ldr	r2, [pc, #608]	@ (8004e40 <HAL_GPIO_Init+0x2a4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d058      	beq.n	8004c96 <HAL_GPIO_Init+0xfa>
 8004be4:	4a96      	ldr	r2, [pc, #600]	@ (8004e40 <HAL_GPIO_Init+0x2a4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d86f      	bhi.n	8004cca <HAL_GPIO_Init+0x12e>
 8004bea:	4a96      	ldr	r2, [pc, #600]	@ (8004e44 <HAL_GPIO_Init+0x2a8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d052      	beq.n	8004c96 <HAL_GPIO_Init+0xfa>
 8004bf0:	4a94      	ldr	r2, [pc, #592]	@ (8004e44 <HAL_GPIO_Init+0x2a8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d869      	bhi.n	8004cca <HAL_GPIO_Init+0x12e>
 8004bf6:	4a94      	ldr	r2, [pc, #592]	@ (8004e48 <HAL_GPIO_Init+0x2ac>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d04c      	beq.n	8004c96 <HAL_GPIO_Init+0xfa>
 8004bfc:	4a92      	ldr	r2, [pc, #584]	@ (8004e48 <HAL_GPIO_Init+0x2ac>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d863      	bhi.n	8004cca <HAL_GPIO_Init+0x12e>
 8004c02:	4a92      	ldr	r2, [pc, #584]	@ (8004e4c <HAL_GPIO_Init+0x2b0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d046      	beq.n	8004c96 <HAL_GPIO_Init+0xfa>
 8004c08:	4a90      	ldr	r2, [pc, #576]	@ (8004e4c <HAL_GPIO_Init+0x2b0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d85d      	bhi.n	8004cca <HAL_GPIO_Init+0x12e>
 8004c0e:	2b12      	cmp	r3, #18
 8004c10:	d82a      	bhi.n	8004c68 <HAL_GPIO_Init+0xcc>
 8004c12:	2b12      	cmp	r3, #18
 8004c14:	d859      	bhi.n	8004cca <HAL_GPIO_Init+0x12e>
 8004c16:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <HAL_GPIO_Init+0x80>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c97 	.word	0x08004c97
 8004c20:	08004c71 	.word	0x08004c71
 8004c24:	08004c83 	.word	0x08004c83
 8004c28:	08004cc5 	.word	0x08004cc5
 8004c2c:	08004ccb 	.word	0x08004ccb
 8004c30:	08004ccb 	.word	0x08004ccb
 8004c34:	08004ccb 	.word	0x08004ccb
 8004c38:	08004ccb 	.word	0x08004ccb
 8004c3c:	08004ccb 	.word	0x08004ccb
 8004c40:	08004ccb 	.word	0x08004ccb
 8004c44:	08004ccb 	.word	0x08004ccb
 8004c48:	08004ccb 	.word	0x08004ccb
 8004c4c:	08004ccb 	.word	0x08004ccb
 8004c50:	08004ccb 	.word	0x08004ccb
 8004c54:	08004ccb 	.word	0x08004ccb
 8004c58:	08004ccb 	.word	0x08004ccb
 8004c5c:	08004ccb 	.word	0x08004ccb
 8004c60:	08004c79 	.word	0x08004c79
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	4a79      	ldr	r2, [pc, #484]	@ (8004e50 <HAL_GPIO_Init+0x2b4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004c6e:	e02c      	b.n	8004cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	623b      	str	r3, [r7, #32]
          break;
 8004c76:	e029      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	623b      	str	r3, [r7, #32]
          break;
 8004c80:	e024      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	3308      	adds	r3, #8
 8004c88:	623b      	str	r3, [r7, #32]
          break;
 8004c8a:	e01f      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	330c      	adds	r3, #12
 8004c92:	623b      	str	r3, [r7, #32]
          break;
 8004c94:	e01a      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	623b      	str	r3, [r7, #32]
          break;
 8004ca2:	e013      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cac:	2308      	movs	r3, #8
 8004cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	611a      	str	r2, [r3, #16]
          break;
 8004cb6:	e009      	b.n	8004ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cb8:	2308      	movs	r3, #8
 8004cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	615a      	str	r2, [r3, #20]
          break;
 8004cc2:	e003      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	623b      	str	r3, [r7, #32]
          break;
 8004cc8:	e000      	b.n	8004ccc <HAL_GPIO_Init+0x130>
          break;
 8004cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2bff      	cmp	r3, #255	@ 0xff
 8004cd0:	d801      	bhi.n	8004cd6 <HAL_GPIO_Init+0x13a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	e001      	b.n	8004cda <HAL_GPIO_Init+0x13e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2bff      	cmp	r3, #255	@ 0xff
 8004ce0:	d802      	bhi.n	8004ce8 <HAL_GPIO_Init+0x14c>
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	e002      	b.n	8004cee <HAL_GPIO_Init+0x152>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	3b08      	subs	r3, #8
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	210f      	movs	r1, #15
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	401a      	ands	r2, r3
 8004d00:	6a39      	ldr	r1, [r7, #32]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80b1 	beq.w	8004e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e54 <HAL_GPIO_Init+0x2b8>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	4a4c      	ldr	r2, [pc, #304]	@ (8004e54 <HAL_GPIO_Init+0x2b8>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	6193      	str	r3, [r2, #24]
 8004d28:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_GPIO_Init+0x2b8>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004d34:	4a48      	ldr	r2, [pc, #288]	@ (8004e58 <HAL_GPIO_Init+0x2bc>)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	089b      	lsrs	r3, r3, #2
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	220f      	movs	r2, #15
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a40      	ldr	r2, [pc, #256]	@ (8004e5c <HAL_GPIO_Init+0x2c0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <HAL_GPIO_Init+0x1ec>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3f      	ldr	r2, [pc, #252]	@ (8004e60 <HAL_GPIO_Init+0x2c4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00d      	beq.n	8004d84 <HAL_GPIO_Init+0x1e8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004e64 <HAL_GPIO_Init+0x2c8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <HAL_GPIO_Init+0x1e4>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3d      	ldr	r2, [pc, #244]	@ (8004e68 <HAL_GPIO_Init+0x2cc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_GPIO_Init+0x1e0>
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e006      	b.n	8004d8a <HAL_GPIO_Init+0x1ee>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	e004      	b.n	8004d8a <HAL_GPIO_Init+0x1ee>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e002      	b.n	8004d8a <HAL_GPIO_Init+0x1ee>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_GPIO_Init+0x1ee>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8c:	f002 0203 	and.w	r2, r2, #3
 8004d90:	0092      	lsls	r2, r2, #2
 8004d92:	4093      	lsls	r3, r2
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004d9a:	492f      	ldr	r1, [pc, #188]	@ (8004e58 <HAL_GPIO_Init+0x2bc>)
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	3302      	adds	r3, #2
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d006      	beq.n	8004dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004db4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	492c      	ldr	r1, [pc, #176]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]
 8004dc0:	e006      	b.n	8004dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	4928      	ldr	r1, [pc, #160]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d006      	beq.n	8004dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ddc:	4b23      	ldr	r3, [pc, #140]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	4922      	ldr	r1, [pc, #136]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60cb      	str	r3, [r1, #12]
 8004de8:	e006      	b.n	8004df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004dea:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	491e      	ldr	r1, [pc, #120]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4918      	ldr	r1, [pc, #96]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
 8004e10:	e006      	b.n	8004e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e12:	4b16      	ldr	r3, [pc, #88]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	4914      	ldr	r1, [pc, #80]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d021      	beq.n	8004e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	490e      	ldr	r1, [pc, #56]	@ (8004e6c <HAL_GPIO_Init+0x2d0>)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e021      	b.n	8004e7e <HAL_GPIO_Init+0x2e2>
 8004e3a:	bf00      	nop
 8004e3c:	10320000 	.word	0x10320000
 8004e40:	10310000 	.word	0x10310000
 8004e44:	10220000 	.word	0x10220000
 8004e48:	10210000 	.word	0x10210000
 8004e4c:	10120000 	.word	0x10120000
 8004e50:	10110000 	.word	0x10110000
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010800 	.word	0x40010800
 8004e60:	40010c00 	.word	0x40010c00
 8004e64:	40011000 	.word	0x40011000
 8004e68:	40011400 	.word	0x40011400
 8004e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <HAL_GPIO_Init+0x304>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	4909      	ldr	r1, [pc, #36]	@ (8004ea0 <HAL_GPIO_Init+0x304>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	3301      	adds	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f47f ae8e 	bne.w	8004bb0 <HAL_GPIO_Init+0x14>
  }
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	372c      	adds	r7, #44	@ 0x2c
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	40010400 	.word	0x40010400

08004ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb4:	787b      	ldrb	r3, [r7, #1]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eba:	887a      	ldrh	r2, [r7, #2]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ec0:	e003      	b.n	8004eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ec2:	887b      	ldrh	r3, [r7, #2]
 8004ec4:	041a      	lsls	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	611a      	str	r2, [r3, #16]
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	041a      	lsls	r2, r3, #16
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	43d9      	mvns	r1, r3
 8004ef2:	887b      	ldrh	r3, [r7, #2]
 8004ef4:	400b      	ands	r3, r1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	611a      	str	r2, [r3, #16]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
	...

08004f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e304      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8087 	beq.w	8005036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f28:	4b92      	ldr	r3, [pc, #584]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d00c      	beq.n	8004f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f34:	4b8f      	ldr	r3, [pc, #572]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d112      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5e>
 8004f40:	4b8c      	ldr	r3, [pc, #560]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4c:	d10b      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	4b89      	ldr	r3, [pc, #548]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06c      	beq.n	8005034 <HAL_RCC_OscConfig+0x12c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d168      	bne.n	8005034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e2de      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x76>
 8004f70:	4b80      	ldr	r3, [pc, #512]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a7f      	ldr	r2, [pc, #508]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e02e      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x98>
 8004f86:	4b7b      	ldr	r3, [pc, #492]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a7a      	ldr	r2, [pc, #488]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b78      	ldr	r3, [pc, #480]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a77      	ldr	r2, [pc, #476]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xbc>
 8004faa:	4b72      	ldr	r3, [pc, #456]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a71      	ldr	r2, [pc, #452]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6e      	ldr	r2, [pc, #440]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b68      	ldr	r3, [pc, #416]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a67      	ldr	r2, [pc, #412]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f996 	bl	8003314 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fec:	f7fe f992 	bl	8003314 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e292      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xe4>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fe f982 	bl	8003314 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7fe f97e 	bl	8003314 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e27e      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	4b53      	ldr	r3, [pc, #332]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x10c>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d063      	beq.n	800510a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005042:	4b4c      	ldr	r3, [pc, #304]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800504e:	4b49      	ldr	r3, [pc, #292]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x18c>
 800505a:	4b46      	ldr	r3, [pc, #280]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	4b43      	ldr	r3, [pc, #268]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x176>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e252      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b3d      	ldr	r3, [pc, #244]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4939      	ldr	r1, [pc, #228]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e03a      	b.n	800510a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509c:	4b36      	ldr	r3, [pc, #216]	@ (8005178 <HAL_RCC_OscConfig+0x270>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7fe f937 	bl	8003314 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050aa:	f7fe f933 	bl	8003314 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e233      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4927      	ldr	r1, [pc, #156]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050de:	4b26      	ldr	r3, [pc, #152]	@ (8005178 <HAL_RCC_OscConfig+0x270>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fe f916 	bl	8003314 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fe f912 	bl	8003314 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e212      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03a      	beq.n	800518c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d019      	beq.n	8005152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b17      	ldr	r3, [pc, #92]	@ (800517c <HAL_RCC_OscConfig+0x274>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005124:	f7fe f8f6 	bl	8003314 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512c:	f7fe f8f2 	bl	8003314 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e1f2      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800514a:	2001      	movs	r0, #1
 800514c:	f000 fbca 	bl	80058e4 <RCC_Delay>
 8005150:	e01c      	b.n	800518c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <HAL_RCC_OscConfig+0x274>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005158:	f7fe f8dc 	bl	8003314 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515e:	e00f      	b.n	8005180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005160:	f7fe f8d8 	bl	8003314 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d908      	bls.n	8005180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1d8      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	42420000 	.word	0x42420000
 800517c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	4b9b      	ldr	r3, [pc, #620]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e9      	bne.n	8005160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80a6 	beq.w	80052e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b94      	ldr	r3, [pc, #592]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b91      	ldr	r3, [pc, #580]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	4a90      	ldr	r2, [pc, #576]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	61d3      	str	r3, [r2, #28]
 80051b6:	4b8e      	ldr	r3, [pc, #568]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c6:	4b8b      	ldr	r3, [pc, #556]	@ (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d118      	bne.n	8005204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d2:	4b88      	ldr	r3, [pc, #544]	@ (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a87      	ldr	r2, [pc, #540]	@ (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051de:	f7fe f899 	bl	8003314 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fe f895 	bl	8003314 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b64      	cmp	r3, #100	@ 0x64
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e195      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	4b7e      	ldr	r3, [pc, #504]	@ (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x312>
 800520c:	4b78      	ldr	r3, [pc, #480]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	4a77      	ldr	r2, [pc, #476]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6213      	str	r3, [r2, #32]
 8005218:	e02d      	b.n	8005276 <HAL_RCC_OscConfig+0x36e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x334>
 8005222:	4b73      	ldr	r3, [pc, #460]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	4a72      	ldr	r2, [pc, #456]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	6213      	str	r3, [r2, #32]
 800522e:	4b70      	ldr	r3, [pc, #448]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	4a6f      	ldr	r2, [pc, #444]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005234:	f023 0304 	bic.w	r3, r3, #4
 8005238:	6213      	str	r3, [r2, #32]
 800523a:	e01c      	b.n	8005276 <HAL_RCC_OscConfig+0x36e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b05      	cmp	r3, #5
 8005242:	d10c      	bne.n	800525e <HAL_RCC_OscConfig+0x356>
 8005244:	4b6a      	ldr	r3, [pc, #424]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4a69      	ldr	r2, [pc, #420]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6213      	str	r3, [r2, #32]
 8005250:	4b67      	ldr	r3, [pc, #412]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	4a66      	ldr	r2, [pc, #408]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6213      	str	r3, [r2, #32]
 800525c:	e00b      	b.n	8005276 <HAL_RCC_OscConfig+0x36e>
 800525e:	4b64      	ldr	r3, [pc, #400]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	4a63      	ldr	r2, [pc, #396]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6213      	str	r3, [r2, #32]
 800526a:	4b61      	ldr	r3, [pc, #388]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4a60      	ldr	r2, [pc, #384]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527e:	f7fe f849 	bl	8003314 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	e00a      	b.n	800529c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fe f845 	bl	8003314 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e143      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529c:	4b54      	ldr	r3, [pc, #336]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ee      	beq.n	8005286 <HAL_RCC_OscConfig+0x37e>
 80052a8:	e014      	b.n	80052d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fe f833 	bl	8003314 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fe f82f 	bl	8003314 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e12d      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c8:	4b49      	ldr	r3, [pc, #292]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ee      	bne.n	80052b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b45      	ldr	r3, [pc, #276]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4a44      	ldr	r2, [pc, #272]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808c 	beq.w	8005408 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80052f0:	4b3f      	ldr	r3, [pc, #252]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fc:	d10e      	bne.n	800531c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80052fe:	4b3c      	ldr	r3, [pc, #240]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005306:	2b08      	cmp	r3, #8
 8005308:	d108      	bne.n	800531c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800530a:	4b39      	ldr	r3, [pc, #228]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e103      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005320:	2b02      	cmp	r3, #2
 8005322:	d14e      	bne.n	80053c2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005324:	4b32      	ldr	r3, [pc, #200]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005330:	4b2f      	ldr	r3, [pc, #188]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0ef      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005344:	4b2c      	ldr	r3, [pc, #176]	@ (80053f8 <HAL_RCC_OscConfig+0x4f0>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fd ffe3 	bl	8003314 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005352:	f7fd ffdf 	bl	8003314 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b64      	cmp	r3, #100	@ 0x64
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0df      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005364:	4b22      	ldr	r3, [pc, #136]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005370:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537c:	491c      	ldr	r1, [pc, #112]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005382:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538e:	4918      	ldr	r1, [pc, #96]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005394:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <HAL_RCC_OscConfig+0x4f0>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fd ffbb 	bl	8003314 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053a2:	f7fd ffb7 	bl	8003314 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b64      	cmp	r3, #100	@ 0x64
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0b7      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80053b4:	4b0e      	ldr	r3, [pc, #56]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x49a>
 80053c0:	e022      	b.n	8005408 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80053c2:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	4a0a      	ldr	r2, [pc, #40]	@ (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80053c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80053ce:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <HAL_RCC_OscConfig+0x4f0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fd ff9e 	bl	8003314 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80053da:	e00f      	b.n	80053fc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053dc:	f7fd ff9a 	bl	8003314 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e09a      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
 80053f8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80053fc:	4b4b      	ldr	r3, [pc, #300]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e9      	bne.n	80053dc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8088 	beq.w	8005522 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005412:	4b46      	ldr	r3, [pc, #280]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b08      	cmp	r3, #8
 800541c:	d068      	beq.n	80054f0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d14d      	bne.n	80054c2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b42      	ldr	r3, [pc, #264]	@ (8005530 <HAL_RCC_OscConfig+0x628>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd ff72 	bl	8003314 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7fd ff6e 	bl	8003314 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e06e      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005446:	4b39      	ldr	r3, [pc, #228]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545a:	d10f      	bne.n	800547c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800545c:	4b33      	ldr	r3, [pc, #204]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 800545e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4931      	ldr	r1, [pc, #196]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 8005466:	4313      	orrs	r3, r2
 8005468:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800546a:	4b30      	ldr	r3, [pc, #192]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	492d      	ldr	r1, [pc, #180]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 8005478:	4313      	orrs	r3, r2
 800547a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547c:	4b2b      	ldr	r3, [pc, #172]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	430b      	orrs	r3, r1
 800548e:	4927      	ldr	r1, [pc, #156]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b26      	ldr	r3, [pc, #152]	@ (8005530 <HAL_RCC_OscConfig+0x628>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fd ff3b 	bl	8003314 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fd ff37 	bl	8003314 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e037      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b4:	4b1d      	ldr	r3, [pc, #116]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x59a>
 80054c0:	e02f      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <HAL_RCC_OscConfig+0x628>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fd ff24 	bl	8003314 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fd ff20 	bl	8003314 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e020      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c8>
 80054ee:	e018      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e013      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <HAL_RCC_OscConfig+0x624>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	42420060 	.word	0x42420060

08005534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0d0      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b6a      	ldr	r3, [pc, #424]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b67      	ldr	r3, [pc, #412]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	4965      	ldr	r1, [pc, #404]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b63      	ldr	r3, [pc, #396]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0b8      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d020      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005590:	4b59      	ldr	r3, [pc, #356]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a58      	ldr	r2, [pc, #352]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005596:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800559a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a8:	4b53      	ldr	r3, [pc, #332]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a52      	ldr	r2, [pc, #328]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b4:	4b50      	ldr	r3, [pc, #320]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	494d      	ldr	r1, [pc, #308]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d040      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055da:	4b47      	ldr	r3, [pc, #284]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e07f      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b41      	ldr	r3, [pc, #260]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e073      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3d      	ldr	r3, [pc, #244]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06b      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4936      	ldr	r1, [pc, #216]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	4313      	orrs	r3, r2
 8005622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7fd fe76 	bl	8003314 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fd fe72 	bl	8003314 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e053      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2d      	ldr	r3, [pc, #180]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d210      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b24      	ldr	r3, [pc, #144]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4922      	ldr	r1, [pc, #136]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e032      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005690:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4916      	ldr	r1, [pc, #88]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	490e      	ldr	r1, [pc, #56]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056c2:	f000 f821 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	490a      	ldr	r1, [pc, #40]	@ (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	5ccb      	ldrb	r3, [r1, r3]
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	4a09      	ldr	r2, [pc, #36]	@ (8005700 <HAL_RCC_ClockConfig+0x1cc>)
 80056dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056de:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <HAL_RCC_ClockConfig+0x1d0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fd fdd4 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40021000 	.word	0x40021000
 80056fc:	080094c4 	.word	0x080094c4
 8005700:	2000006c 	.word	0x2000006c
 8005704:	20000070 	.word	0x20000070

08005708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800570c:	b08e      	sub	sp, #56	@ 0x38
 800570e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005714:	2300      	movs	r3, #0
 8005716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
 800571c:	2300      	movs	r3, #0
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800572c:	4b4e      	ldr	r3, [pc, #312]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x160>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b04      	cmp	r3, #4
 800573a:	d002      	beq.n	8005742 <HAL_RCC_GetSysClockFreq+0x3a>
 800573c:	2b08      	cmp	r3, #8
 800573e:	d003      	beq.n	8005748 <HAL_RCC_GetSysClockFreq+0x40>
 8005740:	e089      	b.n	8005856 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005742:	4b4a      	ldr	r3, [pc, #296]	@ (800586c <HAL_RCC_GetSysClockFreq+0x164>)
 8005744:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005746:	e089      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	0c9b      	lsrs	r3, r3, #18
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x168>)
 8005752:	5c9b      	ldrb	r3, [r3, r2]
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d072      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005760:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x160>)
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	4b42      	ldr	r3, [pc, #264]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x16c>)
 800576a:	5c9b      	ldrb	r3, [r3, r2]
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800576e:	4b3e      	ldr	r3, [pc, #248]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x160>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d053      	beq.n	8005822 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800577a:	4b3b      	ldr	r3, [pc, #236]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x160>)
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	3301      	adds	r3, #1
 8005786:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005788:	4b37      	ldr	r3, [pc, #220]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x160>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	0a1b      	lsrs	r3, r3, #8
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	3302      	adds	r3, #2
 8005794:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2200      	movs	r2, #0
 800579a:	469a      	mov	sl, r3
 800579c:	4693      	mov	fp, r2
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	2200      	movs	r2, #0
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	617a      	str	r2, [r7, #20]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	fb03 f20b 	mul.w	r2, r3, fp
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fb0a f303 	mul.w	r3, sl, r3
 80057b2:	4413      	add	r3, r2
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	fbaa 0102 	umull	r0, r1, sl, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	4619      	mov	r1, r3
 80057be:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <HAL_RCC_GetSysClockFreq+0x164>)
 80057c0:	fb03 f201 	mul.w	r2, r3, r1
 80057c4:	2300      	movs	r3, #0
 80057c6:	fb00 f303 	mul.w	r3, r0, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	4a27      	ldr	r2, [pc, #156]	@ (800586c <HAL_RCC_GetSysClockFreq+0x164>)
 80057ce:	fba0 4502 	umull	r4, r5, r0, r2
 80057d2:	442b      	add	r3, r5
 80057d4:	461d      	mov	r5, r3
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	2200      	movs	r2, #0
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	60fa      	str	r2, [r7, #12]
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	2200      	movs	r2, #0
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057ea:	460b      	mov	r3, r1
 80057ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057f0:	4652      	mov	r2, sl
 80057f2:	fb02 f203 	mul.w	r2, r2, r3
 80057f6:	465b      	mov	r3, fp
 80057f8:	4684      	mov	ip, r0
 80057fa:	fb0c f303 	mul.w	r3, ip, r3
 80057fe:	4413      	add	r3, r2
 8005800:	4602      	mov	r2, r0
 8005802:	4651      	mov	r1, sl
 8005804:	fba2 8901 	umull	r8, r9, r2, r1
 8005808:	444b      	add	r3, r9
 800580a:	4699      	mov	r9, r3
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fb fc4a 	bl	80010ac <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4613      	mov	r3, r2
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005820:	e007      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	4a11      	ldr	r2, [pc, #68]	@ (800586c <HAL_RCC_GetSysClockFreq+0x164>)
 8005826:	fb03 f202 	mul.w	r2, r3, r2
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005832:	4b0f      	ldr	r3, [pc, #60]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x168>)
 8005834:	7b5b      	ldrb	r3, [r3, #13]
 8005836:	461a      	mov	r2, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800583e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
 8005844:	e004      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x170>)
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005854:	e002      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <HAL_RCC_GetSysClockFreq+0x174>)
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800585a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800585e:	4618      	mov	r0, r3
 8005860:	3738      	adds	r7, #56	@ 0x38
 8005862:	46bd      	mov	sp, r7
 8005864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	017d7840 	.word	0x017d7840
 8005870:	080094dc 	.word	0x080094dc
 8005874:	080094ec 	.word	0x080094ec
 8005878:	003d0900 	.word	0x003d0900
 800587c:	007a1200 	.word	0x007a1200

08005880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005884:	4b02      	ldr	r3, [pc, #8]	@ (8005890 <HAL_RCC_GetHCLKFreq+0x10>)
 8005886:	681b      	ldr	r3, [r3, #0]
}
 8005888:	4618      	mov	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	2000006c 	.word	0x2000006c

08005894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005898:	f7ff fff2 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4903      	ldr	r1, [pc, #12]	@ (80058b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40021000 	.word	0x40021000
 80058b8:	080094d4 	.word	0x080094d4

080058bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058c0:	f7ff ffde 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058c4:	4602      	mov	r2, r0
 80058c6:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	0adb      	lsrs	r3, r3, #11
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	4903      	ldr	r1, [pc, #12]	@ (80058e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d2:	5ccb      	ldrb	r3, [r1, r3]
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	080094d4 	.word	0x080094d4

080058e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <RCC_Delay+0x34>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <RCC_Delay+0x38>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	0a5b      	lsrs	r3, r3, #9
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005900:	bf00      	nop
  }
  while (Delay --);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1e5a      	subs	r2, r3, #1
 8005906:	60fa      	str	r2, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f9      	bne.n	8005900 <RCC_Delay+0x1c>
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr
 8005918:	2000006c 	.word	0x2000006c
 800591c:	10624dd3 	.word	0x10624dd3

08005920 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d07d      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005940:	2300      	movs	r3, #0
 8005942:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005944:	4b8b      	ldr	r3, [pc, #556]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10d      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005950:	4b88      	ldr	r3, [pc, #544]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	4a87      	ldr	r2, [pc, #540]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595a:	61d3      	str	r3, [r2, #28]
 800595c:	4b85      	ldr	r3, [pc, #532]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005968:	2301      	movs	r3, #1
 800596a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	4b82      	ldr	r3, [pc, #520]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d118      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005978:	4b7f      	ldr	r3, [pc, #508]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a7e      	ldr	r2, [pc, #504]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800597e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005984:	f7fd fcc6 	bl	8003314 <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598a:	e008      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598c:	f7fd fcc2 	bl	8003314 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	@ 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e0e5      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599e:	4b76      	ldr	r3, [pc, #472]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059aa:	4b72      	ldr	r3, [pc, #456]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02e      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d027      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059d2:	4b6a      	ldr	r3, [pc, #424]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059d8:	4b68      	ldr	r3, [pc, #416]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059de:	4a65      	ldr	r2, [pc, #404]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ee:	f7fd fc91 	bl	8003314 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fd fc8d 	bl	8003314 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e0ae      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0c:	4b59      	ldr	r3, [pc, #356]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ee      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a18:	4b56      	ldr	r3, [pc, #344]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4953      	ldr	r1, [pc, #332]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a2a:	7efb      	ldrb	r3, [r7, #27]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a30:	4b50      	ldr	r3, [pc, #320]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4a4f      	ldr	r2, [pc, #316]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a48:	4b4a      	ldr	r3, [pc, #296]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4947      	ldr	r1, [pc, #284]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005a66:	4b43      	ldr	r3, [pc, #268]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4940      	ldr	r1, [pc, #256]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005a84:	4b3b      	ldr	r3, [pc, #236]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	4938      	ldr	r1, [pc, #224]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005a96:	4b37      	ldr	r3, [pc, #220]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d105      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005aa2:	4b34      	ldr	r3, [pc, #208]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d148      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d138      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005ad0:	4b28      	ldr	r3, [pc, #160]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e042      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005ae4:	4b23      	ldr	r3, [pc, #140]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	4920      	ldr	r1, [pc, #128]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005af6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	491c      	ldr	r1, [pc, #112]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fd fc01 	bl	8003314 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b16:	f7fd fbfd 	bl	8003314 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b64      	cmp	r3, #100	@ 0x64
 8005b22:	d901      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e020      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b28:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005b34:	e009      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005b36:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d001      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e00f      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b56:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	4904      	ldr	r1, [pc, #16]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
 8005b78:	40007000 	.word	0x40007000
 8005b7c:	42420440 	.word	0x42420440
 8005b80:	42420070 	.word	0x42420070

08005b84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	@ 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	2b0f      	cmp	r3, #15
 8005bb2:	f200 811d 	bhi.w	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005d71 	.word	0x08005d71
 8005bc0:	08005dd5 	.word	0x08005dd5
 8005bc4:	08005df1 	.word	0x08005df1
 8005bc8:	08005ccf 	.word	0x08005ccf
 8005bcc:	08005df1 	.word	0x08005df1
 8005bd0:	08005df1 	.word	0x08005df1
 8005bd4:	08005df1 	.word	0x08005df1
 8005bd8:	08005d21 	.word	0x08005d21
 8005bdc:	08005df1 	.word	0x08005df1
 8005be0:	08005df1 	.word	0x08005df1
 8005be4:	08005df1 	.word	0x08005df1
 8005be8:	08005df1 	.word	0x08005df1
 8005bec:	08005df1 	.word	0x08005df1
 8005bf0:	08005df1 	.word	0x08005df1
 8005bf4:	08005df1 	.word	0x08005df1
 8005bf8:	08005bfd 	.word	0x08005bfd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005bfc:	4b83      	ldr	r3, [pc, #524]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005c02:	4b82      	ldr	r3, [pc, #520]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80f2 	beq.w	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	0c9b      	lsrs	r3, r3, #18
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	4a7d      	ldr	r2, [pc, #500]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005c1a:	5cd3      	ldrb	r3, [r2, r3]
 8005c1c:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d03b      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005c28:	4b78      	ldr	r3, [pc, #480]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	4a78      	ldr	r2, [pc, #480]	@ (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c32:	5cd3      	ldrb	r3, [r2, r3]
 8005c34:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005c36:	4b75      	ldr	r3, [pc, #468]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01c      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005c42:	4b72      	ldr	r3, [pc, #456]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005c50:	4b6e      	ldr	r3, [pc, #440]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005c5e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	fb03 f202 	mul.w	r2, r3, r2
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7a:	e007      	b.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005c7c:	4a66      	ldr	r2, [pc, #408]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005c8c:	4b60      	ldr	r3, [pc, #384]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005c8e:	7b5b      	ldrb	r3, [r3, #13]
 8005c90:	461a      	mov	r2, r3
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9e:	e004      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8005caa:	4b58      	ldr	r3, [pc, #352]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb6:	d102      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005cbc:	e09a      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4a57      	ldr	r2, [pc, #348]	@ (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	623b      	str	r3, [r7, #32]
      break;
 8005ccc:	e092      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8005cce:	4b4f      	ldr	r3, [pc, #316]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005cda:	f7ff fd15 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 8005cde:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005ce0:	e08a      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8084 	beq.w	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005cf0:	4b46      	ldr	r3, [pc, #280]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005cfe:	4b43      	ldr	r3, [pc, #268]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	0b1b      	lsrs	r3, r3, #12
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	3302      	adds	r3, #2
 8005d0a:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005d0c:	4a42      	ldr	r2, [pc, #264]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	623b      	str	r3, [r7, #32]
      break;
 8005d1e:	e06b      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8005d20:	4b3a      	ldr	r3, [pc, #232]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005d2c:	f7ff fcec 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 8005d30:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005d32:	e063      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005d34:	4b35      	ldr	r3, [pc, #212]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05d      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005d40:	4b32      	ldr	r3, [pc, #200]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	0b1b      	lsrs	r3, r3, #12
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	3302      	adds	r3, #2
 8005d5a:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	623b      	str	r3, [r7, #32]
      break;
 8005d6e:	e045      	b.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005d70:	4b26      	ldr	r3, [pc, #152]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d80:	d108      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8005d8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	e01e      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d9e:	d109      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8005dac:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	e00e      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dbe:	d11f      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005dc0:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d019      	beq.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 8005dcc:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005dce:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005dd0:	e016      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005dd2:	e015      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005dd4:	f7ff fd72 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	0b9b      	lsrs	r3, r3, #14
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	3301      	adds	r3, #1
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	623b      	str	r3, [r7, #32]
      break;
 8005dee:	e008      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 8005df0:	bf00      	nop
 8005df2:	e006      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005df4:	bf00      	nop
 8005df6:	e004      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005df8:	bf00      	nop
 8005dfa:	e002      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005e00:	bf00      	nop
    }
  }
  return (frequency);
 8005e02:	6a3b      	ldr	r3, [r7, #32]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	@ 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	080094fc 	.word	0x080094fc
 8005e14:	0800950c 	.word	0x0800950c
 8005e18:	017d7840 	.word	0x017d7840
 8005e1c:	003d0900 	.word	0x003d0900
 8005e20:	aaaaaaab 	.word	0xaaaaaaab
 8005e24:	0002faf0 	.word	0x0002faf0

08005e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e076      	b.n	8005f28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d108      	bne.n	8005e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e4a:	d009      	beq.n	8005e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	61da      	str	r2, [r3, #28]
 8005e52:	e005      	b.n	8005e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fef6 	bl	8002c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee4:	ea42 0103 	orr.w	r1, r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	0c1a      	lsrs	r2, r3, #16
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f002 0204 	and.w	r2, r2, #4
 8005f06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f40:	f7fd f9e8 	bl	8003314 <HAL_GetTick>
 8005f44:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d001      	beq.n	8005f5a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f56:	2302      	movs	r3, #2
 8005f58:	e12a      	b.n	80061b0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_SPI_Transmit+0x36>
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e122      	b.n	80061b0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_SPI_Transmit+0x48>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e11b      	b.n	80061b0 <HAL_SPI_Transmit+0x280>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2203      	movs	r2, #3
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	88fa      	ldrh	r2, [r7, #6]
 8005f9e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff2:	2b40      	cmp	r3, #64	@ 0x40
 8005ff4:	d007      	beq.n	8006006 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800600e:	d152      	bne.n	80060b6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_Transmit+0xee>
 8006018:	8b7b      	ldrh	r3, [r7, #26]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d145      	bne.n	80060aa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	881a      	ldrh	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	1c9a      	adds	r2, r3, #2
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006042:	e032      	b.n	80060aa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d112      	bne.n	8006078 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	881a      	ldrh	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006076:	e018      	b.n	80060aa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006078:	f7fd f94c 	bl	8003314 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d803      	bhi.n	8006090 <HAL_SPI_Transmit+0x160>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d102      	bne.n	8006096 <HAL_SPI_Transmit+0x166>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e082      	b.n	80061b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1c7      	bne.n	8006044 <HAL_SPI_Transmit+0x114>
 80060b4:	e053      	b.n	800615e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Transmit+0x194>
 80060be:	8b7b      	ldrh	r3, [r7, #26]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d147      	bne.n	8006154 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060ea:	e033      	b.n	8006154 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d113      	bne.n	8006122 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	7812      	ldrb	r2, [r2, #0]
 8006106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006120:	e018      	b.n	8006154 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006122:	f7fd f8f7 	bl	8003314 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d803      	bhi.n	800613a <HAL_SPI_Transmit+0x20a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d102      	bne.n	8006140 <HAL_SPI_Transmit+0x210>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e02d      	b.n	80061b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1c6      	bne.n	80060ec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fcc0 	bl	8006ae8 <SPI_EndRxTxTransaction>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
  }
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d001      	beq.n	80061d8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
 80061d6:	e104      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e0:	d112      	bne.n	8006208 <HAL_SPI_Receive+0x50>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10e      	bne.n	8006208 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2204      	movs	r2, #4
 80061ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f8f3 	bl	80063ea <HAL_SPI_TransmitReceive>
 8006204:	4603      	mov	r3, r0
 8006206:	e0ec      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006208:	f7fd f884 	bl	8003314 <HAL_GetTick>
 800620c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_Receive+0x62>
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e0e1      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_SPI_Receive+0x74>
 8006228:	2302      	movs	r3, #2
 800622a:	e0da      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2204      	movs	r2, #4
 8006238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	88fa      	ldrh	r2, [r7, #6]
 8006252:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800627a:	d10f      	bne.n	800629c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800628a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800629a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b40      	cmp	r3, #64	@ 0x40
 80062a8:	d007      	beq.n	80062ba <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d170      	bne.n	80063a4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062c2:	e035      	b.n	8006330 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d115      	bne.n	80062fe <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f103 020c 	add.w	r2, r3, #12
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062fc:	e018      	b.n	8006330 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fe:	f7fd f809 	bl	8003314 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_Receive+0x15e>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d102      	bne.n	800631c <HAL_SPI_Receive+0x164>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e058      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1c4      	bne.n	80062c4 <HAL_SPI_Receive+0x10c>
 800633a:	e038      	b.n	80063ae <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b01      	cmp	r3, #1
 8006348:	d113      	bne.n	8006372 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	b292      	uxth	r2, r2
 8006356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006370:	e018      	b.n	80063a4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006372:	f7fc ffcf 	bl	8003314 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d803      	bhi.n	800638a <HAL_SPI_Receive+0x1d2>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d102      	bne.n	8006390 <HAL_SPI_Receive+0x1d8>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e01e      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1c6      	bne.n	800633c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fb46 	bl	8006a44 <SPI_EndRxTransaction>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
  }
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08a      	sub	sp, #40	@ 0x28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063f8:	2301      	movs	r3, #1
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063fc:	f7fc ff8a 	bl	8003314 <HAL_GetTick>
 8006400:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006408:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006410:	887b      	ldrh	r3, [r7, #2]
 8006412:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006414:	7ffb      	ldrb	r3, [r7, #31]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d00c      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x4a>
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006420:	d106      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x46>
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d001      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
 8006432:	e17f      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_SPI_TransmitReceive+0x5c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_SPI_TransmitReceive+0x5c>
 8006440:	887b      	ldrh	r3, [r7, #2]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e174      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x6e>
 8006454:	2302      	movs	r3, #2
 8006456:	e16d      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b04      	cmp	r3, #4
 800646a:	d003      	beq.n	8006474 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2205      	movs	r2, #5
 8006470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	887a      	ldrh	r2, [r7, #2]
 8006484:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	d007      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064d0:	d17e      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_TransmitReceive+0xf6>
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d16c      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006504:	e059      	b.n	80065ba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d11b      	bne.n	800654c <HAL_SPI_TransmitReceive+0x162>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d016      	beq.n	800654c <HAL_SPI_TransmitReceive+0x162>
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	2b01      	cmp	r3, #1
 8006522:	d113      	bne.n	800654c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006528:	881a      	ldrh	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006534:	1c9a      	adds	r2, r3, #2
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d119      	bne.n	800658e <HAL_SPI_TransmitReceive+0x1a4>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d014      	beq.n	800658e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	b292      	uxth	r2, r2
 8006570:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	1c9a      	adds	r2, r3, #2
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800658a:	2301      	movs	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800658e:	f7fc fec1 	bl	8003314 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800659a:	429a      	cmp	r2, r3
 800659c:	d80d      	bhi.n	80065ba <HAL_SPI_TransmitReceive+0x1d0>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d009      	beq.n	80065ba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e0bc      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1a0      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x11c>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d19b      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x11c>
 80065ce:	e082      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_SPI_TransmitReceive+0x1f4>
 80065d8:	8afb      	ldrh	r3, [r7, #22]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d171      	bne.n	80066c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	7812      	ldrb	r2, [r2, #0]
 80065ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006604:	e05d      	b.n	80066c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b02      	cmp	r3, #2
 8006612:	d11c      	bne.n	800664e <HAL_SPI_TransmitReceive+0x264>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d017      	beq.n	800664e <HAL_SPI_TransmitReceive+0x264>
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	2b01      	cmp	r3, #1
 8006622:	d114      	bne.n	800664e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b01      	cmp	r3, #1
 800665a:	d119      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x2a6>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d014      	beq.n	8006690 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800668c:	2301      	movs	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006690:	f7fc fe40 	bl	8003314 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669c:	429a      	cmp	r2, r3
 800669e:	d803      	bhi.n	80066a8 <HAL_SPI_TransmitReceive+0x2be>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d102      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x2c4>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e038      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d19c      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x21c>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d197      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa04 	bl	8006ae8 <SPI_EndRxTxTransaction>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d008      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e01d      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006732:	2300      	movs	r3, #0
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3728      	adds	r7, #40	@ 0x28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10e      	bne.n	800677c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006764:	2b00      	cmp	r3, #0
 8006766:	d009      	beq.n	800677c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
    return;
 800677a:	e0b7      	b.n	80068ec <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_SPI_IRQHandler+0x5e>
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    return;
 8006798:	e0a8      	b.n	80068ec <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <HAL_SPI_IRQHandler+0x74>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 809e 	beq.w	80068ec <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8098 	beq.w	80068ec <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d023      	beq.n	800680e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d011      	beq.n	80067f6 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	f043 0204 	orr.w	r2, r3, #4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	e00b      	b.n	800680e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	693b      	ldr	r3, [r7, #16]
        return;
 800680c:	e06e      	b.n	80068ec <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d014      	beq.n	8006842 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681c:	f043 0201 	orr.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	2b00      	cmp	r3, #0
 8006848:	d04f      	beq.n	80068ea <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006858:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_SPI_IRQHandler+0x13a>
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d034      	beq.n	80068e0 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0203 	bic.w	r2, r2, #3
 8006884:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d011      	beq.n	80068b2 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006892:	4a18      	ldr	r2, [pc, #96]	@ (80068f4 <HAL_SPI_IRQHandler+0x1b8>)
 8006894:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe f876 	bl	800498c <HAL_DMA_Abort_IT>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068be:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <HAL_SPI_IRQHandler+0x1b8>)
 80068c0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe f860 	bl	800498c <HAL_DMA_Abort_IT>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80068de:	e003      	b.n	80068e8 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f809 	bl	80068f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80068e6:	e000      	b.n	80068ea <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80068e8:	bf00      	nop
    return;
 80068ea:	bf00      	nop
  }
}
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	0800690b 	.word	0x0800690b

080068f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff ffe7 	bl	80068f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006944:	f7fc fce6 	bl	8003314 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4413      	add	r3, r2
 8006952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006954:	f7fc fcde 	bl	8003314 <HAL_GetTick>
 8006958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800695a:	4b39      	ldr	r3, [pc, #228]	@ (8006a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	015b      	lsls	r3, r3, #5
 8006960:	0d1b      	lsrs	r3, r3, #20
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696a:	e054      	b.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d050      	beq.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006974:	f7fc fcce 	bl	8003314 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	429a      	cmp	r2, r3
 8006982:	d902      	bls.n	800698a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d13d      	bne.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a2:	d111      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	d004      	beq.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b6:	d107      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d0:	d10f      	bne.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e017      	b.n	8006a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d19b      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	2000006c 	.word	0x2000006c

08006a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a58:	d111      	bne.n	8006a7e <SPI_EndRxTransaction+0x3a>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a62:	d004      	beq.n	8006a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6c:	d107      	bne.n	8006a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a86:	d117      	bne.n	8006ab8 <SPI_EndRxTransaction+0x74>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d112      	bne.n	8006ab8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff ff49 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aac:	f043 0220 	orr.w	r2, r3, #32
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e013      	b.n	8006ae0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	@ 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff36 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e000      	b.n	8006ae0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2201      	movs	r2, #1
 8006afc:	2102      	movs	r1, #2
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff ff18 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e013      	b.n	8006b42 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	@ 0x80
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff ff05 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e000      	b.n	8006b42 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e041      	b.n	8006be0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fc fa57 	bl	8003024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f000 f94b 	bl	8006e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d020      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0202 	mvn.w	r2, #2
 8006c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8da 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8cd 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f8dc 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d020      	beq.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01b      	beq.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0204 	mvn.w	r2, #4
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8b4 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8a7 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f8b6 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d020      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01b      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f06f 0208 	mvn.w	r2, #8
 8006cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f88e 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006cd0:	e005      	b.n	8006cde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f881 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f890 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d020      	beq.n	8006d30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01b      	beq.n	8006d30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0210 	mvn.w	r2, #16
 8006d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2208      	movs	r2, #8
 8006d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f868 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006d1c:	e005      	b.n	8006d2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f85b 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f86a 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00c      	beq.n	8006d54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0201 	mvn.w	r2, #1
 8006d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f83a 	bl	8006dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f93d 	bl	8006ff2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f83a 	bl	8006e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00c      	beq.n	8006dc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0220 	mvn.w	r2, #32
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f910 	bl	8006fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
	...

08006e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a33      	ldr	r2, [pc, #204]	@ (8006f04 <TIM_Base_SetConfig+0xe0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e42:	d00b      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a30      	ldr	r2, [pc, #192]	@ (8006f08 <TIM_Base_SetConfig+0xe4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8006f0c <TIM_Base_SetConfig+0xe8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a2e      	ldr	r2, [pc, #184]	@ (8006f10 <TIM_Base_SetConfig+0xec>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d108      	bne.n	8006e6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a24      	ldr	r2, [pc, #144]	@ (8006f04 <TIM_Base_SetConfig+0xe0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00f      	beq.n	8006e96 <TIM_Base_SetConfig+0x72>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d00b      	beq.n	8006e96 <TIM_Base_SetConfig+0x72>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a21      	ldr	r2, [pc, #132]	@ (8006f08 <TIM_Base_SetConfig+0xe4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <TIM_Base_SetConfig+0x72>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a20      	ldr	r2, [pc, #128]	@ (8006f0c <TIM_Base_SetConfig+0xe8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_Base_SetConfig+0x72>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1f      	ldr	r2, [pc, #124]	@ (8006f10 <TIM_Base_SetConfig+0xec>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d108      	bne.n	8006ea8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a0d      	ldr	r2, [pc, #52]	@ (8006f04 <TIM_Base_SetConfig+0xe0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d103      	bne.n	8006edc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f023 0201 	bic.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	611a      	str	r2, [r3, #16]
  }
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00

08006f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e04b      	b.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a19      	ldr	r2, [pc, #100]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a15      	ldr	r2, [pc, #84]	@ (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a13      	ldr	r2, [pc, #76]	@ (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a12      	ldr	r2, [pc, #72]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d10c      	bne.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800
 8006fdc:	40000c00 	.word	0x40000c00

08006fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e042      	b.n	800709c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fc f84a 	bl	80030c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2224      	movs	r2, #36	@ 0x24
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fd63 	bl	8007b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800705c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800706c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800707c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	@ 0x28
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d175      	bne.n	80071b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_UART_Transmit+0x2c>
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e06e      	b.n	80071b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2221      	movs	r2, #33	@ 0x21
 80070de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070e2:	f7fc f917 	bl	8003314 <HAL_GetTick>
 80070e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fc:	d108      	bne.n	8007110 <HAL_UART_Transmit+0x6c>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	e003      	b.n	8007118 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007118:	e02e      	b.n	8007178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2200      	movs	r2, #0
 8007122:	2180      	movs	r1, #128	@ 0x80
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fb01 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e03a      	b.n	80071b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10b      	bne.n	800715a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	3302      	adds	r3, #2
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	e007      	b.n	800716a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	3301      	adds	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1cb      	bne.n	800711a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	2140      	movs	r1, #64	@ 0x40
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 facd 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b0ba      	sub	sp, #232	@ 0xe8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80071fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10f      	bne.n	8007222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_UART_IRQHandler+0x66>
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fbbc 	bl	8007998 <UART_Receive_IT>
      return;
 8007220:	e25b      	b.n	80076da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80de 	beq.w	80073e8 <HAL_UART_IRQHandler+0x22c>
 800722c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80d1 	beq.w	80073e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_UART_IRQHandler+0xae>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007262:	f043 0201 	orr.w	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_UART_IRQHandler+0xd2>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	f043 0202 	orr.w	r2, r3, #2
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <HAL_UART_IRQHandler+0xf6>
 800729a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072aa:	f043 0204 	orr.w	r2, r3, #4
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d011      	beq.n	80072e2 <HAL_UART_IRQHandler+0x126>
 80072be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	f043 0208 	orr.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 81f2 	beq.w	80076d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <HAL_UART_IRQHandler+0x14e>
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb47 	bl	8007998 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <HAL_UART_IRQHandler+0x17a>
 800732e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04f      	beq.n	80073d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa51 	bl	80077de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d041      	beq.n	80073ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007376:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800737a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800738e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1d9      	bne.n	800734a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d013      	beq.n	80073c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a2:	4a7e      	ldr	r2, [pc, #504]	@ (800759c <HAL_UART_IRQHandler+0x3e0>)
 80073a4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd faee 	bl	800498c <HAL_DMA_Abort_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e00e      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f99c 	bl	8007704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e00a      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f998 	bl	8007704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	e006      	b.n	80073e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f994 	bl	8007704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80073e2:	e175      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	bf00      	nop
    return;
 80073e6:	e173      	b.n	80076d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	f040 814f 	bne.w	8007690 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8148 	beq.w	8007690 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8141 	beq.w	8007690 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80b6 	beq.w	80075a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8145 	beq.w	80076d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007452:	429a      	cmp	r2, r3
 8007454:	f080 813e 	bcs.w	80076d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800745e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b20      	cmp	r3, #32
 8007468:	f000 8088 	beq.w	800757c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800748a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007498:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800749c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1d9      	bne.n	800746c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3314      	adds	r3, #20
 80074be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e1      	bne.n	80074b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3314      	adds	r3, #20
 80074fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800750a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007518:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800751a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800751e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e3      	bne.n	80074f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800754a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800754c:	f023 0310 	bic.w	r3, r3, #16
 8007550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800755e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007560:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800756c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e3      	bne.n	800753a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd f9cd 	bl	8004916 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800758a:	b29b      	uxth	r3, r3
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	b29b      	uxth	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f8bf 	bl	8007716 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007598:	e09c      	b.n	80076d4 <HAL_UART_IRQHandler+0x518>
 800759a:	bf00      	nop
 800759c:	080078a3 	.word	0x080078a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 808e 	beq.w	80076d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80075bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 8089 	beq.w	80076d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80075ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80075ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e3      	bne.n	80075c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	623b      	str	r3, [r7, #32]
   return(result);
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3314      	adds	r3, #20
 800761e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007622:	633a      	str	r2, [r7, #48]	@ 0x30
 8007624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e3      	bne.n	80075fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	60fb      	str	r3, [r7, #12]
   return(result);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007668:	61fa      	str	r2, [r7, #28]
 800766a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	69b9      	ldr	r1, [r7, #24]
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	617b      	str	r3, [r7, #20]
   return(result);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e3      	bne.n	8007644 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f844 	bl	8007716 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800768e:	e023      	b.n	80076d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	d009      	beq.n	80076b0 <HAL_UART_IRQHandler+0x4f4>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f90e 	bl	80078ca <UART_Transmit_IT>
    return;
 80076ae:	e014      	b.n	80076da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <HAL_UART_IRQHandler+0x51e>
 80076bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f94d 	bl	8007968 <UART_EndTransmit_IT>
    return;
 80076ce:	e004      	b.n	80076da <HAL_UART_IRQHandler+0x51e>
    return;
 80076d0:	bf00      	nop
 80076d2:	e002      	b.n	80076da <HAL_UART_IRQHandler+0x51e>
      return;
 80076d4:	bf00      	nop
 80076d6:	e000      	b.n	80076da <HAL_UART_IRQHandler+0x51e>
      return;
 80076d8:	bf00      	nop
  }
}
 80076da:	37e8      	adds	r7, #232	@ 0xe8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr

080076f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr

0800772c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	e03b      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d037      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fb fde5 	bl	8003314 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	6a3a      	ldr	r2, [r7, #32]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <UART_WaitOnFlagUntilTimeout+0x30>
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e03a      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d023      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b80      	cmp	r3, #128	@ 0x80
 8007772:	d020      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b40      	cmp	r3, #64	@ 0x40
 8007778:	d01d      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b08      	cmp	r3, #8
 8007786:	d116      	bne.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f81d 	bl	80077de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2208      	movs	r2, #8
 80077a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e00f      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d0b4      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077de:	b480      	push	{r7}
 80077e0:	b095      	sub	sp, #84	@ 0x54
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007806:	643a      	str	r2, [r7, #64]	@ 0x40
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800780c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3314      	adds	r3, #20
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	61fb      	str	r3, [r7, #28]
   return(result);
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800783a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	2b01      	cmp	r3, #1
 8007854:	d119      	bne.n	800788a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	60bb      	str	r3, [r7, #8]
   return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f023 0310 	bic.w	r3, r3, #16
 800786c:	647b      	str	r3, [r7, #68]	@ 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	330c      	adds	r3, #12
 8007874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007876:	61ba      	str	r2, [r7, #24]
 8007878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6979      	ldr	r1, [r7, #20]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	613b      	str	r3, [r7, #16]
   return(result);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e5      	bne.n	8007856 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007898:	bf00      	nop
 800789a:	3754      	adds	r7, #84	@ 0x54
 800789c:	46bd      	mov	sp, r7
 800789e:	bc80      	pop	{r7}
 80078a0:	4770      	bx	lr

080078a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff ff21 	bl	8007704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b21      	cmp	r3, #33	@ 0x21
 80078dc:	d13e      	bne.n	800795c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e6:	d114      	bne.n	8007912 <UART_Transmit_IT+0x48>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d110      	bne.n	8007912 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	621a      	str	r2, [r3, #32]
 8007910:	e008      	b.n	8007924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	1c59      	adds	r1, r3, #1
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6211      	str	r1, [r2, #32]
 800791c:	781a      	ldrb	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29b      	uxth	r3, r3
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	4619      	mov	r1, r3
 8007932:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10f      	bne.n	8007958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e000      	b.n	800795e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800795c:	2302      	movs	r3, #2
  }
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr

08007968 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800797e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fea9 	bl	80076e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	@ 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b22      	cmp	r3, #34	@ 0x22
 80079aa:	f040 80ae 	bne.w	8007b0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b6:	d117      	bne.n	80079e8 <UART_Receive_IT+0x50>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d113      	bne.n	80079e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	1c9a      	adds	r2, r3, #2
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80079e6:	e026      	b.n	8007a36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079fa:	d007      	beq.n	8007a0c <UART_Receive_IT+0x74>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <UART_Receive_IT+0x82>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d106      	bne.n	8007a1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e008      	b.n	8007a2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	4619      	mov	r1, r3
 8007a44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d15d      	bne.n	8007b06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0220 	bic.w	r2, r2, #32
 8007a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0201 	bic.w	r2, r2, #1
 8007a78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d135      	bne.n	8007afc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f023 0310 	bic.w	r3, r3, #16
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab6:	623a      	str	r2, [r7, #32]
 8007ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	69f9      	ldr	r1, [r7, #28]
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d10a      	bne.n	8007aee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fe0e 	bl	8007716 <HAL_UARTEx_RxEventCallback>
 8007afa:	e002      	b.n	8007b02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff fdf8 	bl	80076f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e002      	b.n	8007b0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b0a:	2302      	movs	r3, #2
  }
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3730      	adds	r7, #48	@ 0x30
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007b4e:	f023 030c 	bic.w	r3, r3, #12
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a2c      	ldr	r2, [pc, #176]	@ (8007c28 <UART_SetConfig+0x114>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d103      	bne.n	8007b84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b7c:	f7fd fe9e 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	e002      	b.n	8007b8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b84:	f7fd fe86 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8007b88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009a      	lsls	r2, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba0:	4a22      	ldr	r2, [pc, #136]	@ (8007c2c <UART_SetConfig+0x118>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	0119      	lsls	r1, r3, #4
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009a      	lsls	r2, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c2c <UART_SetConfig+0x118>)
 8007bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	2064      	movs	r0, #100	@ 0x64
 8007bca:	fb00 f303 	mul.w	r3, r0, r3
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	3332      	adds	r3, #50	@ 0x32
 8007bd4:	4a15      	ldr	r2, [pc, #84]	@ (8007c2c <UART_SetConfig+0x118>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007be0:	4419      	add	r1, r3
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009a      	lsls	r2, r3, #2
 8007bec:	441a      	add	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c2c <UART_SetConfig+0x118>)
 8007bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	2064      	movs	r0, #100	@ 0x64
 8007c02:	fb00 f303 	mul.w	r3, r0, r3
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	3332      	adds	r3, #50	@ 0x32
 8007c0c:	4a07      	ldr	r2, [pc, #28]	@ (8007c2c <UART_SetConfig+0x118>)
 8007c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40013800 	.word	0x40013800
 8007c2c:	51eb851f 	.word	0x51eb851f

08007c30 <std>:
 8007c30:	2300      	movs	r3, #0
 8007c32:	b510      	push	{r4, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c3e:	6083      	str	r3, [r0, #8]
 8007c40:	8181      	strh	r1, [r0, #12]
 8007c42:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c44:	81c2      	strh	r2, [r0, #14]
 8007c46:	6183      	str	r3, [r0, #24]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	305c      	adds	r0, #92	@ 0x5c
 8007c4e:	f000 fa1b 	bl	8008088 <memset>
 8007c52:	4b0d      	ldr	r3, [pc, #52]	@ (8007c88 <std+0x58>)
 8007c54:	6224      	str	r4, [r4, #32]
 8007c56:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c58:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <std+0x5c>)
 8007c5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c90 <std+0x60>)
 8007c5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c60:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <std+0x64>)
 8007c62:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c64:	4b0c      	ldr	r3, [pc, #48]	@ (8007c98 <std+0x68>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	d006      	beq.n	8007c78 <std+0x48>
 8007c6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c6e:	4294      	cmp	r4, r2
 8007c70:	d002      	beq.n	8007c78 <std+0x48>
 8007c72:	33d0      	adds	r3, #208	@ 0xd0
 8007c74:	429c      	cmp	r4, r3
 8007c76:	d105      	bne.n	8007c84 <std+0x54>
 8007c78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c80:	f000 ba8e 	b.w	80081a0 <__retarget_lock_init_recursive>
 8007c84:	bd10      	pop	{r4, pc}
 8007c86:	bf00      	nop
 8007c88:	08007ed9 	.word	0x08007ed9
 8007c8c:	08007efb 	.word	0x08007efb
 8007c90:	08007f33 	.word	0x08007f33
 8007c94:	08007f57 	.word	0x08007f57
 8007c98:	200002b0 	.word	0x200002b0

08007c9c <stdio_exit_handler>:
 8007c9c:	4a02      	ldr	r2, [pc, #8]	@ (8007ca8 <stdio_exit_handler+0xc>)
 8007c9e:	4903      	ldr	r1, [pc, #12]	@ (8007cac <stdio_exit_handler+0x10>)
 8007ca0:	4803      	ldr	r0, [pc, #12]	@ (8007cb0 <stdio_exit_handler+0x14>)
 8007ca2:	f000 b869 	b.w	8007d78 <_fwalk_sglue>
 8007ca6:	bf00      	nop
 8007ca8:	20000078 	.word	0x20000078
 8007cac:	08008a85 	.word	0x08008a85
 8007cb0:	20000088 	.word	0x20000088

08007cb4 <cleanup_stdio>:
 8007cb4:	6841      	ldr	r1, [r0, #4]
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <cleanup_stdio+0x34>)
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4299      	cmp	r1, r3
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	d001      	beq.n	8007cc4 <cleanup_stdio+0x10>
 8007cc0:	f000 fee0 	bl	8008a84 <_fflush_r>
 8007cc4:	68a1      	ldr	r1, [r4, #8]
 8007cc6:	4b09      	ldr	r3, [pc, #36]	@ (8007cec <cleanup_stdio+0x38>)
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <cleanup_stdio+0x1e>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fed9 	bl	8008a84 <_fflush_r>
 8007cd2:	68e1      	ldr	r1, [r4, #12]
 8007cd4:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <cleanup_stdio+0x3c>)
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	d004      	beq.n	8007ce4 <cleanup_stdio+0x30>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce0:	f000 bed0 	b.w	8008a84 <_fflush_r>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200002b0 	.word	0x200002b0
 8007cec:	20000318 	.word	0x20000318
 8007cf0:	20000380 	.word	0x20000380

08007cf4 <global_stdio_init.part.0>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d24 <global_stdio_init.part.0+0x30>)
 8007cf8:	4c0b      	ldr	r4, [pc, #44]	@ (8007d28 <global_stdio_init.part.0+0x34>)
 8007cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8007d2c <global_stdio_init.part.0+0x38>)
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	2104      	movs	r1, #4
 8007d02:	2200      	movs	r2, #0
 8007d04:	f7ff ff94 	bl	8007c30 <std>
 8007d08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	2109      	movs	r1, #9
 8007d10:	f7ff ff8e 	bl	8007c30 <std>
 8007d14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d18:	2202      	movs	r2, #2
 8007d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d1e:	2112      	movs	r1, #18
 8007d20:	f7ff bf86 	b.w	8007c30 <std>
 8007d24:	200003e8 	.word	0x200003e8
 8007d28:	200002b0 	.word	0x200002b0
 8007d2c:	08007c9d 	.word	0x08007c9d

08007d30 <__sfp_lock_acquire>:
 8007d30:	4801      	ldr	r0, [pc, #4]	@ (8007d38 <__sfp_lock_acquire+0x8>)
 8007d32:	f000 ba36 	b.w	80081a2 <__retarget_lock_acquire_recursive>
 8007d36:	bf00      	nop
 8007d38:	200003f1 	.word	0x200003f1

08007d3c <__sfp_lock_release>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	@ (8007d44 <__sfp_lock_release+0x8>)
 8007d3e:	f000 ba31 	b.w	80081a4 <__retarget_lock_release_recursive>
 8007d42:	bf00      	nop
 8007d44:	200003f1 	.word	0x200003f1

08007d48 <__sinit>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	f7ff fff0 	bl	8007d30 <__sfp_lock_acquire>
 8007d50:	6a23      	ldr	r3, [r4, #32]
 8007d52:	b11b      	cbz	r3, 8007d5c <__sinit+0x14>
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f7ff bff0 	b.w	8007d3c <__sfp_lock_release>
 8007d5c:	4b04      	ldr	r3, [pc, #16]	@ (8007d70 <__sinit+0x28>)
 8007d5e:	6223      	str	r3, [r4, #32]
 8007d60:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <__sinit+0x2c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f5      	bne.n	8007d54 <__sinit+0xc>
 8007d68:	f7ff ffc4 	bl	8007cf4 <global_stdio_init.part.0>
 8007d6c:	e7f2      	b.n	8007d54 <__sinit+0xc>
 8007d6e:	bf00      	nop
 8007d70:	08007cb5 	.word	0x08007cb5
 8007d74:	200003e8 	.word	0x200003e8

08007d78 <_fwalk_sglue>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	4688      	mov	r8, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	2600      	movs	r6, #0
 8007d84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d88:	f1b9 0901 	subs.w	r9, r9, #1
 8007d8c:	d505      	bpl.n	8007d9a <_fwalk_sglue+0x22>
 8007d8e:	6824      	ldr	r4, [r4, #0]
 8007d90:	2c00      	cmp	r4, #0
 8007d92:	d1f7      	bne.n	8007d84 <_fwalk_sglue+0xc>
 8007d94:	4630      	mov	r0, r6
 8007d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	89ab      	ldrh	r3, [r5, #12]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d907      	bls.n	8007db0 <_fwalk_sglue+0x38>
 8007da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da4:	3301      	adds	r3, #1
 8007da6:	d003      	beq.n	8007db0 <_fwalk_sglue+0x38>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c0      	blx	r8
 8007dae:	4306      	orrs	r6, r0
 8007db0:	3568      	adds	r5, #104	@ 0x68
 8007db2:	e7e9      	b.n	8007d88 <_fwalk_sglue+0x10>

08007db4 <_puts_r>:
 8007db4:	6a03      	ldr	r3, [r0, #32]
 8007db6:	b570      	push	{r4, r5, r6, lr}
 8007db8:	4605      	mov	r5, r0
 8007dba:	460e      	mov	r6, r1
 8007dbc:	6884      	ldr	r4, [r0, #8]
 8007dbe:	b90b      	cbnz	r3, 8007dc4 <_puts_r+0x10>
 8007dc0:	f7ff ffc2 	bl	8007d48 <__sinit>
 8007dc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dc6:	07db      	lsls	r3, r3, #31
 8007dc8:	d405      	bmi.n	8007dd6 <_puts_r+0x22>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	0598      	lsls	r0, r3, #22
 8007dce:	d402      	bmi.n	8007dd6 <_puts_r+0x22>
 8007dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dd2:	f000 f9e6 	bl	80081a2 <__retarget_lock_acquire_recursive>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	0719      	lsls	r1, r3, #28
 8007dda:	d502      	bpl.n	8007de2 <_puts_r+0x2e>
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d135      	bne.n	8007e4e <_puts_r+0x9a>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f8f9 	bl	8007fdc <__swsetup_r>
 8007dea:	b380      	cbz	r0, 8007e4e <_puts_r+0x9a>
 8007dec:	f04f 35ff 	mov.w	r5, #4294967295
 8007df0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007df2:	07da      	lsls	r2, r3, #31
 8007df4:	d405      	bmi.n	8007e02 <_puts_r+0x4e>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	059b      	lsls	r3, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_puts_r+0x4e>
 8007dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dfe:	f000 f9d1 	bl	80081a4 <__retarget_lock_release_recursive>
 8007e02:	4628      	mov	r0, r5
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	da04      	bge.n	8007e14 <_puts_r+0x60>
 8007e0a:	69a2      	ldr	r2, [r4, #24]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	dc17      	bgt.n	8007e40 <_puts_r+0x8c>
 8007e10:	290a      	cmp	r1, #10
 8007e12:	d015      	beq.n	8007e40 <_puts_r+0x8c>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	7019      	strb	r1, [r3, #0]
 8007e1c:	68a3      	ldr	r3, [r4, #8]
 8007e1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e22:	3b01      	subs	r3, #1
 8007e24:	60a3      	str	r3, [r4, #8]
 8007e26:	2900      	cmp	r1, #0
 8007e28:	d1ed      	bne.n	8007e06 <_puts_r+0x52>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	da11      	bge.n	8007e52 <_puts_r+0x9e>
 8007e2e:	4622      	mov	r2, r4
 8007e30:	210a      	movs	r1, #10
 8007e32:	4628      	mov	r0, r5
 8007e34:	f000 f893 	bl	8007f5e <__swbuf_r>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d0d7      	beq.n	8007dec <_puts_r+0x38>
 8007e3c:	250a      	movs	r5, #10
 8007e3e:	e7d7      	b.n	8007df0 <_puts_r+0x3c>
 8007e40:	4622      	mov	r2, r4
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 f88b 	bl	8007f5e <__swbuf_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d1e7      	bne.n	8007e1c <_puts_r+0x68>
 8007e4c:	e7ce      	b.n	8007dec <_puts_r+0x38>
 8007e4e:	3e01      	subs	r6, #1
 8007e50:	e7e4      	b.n	8007e1c <_puts_r+0x68>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	220a      	movs	r2, #10
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e7ee      	b.n	8007e3c <_puts_r+0x88>
	...

08007e60 <puts>:
 8007e60:	4b02      	ldr	r3, [pc, #8]	@ (8007e6c <puts+0xc>)
 8007e62:	4601      	mov	r1, r0
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	f7ff bfa5 	b.w	8007db4 <_puts_r>
 8007e6a:	bf00      	nop
 8007e6c:	20000084 	.word	0x20000084

08007e70 <sniprintf>:
 8007e70:	b40c      	push	{r2, r3}
 8007e72:	b530      	push	{r4, r5, lr}
 8007e74:	4b17      	ldr	r3, [pc, #92]	@ (8007ed4 <sniprintf+0x64>)
 8007e76:	1e0c      	subs	r4, r1, #0
 8007e78:	681d      	ldr	r5, [r3, #0]
 8007e7a:	b09d      	sub	sp, #116	@ 0x74
 8007e7c:	da08      	bge.n	8007e90 <sniprintf+0x20>
 8007e7e:	238b      	movs	r3, #139	@ 0x8b
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	b01d      	add	sp, #116	@ 0x74
 8007e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e8c:	b002      	add	sp, #8
 8007e8e:	4770      	bx	lr
 8007e90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e98:	bf0c      	ite	eq
 8007e9a:	4623      	moveq	r3, r4
 8007e9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9307      	str	r3, [sp, #28]
 8007ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ea8:	9002      	str	r0, [sp, #8]
 8007eaa:	9006      	str	r0, [sp, #24]
 8007eac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	ab21      	add	r3, sp, #132	@ 0x84
 8007eb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007eb6:	a902      	add	r1, sp, #8
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	f000 fad5 	bl	8008468 <_svfiprintf_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	bfbc      	itt	lt
 8007ec2:	238b      	movlt	r3, #139	@ 0x8b
 8007ec4:	602b      	strlt	r3, [r5, #0]
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	d0dd      	beq.n	8007e86 <sniprintf+0x16>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e7d9      	b.n	8007e86 <sniprintf+0x16>
 8007ed2:	bf00      	nop
 8007ed4:	20000084 	.word	0x20000084

08007ed8 <__sread>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	460c      	mov	r4, r1
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f000 f910 	bl	8008104 <_read_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	bfab      	itete	ge
 8007ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eea:	89a3      	ldrhlt	r3, [r4, #12]
 8007eec:	181b      	addge	r3, r3, r0
 8007eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ef2:	bfac      	ite	ge
 8007ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ef6:	81a3      	strhlt	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__swrite>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	461f      	mov	r7, r3
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	4605      	mov	r5, r0
 8007f04:	05db      	lsls	r3, r3, #23
 8007f06:	460c      	mov	r4, r1
 8007f08:	4616      	mov	r6, r2
 8007f0a:	d505      	bpl.n	8007f18 <__swrite+0x1e>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f14:	f000 f8e4 	bl	80080e0 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	4628      	mov	r0, r5
 8007f24:	463b      	mov	r3, r7
 8007f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	f000 b8fb 	b.w	8008128 <_write_r>

08007f32 <__sseek>:
 8007f32:	b510      	push	{r4, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3a:	f000 f8d1 	bl	80080e0 <_lseek_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	bf15      	itete	ne
 8007f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f4e:	81a3      	strheq	r3, [r4, #12]
 8007f50:	bf18      	it	ne
 8007f52:	81a3      	strhne	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__sclose>:
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 b8b1 	b.w	80080c0 <_close_r>

08007f5e <__swbuf_r>:
 8007f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f60:	460e      	mov	r6, r1
 8007f62:	4614      	mov	r4, r2
 8007f64:	4605      	mov	r5, r0
 8007f66:	b118      	cbz	r0, 8007f70 <__swbuf_r+0x12>
 8007f68:	6a03      	ldr	r3, [r0, #32]
 8007f6a:	b90b      	cbnz	r3, 8007f70 <__swbuf_r+0x12>
 8007f6c:	f7ff feec 	bl	8007d48 <__sinit>
 8007f70:	69a3      	ldr	r3, [r4, #24]
 8007f72:	60a3      	str	r3, [r4, #8]
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	071a      	lsls	r2, r3, #28
 8007f78:	d501      	bpl.n	8007f7e <__swbuf_r+0x20>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	b943      	cbnz	r3, 8007f90 <__swbuf_r+0x32>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f82b 	bl	8007fdc <__swsetup_r>
 8007f86:	b118      	cbz	r0, 8007f90 <__swbuf_r+0x32>
 8007f88:	f04f 37ff 	mov.w	r7, #4294967295
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	6922      	ldr	r2, [r4, #16]
 8007f94:	b2f6      	uxtb	r6, r6
 8007f96:	1a98      	subs	r0, r3, r2
 8007f98:	6963      	ldr	r3, [r4, #20]
 8007f9a:	4637      	mov	r7, r6
 8007f9c:	4283      	cmp	r3, r0
 8007f9e:	dc05      	bgt.n	8007fac <__swbuf_r+0x4e>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 fd6e 	bl	8008a84 <_fflush_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d1ed      	bne.n	8007f88 <__swbuf_r+0x2a>
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	701e      	strb	r6, [r3, #0]
 8007fba:	6962      	ldr	r2, [r4, #20]
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d004      	beq.n	8007fcc <__swbuf_r+0x6e>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	07db      	lsls	r3, r3, #31
 8007fc6:	d5e1      	bpl.n	8007f8c <__swbuf_r+0x2e>
 8007fc8:	2e0a      	cmp	r6, #10
 8007fca:	d1df      	bne.n	8007f8c <__swbuf_r+0x2e>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 fd58 	bl	8008a84 <_fflush_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0d9      	beq.n	8007f8c <__swbuf_r+0x2e>
 8007fd8:	e7d6      	b.n	8007f88 <__swbuf_r+0x2a>
	...

08007fdc <__swsetup_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4b29      	ldr	r3, [pc, #164]	@ (8008084 <__swsetup_r+0xa8>)
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b118      	cbz	r0, 8007ff0 <__swsetup_r+0x14>
 8007fe8:	6a03      	ldr	r3, [r0, #32]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <__swsetup_r+0x14>
 8007fec:	f7ff feac 	bl	8007d48 <__sinit>
 8007ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff4:	0719      	lsls	r1, r3, #28
 8007ff6:	d422      	bmi.n	800803e <__swsetup_r+0x62>
 8007ff8:	06da      	lsls	r2, r3, #27
 8007ffa:	d407      	bmi.n	800800c <__swsetup_r+0x30>
 8007ffc:	2209      	movs	r2, #9
 8007ffe:	602a      	str	r2, [r5, #0]
 8008000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	e033      	b.n	8008074 <__swsetup_r+0x98>
 800800c:	0758      	lsls	r0, r3, #29
 800800e:	d512      	bpl.n	8008036 <__swsetup_r+0x5a>
 8008010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008012:	b141      	cbz	r1, 8008026 <__swsetup_r+0x4a>
 8008014:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008018:	4299      	cmp	r1, r3
 800801a:	d002      	beq.n	8008022 <__swsetup_r+0x46>
 800801c:	4628      	mov	r0, r5
 800801e:	f000 f8d1 	bl	80081c4 <_free_r>
 8008022:	2300      	movs	r3, #0
 8008024:	6363      	str	r3, [r4, #52]	@ 0x34
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	2300      	movs	r3, #0
 8008030:	6063      	str	r3, [r4, #4]
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f043 0308 	orr.w	r3, r3, #8
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	b94b      	cbnz	r3, 8008056 <__swsetup_r+0x7a>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804c:	d003      	beq.n	8008056 <__swsetup_r+0x7a>
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f000 fd64 	bl	8008b1e <__smakebuf_r>
 8008056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805a:	f013 0201 	ands.w	r2, r3, #1
 800805e:	d00a      	beq.n	8008076 <__swsetup_r+0x9a>
 8008060:	2200      	movs	r2, #0
 8008062:	60a2      	str	r2, [r4, #8]
 8008064:	6962      	ldr	r2, [r4, #20]
 8008066:	4252      	negs	r2, r2
 8008068:	61a2      	str	r2, [r4, #24]
 800806a:	6922      	ldr	r2, [r4, #16]
 800806c:	b942      	cbnz	r2, 8008080 <__swsetup_r+0xa4>
 800806e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008072:	d1c5      	bne.n	8008000 <__swsetup_r+0x24>
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	0799      	lsls	r1, r3, #30
 8008078:	bf58      	it	pl
 800807a:	6962      	ldrpl	r2, [r4, #20]
 800807c:	60a2      	str	r2, [r4, #8]
 800807e:	e7f4      	b.n	800806a <__swsetup_r+0x8e>
 8008080:	2000      	movs	r0, #0
 8008082:	e7f7      	b.n	8008074 <__swsetup_r+0x98>
 8008084:	20000084 	.word	0x20000084

08008088 <memset>:
 8008088:	4603      	mov	r3, r0
 800808a:	4402      	add	r2, r0
 800808c:	4293      	cmp	r3, r2
 800808e:	d100      	bne.n	8008092 <memset+0xa>
 8008090:	4770      	bx	lr
 8008092:	f803 1b01 	strb.w	r1, [r3], #1
 8008096:	e7f9      	b.n	800808c <memset+0x4>

08008098 <strncpy>:
 8008098:	4603      	mov	r3, r0
 800809a:	b510      	push	{r4, lr}
 800809c:	3901      	subs	r1, #1
 800809e:	b132      	cbz	r2, 80080ae <strncpy+0x16>
 80080a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80080a4:	3a01      	subs	r2, #1
 80080a6:	f803 4b01 	strb.w	r4, [r3], #1
 80080aa:	2c00      	cmp	r4, #0
 80080ac:	d1f7      	bne.n	800809e <strncpy+0x6>
 80080ae:	2100      	movs	r1, #0
 80080b0:	441a      	add	r2, r3
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d100      	bne.n	80080b8 <strncpy+0x20>
 80080b6:	bd10      	pop	{r4, pc}
 80080b8:	f803 1b01 	strb.w	r1, [r3], #1
 80080bc:	e7f9      	b.n	80080b2 <strncpy+0x1a>
	...

080080c0 <_close_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	2300      	movs	r3, #0
 80080c4:	4d05      	ldr	r5, [pc, #20]	@ (80080dc <_close_r+0x1c>)
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7fa ff07 	bl	8002ede <_close>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_close_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_close_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	200003ec 	.word	0x200003ec

080080e0 <_lseek_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	2200      	movs	r2, #0
 80080ea:	4d05      	ldr	r5, [pc, #20]	@ (8008100 <_lseek_r+0x20>)
 80080ec:	602a      	str	r2, [r5, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	f7fa ff19 	bl	8002f26 <_lseek>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_lseek_r+0x1e>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_lseek_r+0x1e>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	200003ec 	.word	0x200003ec

08008104 <_read_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	2200      	movs	r2, #0
 800810e:	4d05      	ldr	r5, [pc, #20]	@ (8008124 <_read_r+0x20>)
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7fa fec6 	bl	8002ea4 <_read>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_read_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_read_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	200003ec 	.word	0x200003ec

08008128 <_write_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	2200      	movs	r2, #0
 8008132:	4d05      	ldr	r5, [pc, #20]	@ (8008148 <_write_r+0x20>)
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7fb f818 	bl	800316c <_write>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_write_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_write_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200003ec 	.word	0x200003ec

0800814c <__errno>:
 800814c:	4b01      	ldr	r3, [pc, #4]	@ (8008154 <__errno+0x8>)
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000084 	.word	0x20000084

08008158 <__libc_init_array>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	2600      	movs	r6, #0
 800815c:	4d0c      	ldr	r5, [pc, #48]	@ (8008190 <__libc_init_array+0x38>)
 800815e:	4c0d      	ldr	r4, [pc, #52]	@ (8008194 <__libc_init_array+0x3c>)
 8008160:	1b64      	subs	r4, r4, r5
 8008162:	10a4      	asrs	r4, r4, #2
 8008164:	42a6      	cmp	r6, r4
 8008166:	d109      	bne.n	800817c <__libc_init_array+0x24>
 8008168:	f000 ff90 	bl	800908c <_init>
 800816c:	2600      	movs	r6, #0
 800816e:	4d0a      	ldr	r5, [pc, #40]	@ (8008198 <__libc_init_array+0x40>)
 8008170:	4c0a      	ldr	r4, [pc, #40]	@ (800819c <__libc_init_array+0x44>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	42a6      	cmp	r6, r4
 8008178:	d105      	bne.n	8008186 <__libc_init_array+0x2e>
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008180:	4798      	blx	r3
 8008182:	3601      	adds	r6, #1
 8008184:	e7ee      	b.n	8008164 <__libc_init_array+0xc>
 8008186:	f855 3b04 	ldr.w	r3, [r5], #4
 800818a:	4798      	blx	r3
 800818c:	3601      	adds	r6, #1
 800818e:	e7f2      	b.n	8008176 <__libc_init_array+0x1e>
 8008190:	08009558 	.word	0x08009558
 8008194:	08009558 	.word	0x08009558
 8008198:	08009558 	.word	0x08009558
 800819c:	0800955c 	.word	0x0800955c

080081a0 <__retarget_lock_init_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_acquire_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <__retarget_lock_release_recursive>:
 80081a4:	4770      	bx	lr

080081a6 <memcpy>:
 80081a6:	440a      	add	r2, r1
 80081a8:	4291      	cmp	r1, r2
 80081aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80081ae:	d100      	bne.n	80081b2 <memcpy+0xc>
 80081b0:	4770      	bx	lr
 80081b2:	b510      	push	{r4, lr}
 80081b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b8:	4291      	cmp	r1, r2
 80081ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081be:	d1f9      	bne.n	80081b4 <memcpy+0xe>
 80081c0:	bd10      	pop	{r4, pc}
	...

080081c4 <_free_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d040      	beq.n	800824e <_free_r+0x8a>
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f0c      	subs	r4, r1, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	18e4      	addlt	r4, r4, r3
 80081d8:	f000 f8de 	bl	8008398 <__malloc_lock>
 80081dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008250 <_free_r+0x8c>)
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	b933      	cbnz	r3, 80081f0 <_free_r+0x2c>
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	6014      	str	r4, [r2, #0]
 80081e6:	4628      	mov	r0, r5
 80081e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ec:	f000 b8da 	b.w	80083a4 <__malloc_unlock>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d908      	bls.n	8008206 <_free_r+0x42>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	1821      	adds	r1, r4, r0
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf01      	itttt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	1809      	addeq	r1, r1, r0
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	e7ed      	b.n	80081e2 <_free_r+0x1e>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x4c>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x42>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1850      	adds	r0, r2, r1
 8008214:	42a0      	cmp	r0, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x6c>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	4401      	add	r1, r0
 800821c:	1850      	adds	r0, r2, r1
 800821e:	4283      	cmp	r3, r0
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1e0      	bne.n	80081e6 <_free_r+0x22>
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4408      	add	r0, r1
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	6053      	str	r3, [r2, #4]
 800822e:	e7da      	b.n	80081e6 <_free_r+0x22>
 8008230:	d902      	bls.n	8008238 <_free_r+0x74>
 8008232:	230c      	movs	r3, #12
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	e7d6      	b.n	80081e6 <_free_r+0x22>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf01      	itttt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	1809      	addeq	r1, r1, r0
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	6054      	str	r4, [r2, #4]
 800824c:	e7cb      	b.n	80081e6 <_free_r+0x22>
 800824e:	bd38      	pop	{r3, r4, r5, pc}
 8008250:	200003f8 	.word	0x200003f8

08008254 <sbrk_aligned>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4e0f      	ldr	r6, [pc, #60]	@ (8008294 <sbrk_aligned+0x40>)
 8008258:	460c      	mov	r4, r1
 800825a:	6831      	ldr	r1, [r6, #0]
 800825c:	4605      	mov	r5, r0
 800825e:	b911      	cbnz	r1, 8008266 <sbrk_aligned+0x12>
 8008260:	f000 fcd6 	bl	8008c10 <_sbrk_r>
 8008264:	6030      	str	r0, [r6, #0]
 8008266:	4621      	mov	r1, r4
 8008268:	4628      	mov	r0, r5
 800826a:	f000 fcd1 	bl	8008c10 <_sbrk_r>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	d103      	bne.n	800827a <sbrk_aligned+0x26>
 8008272:	f04f 34ff 	mov.w	r4, #4294967295
 8008276:	4620      	mov	r0, r4
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	1cc4      	adds	r4, r0, #3
 800827c:	f024 0403 	bic.w	r4, r4, #3
 8008280:	42a0      	cmp	r0, r4
 8008282:	d0f8      	beq.n	8008276 <sbrk_aligned+0x22>
 8008284:	1a21      	subs	r1, r4, r0
 8008286:	4628      	mov	r0, r5
 8008288:	f000 fcc2 	bl	8008c10 <_sbrk_r>
 800828c:	3001      	adds	r0, #1
 800828e:	d1f2      	bne.n	8008276 <sbrk_aligned+0x22>
 8008290:	e7ef      	b.n	8008272 <sbrk_aligned+0x1e>
 8008292:	bf00      	nop
 8008294:	200003f4 	.word	0x200003f4

08008298 <_malloc_r>:
 8008298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800829c:	1ccd      	adds	r5, r1, #3
 800829e:	f025 0503 	bic.w	r5, r5, #3
 80082a2:	3508      	adds	r5, #8
 80082a4:	2d0c      	cmp	r5, #12
 80082a6:	bf38      	it	cc
 80082a8:	250c      	movcc	r5, #12
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	4606      	mov	r6, r0
 80082ae:	db01      	blt.n	80082b4 <_malloc_r+0x1c>
 80082b0:	42a9      	cmp	r1, r5
 80082b2:	d904      	bls.n	80082be <_malloc_r+0x26>
 80082b4:	230c      	movs	r3, #12
 80082b6:	6033      	str	r3, [r6, #0]
 80082b8:	2000      	movs	r0, #0
 80082ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008394 <_malloc_r+0xfc>
 80082c2:	f000 f869 	bl	8008398 <__malloc_lock>
 80082c6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ca:	461c      	mov	r4, r3
 80082cc:	bb44      	cbnz	r4, 8008320 <_malloc_r+0x88>
 80082ce:	4629      	mov	r1, r5
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7ff ffbf 	bl	8008254 <sbrk_aligned>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	4604      	mov	r4, r0
 80082da:	d158      	bne.n	800838e <_malloc_r+0xf6>
 80082dc:	f8d8 4000 	ldr.w	r4, [r8]
 80082e0:	4627      	mov	r7, r4
 80082e2:	2f00      	cmp	r7, #0
 80082e4:	d143      	bne.n	800836e <_malloc_r+0xd6>
 80082e6:	2c00      	cmp	r4, #0
 80082e8:	d04b      	beq.n	8008382 <_malloc_r+0xea>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	4639      	mov	r1, r7
 80082ee:	4630      	mov	r0, r6
 80082f0:	eb04 0903 	add.w	r9, r4, r3
 80082f4:	f000 fc8c 	bl	8008c10 <_sbrk_r>
 80082f8:	4581      	cmp	r9, r0
 80082fa:	d142      	bne.n	8008382 <_malloc_r+0xea>
 80082fc:	6821      	ldr	r1, [r4, #0]
 80082fe:	4630      	mov	r0, r6
 8008300:	1a6d      	subs	r5, r5, r1
 8008302:	4629      	mov	r1, r5
 8008304:	f7ff ffa6 	bl	8008254 <sbrk_aligned>
 8008308:	3001      	adds	r0, #1
 800830a:	d03a      	beq.n	8008382 <_malloc_r+0xea>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	442b      	add	r3, r5
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	f8d8 3000 	ldr.w	r3, [r8]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	bb62      	cbnz	r2, 8008374 <_malloc_r+0xdc>
 800831a:	f8c8 7000 	str.w	r7, [r8]
 800831e:	e00f      	b.n	8008340 <_malloc_r+0xa8>
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	1b52      	subs	r2, r2, r5
 8008324:	d420      	bmi.n	8008368 <_malloc_r+0xd0>
 8008326:	2a0b      	cmp	r2, #11
 8008328:	d917      	bls.n	800835a <_malloc_r+0xc2>
 800832a:	1961      	adds	r1, r4, r5
 800832c:	42a3      	cmp	r3, r4
 800832e:	6025      	str	r5, [r4, #0]
 8008330:	bf18      	it	ne
 8008332:	6059      	strne	r1, [r3, #4]
 8008334:	6863      	ldr	r3, [r4, #4]
 8008336:	bf08      	it	eq
 8008338:	f8c8 1000 	streq.w	r1, [r8]
 800833c:	5162      	str	r2, [r4, r5]
 800833e:	604b      	str	r3, [r1, #4]
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f82f 	bl	80083a4 <__malloc_unlock>
 8008346:	f104 000b 	add.w	r0, r4, #11
 800834a:	1d23      	adds	r3, r4, #4
 800834c:	f020 0007 	bic.w	r0, r0, #7
 8008350:	1ac2      	subs	r2, r0, r3
 8008352:	bf1c      	itt	ne
 8008354:	1a1b      	subne	r3, r3, r0
 8008356:	50a3      	strne	r3, [r4, r2]
 8008358:	e7af      	b.n	80082ba <_malloc_r+0x22>
 800835a:	6862      	ldr	r2, [r4, #4]
 800835c:	42a3      	cmp	r3, r4
 800835e:	bf0c      	ite	eq
 8008360:	f8c8 2000 	streq.w	r2, [r8]
 8008364:	605a      	strne	r2, [r3, #4]
 8008366:	e7eb      	b.n	8008340 <_malloc_r+0xa8>
 8008368:	4623      	mov	r3, r4
 800836a:	6864      	ldr	r4, [r4, #4]
 800836c:	e7ae      	b.n	80082cc <_malloc_r+0x34>
 800836e:	463c      	mov	r4, r7
 8008370:	687f      	ldr	r7, [r7, #4]
 8008372:	e7b6      	b.n	80082e2 <_malloc_r+0x4a>
 8008374:	461a      	mov	r2, r3
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	42a3      	cmp	r3, r4
 800837a:	d1fb      	bne.n	8008374 <_malloc_r+0xdc>
 800837c:	2300      	movs	r3, #0
 800837e:	6053      	str	r3, [r2, #4]
 8008380:	e7de      	b.n	8008340 <_malloc_r+0xa8>
 8008382:	230c      	movs	r3, #12
 8008384:	4630      	mov	r0, r6
 8008386:	6033      	str	r3, [r6, #0]
 8008388:	f000 f80c 	bl	80083a4 <__malloc_unlock>
 800838c:	e794      	b.n	80082b8 <_malloc_r+0x20>
 800838e:	6005      	str	r5, [r0, #0]
 8008390:	e7d6      	b.n	8008340 <_malloc_r+0xa8>
 8008392:	bf00      	nop
 8008394:	200003f8 	.word	0x200003f8

08008398 <__malloc_lock>:
 8008398:	4801      	ldr	r0, [pc, #4]	@ (80083a0 <__malloc_lock+0x8>)
 800839a:	f7ff bf02 	b.w	80081a2 <__retarget_lock_acquire_recursive>
 800839e:	bf00      	nop
 80083a0:	200003f0 	.word	0x200003f0

080083a4 <__malloc_unlock>:
 80083a4:	4801      	ldr	r0, [pc, #4]	@ (80083ac <__malloc_unlock+0x8>)
 80083a6:	f7ff befd 	b.w	80081a4 <__retarget_lock_release_recursive>
 80083aa:	bf00      	nop
 80083ac:	200003f0 	.word	0x200003f0

080083b0 <__ssputs_r>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	461f      	mov	r7, r3
 80083b6:	688e      	ldr	r6, [r1, #8]
 80083b8:	4682      	mov	sl, r0
 80083ba:	42be      	cmp	r6, r7
 80083bc:	460c      	mov	r4, r1
 80083be:	4690      	mov	r8, r2
 80083c0:	680b      	ldr	r3, [r1, #0]
 80083c2:	d82d      	bhi.n	8008420 <__ssputs_r+0x70>
 80083c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083cc:	d026      	beq.n	800841c <__ssputs_r+0x6c>
 80083ce:	6965      	ldr	r5, [r4, #20]
 80083d0:	6909      	ldr	r1, [r1, #16]
 80083d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d6:	eba3 0901 	sub.w	r9, r3, r1
 80083da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083de:	1c7b      	adds	r3, r7, #1
 80083e0:	444b      	add	r3, r9
 80083e2:	106d      	asrs	r5, r5, #1
 80083e4:	429d      	cmp	r5, r3
 80083e6:	bf38      	it	cc
 80083e8:	461d      	movcc	r5, r3
 80083ea:	0553      	lsls	r3, r2, #21
 80083ec:	d527      	bpl.n	800843e <__ssputs_r+0x8e>
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7ff ff52 	bl	8008298 <_malloc_r>
 80083f4:	4606      	mov	r6, r0
 80083f6:	b360      	cbz	r0, 8008452 <__ssputs_r+0xa2>
 80083f8:	464a      	mov	r2, r9
 80083fa:	6921      	ldr	r1, [r4, #16]
 80083fc:	f7ff fed3 	bl	80081a6 <memcpy>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	6126      	str	r6, [r4, #16]
 800840e:	444e      	add	r6, r9
 8008410:	6026      	str	r6, [r4, #0]
 8008412:	463e      	mov	r6, r7
 8008414:	6165      	str	r5, [r4, #20]
 8008416:	eba5 0509 	sub.w	r5, r5, r9
 800841a:	60a5      	str	r5, [r4, #8]
 800841c:	42be      	cmp	r6, r7
 800841e:	d900      	bls.n	8008422 <__ssputs_r+0x72>
 8008420:	463e      	mov	r6, r7
 8008422:	4632      	mov	r2, r6
 8008424:	4641      	mov	r1, r8
 8008426:	6820      	ldr	r0, [r4, #0]
 8008428:	f000 fbb5 	bl	8008b96 <memmove>
 800842c:	2000      	movs	r0, #0
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	1b9b      	subs	r3, r3, r6
 8008432:	60a3      	str	r3, [r4, #8]
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	4433      	add	r3, r6
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843e:	462a      	mov	r2, r5
 8008440:	f000 fc04 	bl	8008c4c <_realloc_r>
 8008444:	4606      	mov	r6, r0
 8008446:	2800      	cmp	r0, #0
 8008448:	d1e0      	bne.n	800840c <__ssputs_r+0x5c>
 800844a:	4650      	mov	r0, sl
 800844c:	6921      	ldr	r1, [r4, #16]
 800844e:	f7ff feb9 	bl	80081c4 <_free_r>
 8008452:	230c      	movs	r3, #12
 8008454:	f8ca 3000 	str.w	r3, [sl]
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	e7e9      	b.n	800843a <__ssputs_r+0x8a>
	...

08008468 <_svfiprintf_r>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4698      	mov	r8, r3
 800846e:	898b      	ldrh	r3, [r1, #12]
 8008470:	4607      	mov	r7, r0
 8008472:	061b      	lsls	r3, r3, #24
 8008474:	460d      	mov	r5, r1
 8008476:	4614      	mov	r4, r2
 8008478:	b09d      	sub	sp, #116	@ 0x74
 800847a:	d510      	bpl.n	800849e <_svfiprintf_r+0x36>
 800847c:	690b      	ldr	r3, [r1, #16]
 800847e:	b973      	cbnz	r3, 800849e <_svfiprintf_r+0x36>
 8008480:	2140      	movs	r1, #64	@ 0x40
 8008482:	f7ff ff09 	bl	8008298 <_malloc_r>
 8008486:	6028      	str	r0, [r5, #0]
 8008488:	6128      	str	r0, [r5, #16]
 800848a:	b930      	cbnz	r0, 800849a <_svfiprintf_r+0x32>
 800848c:	230c      	movs	r3, #12
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	b01d      	add	sp, #116	@ 0x74
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	2340      	movs	r3, #64	@ 0x40
 800849c:	616b      	str	r3, [r5, #20]
 800849e:	2300      	movs	r3, #0
 80084a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a2:	2320      	movs	r3, #32
 80084a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084a8:	2330      	movs	r3, #48	@ 0x30
 80084aa:	f04f 0901 	mov.w	r9, #1
 80084ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80084b2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800864c <_svfiprintf_r+0x1e4>
 80084b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084ba:	4623      	mov	r3, r4
 80084bc:	469a      	mov	sl, r3
 80084be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c2:	b10a      	cbz	r2, 80084c8 <_svfiprintf_r+0x60>
 80084c4:	2a25      	cmp	r2, #37	@ 0x25
 80084c6:	d1f9      	bne.n	80084bc <_svfiprintf_r+0x54>
 80084c8:	ebba 0b04 	subs.w	fp, sl, r4
 80084cc:	d00b      	beq.n	80084e6 <_svfiprintf_r+0x7e>
 80084ce:	465b      	mov	r3, fp
 80084d0:	4622      	mov	r2, r4
 80084d2:	4629      	mov	r1, r5
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff ff6b 	bl	80083b0 <__ssputs_r>
 80084da:	3001      	adds	r0, #1
 80084dc:	f000 80a7 	beq.w	800862e <_svfiprintf_r+0x1c6>
 80084e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084e2:	445a      	add	r2, fp
 80084e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80084e6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 809f 	beq.w	800862e <_svfiprintf_r+0x1c6>
 80084f0:	2300      	movs	r3, #0
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084fa:	f10a 0a01 	add.w	sl, sl, #1
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008506:	931a      	str	r3, [sp, #104]	@ 0x68
 8008508:	4654      	mov	r4, sl
 800850a:	2205      	movs	r2, #5
 800850c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008510:	484e      	ldr	r0, [pc, #312]	@ (800864c <_svfiprintf_r+0x1e4>)
 8008512:	f000 fb8d 	bl	8008c30 <memchr>
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	b9d8      	cbnz	r0, 8008552 <_svfiprintf_r+0xea>
 800851a:	06d0      	lsls	r0, r2, #27
 800851c:	bf44      	itt	mi
 800851e:	2320      	movmi	r3, #32
 8008520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008524:	0711      	lsls	r1, r2, #28
 8008526:	bf44      	itt	mi
 8008528:	232b      	movmi	r3, #43	@ 0x2b
 800852a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800852e:	f89a 3000 	ldrb.w	r3, [sl]
 8008532:	2b2a      	cmp	r3, #42	@ 0x2a
 8008534:	d015      	beq.n	8008562 <_svfiprintf_r+0xfa>
 8008536:	4654      	mov	r4, sl
 8008538:	2000      	movs	r0, #0
 800853a:	f04f 0c0a 	mov.w	ip, #10
 800853e:	9a07      	ldr	r2, [sp, #28]
 8008540:	4621      	mov	r1, r4
 8008542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008546:	3b30      	subs	r3, #48	@ 0x30
 8008548:	2b09      	cmp	r3, #9
 800854a:	d94b      	bls.n	80085e4 <_svfiprintf_r+0x17c>
 800854c:	b1b0      	cbz	r0, 800857c <_svfiprintf_r+0x114>
 800854e:	9207      	str	r2, [sp, #28]
 8008550:	e014      	b.n	800857c <_svfiprintf_r+0x114>
 8008552:	eba0 0308 	sub.w	r3, r0, r8
 8008556:	fa09 f303 	lsl.w	r3, r9, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	46a2      	mov	sl, r4
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	e7d2      	b.n	8008508 <_svfiprintf_r+0xa0>
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	1d19      	adds	r1, r3, #4
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	9103      	str	r1, [sp, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	bfbb      	ittet	lt
 800856e:	425b      	neglt	r3, r3
 8008570:	f042 0202 	orrlt.w	r2, r2, #2
 8008574:	9307      	strge	r3, [sp, #28]
 8008576:	9307      	strlt	r3, [sp, #28]
 8008578:	bfb8      	it	lt
 800857a:	9204      	strlt	r2, [sp, #16]
 800857c:	7823      	ldrb	r3, [r4, #0]
 800857e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008580:	d10a      	bne.n	8008598 <_svfiprintf_r+0x130>
 8008582:	7863      	ldrb	r3, [r4, #1]
 8008584:	2b2a      	cmp	r3, #42	@ 0x2a
 8008586:	d132      	bne.n	80085ee <_svfiprintf_r+0x186>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	3402      	adds	r4, #2
 800858c:	1d1a      	adds	r2, r3, #4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	9203      	str	r2, [sp, #12]
 8008592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008650 <_svfiprintf_r+0x1e8>
 800859c:	2203      	movs	r2, #3
 800859e:	4650      	mov	r0, sl
 80085a0:	7821      	ldrb	r1, [r4, #0]
 80085a2:	f000 fb45 	bl	8008c30 <memchr>
 80085a6:	b138      	cbz	r0, 80085b8 <_svfiprintf_r+0x150>
 80085a8:	2240      	movs	r2, #64	@ 0x40
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	eba0 000a 	sub.w	r0, r0, sl
 80085b0:	4082      	lsls	r2, r0
 80085b2:	4313      	orrs	r3, r2
 80085b4:	3401      	adds	r4, #1
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085bc:	2206      	movs	r2, #6
 80085be:	4825      	ldr	r0, [pc, #148]	@ (8008654 <_svfiprintf_r+0x1ec>)
 80085c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085c4:	f000 fb34 	bl	8008c30 <memchr>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d036      	beq.n	800863a <_svfiprintf_r+0x1d2>
 80085cc:	4b22      	ldr	r3, [pc, #136]	@ (8008658 <_svfiprintf_r+0x1f0>)
 80085ce:	bb1b      	cbnz	r3, 8008618 <_svfiprintf_r+0x1b0>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	3307      	adds	r3, #7
 80085d4:	f023 0307 	bic.w	r3, r3, #7
 80085d8:	3308      	adds	r3, #8
 80085da:	9303      	str	r3, [sp, #12]
 80085dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085de:	4433      	add	r3, r6
 80085e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085e2:	e76a      	b.n	80084ba <_svfiprintf_r+0x52>
 80085e4:	460c      	mov	r4, r1
 80085e6:	2001      	movs	r0, #1
 80085e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ec:	e7a8      	b.n	8008540 <_svfiprintf_r+0xd8>
 80085ee:	2300      	movs	r3, #0
 80085f0:	f04f 0c0a 	mov.w	ip, #10
 80085f4:	4619      	mov	r1, r3
 80085f6:	3401      	adds	r4, #1
 80085f8:	9305      	str	r3, [sp, #20]
 80085fa:	4620      	mov	r0, r4
 80085fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008600:	3a30      	subs	r2, #48	@ 0x30
 8008602:	2a09      	cmp	r2, #9
 8008604:	d903      	bls.n	800860e <_svfiprintf_r+0x1a6>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0c6      	beq.n	8008598 <_svfiprintf_r+0x130>
 800860a:	9105      	str	r1, [sp, #20]
 800860c:	e7c4      	b.n	8008598 <_svfiprintf_r+0x130>
 800860e:	4604      	mov	r4, r0
 8008610:	2301      	movs	r3, #1
 8008612:	fb0c 2101 	mla	r1, ip, r1, r2
 8008616:	e7f0      	b.n	80085fa <_svfiprintf_r+0x192>
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	462a      	mov	r2, r5
 800861e:	4638      	mov	r0, r7
 8008620:	4b0e      	ldr	r3, [pc, #56]	@ (800865c <_svfiprintf_r+0x1f4>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	f3af 8000 	nop.w
 8008628:	1c42      	adds	r2, r0, #1
 800862a:	4606      	mov	r6, r0
 800862c:	d1d6      	bne.n	80085dc <_svfiprintf_r+0x174>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	065b      	lsls	r3, r3, #25
 8008632:	f53f af2d 	bmi.w	8008490 <_svfiprintf_r+0x28>
 8008636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008638:	e72c      	b.n	8008494 <_svfiprintf_r+0x2c>
 800863a:	ab03      	add	r3, sp, #12
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	462a      	mov	r2, r5
 8008640:	4638      	mov	r0, r7
 8008642:	4b06      	ldr	r3, [pc, #24]	@ (800865c <_svfiprintf_r+0x1f4>)
 8008644:	a904      	add	r1, sp, #16
 8008646:	f000 f87d 	bl	8008744 <_printf_i>
 800864a:	e7ed      	b.n	8008628 <_svfiprintf_r+0x1c0>
 800864c:	0800951c 	.word	0x0800951c
 8008650:	08009522 	.word	0x08009522
 8008654:	08009526 	.word	0x08009526
 8008658:	00000000 	.word	0x00000000
 800865c:	080083b1 	.word	0x080083b1

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4616      	mov	r6, r2
 8008666:	4698      	mov	r8, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	690b      	ldr	r3, [r1, #16]
 800866c:	4607      	mov	r7, r0
 800866e:	4293      	cmp	r3, r2
 8008670:	bfb8      	it	lt
 8008672:	4613      	movlt	r3, r2
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800867a:	460c      	mov	r4, r1
 800867c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008680:	b10a      	cbz	r2, 8008686 <_printf_common+0x26>
 8008682:	3301      	adds	r3, #1
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	0699      	lsls	r1, r3, #26
 800868a:	bf42      	ittt	mi
 800868c:	6833      	ldrmi	r3, [r6, #0]
 800868e:	3302      	addmi	r3, #2
 8008690:	6033      	strmi	r3, [r6, #0]
 8008692:	6825      	ldr	r5, [r4, #0]
 8008694:	f015 0506 	ands.w	r5, r5, #6
 8008698:	d106      	bne.n	80086a8 <_printf_common+0x48>
 800869a:	f104 0a19 	add.w	sl, r4, #25
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	6832      	ldr	r2, [r6, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dc2b      	bgt.n	8008700 <_printf_common+0xa0>
 80086a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086ac:	6822      	ldr	r2, [r4, #0]
 80086ae:	3b00      	subs	r3, #0
 80086b0:	bf18      	it	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	0692      	lsls	r2, r2, #26
 80086b6:	d430      	bmi.n	800871a <_printf_common+0xba>
 80086b8:	4641      	mov	r1, r8
 80086ba:	4638      	mov	r0, r7
 80086bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086c0:	47c8      	blx	r9
 80086c2:	3001      	adds	r0, #1
 80086c4:	d023      	beq.n	800870e <_printf_common+0xae>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	f003 0306 	and.w	r3, r3, #6
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	bf14      	ite	ne
 80086d2:	2500      	movne	r5, #0
 80086d4:	6833      	ldreq	r3, [r6, #0]
 80086d6:	f04f 0600 	mov.w	r6, #0
 80086da:	bf08      	it	eq
 80086dc:	68e5      	ldreq	r5, [r4, #12]
 80086de:	f104 041a 	add.w	r4, r4, #26
 80086e2:	bf08      	it	eq
 80086e4:	1aed      	subeq	r5, r5, r3
 80086e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80086ea:	bf08      	it	eq
 80086ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f0:	4293      	cmp	r3, r2
 80086f2:	bfc4      	itt	gt
 80086f4:	1a9b      	subgt	r3, r3, r2
 80086f6:	18ed      	addgt	r5, r5, r3
 80086f8:	42b5      	cmp	r5, r6
 80086fa:	d11a      	bne.n	8008732 <_printf_common+0xd2>
 80086fc:	2000      	movs	r0, #0
 80086fe:	e008      	b.n	8008712 <_printf_common+0xb2>
 8008700:	2301      	movs	r3, #1
 8008702:	4652      	mov	r2, sl
 8008704:	4641      	mov	r1, r8
 8008706:	4638      	mov	r0, r7
 8008708:	47c8      	blx	r9
 800870a:	3001      	adds	r0, #1
 800870c:	d103      	bne.n	8008716 <_printf_common+0xb6>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008716:	3501      	adds	r5, #1
 8008718:	e7c1      	b.n	800869e <_printf_common+0x3e>
 800871a:	2030      	movs	r0, #48	@ 0x30
 800871c:	18e1      	adds	r1, r4, r3
 800871e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008728:	4422      	add	r2, r4
 800872a:	3302      	adds	r3, #2
 800872c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008730:	e7c2      	b.n	80086b8 <_printf_common+0x58>
 8008732:	2301      	movs	r3, #1
 8008734:	4622      	mov	r2, r4
 8008736:	4641      	mov	r1, r8
 8008738:	4638      	mov	r0, r7
 800873a:	47c8      	blx	r9
 800873c:	3001      	adds	r0, #1
 800873e:	d0e6      	beq.n	800870e <_printf_common+0xae>
 8008740:	3601      	adds	r6, #1
 8008742:	e7d9      	b.n	80086f8 <_printf_common+0x98>

08008744 <_printf_i>:
 8008744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	7e0f      	ldrb	r7, [r1, #24]
 800874a:	4691      	mov	r9, r2
 800874c:	2f78      	cmp	r7, #120	@ 0x78
 800874e:	4680      	mov	r8, r0
 8008750:	460c      	mov	r4, r1
 8008752:	469a      	mov	sl, r3
 8008754:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800875a:	d807      	bhi.n	800876c <_printf_i+0x28>
 800875c:	2f62      	cmp	r7, #98	@ 0x62
 800875e:	d80a      	bhi.n	8008776 <_printf_i+0x32>
 8008760:	2f00      	cmp	r7, #0
 8008762:	f000 80d3 	beq.w	800890c <_printf_i+0x1c8>
 8008766:	2f58      	cmp	r7, #88	@ 0x58
 8008768:	f000 80ba 	beq.w	80088e0 <_printf_i+0x19c>
 800876c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008774:	e03a      	b.n	80087ec <_printf_i+0xa8>
 8008776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800877a:	2b15      	cmp	r3, #21
 800877c:	d8f6      	bhi.n	800876c <_printf_i+0x28>
 800877e:	a101      	add	r1, pc, #4	@ (adr r1, 8008784 <_printf_i+0x40>)
 8008780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008784:	080087dd 	.word	0x080087dd
 8008788:	080087f1 	.word	0x080087f1
 800878c:	0800876d 	.word	0x0800876d
 8008790:	0800876d 	.word	0x0800876d
 8008794:	0800876d 	.word	0x0800876d
 8008798:	0800876d 	.word	0x0800876d
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	0800876d 	.word	0x0800876d
 80087a4:	0800876d 	.word	0x0800876d
 80087a8:	0800876d 	.word	0x0800876d
 80087ac:	0800876d 	.word	0x0800876d
 80087b0:	080088f3 	.word	0x080088f3
 80087b4:	0800881b 	.word	0x0800881b
 80087b8:	080088ad 	.word	0x080088ad
 80087bc:	0800876d 	.word	0x0800876d
 80087c0:	0800876d 	.word	0x0800876d
 80087c4:	08008915 	.word	0x08008915
 80087c8:	0800876d 	.word	0x0800876d
 80087cc:	0800881b 	.word	0x0800881b
 80087d0:	0800876d 	.word	0x0800876d
 80087d4:	0800876d 	.word	0x0800876d
 80087d8:	080088b5 	.word	0x080088b5
 80087dc:	6833      	ldr	r3, [r6, #0]
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6032      	str	r2, [r6, #0]
 80087e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087ec:	2301      	movs	r3, #1
 80087ee:	e09e      	b.n	800892e <_printf_i+0x1ea>
 80087f0:	6833      	ldr	r3, [r6, #0]
 80087f2:	6820      	ldr	r0, [r4, #0]
 80087f4:	1d19      	adds	r1, r3, #4
 80087f6:	6031      	str	r1, [r6, #0]
 80087f8:	0606      	lsls	r6, r0, #24
 80087fa:	d501      	bpl.n	8008800 <_printf_i+0xbc>
 80087fc:	681d      	ldr	r5, [r3, #0]
 80087fe:	e003      	b.n	8008808 <_printf_i+0xc4>
 8008800:	0645      	lsls	r5, r0, #25
 8008802:	d5fb      	bpl.n	80087fc <_printf_i+0xb8>
 8008804:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008808:	2d00      	cmp	r5, #0
 800880a:	da03      	bge.n	8008814 <_printf_i+0xd0>
 800880c:	232d      	movs	r3, #45	@ 0x2d
 800880e:	426d      	negs	r5, r5
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008814:	230a      	movs	r3, #10
 8008816:	4859      	ldr	r0, [pc, #356]	@ (800897c <_printf_i+0x238>)
 8008818:	e011      	b.n	800883e <_printf_i+0xfa>
 800881a:	6821      	ldr	r1, [r4, #0]
 800881c:	6833      	ldr	r3, [r6, #0]
 800881e:	0608      	lsls	r0, r1, #24
 8008820:	f853 5b04 	ldr.w	r5, [r3], #4
 8008824:	d402      	bmi.n	800882c <_printf_i+0xe8>
 8008826:	0649      	lsls	r1, r1, #25
 8008828:	bf48      	it	mi
 800882a:	b2ad      	uxthmi	r5, r5
 800882c:	2f6f      	cmp	r7, #111	@ 0x6f
 800882e:	6033      	str	r3, [r6, #0]
 8008830:	bf14      	ite	ne
 8008832:	230a      	movne	r3, #10
 8008834:	2308      	moveq	r3, #8
 8008836:	4851      	ldr	r0, [pc, #324]	@ (800897c <_printf_i+0x238>)
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800883e:	6866      	ldr	r6, [r4, #4]
 8008840:	2e00      	cmp	r6, #0
 8008842:	bfa8      	it	ge
 8008844:	6821      	ldrge	r1, [r4, #0]
 8008846:	60a6      	str	r6, [r4, #8]
 8008848:	bfa4      	itt	ge
 800884a:	f021 0104 	bicge.w	r1, r1, #4
 800884e:	6021      	strge	r1, [r4, #0]
 8008850:	b90d      	cbnz	r5, 8008856 <_printf_i+0x112>
 8008852:	2e00      	cmp	r6, #0
 8008854:	d04b      	beq.n	80088ee <_printf_i+0x1aa>
 8008856:	4616      	mov	r6, r2
 8008858:	fbb5 f1f3 	udiv	r1, r5, r3
 800885c:	fb03 5711 	mls	r7, r3, r1, r5
 8008860:	5dc7      	ldrb	r7, [r0, r7]
 8008862:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008866:	462f      	mov	r7, r5
 8008868:	42bb      	cmp	r3, r7
 800886a:	460d      	mov	r5, r1
 800886c:	d9f4      	bls.n	8008858 <_printf_i+0x114>
 800886e:	2b08      	cmp	r3, #8
 8008870:	d10b      	bne.n	800888a <_printf_i+0x146>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	07df      	lsls	r7, r3, #31
 8008876:	d508      	bpl.n	800888a <_printf_i+0x146>
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	6861      	ldr	r1, [r4, #4]
 800887c:	4299      	cmp	r1, r3
 800887e:	bfde      	ittt	le
 8008880:	2330      	movle	r3, #48	@ 0x30
 8008882:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008886:	f106 36ff 	addle.w	r6, r6, #4294967295
 800888a:	1b92      	subs	r2, r2, r6
 800888c:	6122      	str	r2, [r4, #16]
 800888e:	464b      	mov	r3, r9
 8008890:	4621      	mov	r1, r4
 8008892:	4640      	mov	r0, r8
 8008894:	f8cd a000 	str.w	sl, [sp]
 8008898:	aa03      	add	r2, sp, #12
 800889a:	f7ff fee1 	bl	8008660 <_printf_common>
 800889e:	3001      	adds	r0, #1
 80088a0:	d14a      	bne.n	8008938 <_printf_i+0x1f4>
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	b004      	add	sp, #16
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	f043 0320 	orr.w	r3, r3, #32
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	2778      	movs	r7, #120	@ 0x78
 80088b6:	4832      	ldr	r0, [pc, #200]	@ (8008980 <_printf_i+0x23c>)
 80088b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	6831      	ldr	r1, [r6, #0]
 80088c0:	061f      	lsls	r7, r3, #24
 80088c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80088c6:	d402      	bmi.n	80088ce <_printf_i+0x18a>
 80088c8:	065f      	lsls	r7, r3, #25
 80088ca:	bf48      	it	mi
 80088cc:	b2ad      	uxthmi	r5, r5
 80088ce:	6031      	str	r1, [r6, #0]
 80088d0:	07d9      	lsls	r1, r3, #31
 80088d2:	bf44      	itt	mi
 80088d4:	f043 0320 	orrmi.w	r3, r3, #32
 80088d8:	6023      	strmi	r3, [r4, #0]
 80088da:	b11d      	cbz	r5, 80088e4 <_printf_i+0x1a0>
 80088dc:	2310      	movs	r3, #16
 80088de:	e7ab      	b.n	8008838 <_printf_i+0xf4>
 80088e0:	4826      	ldr	r0, [pc, #152]	@ (800897c <_printf_i+0x238>)
 80088e2:	e7e9      	b.n	80088b8 <_printf_i+0x174>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	f023 0320 	bic.w	r3, r3, #32
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	e7f6      	b.n	80088dc <_printf_i+0x198>
 80088ee:	4616      	mov	r6, r2
 80088f0:	e7bd      	b.n	800886e <_printf_i+0x12a>
 80088f2:	6833      	ldr	r3, [r6, #0]
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1d18      	adds	r0, r3, #4
 80088f8:	6961      	ldr	r1, [r4, #20]
 80088fa:	6030      	str	r0, [r6, #0]
 80088fc:	062e      	lsls	r6, r5, #24
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	d501      	bpl.n	8008906 <_printf_i+0x1c2>
 8008902:	6019      	str	r1, [r3, #0]
 8008904:	e002      	b.n	800890c <_printf_i+0x1c8>
 8008906:	0668      	lsls	r0, r5, #25
 8008908:	d5fb      	bpl.n	8008902 <_printf_i+0x1be>
 800890a:	8019      	strh	r1, [r3, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	4616      	mov	r6, r2
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	e7bc      	b.n	800888e <_printf_i+0x14a>
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	2100      	movs	r1, #0
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	6032      	str	r2, [r6, #0]
 800891c:	681e      	ldr	r6, [r3, #0]
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	4630      	mov	r0, r6
 8008922:	f000 f985 	bl	8008c30 <memchr>
 8008926:	b108      	cbz	r0, 800892c <_printf_i+0x1e8>
 8008928:	1b80      	subs	r0, r0, r6
 800892a:	6060      	str	r0, [r4, #4]
 800892c:	6863      	ldr	r3, [r4, #4]
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	2300      	movs	r3, #0
 8008932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008936:	e7aa      	b.n	800888e <_printf_i+0x14a>
 8008938:	4632      	mov	r2, r6
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	47d0      	blx	sl
 8008942:	3001      	adds	r0, #1
 8008944:	d0ad      	beq.n	80088a2 <_printf_i+0x15e>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	079b      	lsls	r3, r3, #30
 800894a:	d413      	bmi.n	8008974 <_printf_i+0x230>
 800894c:	68e0      	ldr	r0, [r4, #12]
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	4298      	cmp	r0, r3
 8008952:	bfb8      	it	lt
 8008954:	4618      	movlt	r0, r3
 8008956:	e7a6      	b.n	80088a6 <_printf_i+0x162>
 8008958:	2301      	movs	r3, #1
 800895a:	4632      	mov	r2, r6
 800895c:	4649      	mov	r1, r9
 800895e:	4640      	mov	r0, r8
 8008960:	47d0      	blx	sl
 8008962:	3001      	adds	r0, #1
 8008964:	d09d      	beq.n	80088a2 <_printf_i+0x15e>
 8008966:	3501      	adds	r5, #1
 8008968:	68e3      	ldr	r3, [r4, #12]
 800896a:	9903      	ldr	r1, [sp, #12]
 800896c:	1a5b      	subs	r3, r3, r1
 800896e:	42ab      	cmp	r3, r5
 8008970:	dcf2      	bgt.n	8008958 <_printf_i+0x214>
 8008972:	e7eb      	b.n	800894c <_printf_i+0x208>
 8008974:	2500      	movs	r5, #0
 8008976:	f104 0619 	add.w	r6, r4, #25
 800897a:	e7f5      	b.n	8008968 <_printf_i+0x224>
 800897c:	0800952d 	.word	0x0800952d
 8008980:	0800953e 	.word	0x0800953e

08008984 <__sflush_r>:
 8008984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	0716      	lsls	r6, r2, #28
 800898c:	4605      	mov	r5, r0
 800898e:	460c      	mov	r4, r1
 8008990:	d454      	bmi.n	8008a3c <__sflush_r+0xb8>
 8008992:	684b      	ldr	r3, [r1, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dc02      	bgt.n	800899e <__sflush_r+0x1a>
 8008998:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd48      	ble.n	8008a30 <__sflush_r+0xac>
 800899e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	d045      	beq.n	8008a30 <__sflush_r+0xac>
 80089a4:	2300      	movs	r3, #0
 80089a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089aa:	682f      	ldr	r7, [r5, #0]
 80089ac:	6a21      	ldr	r1, [r4, #32]
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	d030      	beq.n	8008a14 <__sflush_r+0x90>
 80089b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	0759      	lsls	r1, r3, #29
 80089b8:	d505      	bpl.n	80089c6 <__sflush_r+0x42>
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089c0:	b10b      	cbz	r3, 80089c6 <__sflush_r+0x42>
 80089c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089c4:	1ad2      	subs	r2, r2, r3
 80089c6:	2300      	movs	r3, #0
 80089c8:	4628      	mov	r0, r5
 80089ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089cc:	6a21      	ldr	r1, [r4, #32]
 80089ce:	47b0      	blx	r6
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	d106      	bne.n	80089e4 <__sflush_r+0x60>
 80089d6:	6829      	ldr	r1, [r5, #0]
 80089d8:	291d      	cmp	r1, #29
 80089da:	d82b      	bhi.n	8008a34 <__sflush_r+0xb0>
 80089dc:	4a28      	ldr	r2, [pc, #160]	@ (8008a80 <__sflush_r+0xfc>)
 80089de:	410a      	asrs	r2, r1
 80089e0:	07d6      	lsls	r6, r2, #31
 80089e2:	d427      	bmi.n	8008a34 <__sflush_r+0xb0>
 80089e4:	2200      	movs	r2, #0
 80089e6:	6062      	str	r2, [r4, #4]
 80089e8:	6922      	ldr	r2, [r4, #16]
 80089ea:	04d9      	lsls	r1, r3, #19
 80089ec:	6022      	str	r2, [r4, #0]
 80089ee:	d504      	bpl.n	80089fa <__sflush_r+0x76>
 80089f0:	1c42      	adds	r2, r0, #1
 80089f2:	d101      	bne.n	80089f8 <__sflush_r+0x74>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b903      	cbnz	r3, 80089fa <__sflush_r+0x76>
 80089f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80089fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089fc:	602f      	str	r7, [r5, #0]
 80089fe:	b1b9      	cbz	r1, 8008a30 <__sflush_r+0xac>
 8008a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d002      	beq.n	8008a0e <__sflush_r+0x8a>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f7ff fbdb 	bl	80081c4 <_free_r>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a12:	e00d      	b.n	8008a30 <__sflush_r+0xac>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	1c50      	adds	r0, r2, #1
 8008a1e:	d1c9      	bne.n	80089b4 <__sflush_r+0x30>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0c6      	beq.n	80089b4 <__sflush_r+0x30>
 8008a26:	2b1d      	cmp	r3, #29
 8008a28:	d001      	beq.n	8008a2e <__sflush_r+0xaa>
 8008a2a:	2b16      	cmp	r3, #22
 8008a2c:	d11d      	bne.n	8008a6a <__sflush_r+0xe6>
 8008a2e:	602f      	str	r7, [r5, #0]
 8008a30:	2000      	movs	r0, #0
 8008a32:	e021      	b.n	8008a78 <__sflush_r+0xf4>
 8008a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	e01a      	b.n	8008a72 <__sflush_r+0xee>
 8008a3c:	690f      	ldr	r7, [r1, #16]
 8008a3e:	2f00      	cmp	r7, #0
 8008a40:	d0f6      	beq.n	8008a30 <__sflush_r+0xac>
 8008a42:	0793      	lsls	r3, r2, #30
 8008a44:	bf18      	it	ne
 8008a46:	2300      	movne	r3, #0
 8008a48:	680e      	ldr	r6, [r1, #0]
 8008a4a:	bf08      	it	eq
 8008a4c:	694b      	ldreq	r3, [r1, #20]
 8008a4e:	1bf6      	subs	r6, r6, r7
 8008a50:	600f      	str	r7, [r1, #0]
 8008a52:	608b      	str	r3, [r1, #8]
 8008a54:	2e00      	cmp	r6, #0
 8008a56:	ddeb      	ble.n	8008a30 <__sflush_r+0xac>
 8008a58:	4633      	mov	r3, r6
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	6a21      	ldr	r1, [r4, #32]
 8008a60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a64:	47e0      	blx	ip
 8008a66:	2800      	cmp	r0, #0
 8008a68:	dc07      	bgt.n	8008a7a <__sflush_r+0xf6>
 8008a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7a:	4407      	add	r7, r0
 8008a7c:	1a36      	subs	r6, r6, r0
 8008a7e:	e7e9      	b.n	8008a54 <__sflush_r+0xd0>
 8008a80:	dfbffffe 	.word	0xdfbffffe

08008a84 <_fflush_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b913      	cbnz	r3, 8008a94 <_fflush_r+0x10>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	4628      	mov	r0, r5
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	b118      	cbz	r0, 8008a9e <_fflush_r+0x1a>
 8008a96:	6a03      	ldr	r3, [r0, #32]
 8008a98:	b90b      	cbnz	r3, 8008a9e <_fflush_r+0x1a>
 8008a9a:	f7ff f955 	bl	8007d48 <__sinit>
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0f3      	beq.n	8008a8e <_fflush_r+0xa>
 8008aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008aa8:	07d0      	lsls	r0, r2, #31
 8008aaa:	d404      	bmi.n	8008ab6 <_fflush_r+0x32>
 8008aac:	0599      	lsls	r1, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_fflush_r+0x32>
 8008ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ab2:	f7ff fb76 	bl	80081a2 <__retarget_lock_acquire_recursive>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7ff ff63 	bl	8008984 <__sflush_r>
 8008abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	07da      	lsls	r2, r3, #31
 8008ac4:	d4e4      	bmi.n	8008a90 <_fflush_r+0xc>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	059b      	lsls	r3, r3, #22
 8008aca:	d4e1      	bmi.n	8008a90 <_fflush_r+0xc>
 8008acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ace:	f7ff fb69 	bl	80081a4 <__retarget_lock_release_recursive>
 8008ad2:	e7dd      	b.n	8008a90 <_fflush_r+0xc>

08008ad4 <__swhatbuf_r>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	4615      	mov	r5, r2
 8008ade:	2900      	cmp	r1, #0
 8008ae0:	461e      	mov	r6, r3
 8008ae2:	b096      	sub	sp, #88	@ 0x58
 8008ae4:	da0c      	bge.n	8008b00 <__swhatbuf_r+0x2c>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008aee:	bf14      	ite	ne
 8008af0:	2340      	movne	r3, #64	@ 0x40
 8008af2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008af6:	2000      	movs	r0, #0
 8008af8:	6031      	str	r1, [r6, #0]
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	b016      	add	sp, #88	@ 0x58
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	466a      	mov	r2, sp
 8008b02:	f000 f863 	bl	8008bcc <_fstat_r>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	dbed      	blt.n	8008ae6 <__swhatbuf_r+0x12>
 8008b0a:	9901      	ldr	r1, [sp, #4]
 8008b0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b14:	4259      	negs	r1, r3
 8008b16:	4159      	adcs	r1, r3
 8008b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b1c:	e7eb      	b.n	8008af6 <__swhatbuf_r+0x22>

08008b1e <__smakebuf_r>:
 8008b1e:	898b      	ldrh	r3, [r1, #12]
 8008b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b22:	079d      	lsls	r5, r3, #30
 8008b24:	4606      	mov	r6, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	d507      	bpl.n	8008b3a <__smakebuf_r+0x1c>
 8008b2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	2301      	movs	r3, #1
 8008b34:	6163      	str	r3, [r4, #20]
 8008b36:	b003      	add	sp, #12
 8008b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3a:	466a      	mov	r2, sp
 8008b3c:	ab01      	add	r3, sp, #4
 8008b3e:	f7ff ffc9 	bl	8008ad4 <__swhatbuf_r>
 8008b42:	9f00      	ldr	r7, [sp, #0]
 8008b44:	4605      	mov	r5, r0
 8008b46:	4639      	mov	r1, r7
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff fba5 	bl	8008298 <_malloc_r>
 8008b4e:	b948      	cbnz	r0, 8008b64 <__smakebuf_r+0x46>
 8008b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b54:	059a      	lsls	r2, r3, #22
 8008b56:	d4ee      	bmi.n	8008b36 <__smakebuf_r+0x18>
 8008b58:	f023 0303 	bic.w	r3, r3, #3
 8008b5c:	f043 0302 	orr.w	r3, r3, #2
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	e7e2      	b.n	8008b2a <__smakebuf_r+0xc>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	b15b      	cbz	r3, 8008b8e <__smakebuf_r+0x70>
 8008b76:	4630      	mov	r0, r6
 8008b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b7c:	f000 f838 	bl	8008bf0 <_isatty_r>
 8008b80:	b128      	cbz	r0, 8008b8e <__smakebuf_r+0x70>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f023 0303 	bic.w	r3, r3, #3
 8008b88:	f043 0301 	orr.w	r3, r3, #1
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	431d      	orrs	r5, r3
 8008b92:	81a5      	strh	r5, [r4, #12]
 8008b94:	e7cf      	b.n	8008b36 <__smakebuf_r+0x18>

08008b96 <memmove>:
 8008b96:	4288      	cmp	r0, r1
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	eb01 0402 	add.w	r4, r1, r2
 8008b9e:	d902      	bls.n	8008ba6 <memmove+0x10>
 8008ba0:	4284      	cmp	r4, r0
 8008ba2:	4623      	mov	r3, r4
 8008ba4:	d807      	bhi.n	8008bb6 <memmove+0x20>
 8008ba6:	1e43      	subs	r3, r0, #1
 8008ba8:	42a1      	cmp	r1, r4
 8008baa:	d008      	beq.n	8008bbe <memmove+0x28>
 8008bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bb4:	e7f8      	b.n	8008ba8 <memmove+0x12>
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	4402      	add	r2, r0
 8008bba:	428a      	cmp	r2, r1
 8008bbc:	d100      	bne.n	8008bc0 <memmove+0x2a>
 8008bbe:	bd10      	pop	{r4, pc}
 8008bc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bc8:	e7f7      	b.n	8008bba <memmove+0x24>
	...

08008bcc <_fstat_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4d06      	ldr	r5, [pc, #24]	@ (8008bec <_fstat_r+0x20>)
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	f7fa f98b 	bl	8002ef4 <_fstat>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d102      	bne.n	8008be8 <_fstat_r+0x1c>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	b103      	cbz	r3, 8008be8 <_fstat_r+0x1c>
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	bf00      	nop
 8008bec:	200003ec 	.word	0x200003ec

08008bf0 <_isatty_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4d05      	ldr	r5, [pc, #20]	@ (8008c0c <_isatty_r+0x1c>)
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7fa f989 	bl	8002f12 <_isatty>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_isatty_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_isatty_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	200003ec 	.word	0x200003ec

08008c10 <_sbrk_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	2300      	movs	r3, #0
 8008c14:	4d05      	ldr	r5, [pc, #20]	@ (8008c2c <_sbrk_r+0x1c>)
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7fa f990 	bl	8002f40 <_sbrk>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_sbrk_r+0x1a>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_sbrk_r+0x1a>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	200003ec 	.word	0x200003ec

08008c30 <memchr>:
 8008c30:	4603      	mov	r3, r0
 8008c32:	b510      	push	{r4, lr}
 8008c34:	b2c9      	uxtb	r1, r1
 8008c36:	4402      	add	r2, r0
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	d101      	bne.n	8008c42 <memchr+0x12>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e003      	b.n	8008c4a <memchr+0x1a>
 8008c42:	7804      	ldrb	r4, [r0, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	428c      	cmp	r4, r1
 8008c48:	d1f6      	bne.n	8008c38 <memchr+0x8>
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <_realloc_r>:
 8008c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c50:	4680      	mov	r8, r0
 8008c52:	4615      	mov	r5, r2
 8008c54:	460c      	mov	r4, r1
 8008c56:	b921      	cbnz	r1, 8008c62 <_realloc_r+0x16>
 8008c58:	4611      	mov	r1, r2
 8008c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5e:	f7ff bb1b 	b.w	8008298 <_malloc_r>
 8008c62:	b92a      	cbnz	r2, 8008c70 <_realloc_r+0x24>
 8008c64:	f7ff faae 	bl	80081c4 <_free_r>
 8008c68:	2400      	movs	r4, #0
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c70:	f000 f81a 	bl	8008ca8 <_malloc_usable_size_r>
 8008c74:	4285      	cmp	r5, r0
 8008c76:	4606      	mov	r6, r0
 8008c78:	d802      	bhi.n	8008c80 <_realloc_r+0x34>
 8008c7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c7e:	d8f4      	bhi.n	8008c6a <_realloc_r+0x1e>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7ff fb08 	bl	8008298 <_malloc_r>
 8008c88:	4607      	mov	r7, r0
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d0ec      	beq.n	8008c68 <_realloc_r+0x1c>
 8008c8e:	42b5      	cmp	r5, r6
 8008c90:	462a      	mov	r2, r5
 8008c92:	4621      	mov	r1, r4
 8008c94:	bf28      	it	cs
 8008c96:	4632      	movcs	r2, r6
 8008c98:	f7ff fa85 	bl	80081a6 <memcpy>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	f7ff fa90 	bl	80081c4 <_free_r>
 8008ca4:	463c      	mov	r4, r7
 8008ca6:	e7e0      	b.n	8008c6a <_realloc_r+0x1e>

08008ca8 <_malloc_usable_size_r>:
 8008ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cac:	1f18      	subs	r0, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfbc      	itt	lt
 8008cb2:	580b      	ldrlt	r3, [r1, r0]
 8008cb4:	18c0      	addlt	r0, r0, r3
 8008cb6:	4770      	bx	lr

08008cb8 <log>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	f000 f833 	bl	8008d28 <__ieee754_log>
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	462b      	mov	r3, r5
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 ff09 	bl	8000ae4 <__aeabi_dcmpun>
 8008cd2:	b998      	cbnz	r0, 8008cfc <log+0x44>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	4620      	mov	r0, r4
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fef8 	bl	8000ad0 <__aeabi_dcmpgt>
 8008ce0:	b960      	cbnz	r0, 8008cfc <log+0x44>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f7 fec9 	bl	8000a80 <__aeabi_dcmpeq>
 8008cee:	b140      	cbz	r0, 8008d02 <log+0x4a>
 8008cf0:	f7ff fa2c 	bl	800814c <__errno>
 8008cf4:	2322      	movs	r3, #34	@ 0x22
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	4f06      	ldr	r7, [pc, #24]	@ (8008d14 <log+0x5c>)
 8008cfa:	6003      	str	r3, [r0, #0]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d02:	f7ff fa23 	bl	800814c <__errno>
 8008d06:	2321      	movs	r3, #33	@ 0x21
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	4803      	ldr	r0, [pc, #12]	@ (8008d18 <log+0x60>)
 8008d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d10:	f000 b804 	b.w	8008d1c <nan>
 8008d14:	fff00000 	.word	0xfff00000
 8008d18:	08009521 	.word	0x08009521

08008d1c <nan>:
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	4901      	ldr	r1, [pc, #4]	@ (8008d24 <nan+0x8>)
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	7ff80000 	.word	0x7ff80000

08008d28 <__ieee754_log>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	460d      	mov	r5, r1
 8008d36:	b087      	sub	sp, #28
 8008d38:	da24      	bge.n	8008d84 <__ieee754_log+0x5c>
 8008d3a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8008d3e:	4304      	orrs	r4, r0
 8008d40:	d108      	bne.n	8008d54 <__ieee754_log+0x2c>
 8008d42:	2200      	movs	r2, #0
 8008d44:	2300      	movs	r3, #0
 8008d46:	2000      	movs	r0, #0
 8008d48:	49cb      	ldr	r1, [pc, #812]	@ (8009078 <__ieee754_log+0x350>)
 8008d4a:	f7f7 fd5b 	bl	8000804 <__aeabi_ddiv>
 8008d4e:	b007      	add	sp, #28
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	2900      	cmp	r1, #0
 8008d56:	da04      	bge.n	8008d62 <__ieee754_log+0x3a>
 8008d58:	f7f7 fa72 	bl	8000240 <__aeabi_dsub>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e7f3      	b.n	8008d4a <__ieee754_log+0x22>
 8008d62:	2200      	movs	r2, #0
 8008d64:	4bc5      	ldr	r3, [pc, #788]	@ (800907c <__ieee754_log+0x354>)
 8008d66:	f7f7 fc23 	bl	80005b0 <__aeabi_dmul>
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	4602      	mov	r2, r0
 8008d70:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8008d74:	48c2      	ldr	r0, [pc, #776]	@ (8009080 <__ieee754_log+0x358>)
 8008d76:	4285      	cmp	r5, r0
 8008d78:	dd06      	ble.n	8008d88 <__ieee754_log+0x60>
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7f7 fa61 	bl	8000244 <__adddf3>
 8008d82:	e7e4      	b.n	8008d4e <__ieee754_log+0x26>
 8008d84:	2100      	movs	r1, #0
 8008d86:	e7f5      	b.n	8008d74 <__ieee754_log+0x4c>
 8008d88:	152c      	asrs	r4, r5, #20
 8008d8a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8008d8e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008d92:	440c      	add	r4, r1
 8008d94:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8008d98:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8008d9c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8008da0:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8008da4:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8008da8:	ea41 0305 	orr.w	r3, r1, r5
 8008dac:	4610      	mov	r0, r2
 8008dae:	4619      	mov	r1, r3
 8008db0:	2200      	movs	r2, #0
 8008db2:	4bb4      	ldr	r3, [pc, #720]	@ (8009084 <__ieee754_log+0x35c>)
 8008db4:	f7f7 fa44 	bl	8000240 <__aeabi_dsub>
 8008db8:	1cab      	adds	r3, r5, #2
 8008dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	468b      	mov	fp, r1
 8008dc4:	f04f 0200 	mov.w	r2, #0
 8008dc8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8008dcc:	dc53      	bgt.n	8008e76 <__ieee754_log+0x14e>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fe56 	bl	8000a80 <__aeabi_dcmpeq>
 8008dd4:	b1d0      	cbz	r0, 8008e0c <__ieee754_log+0xe4>
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	f000 8120 	beq.w	800901c <__ieee754_log+0x2f4>
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f7f7 fb7d 	bl	80004dc <__aeabi_i2d>
 8008de2:	a391      	add	r3, pc, #580	@ (adr r3, 8009028 <__ieee754_log+0x300>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	4606      	mov	r6, r0
 8008dea:	460f      	mov	r7, r1
 8008dec:	f7f7 fbe0 	bl	80005b0 <__aeabi_dmul>
 8008df0:	a38f      	add	r3, pc, #572	@ (adr r3, 8009030 <__ieee754_log+0x308>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	4604      	mov	r4, r0
 8008df8:	460d      	mov	r5, r1
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 fbd7 	bl	80005b0 <__aeabi_dmul>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4620      	mov	r0, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	e7b8      	b.n	8008d7e <__ieee754_log+0x56>
 8008e0c:	a38a      	add	r3, pc, #552	@ (adr r3, 8009038 <__ieee754_log+0x310>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	4650      	mov	r0, sl
 8008e14:	4659      	mov	r1, fp
 8008e16:	f7f7 fbcb 	bl	80005b0 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	2000      	movs	r0, #0
 8008e20:	4999      	ldr	r1, [pc, #612]	@ (8009088 <__ieee754_log+0x360>)
 8008e22:	f7f7 fa0d 	bl	8000240 <__aeabi_dsub>
 8008e26:	4652      	mov	r2, sl
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	4650      	mov	r0, sl
 8008e30:	4659      	mov	r1, fp
 8008e32:	f7f7 fbbd 	bl	80005b0 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 fbb7 	bl	80005b0 <__aeabi_dmul>
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	b914      	cbnz	r4, 8008e4e <__ieee754_log+0x126>
 8008e48:	4632      	mov	r2, r6
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	e0a0      	b.n	8008f90 <__ieee754_log+0x268>
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f7f7 fb44 	bl	80004dc <__aeabi_i2d>
 8008e54:	a374      	add	r3, pc, #464	@ (adr r3, 8009028 <__ieee754_log+0x300>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	4689      	mov	r9, r1
 8008e5e:	f7f7 fba7 	bl	80005b0 <__aeabi_dmul>
 8008e62:	a373      	add	r3, pc, #460	@ (adr r3, 8009030 <__ieee754_log+0x308>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7f7 fb9e 	bl	80005b0 <__aeabi_dmul>
 8008e74:	e0a5      	b.n	8008fc2 <__ieee754_log+0x29a>
 8008e76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e7a:	f7f7 f9e3 	bl	8000244 <__adddf3>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4650      	mov	r0, sl
 8008e84:	4659      	mov	r1, fp
 8008e86:	f7f7 fcbd 	bl	8000804 <__aeabi_ddiv>
 8008e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7f7 fb24 	bl	80004dc <__aeabi_i2d>
 8008e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	f7f7 fb86 	bl	80005b0 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008eac:	f7f7 fb80 	bl	80005b0 <__aeabi_dmul>
 8008eb0:	a363      	add	r3, pc, #396	@ (adr r3, 8009040 <__ieee754_log+0x318>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	4689      	mov	r9, r1
 8008eba:	f7f7 fb79 	bl	80005b0 <__aeabi_dmul>
 8008ebe:	a362      	add	r3, pc, #392	@ (adr r3, 8009048 <__ieee754_log+0x320>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f7f7 f9be 	bl	8000244 <__adddf3>
 8008ec8:	4642      	mov	r2, r8
 8008eca:	464b      	mov	r3, r9
 8008ecc:	f7f7 fb70 	bl	80005b0 <__aeabi_dmul>
 8008ed0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009050 <__ieee754_log+0x328>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 f9b5 	bl	8000244 <__adddf3>
 8008eda:	4642      	mov	r2, r8
 8008edc:	464b      	mov	r3, r9
 8008ede:	f7f7 fb67 	bl	80005b0 <__aeabi_dmul>
 8008ee2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009058 <__ieee754_log+0x330>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 f9ac 	bl	8000244 <__adddf3>
 8008eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef0:	f7f7 fb5e 	bl	80005b0 <__aeabi_dmul>
 8008ef4:	a35a      	add	r3, pc, #360	@ (adr r3, 8009060 <__ieee754_log+0x338>)
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008efe:	4640      	mov	r0, r8
 8008f00:	4649      	mov	r1, r9
 8008f02:	f7f7 fb55 	bl	80005b0 <__aeabi_dmul>
 8008f06:	a358      	add	r3, pc, #352	@ (adr r3, 8009068 <__ieee754_log+0x340>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f7f7 f99a 	bl	8000244 <__adddf3>
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f7f7 fb4c 	bl	80005b0 <__aeabi_dmul>
 8008f18:	a355      	add	r3, pc, #340	@ (adr r3, 8009070 <__ieee754_log+0x348>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7f7 f991 	bl	8000244 <__adddf3>
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
 8008f26:	f7f7 fb43 	bl	80005b0 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f32:	f7f7 f987 	bl	8000244 <__adddf3>
 8008f36:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8008f3a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8008f3e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8008f42:	3551      	adds	r5, #81	@ 0x51
 8008f44:	4335      	orrs	r5, r6
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4689      	mov	r9, r1
 8008f4c:	dd48      	ble.n	8008fe0 <__ieee754_log+0x2b8>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4b4d      	ldr	r3, [pc, #308]	@ (8009088 <__ieee754_log+0x360>)
 8008f52:	4650      	mov	r0, sl
 8008f54:	4659      	mov	r1, fp
 8008f56:	f7f7 fb2b 	bl	80005b0 <__aeabi_dmul>
 8008f5a:	4652      	mov	r2, sl
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	f7f7 fb27 	bl	80005b0 <__aeabi_dmul>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	f7f7 f969 	bl	8000244 <__adddf3>
 8008f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f76:	f7f7 fb1b 	bl	80005b0 <__aeabi_dmul>
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	b964      	cbnz	r4, 8008f9a <__ieee754_log+0x272>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 f95a 	bl	8000240 <__aeabi_dsub>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4650      	mov	r0, sl
 8008f92:	4659      	mov	r1, fp
 8008f94:	f7f7 f954 	bl	8000240 <__aeabi_dsub>
 8008f98:	e6d9      	b.n	8008d4e <__ieee754_log+0x26>
 8008f9a:	a323      	add	r3, pc, #140	@ (adr r3, 8009028 <__ieee754_log+0x300>)
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa4:	f7f7 fb04 	bl	80005b0 <__aeabi_dmul>
 8008fa8:	a321      	add	r3, pc, #132	@ (adr r3, 8009030 <__ieee754_log+0x308>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	4604      	mov	r4, r0
 8008fb0:	460d      	mov	r5, r1
 8008fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb6:	f7f7 fafb 	bl	80005b0 <__aeabi_dmul>
 8008fba:	4642      	mov	r2, r8
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	f7f7 f941 	bl	8000244 <__adddf3>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	4639      	mov	r1, r7
 8008fca:	f7f7 f939 	bl	8000240 <__aeabi_dsub>
 8008fce:	4652      	mov	r2, sl
 8008fd0:	465b      	mov	r3, fp
 8008fd2:	f7f7 f935 	bl	8000240 <__aeabi_dsub>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4629      	mov	r1, r5
 8008fde:	e7d9      	b.n	8008f94 <__ieee754_log+0x26c>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4650      	mov	r0, sl
 8008fe6:	4659      	mov	r1, fp
 8008fe8:	f7f7 f92a 	bl	8000240 <__aeabi_dsub>
 8008fec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff0:	f7f7 fade 	bl	80005b0 <__aeabi_dmul>
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	460f      	mov	r7, r1
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	f43f af25 	beq.w	8008e48 <__ieee754_log+0x120>
 8008ffe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009028 <__ieee754_log+0x300>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009008:	f7f7 fad2 	bl	80005b0 <__aeabi_dmul>
 800900c:	a308      	add	r3, pc, #32	@ (adr r3, 8009030 <__ieee754_log+0x308>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	4604      	mov	r4, r0
 8009014:	460d      	mov	r5, r1
 8009016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800901a:	e729      	b.n	8008e70 <__ieee754_log+0x148>
 800901c:	2000      	movs	r0, #0
 800901e:	2100      	movs	r1, #0
 8009020:	e695      	b.n	8008d4e <__ieee754_log+0x26>
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	fee00000 	.word	0xfee00000
 800902c:	3fe62e42 	.word	0x3fe62e42
 8009030:	35793c76 	.word	0x35793c76
 8009034:	3dea39ef 	.word	0x3dea39ef
 8009038:	55555555 	.word	0x55555555
 800903c:	3fd55555 	.word	0x3fd55555
 8009040:	df3e5244 	.word	0xdf3e5244
 8009044:	3fc2f112 	.word	0x3fc2f112
 8009048:	96cb03de 	.word	0x96cb03de
 800904c:	3fc74664 	.word	0x3fc74664
 8009050:	94229359 	.word	0x94229359
 8009054:	3fd24924 	.word	0x3fd24924
 8009058:	55555593 	.word	0x55555593
 800905c:	3fe55555 	.word	0x3fe55555
 8009060:	d078c69f 	.word	0xd078c69f
 8009064:	3fc39a09 	.word	0x3fc39a09
 8009068:	1d8e78af 	.word	0x1d8e78af
 800906c:	3fcc71c5 	.word	0x3fcc71c5
 8009070:	9997fa04 	.word	0x9997fa04
 8009074:	3fd99999 	.word	0x3fd99999
 8009078:	c3500000 	.word	0xc3500000
 800907c:	43500000 	.word	0x43500000
 8009080:	7fefffff 	.word	0x7fefffff
 8009084:	3ff00000 	.word	0x3ff00000
 8009088:	3fe00000 	.word	0x3fe00000

0800908c <_init>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr

08009098 <_fini>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr
