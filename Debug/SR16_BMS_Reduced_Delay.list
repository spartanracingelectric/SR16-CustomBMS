
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08004e1c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004e1c  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139c7  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339c  00000000  00000000  000199fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e67  00000000  00000000  0001e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000338b  00000000  00000000  0001ee97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017498  00000000  00000000  00022222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd110  00000000  00000000  000396ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f67ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd4  00000000  00000000  000f6810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000fb4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004db0 	.word	0x08004db0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004db0 	.word	0x08004db0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000520:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_ADC1_Init+0x74>)
 8000522:	4a19      	ldr	r2, [pc, #100]	@ (8000588 <MX_ADC1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <MX_ADC1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052c:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <MX_ADC1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_ADC1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <MX_ADC1_Init+0x74>)
 800053a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800053e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000540:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <MX_ADC1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_ADC1_Init+0x74>)
 8000548:	2201      	movs	r2, #1
 800054a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <MX_ADC1_Init+0x74>)
 800054e:	f000 ffa3 	bl	8001498 <HAL_ADC_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000558:	f000 fc16 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800055c:	230f      	movs	r3, #15
 800055e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_ADC1_Init+0x74>)
 800056e:	f001 f93d 	bl	80017ec <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000578:	f000 fc06 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000028 	.word	0x20000028
 8000588:	40012400 	.word	0x40012400

0800058c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_ADC2_Init+0x74>)
 800059e:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <MX_ADC2_Init+0x78>)
 80005a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005b6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005ca:	f000 ff65 	bl	8001498 <HAL_ADC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80005d4:	f000 fbd8 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005d8:	230a      	movs	r3, #10
 80005da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005dc:	2301      	movs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_ADC2_Init+0x74>)
 80005ea:	f001 f8ff 	bl	80017ec <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80005f4:	f000 fbc8 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000058 	.word	0x20000058
 8000604:	40012800 	.word	0x40012800

08000608 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a44      	ldr	r2, [pc, #272]	@ (8000734 <HAL_ADC_MspInit+0x12c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d152      	bne.n	80006ce <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000628:	4b43      	ldr	r3, [pc, #268]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 800062e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b40      	ldr	r3, [pc, #256]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0310 	and.w	r3, r3, #16
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8000658:	2320      	movs	r3, #32
 800065a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065c:	2303      	movs	r3, #3
 800065e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0318 	add.w	r3, r7, #24
 8000664:	4619      	mov	r1, r3
 8000666:	4835      	ldr	r0, [pc, #212]	@ (800073c <HAL_ADC_MspInit+0x134>)
 8000668:	f002 fa8e 	bl	8002b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800066c:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 800066e:	4a35      	ldr	r2, [pc, #212]	@ (8000744 <HAL_ADC_MspInit+0x13c>)
 8000670:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000678:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000684:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 8000686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800068a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800068c:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 800068e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000692:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006a0:	4827      	ldr	r0, [pc, #156]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 80006a2:	f001 fe7b 	bl	800239c <HAL_DMA_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006ac:	f000 fb6c 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a23      	ldr	r2, [pc, #140]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 80006b4:	621a      	str	r2, [r3, #32]
 80006b6:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <HAL_ADC_MspInit+0x138>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	2012      	movs	r0, #18
 80006c2:	f001 fe34 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006c6:	2012      	movs	r0, #18
 80006c8:	f001 fe4d 	bl	8002366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006cc:	e02e      	b.n	800072c <HAL_ADC_MspInit+0x124>
  else if(adcHandle->Instance==ADC2)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <HAL_ADC_MspInit+0x140>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d129      	bne.n	800072c <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 80006de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a10      	ldr	r2, [pc, #64]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <HAL_ADC_MspInit+0x130>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0310 	and.w	r3, r3, #16
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000708:	230f      	movs	r3, #15
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070c:	2303      	movs	r3, #3
 800070e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4619      	mov	r1, r3
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <HAL_ADC_MspInit+0x134>)
 8000718:	f002 fa36 	bl	8002b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	2012      	movs	r0, #18
 8000722:	f001 fe04 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000726:	2012      	movs	r0, #18
 8000728:	f001 fe1d 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40012400 	.word	0x40012400
 8000738:	40021000 	.word	0x40021000
 800073c:	40011000 	.word	0x40011000
 8000740:	20000088 	.word	0x20000088
 8000744:	40020008 	.word	0x40020008
 8000748:	40012800 	.word	0x40012800

0800074c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <MX_CAN1_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000758:	2209      	movs	r2, #9
 800075a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800076a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800076e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000772:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000776:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_CAN1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_CAN1_Init+0x64>)
 800079e:	f001 f967 	bl	8001a70 <HAL_CAN_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007a8:	f000 faee 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000cc 	.word	0x200000cc
 80007b4:	40006400 	.word	0x40006400

080007b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <HAL_CAN_MspInit+0xe0>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d15b      	bne.n	8000890 <HAL_CAN_MspInit+0xd8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007d8:	4b30      	ldr	r3, [pc, #192]	@ (800089c <HAL_CAN_MspInit+0xe4>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	4a2f      	ldr	r2, [pc, #188]	@ (800089c <HAL_CAN_MspInit+0xe4>)
 80007de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e2:	61d3      	str	r3, [r2, #28]
 80007e4:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <HAL_CAN_MspInit+0xe4>)
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <HAL_CAN_MspInit+0xe4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a29      	ldr	r2, [pc, #164]	@ (800089c <HAL_CAN_MspInit+0xe4>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <HAL_CAN_MspInit+0xe4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <HAL_CAN_MspInit+0xe8>)
 800081e:	f002 f9b3 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <HAL_CAN_MspInit+0xe8>)
 8000838:	f002 f9a6 	bl	8002b88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <HAL_CAN_MspInit+0xec>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
 8000842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000844:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
 800084a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <HAL_CAN_MspInit+0xec>)
 800085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2013      	movs	r0, #19
 8000866:	f001 fd62 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800086a:	2013      	movs	r0, #19
 800086c:	f001 fd7b 	bl	8002366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2014      	movs	r0, #20
 8000876:	f001 fd5a 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800087a:	2014      	movs	r0, #20
 800087c:	f001 fd73 	bl	8002366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2015      	movs	r0, #21
 8000886:	f001 fd52 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800088a:	2015      	movs	r0, #21
 800088c:	f001 fd6b 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40006400 	.word	0x40006400
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	40010000 	.word	0x40010000

080008a8 <CAN_Start>:

/* USER CODE BEGIN 1 */

uint8_t CAN_TX_HALT = 0; //halt frag to send it to mailbox

HAL_StatusTypeDef CAN_Start() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 80008ac:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <CAN_Start+0x10>)
 80008ae:	f001 f9da 	bl	8001c66 <HAL_CAN_Start>
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000cc 	.word	0x200000cc

080008bc <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    return HAL_CAN_ActivateNotification(&hcan1,  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 80008c0:	2103      	movs	r1, #3
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <CAN_Activate+0x14>)
 80008c4:	f001 fa13 	bl	8001cee <HAL_CAN_ActivateNotification>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000cc 	.word	0x200000cc

080008d4 <HAL_CAN_TxMailbox0CompleteCallback>:
		}
	}
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,&ptr->TxMailbox);
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	CAN_TX_HALT = 0;
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	200000f4 	.word	0x200000f4

080008f0 <CAN_SettingsInit>:

void CAN_SettingsInit(CANMessage *ptr) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	CAN_Start();
 80008f8:	f7ff ffd6 	bl	80008a8 <CAN_Start>
	CAN_Activate();
 80008fc:	f7ff ffde 	bl	80008bc <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2208      	movs	r2, #8
 8000916:	611a      	str	r2, [r3, #16]
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4906      	ldr	r1, [pc, #24]	@ (8000970 <__NVIC_EnableIRQ+0x34>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <MX_DMA_Init+0x88>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <MX_DMA_Init+0x88>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_DMA_Init+0x88>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	200b      	movs	r0, #11
 8000a50:	f001 fc6d 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a54:	200b      	movs	r0, #11
 8000a56:	f001 fc86 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	200c      	movs	r0, #12
 8000a60:	f001 fc65 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f001 fc7e 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	200d      	movs	r0, #13
 8000a70:	f001 fc5d 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a74:	200d      	movs	r0, #13
 8000a76:	f001 fc76 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	200e      	movs	r0, #14
 8000a80:	f001 fc55 	bl	800232e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a84:	200e      	movs	r0, #14
 8000a86:	f001 fc6e 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000a8a:	f7ff ff49 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff97 	bl	80009c8 <NVIC_EncodePriority>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f7ff ff68 	bl	8000974 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f7ff ff49 	bl	800093c <__NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b36      	ldr	r3, [pc, #216]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a35      	ldr	r2, [pc, #212]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b30      	ldr	r3, [pc, #192]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a29      	ldr	r2, [pc, #164]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	481e      	ldr	r0, [pc, #120]	@ (8000bac <MX_GPIO_Init+0xf4>)
 8000b32:	f002 f9ad 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	481d      	ldr	r0, [pc, #116]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b3c:	f002 f9a8 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	@ 0x40
 8000b44:	481b      	ldr	r0, [pc, #108]	@ (8000bb4 <MX_GPIO_Init+0xfc>)
 8000b46:	f002 f9a3 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4812      	ldr	r0, [pc, #72]	@ (8000bac <MX_GPIO_Init+0xf4>)
 8000b62:	f002 f811 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 8000b66:	2302      	movs	r3, #2
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b7e:	f002 f803 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000b82:	2340      	movs	r3, #64	@ 0x40
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <MX_GPIO_Init+0xfc>)
 8000b9a:	f001 fff5 	bl	8002b88 <HAL_GPIO_Init>

}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	40011000 	.word	0x40011000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 8000bbe:	af00      	add	r7, sp, #0
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	CANMessage msg;
	uint8_t safetyFaults = 0;
 8000bc0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000bc4:	f2a3 23fd 	subw	r3, r3, #765	@ 0x2fd
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 8000bcc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000bd0:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 8000bd8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000bdc:	f2a3 23ff 	subw	r3, r3, #767	@ 0x2ff
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be4:	f000 fbd2 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be8:	f000 f834 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bec:	f7ff ff64 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf0:	f7ff ff1c 	bl	8000a2c <MX_DMA_Init>
  MX_ADC1_Init();
 8000bf4:	f7ff fc8c 	bl	8000510 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bf8:	f7ff fcc8 	bl	800058c <MX_ADC2_Init>
  MX_TIM7_Init();
 8000bfc:	f000 fa9c 	bl	8001138 <MX_TIM7_Init>
  MX_SPI1_Init();
 8000c00:	f000 f8c8 	bl	8000d94 <MX_SPI1_Init>
  MX_CAN1_Init();
 8000c04:	f7ff fda2 	bl	800074c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000c08:	f000 faf2 	bl	80011f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe6d 	bl	80008f0 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8000c16:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000c1a:	2240      	movs	r2, #64	@ 0x40
 8000c1c:	490b      	ldr	r1, [pc, #44]	@ (8000c4c <main+0x94>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f882 	bl	8000d28 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000c24:	f507 733b 	add.w	r3, r7, #748	@ 0x2ec
 8000c28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f898 	bl	8000d62 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8000c32:	f000 f98f 	bl	8000f54 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <main+0x98>)
 8000c3c:	f002 f928 	bl	8002e90 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c44:	f000 fc04 	bl	8001450 <HAL_Delay>
	while(1);
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <main+0x90>
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09c      	sub	sp, #112	@ 0x70
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c5e:	2238      	movs	r2, #56	@ 0x38
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 f878 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 f86a 	bl	8004d58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000c96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000caa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000cb0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000cb6:	2340      	movs	r3, #64	@ 0x40
 8000cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 f8fe 	bl	8002ec0 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000cca:	f000 f85d 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fbfe 	bl	80034ec <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 f847 	bl	8000d88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fde6 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d12:	f000 f839 	bl	8000d88 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000d16:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <SystemClock_Config+0xd0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	3770      	adds	r7, #112	@ 0x70
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	42420070 	.word	0x42420070

08000d28 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	4613      	mov	r3, r2
 8000d34:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68b8      	ldr	r0, [r7, #8]
 8000d3e:	f002 f8a7 	bl	8002e90 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	88fa      	ldrh	r2, [r7, #6]
 8000d4c:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <TimerPacket_Init>:
		gtp->ts_prev = gtp->ts_curr;
	}
}
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	609a      	str	r2, [r3, #8]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d98:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000d9a:	4a18      	ldr	r2, [pc, #96]	@ (8000dfc <MX_SPI1_Init+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dc8:	2228      	movs	r2, #40	@ 0x28
 8000dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000de0:	220a      	movs	r2, #10
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <MX_SPI1_Init+0x64>)
 8000de6:	f002 fea9 	bl	8003b3c <HAL_SPI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000df0:	f7ff ffca 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000f8 	.word	0x200000f8
 8000dfc:	40013000 	.word	0x40013000

08000e00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a47      	ldr	r2, [pc, #284]	@ (8000f38 <HAL_SPI_MspInit+0x138>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	f040 8086 	bne.w	8000f2e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <HAL_SPI_MspInit+0x13c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a45      	ldr	r2, [pc, #276]	@ (8000f3c <HAL_SPI_MspInit+0x13c>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <HAL_SPI_MspInit+0x13c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <HAL_SPI_MspInit+0x13c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f3c <HAL_SPI_MspInit+0x13c>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <HAL_SPI_MspInit+0x13c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e52:	23a0      	movs	r3, #160	@ 0xa0
 8000e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4619      	mov	r1, r3
 8000e64:	4836      	ldr	r0, [pc, #216]	@ (8000f40 <HAL_SPI_MspInit+0x140>)
 8000e66:	f001 fe8f 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e6a:	2340      	movs	r3, #64	@ 0x40
 8000e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4830      	ldr	r0, [pc, #192]	@ (8000f40 <HAL_SPI_MspInit+0x140>)
 8000e7e:	f001 fe83 	bl	8002b88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000e82:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000e84:	4a30      	ldr	r2, [pc, #192]	@ (8000f48 <HAL_SPI_MspInit+0x148>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000eb6:	4823      	ldr	r0, [pc, #140]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000eb8:	f001 fa70 	bl	800239c <HAL_DMA_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8000ec2:	f7ff ff61 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000eca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f44 <HAL_SPI_MspInit+0x144>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f50 <HAL_SPI_MspInit+0x150>)
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000eda:	2210      	movs	r2, #16
 8000edc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000ee6:	2280      	movs	r2, #128	@ 0x80
 8000ee8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f02:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000f04:	f001 fa4a 	bl	800239c <HAL_DMA_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000f0e:	f7ff ff3b 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000f16:	649a      	str	r2, [r3, #72]	@ 0x48
 8000f18:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <HAL_SPI_MspInit+0x14c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2103      	movs	r1, #3
 8000f22:	2023      	movs	r0, #35	@ 0x23
 8000f24:	f001 fa03 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f28:	2023      	movs	r0, #35	@ 0x23
 8000f2a:	f001 fa1c 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	20000150 	.word	0x20000150
 8000f48:	4002001c 	.word	0x4002001c
 8000f4c:	20000194 	.word	0x20000194
 8000f50:	40020030 	.word	0x40020030

08000f54 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <LTC_nCS_High+0x14>)
 8000f5e:	f001 ff97 	bl	8002e90 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010800 	.word	0x40010800

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <HAL_MspInit+0x5c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_MspInit+0x5c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_MspInit+0x60>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_MspInit+0x60>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f9fa 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <DMA1_Channel1_IRQHandler+0x10>)
 800102e:	f001 fb6f 	bl	8002710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000088 	.word	0x20000088

0800103c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <DMA1_Channel2_IRQHandler+0x10>)
 8001042:	f001 fb65 	bl	8002710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000150 	.word	0x20000150

08001050 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <DMA1_Channel3_IRQHandler+0x10>)
 8001056:	f001 fb5b 	bl	8002710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000194 	.word	0x20000194

08001064 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <DMA1_Channel4_IRQHandler+0x10>)
 800106a:	f001 fb51 	bl	8002710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000268 	.word	0x20000268

08001078 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <ADC1_2_IRQHandler+0x14>)
 800108a:	f000 fadd 	bl	8001648 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800108e:	4803      	ldr	r0, [pc, #12]	@ (800109c <ADC1_2_IRQHandler+0x18>)
 8001090:	f000 fada 	bl	8001648 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000028 	.word	0x20000028
 800109c:	20000058 	.word	0x20000058

080010a0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <CAN1_TX_IRQHandler+0x10>)
 80010a6:	f000 fe47 	bl	8001d38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000cc 	.word	0x200000cc

080010b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <CAN1_RX0_IRQHandler+0x10>)
 80010ba:	f000 fe3d 	bl	8001d38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000cc 	.word	0x200000cc

080010c8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <CAN1_RX1_IRQHandler+0x10>)
 80010ce:	f000 fe33 	bl	8001d38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000cc 	.word	0x200000cc

080010dc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <CAN1_SCE_IRQHandler+0x10>)
 80010e2:	f000 fe29 	bl	8001d38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000cc 	.word	0x200000cc

080010f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <SPI1_IRQHandler+0x10>)
 80010f6:	f002 fda5 	bl	8003c44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000f8 	.word	0x200000f8

08001104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <USART1_IRQHandler+0x10>)
 800110a:	f003 f943 	bl	8004394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000220 	.word	0x20000220

08001118 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <TIM7_IRQHandler+0x10>)
 800111e:	f002 fedb 	bl	8003ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001d8 	.word	0x200001d8

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_TIM7_Init+0x64>)
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <MX_TIM7_Init+0x68>)
 800114a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_TIM7_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_TIM7_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_TIM7_Init+0x64>)
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_TIM7_Init+0x64>)
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_TIM7_Init+0x64>)
 8001168:	f002 fe67 	bl	8003e3a <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001172:	f7ff fe09 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	@ (800119c <MX_TIM7_Init+0x64>)
 8001184:	f003 f83e 	bl	8004204 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800118e:	f7ff fdfb 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001d8 	.word	0x200001d8
 80011a0:	40001400 	.word	0x40001400

080011a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <HAL_TIM_Base_MspInit+0x44>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d113      	bne.n	80011de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_TIM_Base_MspInit+0x48>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <HAL_TIM_Base_MspInit+0x48>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_TIM_Base_MspInit+0x48>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2037      	movs	r0, #55	@ 0x37
 80011d4:	f001 f8ab 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011d8:	2037      	movs	r0, #55	@ 0x37
 80011da:	f001 f8c4 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40001400 	.word	0x40001400
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <MX_USART1_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_USART1_UART_Init+0x4c>)
 8001228:	f003 f864 	bl	80042f4 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f7ff fda9 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000220 	.word	0x20000220
 8001240:	40013800 	.word	0x40013800

08001244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a33      	ldr	r2, [pc, #204]	@ (800132c <HAL_UART_MspInit+0xe8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d15f      	bne.n	8001324 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001264:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <HAL_UART_MspInit+0xec>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a31      	ldr	r2, [pc, #196]	@ (8001330 <HAL_UART_MspInit+0xec>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <HAL_UART_MspInit+0xec>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <HAL_UART_MspInit+0xec>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a2b      	ldr	r2, [pc, #172]	@ (8001330 <HAL_UART_MspInit+0xec>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <HAL_UART_MspInit+0xec>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4822      	ldr	r0, [pc, #136]	@ (8001334 <HAL_UART_MspInit+0xf0>)
 80012aa:	f001 fc6d 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	481c      	ldr	r0, [pc, #112]	@ (8001334 <HAL_UART_MspInit+0xf0>)
 80012c4:	f001 fc60 	bl	8002b88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012ca:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <HAL_UART_MspInit+0xf8>)
 80012cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012d0:	2210      	movs	r2, #16
 80012d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012dc:	2280      	movs	r2, #128	@ 0x80
 80012de:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012f8:	480f      	ldr	r0, [pc, #60]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 80012fa:	f001 f84f 	bl	800239c <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001304:	f7ff fd40 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 800130c:	639a      	str	r2, [r3, #56]	@ 0x38
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_UART_MspInit+0xf4>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2101      	movs	r1, #1
 8001318:	2025      	movs	r0, #37	@ 0x25
 800131a:	f001 f808 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800131e:	2025      	movs	r0, #37	@ 0x25
 8001320:	f001 f821 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013800 	.word	0x40013800
 8001330:	40021000 	.word	0x40021000
 8001334:	40010800 	.word	0x40010800
 8001338:	20000268 	.word	0x20000268
 800133c:	40020044 	.word	0x40020044

08001340 <Reset_Handler>:
 8001340:	f7ff fef4 	bl	800112c <SystemInit>
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <LoopFillZerobss+0xe>)
 8001346:	490c      	ldr	r1, [pc, #48]	@ (8001378 <LoopFillZerobss+0x12>)
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <LoopFillZerobss+0x16>)
 800134a:	2300      	movs	r3, #0
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:
 800134e:	58d4      	ldr	r4, [r2, r3]
 8001350:	50c4      	str	r4, [r0, r3]
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:
 8001354:	18c4      	adds	r4, r0, r3
 8001356:	428c      	cmp	r4, r1
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <LoopFillZerobss+0x1a>)
 800135c:	4c09      	ldr	r4, [pc, #36]	@ (8001384 <LoopFillZerobss+0x1e>)
 800135e:	2300      	movs	r3, #0
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:
 8001366:	42a2      	cmp	r2, r4
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>
 800136a:	f003 fcfd 	bl	8004d68 <__libc_init_array>
 800136e:	f7ff fc23 	bl	8000bb8 <main>
 8001372:	4770      	bx	lr
 8001374:	20000000 	.word	0x20000000
 8001378:	2000000c 	.word	0x2000000c
 800137c:	08004e10 	.word	0x08004e10
 8001380:	2000000c 	.word	0x2000000c
 8001384:	200002b0 	.word	0x200002b0

08001388 <CAN2_RX0_IRQHandler>:
 8001388:	e7fe      	b.n	8001388 <CAN2_RX0_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HAL_Init+0x28>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <HAL_Init+0x28>)
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 ffbb 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	200f      	movs	r0, #15
 80013a4:	f000 f808 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fde0 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40022000 	.word	0x40022000

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_InitTick+0x54>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x58>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 ffd3 	bl	8002382 <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 ff9b 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <HAL_InitTick+0x5c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000000 	.word	0x20000000
 8001410:	20000008 	.word	0x20000008
 8001414:	20000004 	.word	0x20000004

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_IncTick+0x1c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x20>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a03      	ldr	r2, [pc, #12]	@ (8001438 <HAL_IncTick+0x20>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	20000008 	.word	0x20000008
 8001438:	200002ac 	.word	0x200002ac

0800143c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b02      	ldr	r3, [pc, #8]	@ (800144c <HAL_GetTick+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	200002ac 	.word	0x200002ac

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff0 	bl	800143c <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffe0 	bl	800143c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0be      	b.n	8001638 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff f896 	bl	8000608 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fa7d 	bl	80019dc <ADC_ConversionStop_Disable>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 8099 	bne.w	8001626 <HAL_ADC_Init+0x18e>
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 8095 	bne.w	8001626 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001500:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001504:	f023 0302 	bic.w	r3, r3, #2
 8001508:	f043 0202 	orr.w	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001518:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7b1b      	ldrb	r3, [r3, #12]
 800151e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001520:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4313      	orrs	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001530:	d003      	beq.n	800153a <HAL_ADC_Init+0xa2>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <HAL_ADC_Init+0xa8>
 800153a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800153e:	e000      	b.n	8001542 <HAL_ADC_Init+0xaa>
 8001540:	2300      	movs	r3, #0
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7d1b      	ldrb	r3, [r3, #20]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d119      	bne.n	8001584 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7b1b      	ldrb	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	3b01      	subs	r3, #1
 800155e:	035a      	lsls	r2, r3, #13
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e00b      	b.n	8001584 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <HAL_ADC_Init+0x1a8>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015b4:	d003      	beq.n	80015be <HAL_ADC_Init+0x126>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d104      	bne.n	80015c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	051b      	lsls	r3, r3, #20
 80015c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	430a      	orrs	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_ADC_Init+0x1ac>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001602:	e018      	b.n	8001636 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	f023 0312 	bic.w	r3, r3, #18
 800160c:	f043 0210 	orr.w	r2, r3, #16
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001624:	e007      	b.n	8001636 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	ffe1f7fd 	.word	0xffe1f7fd
 8001644:	ff1f0efe 	.word	0xff1f0efe

08001648 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	2b00      	cmp	r3, #0
 8001668:	d03e      	beq.n	80016e8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d039      	beq.n	80016e8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001696:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800169a:	d11d      	bne.n	80016d8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d119      	bne.n	80016d8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0220 	bic.w	r2, r2, #32
 80016b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f874 	bl	80017c6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f06f 0212 	mvn.w	r2, #18
 80016e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d04d      	beq.n	800178e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d048      	beq.n	800178e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800171e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001722:	d012      	beq.n	800174a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800172e:	2b00      	cmp	r3, #0
 8001730:	d125      	bne.n	800177e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800173c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001740:	d11d      	bne.n	800177e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d119      	bne.n	800177e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001758:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f96d 	bl	8001a5e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 020c 	mvn.w	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d012      	beq.n	80017be <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f812 	bl	80017d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0201 	mvn.w	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x20>
 8001808:	2302      	movs	r3, #2
 800180a:	e0dc      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x1da>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b06      	cmp	r3, #6
 800181a:	d81c      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	3b05      	subs	r3, #5
 800182e:	221f      	movs	r2, #31
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	4019      	ands	r1, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b05      	subs	r3, #5
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	@ 0x34
 8001854:	e03c      	b.n	80018d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d81c      	bhi.n	8001898 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b23      	subs	r3, #35	@ 0x23
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	4019      	ands	r1, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b23      	subs	r3, #35	@ 0x23
 800188a:	fa00 f203 	lsl.w	r2, r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	631a      	str	r2, [r3, #48]	@ 0x30
 8001896:	e01b      	b.n	80018d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b41      	subs	r3, #65	@ 0x41
 80018aa:	221f      	movs	r2, #31
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4019      	ands	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b41      	subs	r3, #65	@ 0x41
 80018c4:	fa00 f203 	lsl.w	r2, r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b09      	cmp	r3, #9
 80018d6:	d91c      	bls.n	8001912 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68d9      	ldr	r1, [r3, #12]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	3b1e      	subs	r3, #30
 80018ea:	2207      	movs	r2, #7
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4019      	ands	r1, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6898      	ldr	r0, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	3b1e      	subs	r3, #30
 8001904:	fa00 f203 	lsl.w	r2, r0, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	e019      	b.n	8001946 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	2207      	movs	r2, #7
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	4019      	ands	r1, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6898      	ldr	r0, [r3, #8]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	fa00 f203 	lsl.w	r2, r0, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d003      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001952:	2b11      	cmp	r3, #17
 8001954:	d132      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d125      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d126      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800197c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d11a      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a13      	ldr	r2, [pc, #76]	@ (80019d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0c9a      	lsrs	r2, r3, #18
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800199c:	e002      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <HAL_ADC_ConfigChannel+0x1b2>
 80019aa:	e007      	b.n	80019bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	f043 0220 	orr.w	r2, r3, #32
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40012400 	.word	0x40012400
 80019d4:	20000000 	.word	0x20000000
 80019d8:	431bde83 	.word	0x431bde83

080019dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d12e      	bne.n	8001a54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a06:	f7ff fd19 	bl	800143c <HAL_GetTick>
 8001a0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a0c:	e01b      	b.n	8001a46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a0e:	f7ff fd15 	bl	800143c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d914      	bls.n	8001a46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10d      	bne.n	8001a46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	f043 0210 	orr.w	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e007      	b.n	8001a56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d0dc      	beq.n	8001a0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0ed      	b.n	8001c5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fe92 	bl	80007b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa4:	f7ff fcca 	bl	800143c <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aaa:	e012      	b.n	8001ad2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aac:	f7ff fcc6 	bl	800143c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	d90b      	bls.n	8001ad2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2205      	movs	r2, #5
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0c5      	b.n	8001c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0e5      	beq.n	8001aac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0202 	bic.w	r2, r2, #2
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af0:	f7ff fca4 	bl	800143c <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001af6:	e012      	b.n	8001b1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001af8:	f7ff fca0 	bl	800143c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b0a      	cmp	r3, #10
 8001b04:	d90b      	bls.n	8001b1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09f      	b.n	8001c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e5      	bne.n	8001af8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e1b      	ldrb	r3, [r3, #24]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7e5b      	ldrb	r3, [r3, #25]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e9b      	ldrb	r3, [r3, #26]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0220 	bic.w	r2, r2, #32
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7edb      	ldrb	r3, [r3, #27]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0210 	bic.w	r2, r2, #16
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0210 	orr.w	r2, r2, #16
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7f1b      	ldrb	r3, [r3, #28]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d108      	bne.n	8001bee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0208 	orr.w	r2, r2, #8
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e007      	b.n	8001bfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0208 	bic.w	r2, r2, #8
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7f5b      	ldrb	r3, [r3, #29]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0204 	orr.w	r2, r2, #4
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e007      	b.n	8001c28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	ea42 0103 	orr.w	r1, r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12e      	bne.n	8001cd8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c92:	f7ff fbd3 	bl	800143c <HAL_GetTick>
 8001c96:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c98:	e012      	b.n	8001cc0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c9a:	f7ff fbcf 	bl	800143c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b0a      	cmp	r3, #10
 8001ca6:	d90b      	bls.n	8001cc0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e012      	b.n	8001ce6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e5      	bne.n	8001c9a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e006      	b.n	8001ce6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d002      	beq.n	8001d0c <HAL_CAN_ActivateNotification+0x1e>
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d109      	bne.n	8001d20 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6959      	ldr	r1, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e006      	b.n	8001d2e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
  }
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	@ 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d07c      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d023      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd9a 	bl	80008d4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001da0:	e016      	b.n	8001dd0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db4:	e00c      	b.n	8001dd0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	e002      	b.n	8001dd0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f97d 	bl	80020ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d024      	beq.n	8001e24 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001de2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f959 	bl	80020a6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001df4:	e016      	b.n	8001e24 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e08:	e00c      	b.n	8001e24 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1c:	e002      	b.n	8001e24 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f95c 	bl	80020dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d024      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f938 	bl	80020b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e48:	e016      	b.n	8001e78 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5c:	e00c      	b.n	8001e78 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e70:	e002      	b.n	8001e78 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f93b 	bl	80020ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f92a 	bl	8002112 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f912 	bl	8002100 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2210      	movs	r2, #16
 8001efe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f90a 	bl	8002136 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8f2 	bl	8002124 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8f3 	bl	8002148 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8eb 	bl	800215a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07b      	beq.n	8002086 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d072      	beq.n	800207e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d043      	beq.n	800207e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03e      	beq.n	800207e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002006:	2b60      	cmp	r3, #96	@ 0x60
 8002008:	d02b      	beq.n	8002062 <HAL_CAN_IRQHandler+0x32a>
 800200a:	2b60      	cmp	r3, #96	@ 0x60
 800200c:	d82e      	bhi.n	800206c <HAL_CAN_IRQHandler+0x334>
 800200e:	2b50      	cmp	r3, #80	@ 0x50
 8002010:	d022      	beq.n	8002058 <HAL_CAN_IRQHandler+0x320>
 8002012:	2b50      	cmp	r3, #80	@ 0x50
 8002014:	d82a      	bhi.n	800206c <HAL_CAN_IRQHandler+0x334>
 8002016:	2b40      	cmp	r3, #64	@ 0x40
 8002018:	d019      	beq.n	800204e <HAL_CAN_IRQHandler+0x316>
 800201a:	2b40      	cmp	r3, #64	@ 0x40
 800201c:	d826      	bhi.n	800206c <HAL_CAN_IRQHandler+0x334>
 800201e:	2b30      	cmp	r3, #48	@ 0x30
 8002020:	d010      	beq.n	8002044 <HAL_CAN_IRQHandler+0x30c>
 8002022:	2b30      	cmp	r3, #48	@ 0x30
 8002024:	d822      	bhi.n	800206c <HAL_CAN_IRQHandler+0x334>
 8002026:	2b10      	cmp	r3, #16
 8002028:	d002      	beq.n	8002030 <HAL_CAN_IRQHandler+0x2f8>
 800202a:	2b20      	cmp	r3, #32
 800202c:	d005      	beq.n	800203a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800202e:	e01d      	b.n	800206c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002038:	e019      	b.n	800206e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002042:	e014      	b.n	800206e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800204c:	e00f      	b.n	800206e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002056:	e00a      	b.n	800206e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002060:	e005      	b.n	800206e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800206a:	e000      	b.n	800206e <HAL_CAN_IRQHandler+0x336>
            break;
 800206c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800207c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2204      	movs	r2, #4
 8002084:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f867 	bl	800216c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
	...

08002180 <__NVIC_SetPriorityGrouping>:
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4906      	ldr	r1, [pc, #24]	@ (8002218 <__NVIC_EnableIRQ+0x34>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff90 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff2d 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff42 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff90 	bl	8002270 <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5f 	bl	800221c <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff35 	bl	80021e4 <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffa2 	bl	80022d4 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e059      	b.n	8002466 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_DMA_Init+0xd4>)
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d80f      	bhi.n	80023de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_DMA_Init+0xd8>)
 80023c6:	4413      	add	r3, r2
 80023c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <HAL_DMA_Init+0xdc>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a28      	ldr	r2, [pc, #160]	@ (800247c <HAL_DMA_Init+0xe0>)
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023dc:	e00e      	b.n	80023fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_DMA_Init+0xe4>)
 80023e6:	4413      	add	r3, r2
 80023e8:	4a23      	ldr	r2, [pc, #140]	@ (8002478 <HAL_DMA_Init+0xdc>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <HAL_DMA_Init+0xe8>)
 80023fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002412:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40020407 	.word	0x40020407
 8002474:	bffdfff8 	.word	0xbffdfff8
 8002478:	cccccccd 	.word	0xcccccccd
 800247c:	40020000 	.word	0x40020000
 8002480:	bffdfbf8 	.word	0xbffdfbf8
 8002484:	40020400 	.word	0x40020400

08002488 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2204      	movs	r2, #4
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e020      	b.n	80024f4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 020e 	bic.w	r2, r2, #14
 80024c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d005      	beq.n	8002524 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e0d6      	b.n	80026d2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 020e 	bic.w	r2, r2, #14
 8002532:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b64      	ldr	r3, [pc, #400]	@ (80026dc <HAL_DMA_Abort_IT+0x1dc>)
 800254c:	429a      	cmp	r2, r3
 800254e:	d958      	bls.n	8002602 <HAL_DMA_Abort_IT+0x102>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a62      	ldr	r2, [pc, #392]	@ (80026e0 <HAL_DMA_Abort_IT+0x1e0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d04f      	beq.n	80025fa <HAL_DMA_Abort_IT+0xfa>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a61      	ldr	r2, [pc, #388]	@ (80026e4 <HAL_DMA_Abort_IT+0x1e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d048      	beq.n	80025f6 <HAL_DMA_Abort_IT+0xf6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5f      	ldr	r2, [pc, #380]	@ (80026e8 <HAL_DMA_Abort_IT+0x1e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d040      	beq.n	80025f0 <HAL_DMA_Abort_IT+0xf0>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5e      	ldr	r2, [pc, #376]	@ (80026ec <HAL_DMA_Abort_IT+0x1ec>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d038      	beq.n	80025ea <HAL_DMA_Abort_IT+0xea>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5c      	ldr	r2, [pc, #368]	@ (80026f0 <HAL_DMA_Abort_IT+0x1f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d030      	beq.n	80025e4 <HAL_DMA_Abort_IT+0xe4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5b      	ldr	r2, [pc, #364]	@ (80026f4 <HAL_DMA_Abort_IT+0x1f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d028      	beq.n	80025de <HAL_DMA_Abort_IT+0xde>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_DMA_Abort_IT+0x1dc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d020      	beq.n	80025d8 <HAL_DMA_Abort_IT+0xd8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a57      	ldr	r2, [pc, #348]	@ (80026f8 <HAL_DMA_Abort_IT+0x1f8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d019      	beq.n	80025d4 <HAL_DMA_Abort_IT+0xd4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a55      	ldr	r2, [pc, #340]	@ (80026fc <HAL_DMA_Abort_IT+0x1fc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d012      	beq.n	80025d0 <HAL_DMA_Abort_IT+0xd0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a54      	ldr	r2, [pc, #336]	@ (8002700 <HAL_DMA_Abort_IT+0x200>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00a      	beq.n	80025ca <HAL_DMA_Abort_IT+0xca>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_DMA_Abort_IT+0x204>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d102      	bne.n	80025c4 <HAL_DMA_Abort_IT+0xc4>
 80025be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c2:	e01b      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c8:	e018      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ce:	e015      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025d0:	2310      	movs	r3, #16
 80025d2:	e013      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e011      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025dc:	e00e      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025e2:	e00b      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e8:	e008      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ee:	e005      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f4:	e002      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025f6:	2310      	movs	r3, #16
 80025f8:	e000      	b.n	80025fc <HAL_DMA_Abort_IT+0xfc>
 80025fa:	2301      	movs	r3, #1
 80025fc:	4a42      	ldr	r2, [pc, #264]	@ (8002708 <HAL_DMA_Abort_IT+0x208>)
 80025fe:	6053      	str	r3, [r2, #4]
 8002600:	e057      	b.n	80026b2 <HAL_DMA_Abort_IT+0x1b2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a36      	ldr	r2, [pc, #216]	@ (80026e0 <HAL_DMA_Abort_IT+0x1e0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d04f      	beq.n	80026ac <HAL_DMA_Abort_IT+0x1ac>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a34      	ldr	r2, [pc, #208]	@ (80026e4 <HAL_DMA_Abort_IT+0x1e4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d048      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x1a8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a33      	ldr	r2, [pc, #204]	@ (80026e8 <HAL_DMA_Abort_IT+0x1e8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d040      	beq.n	80026a2 <HAL_DMA_Abort_IT+0x1a2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a31      	ldr	r2, [pc, #196]	@ (80026ec <HAL_DMA_Abort_IT+0x1ec>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d038      	beq.n	800269c <HAL_DMA_Abort_IT+0x19c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <HAL_DMA_Abort_IT+0x1f0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d030      	beq.n	8002696 <HAL_DMA_Abort_IT+0x196>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2e      	ldr	r2, [pc, #184]	@ (80026f4 <HAL_DMA_Abort_IT+0x1f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d028      	beq.n	8002690 <HAL_DMA_Abort_IT+0x190>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a26      	ldr	r2, [pc, #152]	@ (80026dc <HAL_DMA_Abort_IT+0x1dc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d020      	beq.n	800268a <HAL_DMA_Abort_IT+0x18a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2a      	ldr	r2, [pc, #168]	@ (80026f8 <HAL_DMA_Abort_IT+0x1f8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d019      	beq.n	8002686 <HAL_DMA_Abort_IT+0x186>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a29      	ldr	r2, [pc, #164]	@ (80026fc <HAL_DMA_Abort_IT+0x1fc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d012      	beq.n	8002682 <HAL_DMA_Abort_IT+0x182>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a27      	ldr	r2, [pc, #156]	@ (8002700 <HAL_DMA_Abort_IT+0x200>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00a      	beq.n	800267c <HAL_DMA_Abort_IT+0x17c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a26      	ldr	r2, [pc, #152]	@ (8002704 <HAL_DMA_Abort_IT+0x204>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d102      	bne.n	8002676 <HAL_DMA_Abort_IT+0x176>
 8002670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002674:	e01b      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 8002676:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800267a:	e018      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 800267c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002680:	e015      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 8002682:	2310      	movs	r3, #16
 8002684:	e013      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 8002686:	2301      	movs	r3, #1
 8002688:	e011      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 800268a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800268e:	e00e      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 8002690:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002694:	e00b      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 8002696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800269a:	e008      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 800269c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a0:	e005      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 80026a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a6:	e002      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 80026a8:	2310      	movs	r3, #16
 80026aa:	e000      	b.n	80026ae <HAL_DMA_Abort_IT+0x1ae>
 80026ac:	2301      	movs	r3, #1
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HAL_DMA_Abort_IT+0x20c>)
 80026b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    } 
  }
  return status;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40020080 	.word	0x40020080
 80026e0:	40020008 	.word	0x40020008
 80026e4:	4002001c 	.word	0x4002001c
 80026e8:	40020030 	.word	0x40020030
 80026ec:	40020044 	.word	0x40020044
 80026f0:	40020058 	.word	0x40020058
 80026f4:	4002006c 	.word	0x4002006c
 80026f8:	40020408 	.word	0x40020408
 80026fc:	4002041c 	.word	0x4002041c
 8002700:	40020430 	.word	0x40020430
 8002704:	40020444 	.word	0x40020444
 8002708:	40020400 	.word	0x40020400
 800270c:	40020000 	.word	0x40020000

08002710 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	2204      	movs	r2, #4
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80f1 	beq.w	800291c <HAL_DMA_IRQHandler+0x20c>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80eb 	beq.w	800291c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0204 	bic.w	r2, r2, #4
 8002762:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b5f      	ldr	r3, [pc, #380]	@ (80028e8 <HAL_DMA_IRQHandler+0x1d8>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d958      	bls.n	8002822 <HAL_DMA_IRQHandler+0x112>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5d      	ldr	r2, [pc, #372]	@ (80028ec <HAL_DMA_IRQHandler+0x1dc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04f      	beq.n	800281a <HAL_DMA_IRQHandler+0x10a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5c      	ldr	r2, [pc, #368]	@ (80028f0 <HAL_DMA_IRQHandler+0x1e0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d048      	beq.n	8002816 <HAL_DMA_IRQHandler+0x106>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5a      	ldr	r2, [pc, #360]	@ (80028f4 <HAL_DMA_IRQHandler+0x1e4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d040      	beq.n	8002810 <HAL_DMA_IRQHandler+0x100>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a59      	ldr	r2, [pc, #356]	@ (80028f8 <HAL_DMA_IRQHandler+0x1e8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d038      	beq.n	800280a <HAL_DMA_IRQHandler+0xfa>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a57      	ldr	r2, [pc, #348]	@ (80028fc <HAL_DMA_IRQHandler+0x1ec>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d030      	beq.n	8002804 <HAL_DMA_IRQHandler+0xf4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a56      	ldr	r2, [pc, #344]	@ (8002900 <HAL_DMA_IRQHandler+0x1f0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d028      	beq.n	80027fe <HAL_DMA_IRQHandler+0xee>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_DMA_IRQHandler+0x1d8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d020      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xe8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_DMA_IRQHandler+0x1f4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d019      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xe4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a50      	ldr	r2, [pc, #320]	@ (8002908 <HAL_DMA_IRQHandler+0x1f8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d012      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xe0>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a4f      	ldr	r2, [pc, #316]	@ (800290c <HAL_DMA_IRQHandler+0x1fc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00a      	beq.n	80027ea <HAL_DMA_IRQHandler+0xda>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002910 <HAL_DMA_IRQHandler+0x200>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d102      	bne.n	80027e4 <HAL_DMA_IRQHandler+0xd4>
 80027de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027e2:	e01b      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 80027e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80027e8:	e018      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 80027ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ee:	e015      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 80027f0:	2340      	movs	r3, #64	@ 0x40
 80027f2:	e013      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e011      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 80027f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80027fc:	e00e      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 80027fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002802:	e00b      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 8002804:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002808:	e008      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 800280a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800280e:	e005      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 8002810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002814:	e002      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 8002816:	2340      	movs	r3, #64	@ 0x40
 8002818:	e000      	b.n	800281c <HAL_DMA_IRQHandler+0x10c>
 800281a:	2304      	movs	r3, #4
 800281c:	4a3d      	ldr	r2, [pc, #244]	@ (8002914 <HAL_DMA_IRQHandler+0x204>)
 800281e:	6053      	str	r3, [r2, #4]
 8002820:	e057      	b.n	80028d2 <HAL_DMA_IRQHandler+0x1c2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a31      	ldr	r2, [pc, #196]	@ (80028ec <HAL_DMA_IRQHandler+0x1dc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04f      	beq.n	80028cc <HAL_DMA_IRQHandler+0x1bc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2f      	ldr	r2, [pc, #188]	@ (80028f0 <HAL_DMA_IRQHandler+0x1e0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d048      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x1b8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2e      	ldr	r2, [pc, #184]	@ (80028f4 <HAL_DMA_IRQHandler+0x1e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x1b2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2c      	ldr	r2, [pc, #176]	@ (80028f8 <HAL_DMA_IRQHandler+0x1e8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d038      	beq.n	80028bc <HAL_DMA_IRQHandler+0x1ac>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2b      	ldr	r2, [pc, #172]	@ (80028fc <HAL_DMA_IRQHandler+0x1ec>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d030      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x1a6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a29      	ldr	r2, [pc, #164]	@ (8002900 <HAL_DMA_IRQHandler+0x1f0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d028      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x1a0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	@ (80028e8 <HAL_DMA_IRQHandler+0x1d8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d020      	beq.n	80028aa <HAL_DMA_IRQHandler+0x19a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	@ (8002904 <HAL_DMA_IRQHandler+0x1f4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x196>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	@ (8002908 <HAL_DMA_IRQHandler+0x1f8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d012      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x192>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	@ (800290c <HAL_DMA_IRQHandler+0x1fc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00a      	beq.n	800289c <HAL_DMA_IRQHandler+0x18c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	@ (8002910 <HAL_DMA_IRQHandler+0x200>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d102      	bne.n	8002896 <HAL_DMA_IRQHandler+0x186>
 8002890:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002894:	e01b      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 8002896:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800289a:	e018      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 800289c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028a0:	e015      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028a2:	2340      	movs	r3, #64	@ 0x40
 80028a4:	e013      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e011      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028ae:	e00e      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028b4:	e00b      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028b6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028ba:	e008      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028c0:	e005      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028c6:	e002      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028c8:	2340      	movs	r3, #64	@ 0x40
 80028ca:	e000      	b.n	80028ce <HAL_DMA_IRQHandler+0x1be>
 80028cc:	2304      	movs	r3, #4
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <HAL_DMA_IRQHandler+0x208>)
 80028d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8136 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028e4:	e130      	b.n	8002b48 <HAL_DMA_IRQHandler+0x438>
 80028e6:	bf00      	nop
 80028e8:	40020080 	.word	0x40020080
 80028ec:	40020008 	.word	0x40020008
 80028f0:	4002001c 	.word	0x4002001c
 80028f4:	40020030 	.word	0x40020030
 80028f8:	40020044 	.word	0x40020044
 80028fc:	40020058 	.word	0x40020058
 8002900:	4002006c 	.word	0x4002006c
 8002904:	40020408 	.word	0x40020408
 8002908:	4002041c 	.word	0x4002041c
 800290c:	40020430 	.word	0x40020430
 8002910:	40020444 	.word	0x40020444
 8002914:	40020400 	.word	0x40020400
 8002918:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	2202      	movs	r2, #2
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80dd 	beq.w	8002ae8 <HAL_DMA_IRQHandler+0x3d8>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80d7 	beq.w	8002ae8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020a 	bic.w	r2, r2, #10
 8002956:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b7b      	ldr	r3, [pc, #492]	@ (8002b54 <HAL_DMA_IRQHandler+0x444>)
 8002968:	429a      	cmp	r2, r3
 800296a:	d958      	bls.n	8002a1e <HAL_DMA_IRQHandler+0x30e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a79      	ldr	r2, [pc, #484]	@ (8002b58 <HAL_DMA_IRQHandler+0x448>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04f      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x306>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a78      	ldr	r2, [pc, #480]	@ (8002b5c <HAL_DMA_IRQHandler+0x44c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d048      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x302>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a76      	ldr	r2, [pc, #472]	@ (8002b60 <HAL_DMA_IRQHandler+0x450>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x2fc>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a75      	ldr	r2, [pc, #468]	@ (8002b64 <HAL_DMA_IRQHandler+0x454>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d038      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x2f6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a73      	ldr	r2, [pc, #460]	@ (8002b68 <HAL_DMA_IRQHandler+0x458>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d030      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2f0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a72      	ldr	r2, [pc, #456]	@ (8002b6c <HAL_DMA_IRQHandler+0x45c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d028      	beq.n	80029fa <HAL_DMA_IRQHandler+0x2ea>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a69      	ldr	r2, [pc, #420]	@ (8002b54 <HAL_DMA_IRQHandler+0x444>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d020      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x2e4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b70 <HAL_DMA_IRQHandler+0x460>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d019      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x2e0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6c      	ldr	r2, [pc, #432]	@ (8002b74 <HAL_DMA_IRQHandler+0x464>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d012      	beq.n	80029ec <HAL_DMA_IRQHandler+0x2dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6b      	ldr	r2, [pc, #428]	@ (8002b78 <HAL_DMA_IRQHandler+0x468>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00a      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x2d6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a69      	ldr	r2, [pc, #420]	@ (8002b7c <HAL_DMA_IRQHandler+0x46c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d102      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x2d0>
 80029da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029de:	e01b      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 80029e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029e4:	e018      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 80029e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029ea:	e015      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 80029ec:	2320      	movs	r3, #32
 80029ee:	e013      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e011      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 80029f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029f8:	e00e      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 80029fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029fe:	e00b      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 8002a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a04:	e008      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 8002a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a0a:	e005      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 8002a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a10:	e002      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 8002a12:	2320      	movs	r3, #32
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_IRQHandler+0x308>
 8002a16:	2302      	movs	r3, #2
 8002a18:	4a59      	ldr	r2, [pc, #356]	@ (8002b80 <HAL_DMA_IRQHandler+0x470>)
 8002a1a:	6053      	str	r3, [r2, #4]
 8002a1c:	e057      	b.n	8002ace <HAL_DMA_IRQHandler+0x3be>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4d      	ldr	r2, [pc, #308]	@ (8002b58 <HAL_DMA_IRQHandler+0x448>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04f      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x3b8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b5c <HAL_DMA_IRQHandler+0x44c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d048      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x3b4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4a      	ldr	r2, [pc, #296]	@ (8002b60 <HAL_DMA_IRQHandler+0x450>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_IRQHandler+0x3ae>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a48      	ldr	r2, [pc, #288]	@ (8002b64 <HAL_DMA_IRQHandler+0x454>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d038      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x3a8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	@ (8002b68 <HAL_DMA_IRQHandler+0x458>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d030      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x3a2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a45      	ldr	r2, [pc, #276]	@ (8002b6c <HAL_DMA_IRQHandler+0x45c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d028      	beq.n	8002aac <HAL_DMA_IRQHandler+0x39c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b54 <HAL_DMA_IRQHandler+0x444>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d020      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x396>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a41      	ldr	r2, [pc, #260]	@ (8002b70 <HAL_DMA_IRQHandler+0x460>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d019      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x392>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a40      	ldr	r2, [pc, #256]	@ (8002b74 <HAL_DMA_IRQHandler+0x464>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x38e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b78 <HAL_DMA_IRQHandler+0x468>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x388>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3d      	ldr	r2, [pc, #244]	@ (8002b7c <HAL_DMA_IRQHandler+0x46c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d102      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x382>
 8002a8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a90:	e01b      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002a92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a96:	e018      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a9c:	e015      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e013      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e011      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aaa:	e00e      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002aac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ab0:	e00b      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002ab2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab6:	e008      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002abc:	e005      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ac2:	e002      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_IRQHandler+0x3ba>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	4a2e      	ldr	r2, [pc, #184]	@ (8002b84 <HAL_DMA_IRQHandler+0x474>)
 8002acc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d034      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ae6:	e02f      	b.n	8002b48 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	2208      	movs	r2, #8
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d028      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x43a>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d023      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 020e 	bic.w	r2, r2, #14
 8002b10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
    }
  }
  return;
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
}
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40020080 	.word	0x40020080
 8002b58:	40020008 	.word	0x40020008
 8002b5c:	4002001c 	.word	0x4002001c
 8002b60:	40020030 	.word	0x40020030
 8002b64:	40020044 	.word	0x40020044
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	4002006c 	.word	0x4002006c
 8002b70:	40020408 	.word	0x40020408
 8002b74:	4002041c 	.word	0x4002041c
 8002b78:	40020430 	.word	0x40020430
 8002b7c:	40020444 	.word	0x40020444
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020000 	.word	0x40020000

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b08b      	sub	sp, #44	@ 0x2c
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9a:	e169      	b.n	8002e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 8158 	bne.w	8002e6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4a9a      	ldr	r2, [pc, #616]	@ (8002e28 <HAL_GPIO_Init+0x2a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d05e      	beq.n	8002c82 <HAL_GPIO_Init+0xfa>
 8002bc4:	4a98      	ldr	r2, [pc, #608]	@ (8002e28 <HAL_GPIO_Init+0x2a0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d875      	bhi.n	8002cb6 <HAL_GPIO_Init+0x12e>
 8002bca:	4a98      	ldr	r2, [pc, #608]	@ (8002e2c <HAL_GPIO_Init+0x2a4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d058      	beq.n	8002c82 <HAL_GPIO_Init+0xfa>
 8002bd0:	4a96      	ldr	r2, [pc, #600]	@ (8002e2c <HAL_GPIO_Init+0x2a4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d86f      	bhi.n	8002cb6 <HAL_GPIO_Init+0x12e>
 8002bd6:	4a96      	ldr	r2, [pc, #600]	@ (8002e30 <HAL_GPIO_Init+0x2a8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d052      	beq.n	8002c82 <HAL_GPIO_Init+0xfa>
 8002bdc:	4a94      	ldr	r2, [pc, #592]	@ (8002e30 <HAL_GPIO_Init+0x2a8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d869      	bhi.n	8002cb6 <HAL_GPIO_Init+0x12e>
 8002be2:	4a94      	ldr	r2, [pc, #592]	@ (8002e34 <HAL_GPIO_Init+0x2ac>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d04c      	beq.n	8002c82 <HAL_GPIO_Init+0xfa>
 8002be8:	4a92      	ldr	r2, [pc, #584]	@ (8002e34 <HAL_GPIO_Init+0x2ac>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d863      	bhi.n	8002cb6 <HAL_GPIO_Init+0x12e>
 8002bee:	4a92      	ldr	r2, [pc, #584]	@ (8002e38 <HAL_GPIO_Init+0x2b0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d046      	beq.n	8002c82 <HAL_GPIO_Init+0xfa>
 8002bf4:	4a90      	ldr	r2, [pc, #576]	@ (8002e38 <HAL_GPIO_Init+0x2b0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d85d      	bhi.n	8002cb6 <HAL_GPIO_Init+0x12e>
 8002bfa:	2b12      	cmp	r3, #18
 8002bfc:	d82a      	bhi.n	8002c54 <HAL_GPIO_Init+0xcc>
 8002bfe:	2b12      	cmp	r3, #18
 8002c00:	d859      	bhi.n	8002cb6 <HAL_GPIO_Init+0x12e>
 8002c02:	a201      	add	r2, pc, #4	@ (adr r2, 8002c08 <HAL_GPIO_Init+0x80>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c83 	.word	0x08002c83
 8002c0c:	08002c5d 	.word	0x08002c5d
 8002c10:	08002c6f 	.word	0x08002c6f
 8002c14:	08002cb1 	.word	0x08002cb1
 8002c18:	08002cb7 	.word	0x08002cb7
 8002c1c:	08002cb7 	.word	0x08002cb7
 8002c20:	08002cb7 	.word	0x08002cb7
 8002c24:	08002cb7 	.word	0x08002cb7
 8002c28:	08002cb7 	.word	0x08002cb7
 8002c2c:	08002cb7 	.word	0x08002cb7
 8002c30:	08002cb7 	.word	0x08002cb7
 8002c34:	08002cb7 	.word	0x08002cb7
 8002c38:	08002cb7 	.word	0x08002cb7
 8002c3c:	08002cb7 	.word	0x08002cb7
 8002c40:	08002cb7 	.word	0x08002cb7
 8002c44:	08002cb7 	.word	0x08002cb7
 8002c48:	08002cb7 	.word	0x08002cb7
 8002c4c:	08002c65 	.word	0x08002c65
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	4a79      	ldr	r2, [pc, #484]	@ (8002e3c <HAL_GPIO_Init+0x2b4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c5a:	e02c      	b.n	8002cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	623b      	str	r3, [r7, #32]
          break;
 8002c62:	e029      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	623b      	str	r3, [r7, #32]
          break;
 8002c6c:	e024      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	3308      	adds	r3, #8
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e01f      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	623b      	str	r3, [r7, #32]
          break;
 8002c80:	e01a      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	623b      	str	r3, [r7, #32]
          break;
 8002c8e:	e013      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	611a      	str	r2, [r3, #16]
          break;
 8002ca2:	e009      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	615a      	str	r2, [r3, #20]
          break;
 8002cae:	e003      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e000      	b.n	8002cb8 <HAL_GPIO_Init+0x130>
          break;
 8002cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2bff      	cmp	r3, #255	@ 0xff
 8002cbc:	d801      	bhi.n	8002cc2 <HAL_GPIO_Init+0x13a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	e001      	b.n	8002cc6 <HAL_GPIO_Init+0x13e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2bff      	cmp	r3, #255	@ 0xff
 8002ccc:	d802      	bhi.n	8002cd4 <HAL_GPIO_Init+0x14c>
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	e002      	b.n	8002cda <HAL_GPIO_Init+0x152>
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	3b08      	subs	r3, #8
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	210f      	movs	r1, #15
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	401a      	ands	r2, r3
 8002cec:	6a39      	ldr	r1, [r7, #32]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80b1 	beq.w	8002e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d08:	4b4d      	ldr	r3, [pc, #308]	@ (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6193      	str	r3, [r2, #24]
 8002d14:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <HAL_GPIO_Init+0x2b8>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d20:	4a48      	ldr	r2, [pc, #288]	@ (8002e44 <HAL_GPIO_Init+0x2bc>)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a40      	ldr	r2, [pc, #256]	@ (8002e48 <HAL_GPIO_Init+0x2c0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_GPIO_Init+0x1ec>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e4c <HAL_GPIO_Init+0x2c4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00d      	beq.n	8002d70 <HAL_GPIO_Init+0x1e8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3e      	ldr	r2, [pc, #248]	@ (8002e50 <HAL_GPIO_Init+0x2c8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <HAL_GPIO_Init+0x1e4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e54 <HAL_GPIO_Init+0x2cc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_GPIO_Init+0x1e0>
 8002d64:	2303      	movs	r3, #3
 8002d66:	e006      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_Init+0x1ee>
 8002d74:	2300      	movs	r3, #0
 8002d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d86:	492f      	ldr	r1, [pc, #188]	@ (8002e44 <HAL_GPIO_Init+0x2bc>)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	492c      	ldr	r1, [pc, #176]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dae:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4928      	ldr	r1, [pc, #160]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dc8:	4b23      	ldr	r3, [pc, #140]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	4922      	ldr	r1, [pc, #136]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dd6:	4b20      	ldr	r3, [pc, #128]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	491e      	ldr	r1, [pc, #120]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4918      	ldr	r1, [pc, #96]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dfe:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	4914      	ldr	r1, [pc, #80]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d021      	beq.n	8002e5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e18:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	490e      	ldr	r1, [pc, #56]	@ (8002e58 <HAL_GPIO_Init+0x2d0>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	e021      	b.n	8002e6a <HAL_GPIO_Init+0x2e2>
 8002e26:	bf00      	nop
 8002e28:	10320000 	.word	0x10320000
 8002e2c:	10310000 	.word	0x10310000
 8002e30:	10220000 	.word	0x10220000
 8002e34:	10210000 	.word	0x10210000
 8002e38:	10120000 	.word	0x10120000
 8002e3c:	10110000 	.word	0x10110000
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40010800 	.word	0x40010800
 8002e4c:	40010c00 	.word	0x40010c00
 8002e50:	40011000 	.word	0x40011000
 8002e54:	40011400 	.word	0x40011400
 8002e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_GPIO_Init+0x304>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4909      	ldr	r1, [pc, #36]	@ (8002e8c <HAL_GPIO_Init+0x304>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f47f ae8e 	bne.w	8002b9c <HAL_GPIO_Init+0x14>
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	372c      	adds	r7, #44	@ 0x2c
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eac:	e003      	b.n	8002eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	041a      	lsls	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e304      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b92      	ldr	r3, [pc, #584]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eec:	4b8f      	ldr	r3, [pc, #572]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d112      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5e>
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f04:	d10b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06c      	beq.n	8002fec <HAL_RCC_OscConfig+0x12c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e2de      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x76>
 8002f28:	4b80      	ldr	r3, [pc, #512]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x98>
 8002f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7a      	ldr	r2, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b78      	ldr	r3, [pc, #480]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xbc>
 8002f62:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a71      	ldr	r2, [pc, #452]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6e      	ldr	r2, [pc, #440]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a67      	ldr	r2, [pc, #412]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fa4e 	bl	800143c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fa4a 	bl	800143c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e292      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe4>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fa3a 	bl	800143c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fa36 	bl	800143c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e27e      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b53      	ldr	r3, [pc, #332]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x10c>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x18c>
 8003012:	4b46      	ldr	r3, [pc, #280]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b43      	ldr	r3, [pc, #268]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x176>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e252      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3d      	ldr	r3, [pc, #244]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4939      	ldr	r1, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b36      	ldr	r3, [pc, #216]	@ (8003130 <HAL_RCC_OscConfig+0x270>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fe f9ef 	bl	800143c <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe f9eb 	bl	800143c <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e233      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4927      	ldr	r1, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b26      	ldr	r3, [pc, #152]	@ (8003130 <HAL_RCC_OscConfig+0x270>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe f9ce 	bl	800143c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe f9ca 	bl	800143c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e212      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d03a      	beq.n	8003144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d019      	beq.n	800310a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <HAL_RCC_OscConfig+0x274>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe f9ae 	bl	800143c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe f9aa 	bl	800143c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1f2      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003102:	2001      	movs	r0, #1
 8003104:	f000 fbca 	bl	800389c <RCC_Delay>
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310a:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_RCC_OscConfig+0x274>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fe f994 	bl	800143c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003116:	e00f      	b.n	8003138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe f990 	bl	800143c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d908      	bls.n	8003138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1d8      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	42420000 	.word	0x42420000
 8003134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	4b9b      	ldr	r3, [pc, #620]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e9      	bne.n	8003118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a6 	beq.w	800329e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b94      	ldr	r3, [pc, #592]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b91      	ldr	r3, [pc, #580]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4a90      	ldr	r2, [pc, #576]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316c:	61d3      	str	r3, [r2, #28]
 800316e:	4b8e      	ldr	r3, [pc, #568]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b8b      	ldr	r3, [pc, #556]	@ (80033ac <HAL_RCC_OscConfig+0x4ec>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d118      	bne.n	80031bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318a:	4b88      	ldr	r3, [pc, #544]	@ (80033ac <HAL_RCC_OscConfig+0x4ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a87      	ldr	r2, [pc, #540]	@ (80033ac <HAL_RCC_OscConfig+0x4ec>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fe f951 	bl	800143c <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fe f94d 	bl	800143c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	@ 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e195      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ac <HAL_RCC_OscConfig+0x4ec>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x312>
 80031c4:	4b78      	ldr	r3, [pc, #480]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a77      	ldr	r2, [pc, #476]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	e02d      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x334>
 80031da:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a72      	ldr	r2, [pc, #456]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6213      	str	r3, [r2, #32]
 80031e6:	4b70      	ldr	r3, [pc, #448]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a6f      	ldr	r2, [pc, #444]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	e01c      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x356>
 80031fc:	4b6a      	ldr	r3, [pc, #424]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4a69      	ldr	r2, [pc, #420]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6213      	str	r3, [r2, #32]
 8003208:	4b67      	ldr	r3, [pc, #412]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a66      	ldr	r2, [pc, #408]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 8003216:	4b64      	ldr	r3, [pc, #400]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a63      	ldr	r2, [pc, #396]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b61      	ldr	r3, [pc, #388]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a60      	ldr	r2, [pc, #384]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe f901 	bl	800143c <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe f8fd 	bl	800143c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e143      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b54      	ldr	r3, [pc, #336]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x37e>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe f8eb 	bl	800143c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe f8e7 	bl	800143c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e12d      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b49      	ldr	r3, [pc, #292]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b45      	ldr	r3, [pc, #276]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a44      	ldr	r2, [pc, #272]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 808c 	beq.w	80033c0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80032a8:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d10e      	bne.n	80032d4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80032b6:	4b3c      	ldr	r3, [pc, #240]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d108      	bne.n	80032d4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80032c2:	4b39      	ldr	r3, [pc, #228]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e103      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d14e      	bne.n	800337a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80032dc:	4b32      	ldr	r3, [pc, #200]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80032e8:	4b2f      	ldr	r3, [pc, #188]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0ef      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80032fc:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <HAL_RCC_OscConfig+0x4f0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe f89b 	bl	800143c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800330a:	f7fe f897 	bl	800143c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	@ 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0df      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800331c:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003328:	4b1f      	ldr	r3, [pc, #124]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003334:	491c      	ldr	r1, [pc, #112]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800333a:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4918      	ldr	r1, [pc, #96]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	4313      	orrs	r3, r2
 800334a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800334c:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <HAL_RCC_OscConfig+0x4f0>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe f873 	bl	800143c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800335a:	f7fe f86f 	bl	800143c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	@ 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0b7      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800336c:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x49a>
 8003378:	e022      	b.n	80033c0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800337a:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_RCC_OscConfig+0x4f0>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe f856 	bl	800143c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003392:	e00f      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003394:	f7fe f852 	bl	800143c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d908      	bls.n	80033b4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e09a      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80033b4:	4b4b      	ldr	r3, [pc, #300]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e9      	bne.n	8003394 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8088 	beq.w	80034da <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ca:	4b46      	ldr	r3, [pc, #280]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d068      	beq.n	80034a8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d14d      	bne.n	800347a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b42      	ldr	r3, [pc, #264]	@ (80034e8 <HAL_RCC_OscConfig+0x628>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe f82a 	bl	800143c <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fe f826 	bl	800143c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e06e      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003412:	d10f      	bne.n	8003434 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003414:	4b33      	ldr	r3, [pc, #204]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 8003416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4931      	ldr	r1, [pc, #196]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 800341e:	4313      	orrs	r3, r2
 8003420:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003422:	4b30      	ldr	r3, [pc, #192]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	f023 020f 	bic.w	r2, r3, #15
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	492d      	ldr	r1, [pc, #180]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 8003430:	4313      	orrs	r3, r2
 8003432:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	430b      	orrs	r3, r1
 8003446:	4927      	ldr	r1, [pc, #156]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800344c:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <HAL_RCC_OscConfig+0x628>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fd fff3 	bl	800143c <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd ffef 	bl	800143c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e037      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346c:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x59a>
 8003478:	e02f      	b.n	80034da <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCC_OscConfig+0x628>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd ffdc 	bl	800143c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fd ffd8 	bl	800143c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e020      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c8>
 80034a6:	e018      	b.n	80034da <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e013      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_OscConfig+0x624>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	42420060 	.word	0x42420060

080034ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0d0      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b6a      	ldr	r3, [pc, #424]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b67      	ldr	r3, [pc, #412]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 0207 	bic.w	r2, r3, #7
 8003516:	4965      	ldr	r1, [pc, #404]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b63      	ldr	r3, [pc, #396]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003548:	4b59      	ldr	r3, [pc, #356]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a58      	ldr	r2, [pc, #352]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003560:	4b53      	ldr	r3, [pc, #332]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800356a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b50      	ldr	r3, [pc, #320]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	494d      	ldr	r1, [pc, #308]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d040      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b47      	ldr	r3, [pc, #284]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b41      	ldr	r3, [pc, #260]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e073      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3d      	ldr	r3, [pc, #244]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b39      	ldr	r3, [pc, #228]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4936      	ldr	r1, [pc, #216]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd ff2e 	bl	800143c <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd ff2a 	bl	800143c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e053      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2d      	ldr	r3, [pc, #180]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d210      	bcs.n	800363c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 0207 	bic.w	r2, r3, #7
 8003622:	4922      	ldr	r1, [pc, #136]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e032      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4916      	ldr	r1, [pc, #88]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003666:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490e      	ldr	r1, [pc, #56]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367a:	f000 f821 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800367e:	4602      	mov	r2, r0
 8003680:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	490a      	ldr	r1, [pc, #40]	@ (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	5ccb      	ldrb	r3, [r1, r3]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	4a09      	ldr	r2, [pc, #36]	@ (80036b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003696:	4b09      	ldr	r3, [pc, #36]	@ (80036bc <HAL_RCC_ClockConfig+0x1d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fe8c 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08004dc8 	.word	0x08004dc8
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004

080036c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b08e      	sub	sp, #56	@ 0x38
 80036c6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x160>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d002      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x3a>
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d003      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	e089      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x164>)
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80036fe:	e089      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	0c9b      	lsrs	r3, r3, #18
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4b47      	ldr	r3, [pc, #284]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x168>)
 800370a:	5c9b      	ldrb	r3, [r3, r2]
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d072      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003718:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x160>)
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	4b42      	ldr	r3, [pc, #264]	@ (800382c <HAL_RCC_GetSysClockFreq+0x16c>)
 8003722:	5c9b      	ldrb	r3, [r3, r2]
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003726:	4b3e      	ldr	r3, [pc, #248]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x160>)
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d053      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003732:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x160>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	3301      	adds	r3, #1
 800373e:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003740:	4b37      	ldr	r3, [pc, #220]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x160>)
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3302      	adds	r3, #2
 800374c:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2200      	movs	r2, #0
 8003752:	469a      	mov	sl, r3
 8003754:	4693      	mov	fp, r2
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	2200      	movs	r2, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	617a      	str	r2, [r7, #20]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	fb03 f20b 	mul.w	r2, r3, fp
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fb0a f303 	mul.w	r3, sl, r3
 800376a:	4413      	add	r3, r2
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	fbaa 0102 	umull	r0, r1, sl, r2
 8003772:	440b      	add	r3, r1
 8003774:	4619      	mov	r1, r3
 8003776:	4b2b      	ldr	r3, [pc, #172]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x164>)
 8003778:	fb03 f201 	mul.w	r2, r3, r1
 800377c:	2300      	movs	r3, #0
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	4413      	add	r3, r2
 8003784:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x164>)
 8003786:	fba0 4502 	umull	r4, r5, r0, r2
 800378a:	442b      	add	r3, r5
 800378c:	461d      	mov	r5, r3
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	60fa      	str	r2, [r7, #12]
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	2200      	movs	r2, #0
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a2:	460b      	mov	r3, r1
 80037a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037a8:	4652      	mov	r2, sl
 80037aa:	fb02 f203 	mul.w	r2, r2, r3
 80037ae:	465b      	mov	r3, fp
 80037b0:	4684      	mov	ip, r0
 80037b2:	fb0c f303 	mul.w	r3, ip, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	4602      	mov	r2, r0
 80037ba:	4651      	mov	r1, sl
 80037bc:	fba2 8901 	umull	r8, r9, r2, r1
 80037c0:	444b      	add	r3, r9
 80037c2:	4699      	mov	r9, r3
 80037c4:	4642      	mov	r2, r8
 80037c6:	464b      	mov	r3, r9
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc fd2a 	bl	8000224 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4613      	mov	r3, r2
 80037d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d8:	e007      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x164>)
 80037de:	fb03 f202 	mul.w	r2, r3, r2
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80037ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x168>)
 80037ec:	7b5b      	ldrb	r3, [r3, #13]
 80037ee:	461a      	mov	r2, r3
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fc:	e004      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	4a0b      	ldr	r2, [pc, #44]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x170>)
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8003808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x174>)
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003816:	4618      	mov	r0, r3
 8003818:	3738      	adds	r7, #56	@ 0x38
 800381a:	46bd      	mov	sp, r7
 800381c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	017d7840 	.word	0x017d7840
 8003828:	08004de0 	.word	0x08004de0
 800382c:	08004df0 	.word	0x08004df0
 8003830:	003d0900 	.word	0x003d0900
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b02      	ldr	r3, [pc, #8]	@ (8003848 <HAL_RCC_GetHCLKFreq+0x10>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	20000000 	.word	0x20000000

0800384c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003850:	f7ff fff2 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	@ (8003870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	08004dd8 	.word	0x08004dd8

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003878:	f7ff ffde 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	@ (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	08004dd8 	.word	0x08004dd8

0800389c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038a4:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <RCC_Delay+0x34>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <RCC_Delay+0x38>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0a5b      	lsrs	r3, r3, #9
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038b8:	bf00      	nop
  }
  while (Delay --);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <RCC_Delay+0x1c>
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000000 	.word	0x20000000
 80038d4:	10624dd3 	.word	0x10624dd3

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d07d      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fc:	4b8b      	ldr	r3, [pc, #556]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b88      	ldr	r3, [pc, #544]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4a87      	ldr	r2, [pc, #540]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003912:	61d3      	str	r3, [r2, #28]
 8003914:	4b85      	ldr	r3, [pc, #532]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003920:	2301      	movs	r3, #1
 8003922:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	4b82      	ldr	r3, [pc, #520]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d118      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003930:	4b7f      	ldr	r3, [pc, #508]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a7e      	ldr	r2, [pc, #504]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393c:	f7fd fd7e 	bl	800143c <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	e008      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fd fd7a 	bl	800143c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0e5      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b76      	ldr	r3, [pc, #472]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003962:	4b72      	ldr	r3, [pc, #456]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d02e      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	d027      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003980:	4b6a      	ldr	r3, [pc, #424]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003988:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800398a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003990:	4b68      	ldr	r3, [pc, #416]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003996:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d014      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fd fd49 	bl	800143c <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd fd45 	bl	800143c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0ae      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	4b59      	ldr	r3, [pc, #356]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ee      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d0:	4b56      	ldr	r3, [pc, #344]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4953      	ldr	r1, [pc, #332]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039e2:	7efb      	ldrb	r3, [r7, #27]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e8:	4b50      	ldr	r3, [pc, #320]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4a4f      	ldr	r2, [pc, #316]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a00:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4947      	ldr	r1, [pc, #284]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a1e:	4b43      	ldr	r3, [pc, #268]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4940      	ldr	r1, [pc, #256]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	4938      	ldr	r1, [pc, #224]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003a4e:	4b37      	ldr	r3, [pc, #220]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003a5a:	4b34      	ldr	r3, [pc, #208]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d148      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003a70:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d138      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003a88:	4b28      	ldr	r3, [pc, #160]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e042      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003a9c:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	4920      	ldr	r1, [pc, #128]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003aae:	4b1f      	ldr	r3, [pc, #124]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	491c      	ldr	r1, [pc, #112]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fcb9 	bl	800143c <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ace:	f7fd fcb5 	bl	800143c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b64      	cmp	r3, #100	@ 0x64
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e020      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae0:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003aec:	e009      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003aee:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d001      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00f      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0e:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
 8003b34:	42420440 	.word	0x42420440
 8003b38:	42420070 	.word	0x42420070

08003b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e076      	b.n	8003c3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5e:	d009      	beq.n	8003b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
 8003b66:	e005      	b.n	8003b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd f936 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf8:	ea42 0103 	orr.w	r1, r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	0c1a      	lsrs	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f002 0204 	and.w	r2, r2, #4
 8003c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10e      	bne.n	8003c84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
    return;
 8003c82:	e0b7      	b.n	8003df4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_SPI_IRQHandler+0x5e>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
    return;
 8003ca0:	e0a8      	b.n	8003df4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_SPI_IRQHandler+0x74>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 809e 	beq.w	8003df4 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8098 	beq.w	8003df4 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d023      	beq.n	8003d16 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d011      	beq.n	8003cfe <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	e00b      	b.n	8003d16 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	693b      	ldr	r3, [r7, #16]
        return;
 8003d14:	e06e      	b.n	8003df4 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d014      	beq.n	8003d4a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d04f      	beq.n	8003df2 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_SPI_IRQHandler+0x13a>
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d034      	beq.n	8003de8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0203 	bic.w	r2, r2, #3
 8003d8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d011      	beq.n	8003dba <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	4a18      	ldr	r2, [pc, #96]	@ (8003dfc <HAL_SPI_IRQHandler+0x1b8>)
 8003d9c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fbac 	bl	8002500 <HAL_DMA_Abort_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003dfc <HAL_SPI_IRQHandler+0x1b8>)
 8003dc8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fb96 	bl	8002500 <HAL_DMA_Abort_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003de6:	e003      	b.n	8003df0 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f809 	bl	8003e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003dee:	e000      	b.n	8003df2 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8003df0:	bf00      	nop
    return;
 8003df2:	bf00      	nop
  }
}
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	08003e13 	.word	0x08003e13

08003e00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff ffe7 	bl	8003e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e041      	b.n	8003ed0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd f99f 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f000 f94b 	bl	8004114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d020      	beq.n	8003f3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01b      	beq.n	8003f3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0202 	mvn.w	r2, #2
 8003f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8da 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8cd 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8dc 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d020      	beq.n	8003f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0204 	mvn.w	r2, #4
 8003f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8b4 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8a7 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8b6 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d020      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0208 	mvn.w	r2, #8
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f88e 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f881 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f890 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d020      	beq.n	8004020 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01b      	beq.n	8004020 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0210 	mvn.w	r2, #16
 8003ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f868 	bl	80040dc <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f85b 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f86a 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0201 	mvn.w	r2, #1
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f83a 	bl	80040b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f93d 	bl	80042e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f83a 	bl	8004100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0220 	mvn.w	r2, #32
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f910 	bl	80042d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
	...

08004114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a33      	ldr	r2, [pc, #204]	@ (80041f4 <TIM_Base_SetConfig+0xe0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00f      	beq.n	800414c <TIM_Base_SetConfig+0x38>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004132:	d00b      	beq.n	800414c <TIM_Base_SetConfig+0x38>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a30      	ldr	r2, [pc, #192]	@ (80041f8 <TIM_Base_SetConfig+0xe4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <TIM_Base_SetConfig+0x38>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a2f      	ldr	r2, [pc, #188]	@ (80041fc <TIM_Base_SetConfig+0xe8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0x38>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2e      	ldr	r2, [pc, #184]	@ (8004200 <TIM_Base_SetConfig+0xec>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d108      	bne.n	800415e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a24      	ldr	r2, [pc, #144]	@ (80041f4 <TIM_Base_SetConfig+0xe0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0x72>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0x72>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <TIM_Base_SetConfig+0xe4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0x72>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a20      	ldr	r2, [pc, #128]	@ (80041fc <TIM_Base_SetConfig+0xe8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0x72>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1f      	ldr	r2, [pc, #124]	@ (8004200 <TIM_Base_SetConfig+0xec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a0d      	ldr	r2, [pc, #52]	@ (80041f4 <TIM_Base_SetConfig+0xe0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d103      	bne.n	80041cc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]
  }
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00

08004204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004218:	2302      	movs	r3, #2
 800421a:	e04b      	b.n	80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a19      	ldr	r2, [pc, #100]	@ (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004268:	d00e      	beq.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a13      	ldr	r2, [pc, #76]	@ (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10c      	bne.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00

080042d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e042      	b.n	800438c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc ff92 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	@ 0x24
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fc7f 	bl	8004c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800434c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800435c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800436c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0ba      	sub	sp, #232	@ 0xe8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_UART_IRQHandler+0x66>
 80043e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fb63 	bl	8004abe <UART_Receive_IT>
      return;
 80043f8:	e25b      	b.n	80048b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80de 	beq.w	80045c0 <HAL_UART_IRQHandler+0x22c>
 8004404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004414:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80d1 	beq.w	80045c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_UART_IRQHandler+0xae>
 800442a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	f043 0201 	orr.w	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xd2>
 800444e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0202 	orr.w	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xf6>
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d011      	beq.n	80044ba <HAL_UART_IRQHandler+0x126>
 8004496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	f043 0208 	orr.w	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 81f2 	beq.w	80048a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_UART_IRQHandler+0x14e>
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 faee 	bl	8004abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_UART_IRQHandler+0x17a>
 8004506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d04f      	beq.n	80045ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9f8 	bl	8004904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d041      	beq.n	80045a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800453c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3314      	adds	r3, #20
 800454a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800454e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800455a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1d9      	bne.n	8004522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d013      	beq.n	800459e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457a:	4a7e      	ldr	r2, [pc, #504]	@ (8004774 <HAL_UART_IRQHandler+0x3e0>)
 800457c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd ffbc 	bl	8002500 <HAL_DMA_Abort_IT>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004598:	4610      	mov	r0, r2
 800459a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e00e      	b.n	80045bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f99c 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	e00a      	b.n	80045bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f998 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	e006      	b.n	80045bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f994 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045ba:	e175      	b.n	80048a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	bf00      	nop
    return;
 80045be:	e173      	b.n	80048a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	f040 814f 	bne.w	8004868 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8148 	beq.w	8004868 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8141 	beq.w	8004868 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80b6 	beq.w	8004778 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8145 	beq.w	80048ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800462a:	429a      	cmp	r2, r3
 800462c:	f080 813e 	bcs.w	80048ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004636:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b20      	cmp	r3, #32
 8004640:	f000 8088 	beq.w	8004754 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800465a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800465e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004662:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004670:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800467c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1d9      	bne.n	8004644 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3314      	adds	r3, #20
 8004696:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e1      	bne.n	8004690 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e3      	bne.n	80046cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004724:	f023 0310 	bic.w	r3, r3, #16
 8004728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004736:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004738:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800473c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e3      	bne.n	8004712 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474e:	4618      	mov	r0, r3
 8004750:	f7fd fe9a 	bl	8002488 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004762:	b29b      	uxth	r3, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8bf 	bl	80048ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004770:	e09c      	b.n	80048ac <HAL_UART_IRQHandler+0x518>
 8004772:	bf00      	nop
 8004774:	080049c9 	.word	0x080049c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004780:	b29b      	uxth	r3, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 808e 	beq.w	80048b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8089 	beq.w	80048b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80047c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e3      	bne.n	800479e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	623b      	str	r3, [r7, #32]
   return(result);
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3314      	adds	r3, #20
 80047f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e3      	bne.n	80047d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	60fb      	str	r3, [r7, #12]
   return(result);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0310 	bic.w	r3, r3, #16
 8004832:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004840:	61fa      	str	r2, [r7, #28]
 8004842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	617b      	str	r3, [r7, #20]
   return(result);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e3      	bne.n	800481c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800485a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f844 	bl	80048ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004866:	e023      	b.n	80048b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <HAL_UART_IRQHandler+0x4f4>
 8004874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f8b5 	bl	80049f0 <UART_Transmit_IT>
    return;
 8004886:	e014      	b.n	80048b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00e      	beq.n	80048b2 <HAL_UART_IRQHandler+0x51e>
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8f4 	bl	8004a8e <UART_EndTransmit_IT>
    return;
 80048a6:	e004      	b.n	80048b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80048a8:	bf00      	nop
 80048aa:	e002      	b.n	80048b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80048b0:	bf00      	nop
  }
}
 80048b2:	37e8      	adds	r7, #232	@ 0xe8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b095      	sub	sp, #84	@ 0x54
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492c:	643a      	str	r2, [r7, #64]	@ 0x40
 800492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3314      	adds	r3, #20
 800495e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e5      	bne.n	8004940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	2b01      	cmp	r3, #1
 800497a:	d119      	bne.n	80049b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	60bb      	str	r3, [r7, #8]
   return(result);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f023 0310 	bic.w	r3, r3, #16
 8004992:	647b      	str	r3, [r7, #68]	@ 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800499c:	61ba      	str	r2, [r7, #24]
 800499e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6979      	ldr	r1, [r7, #20]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	613b      	str	r3, [r7, #16]
   return(result);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049be:	bf00      	nop
 80049c0:	3754      	adds	r7, #84	@ 0x54
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff7a 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b21      	cmp	r3, #33	@ 0x21
 8004a02:	d13e      	bne.n	8004a82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0c:	d114      	bne.n	8004a38 <UART_Transmit_IT+0x48>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d110      	bne.n	8004a38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]
 8004a36:	e008      	b.n	8004a4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6211      	str	r1, [r2, #32]
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4619      	mov	r1, r3
 8004a58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ff02 	bl	80048b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b08c      	sub	sp, #48	@ 0x30
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b22      	cmp	r3, #34	@ 0x22
 8004ad0:	f040 80ae 	bne.w	8004c30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004adc:	d117      	bne.n	8004b0e <UART_Receive_IT+0x50>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	1c9a      	adds	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b0c:	e026      	b.n	8004b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b20:	d007      	beq.n	8004b32 <UART_Receive_IT+0x74>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <UART_Receive_IT+0x82>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e008      	b.n	8004b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d15d      	bne.n	8004c2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0220 	bic.w	r2, r2, #32
 8004b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d135      	bne.n	8004c22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	613b      	str	r3, [r7, #16]
   return(result);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	623a      	str	r2, [r7, #32]
 8004bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	69f9      	ldr	r1, [r7, #28]
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d10a      	bne.n	8004c14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fe67 	bl	80048ee <HAL_UARTEx_RxEventCallback>
 8004c20:	e002      	b.n	8004c28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fe51 	bl	80048ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e002      	b.n	8004c32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3730      	adds	r7, #48	@ 0x30
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c76:	f023 030c 	bic.w	r3, r3, #12
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d50 <UART_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fe fde6 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	e002      	b.n	8004cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe fdce 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8004cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	4a22      	ldr	r2, [pc, #136]	@ (8004d54 <UART_SetConfig+0x118>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	0119      	lsls	r1, r3, #4
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <UART_SetConfig+0x118>)
 8004cea:	fba3 0302 	umull	r0, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2064      	movs	r0, #100	@ 0x64
 8004cf2:	fb00 f303 	mul.w	r3, r0, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	@ 0x32
 8004cfc:	4a15      	ldr	r2, [pc, #84]	@ (8004d54 <UART_SetConfig+0x118>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d08:	4419      	add	r1, r3
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <UART_SetConfig+0x118>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2064      	movs	r0, #100	@ 0x64
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	4a07      	ldr	r2, [pc, #28]	@ (8004d54 <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	440a      	add	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40013800 	.word	0x40013800
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <memset>:
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4402      	add	r2, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <__libc_init_array>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	4d0c      	ldr	r5, [pc, #48]	@ (8004da0 <__libc_init_array+0x38>)
 8004d6e:	4c0d      	ldr	r4, [pc, #52]	@ (8004da4 <__libc_init_array+0x3c>)
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	42a6      	cmp	r6, r4
 8004d76:	d109      	bne.n	8004d8c <__libc_init_array+0x24>
 8004d78:	f000 f81a 	bl	8004db0 <_init>
 8004d7c:	2600      	movs	r6, #0
 8004d7e:	4d0a      	ldr	r5, [pc, #40]	@ (8004da8 <__libc_init_array+0x40>)
 8004d80:	4c0a      	ldr	r4, [pc, #40]	@ (8004dac <__libc_init_array+0x44>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	42a6      	cmp	r6, r4
 8004d88:	d105      	bne.n	8004d96 <__libc_init_array+0x2e>
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d90:	4798      	blx	r3
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7ee      	b.n	8004d74 <__libc_init_array+0xc>
 8004d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9a:	4798      	blx	r3
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	e7f2      	b.n	8004d86 <__libc_init_array+0x1e>
 8004da0:	08004e08 	.word	0x08004e08
 8004da4:	08004e08 	.word	0x08004e08
 8004da8:	08004e08 	.word	0x08004e08
 8004dac:	08004e0c 	.word	0x08004e0c

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
