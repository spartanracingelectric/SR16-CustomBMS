
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d4  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080066bc  080066bc  000076bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b24  08006b24  000080c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b2c  08006b2c  000080c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b2c  08006b2c  00007b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006b34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200000c8  08006bfc  000080c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08006bfc  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b86  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003220  00000000  00000000  00019c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0001ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd3  00000000  00000000  0001e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211ed  00000000  00000000  0001ee4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171df  00000000  00000000  00040038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd2ee  00000000  00000000  00057217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  00114548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001193a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c8 	.word	0x200000c8
 8000204:	00000000 	.word	0x00000000
 8000208:	080066a4 	.word	0x080066a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000cc 	.word	0x200000cc
 8000224:	080066a4 	.word	0x080066a4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	@ 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	@ 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	@ 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b968 	b.w	8001384 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9d08      	ldr	r5, [sp, #32]
 80010d2:	460c      	mov	r4, r1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d14e      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010d8:	4694      	mov	ip, r2
 80010da:	458c      	cmp	ip, r1
 80010dc:	4686      	mov	lr, r0
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	d962      	bls.n	80011aa <__udivmoddi4+0xde>
 80010e4:	b14a      	cbz	r2, 80010fa <__udivmoddi4+0x2e>
 80010e6:	f1c2 0320 	rsb	r3, r2, #32
 80010ea:	4091      	lsls	r1, r2
 80010ec:	fa20 f303 	lsr.w	r3, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	4319      	orrs	r1, r3
 80010f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8001102:	fb07 1114 	mls	r1, r7, r4, r1
 8001106:	fa1f f68c 	uxth.w	r6, ip
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001112:	fb04 f106 	mul.w	r1, r4, r6
 8001116:	4299      	cmp	r1, r3
 8001118:	d90a      	bls.n	8001130 <__udivmoddi4+0x64>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001122:	f080 8110 	bcs.w	8001346 <__udivmoddi4+0x27a>
 8001126:	4299      	cmp	r1, r3
 8001128:	f240 810d 	bls.w	8001346 <__udivmoddi4+0x27a>
 800112c:	3c02      	subs	r4, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a59      	subs	r1, r3, r1
 8001132:	fbb1 f0f7 	udiv	r0, r1, r7
 8001136:	fb07 1110 	mls	r1, r7, r0, r1
 800113a:	fb00 f606 	mul.w	r6, r0, r6
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	429e      	cmp	r6, r3
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001152:	f080 80fa 	bcs.w	800134a <__udivmoddi4+0x27e>
 8001156:	429e      	cmp	r6, r3
 8001158:	f240 80f7 	bls.w	800134a <__udivmoddi4+0x27e>
 800115c:	4463      	add	r3, ip
 800115e:	3802      	subs	r0, #2
 8001160:	2100      	movs	r1, #0
 8001162:	1b9b      	subs	r3, r3, r6
 8001164:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001168:	b11d      	cbz	r5, 8001172 <__udivmoddi4+0xa6>
 800116a:	40d3      	lsrs	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	e9c5 3200 	strd	r3, r2, [r5]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d905      	bls.n	8001186 <__udivmoddi4+0xba>
 800117a:	b10d      	cbz	r5, 8001180 <__udivmoddi4+0xb4>
 800117c:	e9c5 0100 	strd	r0, r1, [r5]
 8001180:	2100      	movs	r1, #0
 8001182:	4608      	mov	r0, r1
 8001184:	e7f5      	b.n	8001172 <__udivmoddi4+0xa6>
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d146      	bne.n	800121c <__udivmoddi4+0x150>
 800118e:	42a3      	cmp	r3, r4
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xcc>
 8001192:	4290      	cmp	r0, r2
 8001194:	f0c0 80ee 	bcc.w	8001374 <__udivmoddi4+0x2a8>
 8001198:	1a86      	subs	r6, r0, r2
 800119a:	eb64 0303 	sbc.w	r3, r4, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d0e6      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011a4:	e9c5 6300 	strd	r6, r3, [r5]
 80011a8:	e7e3      	b.n	8001172 <__udivmoddi4+0xa6>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	f040 808f 	bne.w	80012ce <__udivmoddi4+0x202>
 80011b0:	eba1 040c 	sub.w	r4, r1, ip
 80011b4:	2101      	movs	r1, #1
 80011b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ba:	fa1f f78c 	uxth.w	r7, ip
 80011be:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c2:	fb08 4416 	mls	r4, r8, r6, r4
 80011c6:	fb07 f006 	mul.w	r0, r7, r6
 80011ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d908      	bls.n	80011e8 <__udivmoddi4+0x11c>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f106 34ff 	add.w	r4, r6, #4294967295
 80011de:	d202      	bcs.n	80011e6 <__udivmoddi4+0x11a>
 80011e0:	4298      	cmp	r0, r3
 80011e2:	f200 80cb 	bhi.w	800137c <__udivmoddi4+0x2b0>
 80011e6:	4626      	mov	r6, r4
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80011ee:	fb08 4410 	mls	r4, r8, r0, r4
 80011f2:	fb00 f707 	mul.w	r7, r0, r7
 80011f6:	fa1f f38e 	uxth.w	r3, lr
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	429f      	cmp	r7, r3
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x148>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 34ff 	add.w	r4, r0, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x146>
 800120c:	429f      	cmp	r7, r3
 800120e:	f200 80ae 	bhi.w	800136e <__udivmoddi4+0x2a2>
 8001212:	4620      	mov	r0, r4
 8001214:	1bdb      	subs	r3, r3, r7
 8001216:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121a:	e7a5      	b.n	8001168 <__udivmoddi4+0x9c>
 800121c:	f1c1 0720 	rsb	r7, r1, #32
 8001220:	408b      	lsls	r3, r1
 8001222:	fa22 fc07 	lsr.w	ip, r2, r7
 8001226:	ea4c 0c03 	orr.w	ip, ip, r3
 800122a:	fa24 f607 	lsr.w	r6, r4, r7
 800122e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001232:	fbb6 f8f9 	udiv	r8, r6, r9
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	fb09 6618 	mls	r6, r9, r8, r6
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	408c      	lsls	r4, r1
 8001244:	fa00 fa01 	lsl.w	sl, r0, r1
 8001248:	fb08 f00e 	mul.w	r0, r8, lr
 800124c:	431c      	orrs	r4, r3
 800124e:	0c23      	lsrs	r3, r4, #16
 8001250:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001254:	4298      	cmp	r0, r3
 8001256:	fa02 f201 	lsl.w	r2, r2, r1
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x1a6>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f108 36ff 	add.w	r6, r8, #4294967295
 8001264:	f080 8081 	bcs.w	800136a <__udivmoddi4+0x29e>
 8001268:	4298      	cmp	r0, r3
 800126a:	d97e      	bls.n	800136a <__udivmoddi4+0x29e>
 800126c:	f1a8 0802 	sub.w	r8, r8, #2
 8001270:	4463      	add	r3, ip
 8001272:	1a1e      	subs	r6, r3, r0
 8001274:	fbb6 f3f9 	udiv	r3, r6, r9
 8001278:	fb09 6613 	mls	r6, r9, r3, r6
 800127c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001286:	45a6      	cmp	lr, r4
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x1d0>
 800128a:	eb1c 0404 	adds.w	r4, ip, r4
 800128e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001292:	d266      	bcs.n	8001362 <__udivmoddi4+0x296>
 8001294:	45a6      	cmp	lr, r4
 8001296:	d964      	bls.n	8001362 <__udivmoddi4+0x296>
 8001298:	3b02      	subs	r3, #2
 800129a:	4464      	add	r4, ip
 800129c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a0:	fba0 8302 	umull	r8, r3, r0, r2
 80012a4:	eba4 040e 	sub.w	r4, r4, lr
 80012a8:	429c      	cmp	r4, r3
 80012aa:	46c6      	mov	lr, r8
 80012ac:	461e      	mov	r6, r3
 80012ae:	d350      	bcc.n	8001352 <__udivmoddi4+0x286>
 80012b0:	d04d      	beq.n	800134e <__udivmoddi4+0x282>
 80012b2:	b155      	cbz	r5, 80012ca <__udivmoddi4+0x1fe>
 80012b4:	ebba 030e 	subs.w	r3, sl, lr
 80012b8:	eb64 0406 	sbc.w	r4, r4, r6
 80012bc:	fa04 f707 	lsl.w	r7, r4, r7
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	40cc      	lsrs	r4, r1
 80012c6:	e9c5 7400 	strd	r7, r4, [r5]
 80012ca:	2100      	movs	r1, #0
 80012cc:	e751      	b.n	8001172 <__udivmoddi4+0xa6>
 80012ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d2:	f1c2 0320 	rsb	r3, r2, #32
 80012d6:	40d9      	lsrs	r1, r3
 80012d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012dc:	fa20 f303 	lsr.w	r3, r0, r3
 80012e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e8:	fb08 1110 	mls	r1, r8, r0, r1
 80012ec:	4094      	lsls	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	0c23      	lsrs	r3, r4, #16
 80012f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012fa:	fb00 f107 	mul.w	r1, r0, r7
 80012fe:	4299      	cmp	r1, r3
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x248>
 8001302:	eb1c 0303 	adds.w	r3, ip, r3
 8001306:	f100 36ff 	add.w	r6, r0, #4294967295
 800130a:	d22c      	bcs.n	8001366 <__udivmoddi4+0x29a>
 800130c:	4299      	cmp	r1, r3
 800130e:	d92a      	bls.n	8001366 <__udivmoddi4+0x29a>
 8001310:	3802      	subs	r0, #2
 8001312:	4463      	add	r3, ip
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	fbb3 f1f8 	udiv	r1, r3, r8
 800131a:	fb08 3311 	mls	r3, r8, r1, r3
 800131e:	b2a4      	uxth	r4, r4
 8001320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001324:	fb01 f307 	mul.w	r3, r1, r7
 8001328:	42a3      	cmp	r3, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x272>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f101 36ff 	add.w	r6, r1, #4294967295
 8001334:	d213      	bcs.n	800135e <__udivmoddi4+0x292>
 8001336:	42a3      	cmp	r3, r4
 8001338:	d911      	bls.n	800135e <__udivmoddi4+0x292>
 800133a:	3902      	subs	r1, #2
 800133c:	4464      	add	r4, ip
 800133e:	1ae4      	subs	r4, r4, r3
 8001340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001344:	e73b      	b.n	80011be <__udivmoddi4+0xf2>
 8001346:	4604      	mov	r4, r0
 8001348:	e6f2      	b.n	8001130 <__udivmoddi4+0x64>
 800134a:	4608      	mov	r0, r1
 800134c:	e708      	b.n	8001160 <__udivmoddi4+0x94>
 800134e:	45c2      	cmp	sl, r8
 8001350:	d2af      	bcs.n	80012b2 <__udivmoddi4+0x1e6>
 8001352:	ebb8 0e02 	subs.w	lr, r8, r2
 8001356:	eb63 060c 	sbc.w	r6, r3, ip
 800135a:	3801      	subs	r0, #1
 800135c:	e7a9      	b.n	80012b2 <__udivmoddi4+0x1e6>
 800135e:	4631      	mov	r1, r6
 8001360:	e7ed      	b.n	800133e <__udivmoddi4+0x272>
 8001362:	4603      	mov	r3, r0
 8001364:	e79a      	b.n	800129c <__udivmoddi4+0x1d0>
 8001366:	4630      	mov	r0, r6
 8001368:	e7d4      	b.n	8001314 <__udivmoddi4+0x248>
 800136a:	46b0      	mov	r8, r6
 800136c:	e781      	b.n	8001272 <__udivmoddi4+0x1a6>
 800136e:	4463      	add	r3, ip
 8001370:	3802      	subs	r0, #2
 8001372:	e74f      	b.n	8001214 <__udivmoddi4+0x148>
 8001374:	4606      	mov	r6, r0
 8001376:	4623      	mov	r3, r4
 8001378:	4608      	mov	r0, r1
 800137a:	e711      	b.n	80011a0 <__udivmoddi4+0xd4>
 800137c:	3e02      	subs	r6, #2
 800137e:	4463      	add	r3, ip
 8001380:	e732      	b.n	80011e8 <__udivmoddi4+0x11c>
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800138e:	23ff      	movs	r3, #255	@ 0xff
 8001390:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e00c      	b.n	80013b2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 8001398:	f001 fd1e 	bl	8002dd8 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 800139c:	1cf9      	adds	r1, r7, #3
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Wakeup_Idle+0x3c>)
 80013a4:	f004 f836 	bl	8005414 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013a8:	f001 fd0a 	bl	8002dc0 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	ddef      	ble.n	8001398 <Wakeup_Idle+0x10>
	}
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001b8 	.word	0x200001b8

080013c8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e00c      	b.n	80013ee <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
 80013d4:	f001 fd00 	bl	8002dd8 <LTC_nCS_Low>
		HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 febf 	bl	800315c <HAL_Delay>
		LTC_nCS_High();
 80013de:	f001 fcef 	bl	8002dc0 <LTC_nCS_High>
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 feba 	bl	800315c <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	ddef      	ble.n	80013d4 <Wakeup_Sleep+0xc>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b089      	sub	sp, #36	@ 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	466b      	mov	r3, sp
 800140c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001416:	7f3b      	ldrb	r3, [r7, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	7f3b      	ldrb	r3, [r7, #28]
 800141e:	2200      	movs	r2, #0
 8001420:	4698      	mov	r8, r3
 8001422:	4691      	mov	r9, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	2200      	movs	r2, #0
 800143c:	461c      	mov	r4, r3
 800143e:	4615      	mov	r5, r2
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	00eb      	lsls	r3, r5, #3
 800144a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144e:	00e2      	lsls	r2, r4, #3
 8001450:	7f3b      	ldrb	r3, [r7, #28]
 8001452:	3307      	adds	r3, #7
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	ebad 0d03 	sub.w	sp, sp, r3
 800145c:	466b      	mov	r3, sp
 800145e:	3300      	adds	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001462:	2300      	movs	r3, #0
 8001464:	77bb      	strb	r3, [r7, #30]
 8001466:	e074      	b.n	8001552 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001468:	7fbb      	ldrb	r3, [r7, #30]
 800146a:	4a3f      	ldr	r2, [pc, #252]	@ (8001568 <Read_Cell_Volt+0x168>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	2002      	movs	r0, #2
 800148c:	f000 faa2 	bl	80019d4 <LTC_Pec15_Calc>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014a4:	f7ff ff70 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014a8:	f001 fc96 	bl	8002dd8 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	2364      	movs	r3, #100	@ 0x64
 80014b2:	2204      	movs	r2, #4
 80014b4:	482d      	ldr	r0, [pc, #180]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014b6:	f003 ffad 	bl	8005414 <HAL_SPI_Transmit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014be:	7c7b      	ldrb	r3, [r7, #17]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014c4:	7c7b      	ldrb	r3, [r7, #17]
 80014c6:	2201      	movs	r2, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2364      	movs	r3, #100	@ 0x64
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	4822      	ldr	r0, [pc, #136]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014e2:	f004 f8db 	bl	800569c <HAL_SPI_Receive>
 80014e6:	4603      	mov	r3, r0
 80014e8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014ea:	7c7b      	ldrb	r3, [r7, #17]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80014f0:	7c7b      	ldrb	r3, [r7, #17]
 80014f2:	3304      	adds	r3, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001506:	f001 fc5b 	bl	8002dc0 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800150a:	2300      	movs	r3, #0
 800150c:	777b      	strb	r3, [r7, #29]
 800150e:	e01a      	b.n	8001546 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800151a:	7f7a      	ldrb	r2, [r7, #29]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001526:	7fba      	ldrb	r2, [r7, #30]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
			memcpy(
 8001536:	2206      	movs	r2, #6
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f004 feb8 	bl	80062b0 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001540:	7f7b      	ldrb	r3, [r7, #29]
 8001542:	3301      	adds	r3, #1
 8001544:	777b      	strb	r3, [r7, #29]
 8001546:	7f7b      	ldrb	r3, [r7, #29]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d9e1      	bls.n	8001510 <Read_Cell_Volt+0x110>
			i++) {
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	3301      	adds	r3, #1
 8001550:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001552:	7fbb      	ldrb	r3, [r7, #30]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d987      	bls.n	8001468 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	46b5      	mov	sp, r6
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	@ 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001566:	bf00      	nop
 8001568:	080066bc 	.word	0x080066bc
 800156c:	200001b8 	.word	0x200001b8

08001570 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800157c:	2306      	movs	r3, #6
 800157e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3304      	adds	r3, #4
 8001588:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800158c:	2207      	movs	r2, #7
 800158e:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001592:	2221      	movs	r2, #33	@ 0x21
 8001594:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 8001596:	492b      	ldr	r1, [pc, #172]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001598:	2002      	movs	r0, #2
 800159a:	f000 fa1b 	bl	80019d4 <LTC_Pec15_Calc>
 800159e:	4603      	mov	r3, r0
 80015a0:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015a2:	8a3b      	ldrh	r3, [r7, #16]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015ac:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015b4:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015b6:	2304      	movs	r3, #4
 80015b8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	75bb      	strb	r3, [r7, #22]
 80015be:	e02d      	b.n	800161c <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	757b      	strb	r3, [r7, #21]
 80015c4:	e00c      	b.n	80015e0 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	441a      	add	r2, r3
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015d2:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	3301      	adds	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015da:	7d7b      	ldrb	r3, [r7, #21]
 80015dc:	3301      	adds	r3, #1
 80015de:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015e0:	7d7a      	ldrb	r2, [r7, #21]
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3ee      	bcc.n	80015c6 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015e8:	7d3b      	ldrb	r3, [r7, #20]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f9f1 	bl	80019d4 <LTC_Pec15_Calc>
 80015f2:	4603      	mov	r3, r0
 80015f4:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001602:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	3301      	adds	r3, #1
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	b2d1      	uxtb	r1, r2
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800160e:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3302      	adds	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	3b01      	subs	r3, #1
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ce      	bne.n	80015c0 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001622:	f7ff feb1 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001626:	f001 fbd7 	bl	8002dd8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 800162a:	7cfb      	ldrb	r3, [r7, #19]
 800162c:	b29a      	uxth	r2, r3
 800162e:	2364      	movs	r3, #100	@ 0x64
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <LTC_WRCOMM+0xd8>)
 8001634:	f003 feee 	bl	8005414 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001638:	f001 fbc2 	bl	8002dc0 <LTC_nCS_High>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000e4 	.word	0x200000e4
 8001648:	200001b8 	.word	0x200001b8

0800164c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001656:	2307      	movs	r3, #7
 8001658:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800165a:	2323      	movs	r3, #35	@ 0x23
 800165c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	2002      	movs	r0, #2
 8001666:	f000 f9b5 	bl	80019d4 <LTC_Pec15_Calc>
 800166a:	4603      	mov	r3, r0
 800166c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800166e:	8a7b      	ldrh	r3, [r7, #18]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800167e:	f7ff fe83 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001682:	f001 fba9 	bl	8002dd8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	2364      	movs	r3, #100	@ 0x64
 800168c:	2204      	movs	r2, #4
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <LTC_STCOMM+0x7c>)
 8001690:	f003 fec0 	bl	8005414 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e008      	b.n	80016ac <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	21ff      	movs	r1, #255	@ 0xff
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <LTC_STCOMM+0x7c>)
 80016a2:	f003 feb7 	bl	8005414 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbef      	blt.n	800169a <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ba:	f001 fb81 	bl	8002dc0 <LTC_nCS_High>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001b8 	.word	0x200001b8

080016cc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d0:	b089      	sub	sp, #36	@ 0x24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	466b      	mov	r3, sp
 80016d8:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016de:	2340      	movs	r3, #64	@ 0x40
 80016e0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016e2:	7f3b      	ldrb	r3, [r7, #28]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	7f3b      	ldrb	r3, [r7, #28]
 80016ea:	2200      	movs	r2, #0
 80016ec:	4698      	mov	r8, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001700:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	2200      	movs	r2, #0
 8001708:	461c      	mov	r4, r3
 800170a:	4615      	mov	r5, r2
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	00eb      	lsls	r3, r5, #3
 8001716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171a:	00e2      	lsls	r2, r4, #3
 800171c:	7f3b      	ldrb	r3, [r7, #28]
 800171e:	3307      	adds	r3, #7
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	ebad 0d03 	sub.w	sp, sp, r3
 8001728:	466b      	mov	r3, sp
 800172a:	3300      	adds	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	77bb      	strb	r3, [r7, #30]
 8001732:	e074      	b.n	800181e <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f93c 	bl	80019d4 <LTC_Pec15_Calc>
 800175c:	4603      	mov	r3, r0
 800175e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001760:	8a7b      	ldrh	r3, [r7, #18]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001770:	f7ff fe0a 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001774:	f001 fb30 	bl	8002dd8 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	2364      	movs	r3, #100	@ 0x64
 800177e:	2204      	movs	r2, #4
 8001780:	482d      	ldr	r0, [pc, #180]	@ (8001838 <Read_Cell_Temps+0x16c>)
 8001782:	f003 fe47 	bl	8005414 <HAL_SPI_Transmit>
 8001786:	4603      	mov	r3, r0
 8001788:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800178a:	7c7b      	ldrb	r3, [r7, #17]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001790:	7c7b      	ldrb	r3, [r7, #17]
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	b25a      	sxtb	r2, r3
 800179a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017a4:	7f3b      	ldrb	r3, [r7, #28]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	4822      	ldr	r0, [pc, #136]	@ (8001838 <Read_Cell_Temps+0x16c>)
 80017ae:	f003 ff75 	bl	800569c <HAL_SPI_Receive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017b6:	7c7b      	ldrb	r3, [r7, #17]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017bc:	7c7b      	ldrb	r3, [r7, #17]
 80017be:	3304      	adds	r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017d2:	f001 faf5 	bl	8002dc0 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	777b      	strb	r3, [r7, #29]
 80017da:	e01a      	b.n	8001812 <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017dc:	7f7b      	ldrb	r3, [r7, #29]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017e6:	7f7a      	ldrb	r2, [r7, #29]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80017f2:	7fba      	ldrb	r2, [r7, #30]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
			memcpy(
 8001802:	2206      	movs	r2, #6
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 fd52 	bl	80062b0 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	3301      	adds	r3, #1
 8001810:	777b      	strb	r3, [r7, #29]
 8001812:	7f7b      	ldrb	r3, [r7, #29]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d9e1      	bls.n	80017dc <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001818:	7fbb      	ldrb	r3, [r7, #30]
 800181a:	3301      	adds	r3, #1
 800181c:	77bb      	strb	r3, [r7, #30]
 800181e:	7fbb      	ldrb	r3, [r7, #30]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d987      	bls.n	8001734 <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	46b5      	mov	sp, r6
}
 8001828:	4618      	mov	r0, r3
 800182a:	3724      	adds	r7, #36	@ 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001832:	bf00      	nop
 8001834:	080066c4 	.word	0x080066c4
 8001838:	200001b8 	.word	0x200001b8

0800183c <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	105b      	asrs	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3302      	adds	r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	b2da      	uxtb	r2, r3
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	797b      	ldrb	r3, [r7, #5]
 8001876:	4413      	add	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3360      	adds	r3, #96	@ 0x60
 800187c:	b2db      	uxtb	r3, r3
 800187e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	2002      	movs	r0, #2
 8001888:	f000 f8a4 	bl	80019d4 <LTC_Pec15_Calc>
 800188c:	4603      	mov	r3, r0
 800188e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001890:	89bb      	ldrh	r3, [r7, #12]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018a0:	f7ff fd72 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 80018a4:	f001 fa98 	bl	8002dd8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018a8:	f107 0108 	add.w	r1, r7, #8
 80018ac:	2364      	movs	r3, #100	@ 0x64
 80018ae:	2204      	movs	r2, #4
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <LTC_ADCV+0x88>)
 80018b2:	f003 fdaf 	bl	8005414 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018b6:	f001 fa83 	bl	8002dc0 <LTC_nCS_High>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001b8 	.word	0x200001b8

080018c8 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	105b      	asrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3304      	adds	r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3360      	adds	r3, #96	@ 0x60
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	2002      	movs	r0, #2
 8001908:	f000 f864 	bl	80019d4 <LTC_Pec15_Calc>
 800190c:	4603      	mov	r3, r0
 800190e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001920:	f7ff fd32 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001924:	f001 fa58 	bl	8002dd8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001928:	f107 0108 	add.w	r1, r7, #8
 800192c:	2364      	movs	r3, #100	@ 0x64
 800192e:	2204      	movs	r2, #4
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <LTC_ADAX+0x7c>)
 8001932:	f003 fd6f 	bl	8005414 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001936:	f001 fa43 	bl	8002dc0 <LTC_nCS_High>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001b8 	.word	0x200001b8

08001948 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800195a:	2307      	movs	r3, #7
 800195c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800195e:	2314      	movs	r3, #20
 8001960:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	2002      	movs	r0, #2
 8001968:	f000 f834 	bl	80019d4 <LTC_Pec15_Calc>
 800196c:	4603      	mov	r3, r0
 800196e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001980:	f7ff fd02 	bl	8001388 <Wakeup_Idle>

	LTC_nCS_Low();
 8001984:	f001 fa28 	bl	8002dd8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	2364      	movs	r3, #100	@ 0x64
 800198c:	2204      	movs	r2, #4
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <LTC_POLLADC+0x84>)
 8001990:	f003 fd40 	bl	8005414 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001994:	e00c      	b.n	80019b0 <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 8001996:	f001 fbd7 	bl	8003148 <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
 800199c:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800199e:	7abb      	ldrb	r3, [r7, #10]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <LTC_POLLADC+0x62>
			finished = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	72fb      	strb	r3, [r7, #11]
 80019a8:	e002      	b.n	80019b0 <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	330a      	adds	r3, #10
 80019ae:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <LTC_POLLADC+0x88>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d802      	bhi.n	80019be <LTC_POLLADC+0x76>
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0eb      	beq.n	8001996 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019be:	f001 f9ff 	bl	8002dc0 <LTC_nCS_High>
	return (counter);
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001b8 	.word	0x200001b8
 80019d0:	00030d3f 	.word	0x00030d3f

080019d4 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 80019e0:	2310      	movs	r3, #16
 80019e2:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80019e4:	2300      	movs	r3, #0
 80019e6:	737b      	strb	r3, [r7, #13]
 80019e8:	e017      	b.n	8001a1a <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	09db      	lsrs	r3, r3, #7
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	7b7a      	ldrb	r2, [r7, #13]
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	4053      	eors	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <LTC_Pec15_Calc+0x60>)
 8001a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4053      	eors	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a14:	7b7b      	ldrb	r3, [r7, #13]
 8001a16:	3301      	adds	r3, #1
 8001a18:	737b      	strb	r3, [r7, #13]
 8001a1a:	7b7a      	ldrb	r2, [r7, #13]
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e3      	bcc.n	80019ea <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b29b      	uxth	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	080066c8 	.word	0x080066c8

08001a38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_ADC1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a76:	f001 fb95 	bl	80031a4 <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 fe78 	bl	8002774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a84:	230f      	movs	r3, #15
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a96:	f001 fe49 	bl	800372c <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 fe68 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000128 	.word	0x20000128
 8001ab0:	40012400 	.word	0x40012400

08001ab4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ac6:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <MX_ADC2_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ade:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ae2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001af2:	f001 fb57 	bl	80031a4 <HAL_ADC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001afc:	f000 fe3a 	bl	8002774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b00:	230a      	movs	r3, #10
 8001b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001b12:	f001 fe0b 	bl	800372c <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001b1c:	f000 fe2a 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000158 	.word	0x20000158
 8001b2c:	40012800 	.word	0x40012800

08001b30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	@ (8001bec <HAL_ADC_MspInit+0xbc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d122      	bne.n	8001b96 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001b80:	2320      	movs	r3, #32
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b84:	2303      	movs	r3, #3
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <HAL_ADC_MspInit+0xc4>)
 8001b90:	f002 fa76 	bl	8004080 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001b94:	e026      	b.n	8001be4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_ADC_MspInit+0xc8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d121      	bne.n	8001be4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_ADC_MspInit+0xc0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <HAL_ADC_MspInit+0xc4>)
 8001be0:	f002 fa4e 	bl	8004080 <HAL_GPIO_Init>
}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	@ 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40012400 	.word	0x40012400
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40012800 	.word	0x40012800

08001bfc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c02:	4a18      	ldr	r2, [pc, #96]	@ (8001c64 <MX_CAN1_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001c06:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c08:	2209      	movs	r2, #9
 8001c0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c1e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c22:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001c26:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <MX_CAN1_Init+0x64>)
 8001c4e:	f001 ff00 	bl	8003a52 <HAL_CAN_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c58:	f000 fd8c 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000188 	.word	0x20000188
 8001c64:	40006400 	.word	0x40006400

08001c68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a25      	ldr	r2, [pc, #148]	@ (8001d18 <HAL_CAN_MspInit+0xb0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d143      	bne.n	8001d10 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_CAN_MspInit+0xb4>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	@ (8001d1c <HAL_CAN_MspInit+0xb4>)
 8001c8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	61d3      	str	r3, [r2, #28]
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <HAL_CAN_MspInit+0xb4>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <HAL_CAN_MspInit+0xb4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <HAL_CAN_MspInit+0xb4>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_CAN_MspInit+0xb4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4814      	ldr	r0, [pc, #80]	@ (8001d20 <HAL_CAN_MspInit+0xb8>)
 8001cce:	f002 f9d7 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480e      	ldr	r0, [pc, #56]	@ (8001d20 <HAL_CAN_MspInit+0xb8>)
 8001ce8:	f002 f9ca 	bl	8004080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_CAN_MspInit+0xbc>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	4a06      	ldr	r2, [pc, #24]	@ (8001d24 <HAL_CAN_MspInit+0xbc>)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	@ 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40006400 	.word	0x40006400
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40010000 	.word	0x40010000

08001d28 <CAN_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <CAN_Start+0x10>)
 8001d2e:	f001 ff8b 	bl	8003c48 <HAL_CAN_Start>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000188 	.word	0x20000188

08001d3c <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d40:	2102      	movs	r1, #2
 8001d42:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <CAN_Activate+0x14>)
 8001d44:	f002 f893 	bl	8003e6e <HAL_CAN_ActivateNotification>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000188 	.word	0x20000188

08001d54 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f103 021c 	add.w	r2, r3, #28
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3318      	adds	r3, #24
 8001d68:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <CAN_Send+0x24>)
 8001d6a:	f001 ffb1 	bl	8003cd0 <HAL_CAN_AddTxMessage>
 8001d6e:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000188 	.word	0x20000188

08001d7c <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001d84:	f7ff ffd0 	bl	8001d28 <CAN_Start>
	CAN_Activate();
 8001d88:	f7ff ffd8 	bl	8001d3c <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2208      	movs	r2, #8
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001dd0:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 8001dd4:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001dd6:	8afb      	ldrh	r3, [r7, #22]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffe6 	bl	8001dac <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e074      	b.n	8001ed0 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d156      	bne.n	8001e9e <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dd0c      	ble.n	8001ebe <CAN_Send_Voltage+0xf8>
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d107      	bne.n	8001ebe <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001eae:	8afb      	ldrh	r3, [r7, #22]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001eb4:	8afb      	ldrh	r3, [r7, #22]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff77 	bl	8001dac <Set_CAN_Id>
		}
		HAL_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f001 f94c 	bl	800315c <HAL_Delay>
		CAN_Send(ptr);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff45 	bl	8001d54 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ed4:	dd87      	ble.n	8001de6 <CAN_Send_Voltage+0x20>
	}

}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001eea:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8001eee:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff59 	bl	8001dac <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	737b      	strb	r3, [r7, #13]
 8001efe:	e076      	b.n	8001fee <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8001f00:	7b7b      	ldrb	r3, [r7, #13]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d156      	bne.n	8001fba <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8001f20:	7b3b      	ldrb	r3, [r7, #12]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8001f3a:	7b3b      	ldrb	r3, [r7, #12]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001f4a:	7b3b      	ldrb	r3, [r7, #12]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001f5e:	7b3b      	ldrb	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001f64:	7b3b      	ldrb	r3, [r7, #12]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001f76:	7b3b      	ldrb	r3, [r7, #12]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001f8c:	7b3b      	ldrb	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8001fa4:	7b3b      	ldrb	r3, [r7, #12]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001fba:	7b7b      	ldrb	r3, [r7, #13]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <CAN_Send_Temperature+0xfc>
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fee8 	bl	8001dac <Set_CAN_Id>
		}
		HAL_Delay(1);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f001 f8bd 	bl	800315c <HAL_Delay>
		CAN_Send(ptr);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff feb6 	bl	8001d54 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001fe8:	7b7b      	ldrb	r3, [r7, #13]
 8001fea:	3301      	adds	r3, #1
 8001fec:	737b      	strb	r3, [r7, #13]
 8001fee:	7b7b      	ldrb	r3, [r7, #13]
 8001ff0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001ff2:	d985      	bls.n	8001f00 <CAN_Send_Temperature+0x20>
	}

}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr, struct batteryModule *batt) {
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8002008:	f240 6322 	movw	r3, #1570	@ 0x622
 800200c:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 800200e:	89fb      	ldrh	r3, [r7, #14]
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff feca 	bl	8001dac <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800201e:	b2da      	uxtb	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	b29b      	uxth	r3, r3
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	b29b      	uxth	r3, r3
 800204a:	b2da      	uxtb	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002056:	b2da      	uxtb	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	b2da      	uxtb	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002076:	b2da      	uxtb	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	HAL_Delay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f001 f863 	bl	800315c <HAL_Delay>
	CAN_Send(ptr);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fe5c 	bl	8001d54 <CAN_Send>
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 80020b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020b6:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	4619      	mov	r1, r3
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe75 	bl	8001dac <Set_CAN_Id>
	ptr->data[0] = *faults;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800210c:	0e1b      	lsrs	r3, r3, #24
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_Delay(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f001 f820 	bl	800315c <HAL_Delay>
	CAN_Send(ptr);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fe19 	bl	8001d54 <CAN_Send>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002140:	4b3c      	ldr	r3, [pc, #240]	@ (8002234 <MX_GPIO_Init+0x108>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a3b      	ldr	r2, [pc, #236]	@ (8002234 <MX_GPIO_Init+0x108>)
 8002146:	f043 0320 	orr.w	r3, r3, #32
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b39      	ldr	r3, [pc, #228]	@ (8002234 <MX_GPIO_Init+0x108>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002158:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <MX_GPIO_Init+0x108>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a35      	ldr	r2, [pc, #212]	@ (8002234 <MX_GPIO_Init+0x108>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b33      	ldr	r3, [pc, #204]	@ (8002234 <MX_GPIO_Init+0x108>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b30      	ldr	r3, [pc, #192]	@ (8002234 <MX_GPIO_Init+0x108>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <MX_GPIO_Init+0x108>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <MX_GPIO_Init+0x108>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <MX_GPIO_Init+0x108>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a29      	ldr	r2, [pc, #164]	@ (8002234 <MX_GPIO_Init+0x108>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <MX_GPIO_Init+0x108>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2110      	movs	r1, #16
 80021a4:	4824      	ldr	r0, [pc, #144]	@ (8002238 <MX_GPIO_Init+0x10c>)
 80021a6:	f002 f8ef 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2102      	movs	r1, #2
 80021ae:	4823      	ldr	r0, [pc, #140]	@ (800223c <MX_GPIO_Init+0x110>)
 80021b0:	f002 f8ea 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2140      	movs	r1, #64	@ 0x40
 80021b8:	4821      	ldr	r0, [pc, #132]	@ (8002240 <MX_GPIO_Init+0x114>)
 80021ba:	f002 f8e5 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80021be:	2310      	movs	r3, #16
 80021c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	4619      	mov	r1, r3
 80021d4:	4818      	ldr	r0, [pc, #96]	@ (8002238 <MX_GPIO_Init+0x10c>)
 80021d6:	f001 ff53 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80021da:	2302      	movs	r3, #2
 80021dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021de:	2301      	movs	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4619      	mov	r1, r3
 80021f0:	4812      	ldr	r0, [pc, #72]	@ (800223c <MX_GPIO_Init+0x110>)
 80021f2:	f001 ff45 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80021f6:	2340      	movs	r3, #64	@ 0x40
 80021f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2302      	movs	r3, #2
 8002204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	@ (8002240 <MX_GPIO_Init+0x114>)
 800220e:	f001 ff37 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HV_SENSE_ENABLE_Pin */
  GPIO_InitStruct.Pin = MCU_HV_SENSE_ENABLE_Pin;
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_HV_SENSE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <MX_GPIO_Init+0x110>)
 8002226:	f001 ff2b 	bl	8004080 <HAL_GPIO_Init>

}
 800222a:	bf00      	nop
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	40010800 	.word	0x40010800
 800223c:	40010c00 	.word	0x40010c00
 8002240:	40011000 	.word	0x40011000

08002244 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(uint32_t *read_volt_HV) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

		// ADC開始
		HAL_ADC_Start(&hadc1);
 8002250:	481e      	ldr	r0, [pc, #120]	@ (80022cc <ReadHVInput+0x88>)
 8002252:	f001 f87f 	bl	8003354 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002256:	f04f 31ff 	mov.w	r1, #4294967295
 800225a:	481c      	ldr	r0, [pc, #112]	@ (80022cc <ReadHVInput+0x88>)
 800225c:	f001 f954 	bl	8003508 <HAL_ADC_PollForConversion>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);
 8002266:	4819      	ldr	r0, [pc, #100]	@ (80022cc <ReadHVInput+0x88>)
 8002268:	f001 fa54 	bl	8003714 <HAL_ADC_GetValue>
 800226c:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);
 800226e:	4817      	ldr	r0, [pc, #92]	@ (80022cc <ReadHVInput+0x88>)
 8002270:	f001 f91e 	bl	80034b0 <HAL_ADC_Stop>

		// 電圧計算
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF *10000.0;
 8002274:	6978      	ldr	r0, [r7, #20]
 8002276:	f7fe fd49 	bl	8000d0c <__aeabi_ui2f>
 800227a:	4603      	mov	r3, r0
 800227c:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fe4f 	bl	8000f24 <__aeabi_fdiv>
 8002286:	4603      	mov	r3, r0
 8002288:	4911      	ldr	r1, [pc, #68]	@ (80022d0 <ReadHVInput+0x8c>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fd96 	bl	8000dbc <__aeabi_fmul>
 8002290:	4603      	mov	r3, r0
 8002292:	4910      	ldr	r1, [pc, #64]	@ (80022d4 <ReadHVInput+0x90>)
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fd91 	bl	8000dbc <__aeabi_fmul>
 800229a:	4603      	mov	r3, r0
 800229c:	613b      	str	r3, [r7, #16]
	//    uint32_t amcOutput = adcVoltage / GAIN_TLV9001;
		float amcInput = adcVoltage / GAIN_AMC1300;
 800229e:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <ReadHVInput+0x94>)
 80022a0:	6938      	ldr	r0, [r7, #16]
 80022a2:	f7fe fe3f 	bl	8000f24 <__aeabi_fdiv>
 80022a6:	4603      	mov	r3, r0
 80022a8:	60fb      	str	r3, [r7, #12]
		float hvInput = amcInput * DIVIDER_RATIO;
 80022aa:	490c      	ldr	r1, [pc, #48]	@ (80022dc <ReadHVInput+0x98>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7fe fd85 	bl	8000dbc <__aeabi_fmul>
 80022b2:	4603      	mov	r3, r0
 80022b4:	60bb      	str	r3, [r7, #8]

		*read_volt_HV = (uint32_t)hvInput;
 80022b6:	68b8      	ldr	r0, [r7, #8]
 80022b8:	f7fe fed0 	bl	800105c <__aeabi_f2uiz>
 80022bc:	4602      	mov	r2, r0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
	}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000128 	.word	0x20000128
 80022d0:	40533333 	.word	0x40533333
 80022d4:	461c4000 	.word	0x461c4000
 80022d8:	41033333 	.word	0x41033333
 80022dc:	44fee666 	.word	0x44fee666

080022e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80022e6:	af04      	add	r7, sp, #16
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 80022e8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80022ec:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 80022f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80022f8:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 8002300:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002304:	f2a3 2347 	subw	r3, r3, #583	@ 0x247
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230c:	f000 fec4 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002310:	f000 f956 	bl	80025c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002314:	f7ff ff0a 	bl	800212c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002318:	f7ff fb8e 	bl	8001a38 <MX_ADC1_Init>
  MX_ADC2_Init();
 800231c:	f7ff fbca 	bl	8001ab4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8002320:	f000 fdca 	bl	8002eb8 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002324:	f000 fccc 	bl	8002cc0 <MX_SPI1_Init>
  MX_CAN1_Init();
 8002328:	f7ff fc68 	bl	8001bfc <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800232c:	f000 fe18 	bl	8002f60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fd21 	bl	8001d7c <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 800233a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	499b      	ldr	r1, [pc, #620]	@ (80025b0 <main+0x2d0>)
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f9a6 	bl	8002694 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8002348:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 800234c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f9df 	bl	8002714 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8002356:	f000 fd33 	bl	8002dc0 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2102      	movs	r1, #2
 800235e:	4895      	ldr	r0, [pc, #596]	@ (80025b4 <main+0x2d4>)
 8002360:	f002 f812 	bl	8004388 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002364:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002368:	f000 fef8 	bl	800315c <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	2102      	movs	r1, #2
 8002370:	4890      	ldr	r0, [pc, #576]	@ (80025b4 <main+0x2d4>)
 8002372:	f002 f809 	bl	8004388 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	uint8_t indexpause = 8;
 800237c:	2308      	movs	r3, #8
 800237e:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	uint8_t low_volt_hysteresis = 0;
 8002382:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002386:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
	uint8_t high_volt_hysteresis = 0;
 800238e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002392:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
	uint8_t cell_imbalance_hysteresis = 0;
 800239a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800239e:	f2a3 234a 	subw	r3, r3, #586	@ 0x24a
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]

	//reading cell voltages
	Wakeup_Sleep();
 80023a6:	f7ff f80f 	bl	80013c8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 80023aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fa7a 	bl	80028a8 <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 80023b4:	f7ff f808 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80023b8:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80023bc:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
 80023c0:	e016      	b.n	80023f0 <main+0x110>
		Wakeup_Idle();
 80023c2:	f7fe ffe1 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80023c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ca:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80023ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023d2:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80023d6:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fa78 	bl	80028d0 <Read_Temp>
		HAL_Delay(3);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 febb 	bl	800315c <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80023e6:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 80023ea:	3301      	adds	r3, #1
 80023ec:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
 80023f0:	f897 224d 	ldrb.w	r2, [r7, #589]	@ 0x24d
 80023f4:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3e2      	bcc.n	80023c2 <main+0xe2>
	}
	Wakeup_Idle();
 80023fc:	f7fe ffc4 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8002400:	496d      	ldr	r1, [pc, #436]	@ (80025b8 <main+0x2d8>)
 8002402:	2008      	movs	r0, #8
 8002404:	f7ff f8b4 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002408:	f7fe ffbe 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 800240c:	2002      	movs	r0, #2
 800240e:	f7ff f91d 	bl	800164c <LTC_STCOMM>

	Wakeup_Sleep();
 8002412:	f7fe ffd9 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8002416:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 800241a:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
 800241e:	e016      	b.n	800244e <main+0x16e>
		Wakeup_Idle();
 8002420:	f7fe ffb2 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002424:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002428:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 800242c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002430:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002434:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa49 	bl	80028d0 <Read_Temp>
		HAL_Delay(3);
 800243e:	2003      	movs	r0, #3
 8002440:	f000 fe8c 	bl	800315c <HAL_Delay>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8002444:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8002448:	3301      	adds	r3, #1
 800244a:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
 800244e:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8002452:	2b0b      	cmp	r3, #11
 8002454:	d9e4      	bls.n	8002420 <main+0x140>
	}
	Wakeup_Idle();
 8002456:	f7fe ff97 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 800245a:	4958      	ldr	r1, [pc, #352]	@ (80025bc <main+0x2dc>)
 800245c:	2008      	movs	r0, #8
 800245e:	f7ff f887 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002462:	f7fe ff91 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002466:	2002      	movs	r0, #2
 8002468:	f7ff f8f0 	bl	800164c <LTC_STCOMM>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800246c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002470:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f92a 	bl	80026ce <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800247a:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f95b 	bl	800273a <TimerPacket_FixedPulse>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <main+0x18c>
			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 800248a:	f107 040a 	add.w	r4, r7, #10
 800248e:	f107 020b 	add.w	r2, r7, #11
 8002492:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002496:	f107 000c 	add.w	r0, r7, #12
 800249a:	f107 0309 	add.w	r3, r7, #9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4623      	mov	r3, r4
 80024a2:	f7ff fdff 	bl	80020a4 <CAN_Send_Safety_Checker>
					&safetyWarnings, &safetyStates);
			CAN_Send_Cell_Summary(&msg, &modPackInfo);
 80024a6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fda4 	bl	8001ffe <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 80024b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fc80 	bl	8001dc6 <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 80024c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024ca:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fd03 	bl	8001ee0 <CAN_Send_Temperature>
			//reading cell voltages
			Wakeup_Sleep();
 80024da:	f7fe ff75 	bl	80013c8 <Wakeup_Sleep>
			Read_Volt(modPackInfo.cell_volt);
 80024de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f9e0 	bl	80028a8 <Read_Volt>
			//print(NUM_CELLS, (uint16_t*) modPackInfo.cell_volt);

			//reading cell temperatures
//			Wakeup_Sleep();
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80024e8:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80024ec:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
 80024f0:	e011      	b.n	8002516 <main+0x236>
//				Wakeup_Idle();
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80024f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024f6:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80024fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024fe:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002502:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f9e2 	bl	80028d0 <Read_Temp>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 800250c:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002510:	3301      	adds	r3, #1
 8002512:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
 8002516:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 800251a:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 800251e:	429a      	cmp	r2, r3
 8002520:	d3e7      	bcc.n	80024f2 <main+0x212>
//				HAL_Delay(5);
			}
			if (indexpause == 8) {
 8002522:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8002526:	2b08      	cmp	r3, #8
 8002528:	d10d      	bne.n	8002546 <main+0x266>
//				Wakeup_Idle();
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 800252a:	4923      	ldr	r1, [pc, #140]	@ (80025b8 <main+0x2d8>)
 800252c:	2008      	movs	r0, #8
 800252e:	f7ff f81f 	bl	8001570 <LTC_WRCOMM>
//				Wakeup_Idle();
				LTC_STCOMM(2);
 8002532:	2002      	movs	r0, #2
 8002534:	f7ff f88a 	bl	800164c <LTC_STCOMM>
				tempindex = 8;
 8002538:	2308      	movs	r3, #8
 800253a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				indexpause = NUM_THERM_PER_MOD;
 800253e:	230c      	movs	r3, #12
 8002540:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 8002544:	e010      	b.n	8002568 <main+0x288>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 8002546:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d10c      	bne.n	8002568 <main+0x288>
//				Wakeup_Idle();
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 800254e:	491b      	ldr	r1, [pc, #108]	@ (80025bc <main+0x2dc>)
 8002550:	2008      	movs	r0, #8
 8002552:	f7ff f80d 	bl	8001570 <LTC_WRCOMM>
//				Wakeup_Idle();
				LTC_STCOMM(2);
 8002556:	2002      	movs	r0, #2
 8002558:	f7ff f878 	bl	800164c <LTC_STCOMM>
				indexpause = 8;
 800255c:	2308      	movs	r3, #8
 800255e:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
				tempindex = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}

			ReadHVInput(&modPackInfo.pack_voltage);
 8002568:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800256c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe67 	bl	8002244 <ReadHVInput>
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

			//getting the summary of all cells in the pack
			Cell_Summary_Voltage(&modPackInfo, &safetyFaults,
 8002576:	f107 0409 	add.w	r4, r7, #9
 800257a:	f107 020a 	add.w	r2, r7, #10
 800257e:	f107 010b 	add.w	r1, r7, #11
 8002582:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002586:	1dbb      	adds	r3, r7, #6
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4623      	mov	r3, r4
 8002596:	f000 f9e1 	bl	800295c <Cell_Summary_Voltage>
								&safetyWarnings, &safetyStates, &low_volt_hysteresis,
								&high_volt_hysteresis, &cell_imbalance_hysteresis);

			Cell_Summary_Temperature(&modPackInfo, &safetyFaults,&safetyWarnings);
 800259a:	f107 020a 	add.w	r2, r7, #10
 800259e:	f107 010b 	add.w	r1, r7, #11
 80025a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb1a 	bl	8002be0 <Cell_Summary_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80025ac:	e75e      	b.n	800246c <main+0x18c>
 80025ae:	bf00      	nop
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	20000000 	.word	0x20000000
 80025bc:	20000006 	.word	0x20000006

080025c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09c      	sub	sp, #112	@ 0x70
 80025c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025ca:	2238      	movs	r2, #56	@ 0x38
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fe3c 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2220      	movs	r2, #32
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fe2e 	bl	800624c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80025fa:	2304      	movs	r3, #4
 80025fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025fe:	2301      	movs	r3, #1
 8002600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002602:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002608:	2302      	movs	r3, #2
 800260a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800260c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002610:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002612:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002616:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002618:	2302      	movs	r3, #2
 800261a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800261c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002620:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002622:	2340      	movs	r3, #64	@ 0x40
 8002624:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002626:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fede 	bl	80043ec <HAL_RCC_OscConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002636:	f000 f89d 	bl	8002774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263a:	230f      	movs	r3, #15
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263e:	2302      	movs	r3, #2
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800264a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800264c:	2300      	movs	r3, #0
 800264e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f002 f9de 	bl	8004a18 <HAL_RCC_ClockConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002662:	f000 f887 	bl	8002774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002666:	2302      	movs	r3, #2
 8002668:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800266a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800266e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4618      	mov	r0, r3
 8002674:	f002 fbc6 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800267e:	f000 f879 	bl	8002774 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002682:	4b03      	ldr	r3, [pc, #12]	@ (8002690 <SystemClock_Config+0xd0>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	3770      	adds	r7, #112	@ 0x70
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	42420070 	.word	0x42420070

08002694 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2200      	movs	r2, #0
 80026a6:	4619      	mov	r1, r3
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f001 fe6d 	bl	8004388 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80026da:	f000 fd35 	bl	8003148 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d90b      	bls.n	800270c <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	889b      	ldrh	r3, [r3, #4]
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f001 fe5a 	bl	80043b8 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
	}
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002742:	f000 fd01 	bl	8003148 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d905      	bls.n	800276a <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <Error_Handler+0x8>

08002780 <Get_Actual_Temps>:
		{ 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F,
				0xF9 }, { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08,
				0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	460b      	mov	r3, r1
 8002790:	71bb      	strb	r3, [r7, #6]
 8002792:	4613      	mov	r3, r2
 8002794:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fab7 	bl	8000d0c <__aeabi_ui2f>
 800279e:	4603      	mov	r3, r0
 80027a0:	4619      	mov	r1, r3
 80027a2:	483a      	ldr	r0, [pc, #232]	@ (800288c <Get_Actual_Temps+0x10c>)
 80027a4:	f7fe fbbe 	bl	8000f24 <__aeabi_fdiv>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe f9fa 	bl	8000ba8 <__aeabi_fsub>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <Get_Actual_Temps+0x110>)
 80027ba:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 80027bc:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <Get_Actual_Temps+0x110>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4834      	ldr	r0, [pc, #208]	@ (8002894 <Get_Actual_Temps+0x114>)
 80027c4:	f7fe fbae 	bl	8000f24 <__aeabi_fdiv>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <Get_Actual_Temps+0x110>)
 80027ce:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 80027d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002890 <Get_Actual_Temps+0x110>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	492f      	ldr	r1, [pc, #188]	@ (8002894 <Get_Actual_Temps+0x114>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fba4 	bl	8000f24 <__aeabi_fdiv>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002898 <Get_Actual_Temps+0x118>)
 80027e2:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 80027e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <Get_Actual_Temps+0x118>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe81 	bl	80004f0 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f003 fd69 	bl	80062cc <log>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7fe f97d 	bl	8000b00 <__aeabi_d2f>
 8002806:	4603      	mov	r3, r0
 8002808:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <Get_Actual_Temps+0x118>)
 800280a:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 800280c:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <Get_Actual_Temps+0x118>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4922      	ldr	r1, [pc, #136]	@ (800289c <Get_Actual_Temps+0x11c>)
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fb86 	bl	8000f24 <__aeabi_fdiv>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <Get_Actual_Temps+0x118>)
 800281e:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 8002820:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <Get_Actual_Temps+0x118>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	491e      	ldr	r1, [pc, #120]	@ (80028a0 <Get_Actual_Temps+0x120>)
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f9c0 	bl	8000bac <__addsf3>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <Get_Actual_Temps+0x118>)
 8002832:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 8002834:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <Get_Actual_Temps+0x118>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800283e:	f7fe fb71 	bl	8000f24 <__aeabi_fdiv>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <Get_Actual_Temps+0x118>)
 8002848:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 800284a:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <Get_Actual_Temps+0x118>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4915      	ldr	r1, [pc, #84]	@ (80028a4 <Get_Actual_Temps+0x124>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe f9a9 	bl	8000ba8 <__aeabi_fsub>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <Get_Actual_Temps+0x118>)
 800285c:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <Get_Actual_Temps+0x118>)
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	79fa      	ldrb	r2, [r7, #7]
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	4413      	add	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	18d4      	adds	r4, r2, r3
 8002878:	4608      	mov	r0, r1
 800287a:	f7fe fbef 	bl	800105c <__aeabi_f2uiz>
 800287e:	4603      	mov	r3, r0
 8002880:	b29b      	uxth	r3, r3
 8002882:	8023      	strh	r3, [r4, #0]

}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	46ea6000 	.word	0x46ea6000
 8002890:	200001b0 	.word	0x200001b0
 8002894:	461c4000 	.word	0x461c4000
 8002898:	200001b4 	.word	0x200001b4
 800289c:	4556b000 	.word	0x4556b000
 80028a0:	3b5bcf0f 	.word	0x3b5bcf0f
 80028a4:	43889333 	.word	0x43889333

080028a8 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2003      	movs	r0, #3
 80028b6:	f7fe ffc1 	bl	800183c <LTC_ADCV>
	LTC_POLLADC();
 80028ba:	f7ff f845 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 80028be:	f7fe fd63 	bl	8001388 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fd9c 	bl	8001400 <Read_Cell_Volt>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002958 <Read_Temp+0x88>)
 80028ea:	4413      	add	r3, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	2008      	movs	r0, #8
 80028f0:	f7fe fe3e 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 80028f4:	f7fe fd48 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7fe fea7 	bl	800164c <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 80028fe:	f7fe fd43 	bl	8001388 <Wakeup_Idle>
	LTC_ADAX(MD_FAST, 1); //doing GPIO all conversion
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f7fe ffdf 	bl	80018c8 <LTC_ADAX>
	LTC_POLLADC();
 800290a:	f7ff f81d 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 800290e:	f7fe fd3b 	bl	8001388 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe feda 	bl	80016cc <Read_Cell_Temps>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
 8002922:	e012      	b.n	800294a <Read_Temp+0x7a>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8002924:	7dfa      	ldrb	r2, [r7, #23]
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002938:	8abb      	ldrh	r3, [r7, #20]
 800293a:	7bf9      	ldrb	r1, [r7, #15]
 800293c:	7df8      	ldrb	r0, [r7, #23]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f7ff ff1e 	bl	8002780 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	3301      	adds	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b07      	cmp	r3, #7
 800294e:	d9e9      	bls.n	8002924 <Read_Temp+0x54>

		}
	}
}
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000000c 	.word	0x2000000c

0800295c <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

	for (int i = 1; i < NUM_CELLS; i++) {
 800297e:	2301      	movs	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e11a      	b.n	8002bba <Cell_Summary_Voltage+0x25e>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002992:	429a      	cmp	r2, r3
 8002994:	d93a      	bls.n	8002a0c <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 80029aa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d906      	bls.n	80029c0 <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 80029c6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d910      	bls.n	80029f0 <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f043 0310 	orr.w	r3, r3, #16
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80029e4:	2201      	movs	r2, #1
 80029e6:	2102      	movs	r1, #2
 80029e8:	4878      	ldr	r0, [pc, #480]	@ (8002bcc <Cell_Summary_Voltage+0x270>)
 80029ea:	f001 fccd 	bl	8004388 <HAL_GPIO_WritePin>
 80029ee:	e00d      	b.n	8002a0c <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 80029f6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d903      	bls.n	8002a06 <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e002      	b.n	8002a0c <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d23a      	bcs.n	8002a94 <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002a32:	f646 1278 	movw	r2, #27000	@ 0x6978
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d806      	bhi.n	8002a48 <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002a4e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d810      	bhi.n	8002a78 <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4856      	ldr	r0, [pc, #344]	@ (8002bcc <Cell_Summary_Voltage+0x270>)
 8002a72:	f001 fc89 	bl	8004388 <HAL_GPIO_WritePin>
 8002a76:	e00d      	b.n	8002a94 <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002a7e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d803      	bhi.n	8002a8e <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e002      	b.n	8002a94 <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002aa8:	db10      	blt.n	8002acc <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 8002aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4841      	ldr	r0, [pc, #260]	@ (8002bcc <Cell_Summary_Voltage+0x270>)
 8002ac6:	f001 fc5f 	bl	8004388 <HAL_GPIO_WritePin>
 8002aca:	e011      	b.n	8002af0 <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ae0:	db03      	blt.n	8002aea <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e002      	b.n	8002af0 <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b04:	db06      	blt.n	8002b14 <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <Cell_Summary_Voltage+0x274>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d906      	bls.n	8002b2e <Cell_Summary_Voltage+0x1d2>
			*warnings |= 0b10000000;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b34:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <Cell_Summary_Voltage+0x278>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d806      	bhi.n	8002b48 <Cell_Summary_Voltage+0x1ec>
			*warnings |= 0b01000000;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b4e:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <Cell_Summary_Voltage+0x27c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d90b      	bls.n	8002b6c <Cell_Summary_Voltage+0x210>
			*fault |= 0b10000000;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	2102      	movs	r1, #2
 8002b66:	4819      	ldr	r0, [pc, #100]	@ (8002bcc <Cell_Summary_Voltage+0x270>)
 8002b68:	f001 fc0e 	bl	8004388 <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b72:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <Cell_Summary_Voltage+0x280>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d80b      	bhi.n	8002b90 <Cell_Summary_Voltage+0x234>
			*fault |= 0b01000000;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002b86:	2201      	movs	r2, #1
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4810      	ldr	r0, [pc, #64]	@ (8002bcc <Cell_Summary_Voltage+0x270>)
 8002b8c:	f001 fbfc 	bl	8004388 <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ba4:	db06      	blt.n	8002bb4 <Cell_Summary_Voltage+0x258>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b5f      	cmp	r3, #95	@ 0x5f
 8002bbe:	f77f aee1 	ble.w	8002984 <Cell_Summary_Voltage+0x28>
		}
		if (BALANCE) {
			*states |= 0b10000000;
		}
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40010c00 	.word	0x40010c00
 8002bd0:	003e5507 	.word	0x003e5507
 8002bd4:	002dc6c0 	.word	0x002dc6c0
 8002bd8:	003e8f9f 	.word	0x003e8f9f
 8002bdc:	002bf200 	.word	0x002bf200

08002be0 <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e04f      	b.n	8002caa <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8b3 2196 	ldrh.w	r2, [r3, #406]	@ 0x196
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6979      	ldr	r1, [r7, #20]
 8002c14:	3160      	adds	r1, #96	@ 0x60
 8002c16:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d224      	bcs.n	8002c68 <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	3260      	adds	r2, #96	@ 0x60
 8002c24:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002c34:	2b36      	cmp	r3, #54	@ 0x36
 8002c36:	d906      	bls.n	8002c46 <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002c4c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c4e:	d90b      	bls.n	8002c68 <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2102      	movs	r1, #2
 8002c62:	4816      	ldr	r0, [pc, #88]	@ (8002cbc <Cell_Summary_Temperature+0xdc>)
 8002c64:	f001 fb90 	bl	8004388 <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8b3 2194 	ldrh.w	r2, [r3, #404]	@ 0x194
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6979      	ldr	r1, [r7, #20]
 8002c72:	3160      	adds	r1, #96	@ 0x60
 8002c74:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d913      	bls.n	8002ca4 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	3260      	adds	r2, #96	@ 0x60
 8002c82:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b5f      	cmp	r3, #95	@ 0x5f
 8002cae:	ddac      	ble.n	8002c0a <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40010c00 	.word	0x40010c00

08002cc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <MX_SPI1_Init+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002ccc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cf4:	2228      	movs	r2, #40	@ 0x28
 8002cf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d0c:	220a      	movs	r2, #10
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d10:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d12:	f002 fafb 	bl	800530c <HAL_SPI_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d1c:	f7ff fd2a 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200001b8 	.word	0x200001b8
 8002d28:	40013000 	.word	0x40013000

08002d2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1b      	ldr	r2, [pc, #108]	@ (8002db4 <HAL_SPI_MspInit+0x88>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d12f      	bne.n	8002dac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <HAL_SPI_MspInit+0x8c>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4a19      	ldr	r2, [pc, #100]	@ (8002db8 <HAL_SPI_MspInit+0x8c>)
 8002d52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <HAL_SPI_MspInit+0x8c>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <HAL_SPI_MspInit+0x8c>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <HAL_SPI_MspInit+0x8c>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_SPI_MspInit+0x8c>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d7c:	23a0      	movs	r3, #160	@ 0xa0
 8002d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480b      	ldr	r0, [pc, #44]	@ (8002dbc <HAL_SPI_MspInit+0x90>)
 8002d90:	f001 f976 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d94:	2340      	movs	r3, #64	@ 0x40
 8002d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4619      	mov	r1, r3
 8002da6:	4805      	ldr	r0, [pc, #20]	@ (8002dbc <HAL_SPI_MspInit+0x90>)
 8002da8:	f001 f96a 	bl	8004080 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40013000 	.word	0x40013000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010800 	.word	0x40010800

08002dc0 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <LTC_nCS_High+0x14>)
 8002dca:	f001 fadd 	bl	8004388 <HAL_GPIO_WritePin>
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010800 	.word	0x40010800

08002dd8 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2110      	movs	r1, #16
 8002de0:	4802      	ldr	r0, [pc, #8]	@ (8002dec <LTC_nCS_Low+0x14>)
 8002de2:	f001 fad1 	bl	8004388 <HAL_GPIO_WritePin>
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40010800 	.word	0x40010800

08002df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <HAL_MspInit+0x5c>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <HAL_MspInit+0x5c>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6193      	str	r3, [r2, #24]
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_MspInit+0x5c>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <HAL_MspInit+0x5c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a0e      	ldr	r2, [pc, #56]	@ (8002e4c <HAL_MspInit+0x5c>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <HAL_MspInit+0x5c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_MspInit+0x60>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <HAL_MspInit+0x60>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000

08002e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <NMI_Handler+0x4>

08002e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <BusFault_Handler+0x4>

08002e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <UsageFault_Handler+0x4>

08002e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea4:	f000 f93e 	bl	8003124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002ec8:	4a15      	ldr	r2, [pc, #84]	@ (8002f20 <MX_TIM7_Init+0x68>)
 8002eca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002eda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ede:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ee6:	480d      	ldr	r0, [pc, #52]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002ee8:	f002 ffa5 	bl	8005e36 <HAL_TIM_Base_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002ef2:	f7ff fc3f 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002efe:	463b      	mov	r3, r7
 8002f00:	4619      	mov	r1, r3
 8002f02:	4806      	ldr	r0, [pc, #24]	@ (8002f1c <MX_TIM7_Init+0x64>)
 8002f04:	f003 f85e 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002f0e:	f7ff fc31 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000210 	.word	0x20000210
 8002f20:	40001400 	.word	0x40001400

08002f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a09      	ldr	r2, [pc, #36]	@ (8002f58 <HAL_TIM_Base_MspInit+0x34>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10b      	bne.n	8002f4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <HAL_TIM_Base_MspInit+0x38>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	@ (8002f5c <HAL_TIM_Base_MspInit+0x38>)
 8002f3c:	f043 0320 	orr.w	r3, r3, #32
 8002f40:	61d3      	str	r3, [r2, #28]
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_TIM_Base_MspInit+0x38>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40001400 	.word	0x40001400
 8002f5c:	40021000 	.word	0x40021000

08002f60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f64:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <MX_USART1_UART_Init+0x50>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f8c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f90:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f92:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f98:	4804      	ldr	r0, [pc, #16]	@ (8002fac <MX_USART1_UART_Init+0x4c>)
 8002f9a:	f003 f879 	bl	8006090 <HAL_UART_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002fa4:	f7ff fbe6 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000258 	.word	0x20000258
 8002fb0:	40013800 	.word	0x40013800

08002fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_UART_MspInit+0x8c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d131      	bne.n	8003038 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_UART_MspInit+0x90>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003044 <HAL_UART_MspInit+0x90>)
 8002fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fde:	6193      	str	r3, [r2, #24]
 8002fe0:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <HAL_UART_MspInit+0x90>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_UART_MspInit+0x90>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <HAL_UART_MspInit+0x90>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_UART_MspInit+0x90>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8003004:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4619      	mov	r1, r3
 8003018:	480b      	ldr	r0, [pc, #44]	@ (8003048 <HAL_UART_MspInit+0x94>)
 800301a:	f001 f831 	bl	8004080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800301e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4619      	mov	r1, r3
 8003032:	4805      	ldr	r0, [pc, #20]	@ (8003048 <HAL_UART_MspInit+0x94>)
 8003034:	f001 f824 	bl	8004080 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003038:	bf00      	nop
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013800 	.word	0x40013800
 8003044:	40021000 	.word	0x40021000
 8003048:	40010800 	.word	0x40010800

0800304c <Reset_Handler>:
 800304c:	f7ff ff2e 	bl	8002eac <SystemInit>
 8003050:	480b      	ldr	r0, [pc, #44]	@ (8003080 <LoopFillZerobss+0xe>)
 8003052:	490c      	ldr	r1, [pc, #48]	@ (8003084 <LoopFillZerobss+0x12>)
 8003054:	4a0c      	ldr	r2, [pc, #48]	@ (8003088 <LoopFillZerobss+0x16>)
 8003056:	2300      	movs	r3, #0
 8003058:	e002      	b.n	8003060 <LoopCopyDataInit>

0800305a <CopyDataInit>:
 800305a:	58d4      	ldr	r4, [r2, r3]
 800305c:	50c4      	str	r4, [r0, r3]
 800305e:	3304      	adds	r3, #4

08003060 <LoopCopyDataInit>:
 8003060:	18c4      	adds	r4, r0, r3
 8003062:	428c      	cmp	r4, r1
 8003064:	d3f9      	bcc.n	800305a <CopyDataInit>
 8003066:	4a09      	ldr	r2, [pc, #36]	@ (800308c <LoopFillZerobss+0x1a>)
 8003068:	4c09      	ldr	r4, [pc, #36]	@ (8003090 <LoopFillZerobss+0x1e>)
 800306a:	2300      	movs	r3, #0
 800306c:	e001      	b.n	8003072 <LoopFillZerobss>

0800306e <FillZerobss>:
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	3204      	adds	r2, #4

08003072 <LoopFillZerobss>:
 8003072:	42a2      	cmp	r2, r4
 8003074:	d3fb      	bcc.n	800306e <FillZerobss>
 8003076:	f003 f8f7 	bl	8006268 <__libc_init_array>
 800307a:	f7ff f931 	bl	80022e0 <main>
 800307e:	4770      	bx	lr
 8003080:	20000000 	.word	0x20000000
 8003084:	200000c8 	.word	0x200000c8
 8003088:	08006b34 	.word	0x08006b34
 800308c:	200000c8 	.word	0x200000c8
 8003090:	200003dc 	.word	0x200003dc

08003094 <ADC1_2_IRQHandler>:
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>
	...

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <HAL_Init+0x28>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	@ (80030c0 <HAL_Init+0x28>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 ffb5 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	200f      	movs	r0, #15
 80030b0:	f000 f808 	bl	80030c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7ff fe9c 	bl	8002df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40022000 	.word	0x40022000

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	@ (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ffbf 	bl	8004066 <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f000 ff95 	bl	800402e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	@ (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000006c 	.word	0x2000006c
 800311c:	20000074 	.word	0x20000074
 8003120:	20000070 	.word	0x20000070

08003124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <HAL_IncTick+0x1c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_IncTick+0x20>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a03      	ldr	r2, [pc, #12]	@ (8003144 <HAL_IncTick+0x20>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	20000074 	.word	0x20000074
 8003144:	200002a0 	.word	0x200002a0

08003148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return uwTick;
 800314c:	4b02      	ldr	r3, [pc, #8]	@ (8003158 <HAL_GetTick+0x10>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	200002a0 	.word	0x200002a0

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff fff0 	bl	8003148 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d005      	beq.n	8003182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003176:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_Delay+0x44>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003182:	bf00      	nop
 8003184:	f7ff ffe0 	bl	8003148 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d8f7      	bhi.n	8003184 <HAL_Delay+0x28>
  {
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000074 	.word	0x20000074

080031a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0be      	b.n	8003344 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe fca4 	bl	8001b30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fbf1 	bl	80039d0 <ADC_ConversionStop_Disable>
 80031ee:	4603      	mov	r3, r0
 80031f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8099 	bne.w	8003332 <HAL_ADC_Init+0x18e>
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 8095 	bne.w	8003332 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003210:	f023 0302 	bic.w	r3, r3, #2
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003224:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7b1b      	ldrb	r3, [r3, #12]
 800322a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800322c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323c:	d003      	beq.n	8003246 <HAL_ADC_Init+0xa2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_ADC_Init+0xa8>
 8003246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800324a:	e000      	b.n	800324e <HAL_ADC_Init+0xaa>
 800324c:	2300      	movs	r3, #0
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7d1b      	ldrb	r3, [r3, #20]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d119      	bne.n	8003290 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7b1b      	ldrb	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	3b01      	subs	r3, #1
 800326a:	035a      	lsls	r2, r3, #13
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	e00b      	b.n	8003290 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	4b28      	ldr	r3, [pc, #160]	@ (800334c <HAL_ADC_Init+0x1a8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c0:	d003      	beq.n	80032ca <HAL_ADC_Init+0x126>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d104      	bne.n	80032d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	051b      	lsls	r3, r3, #20
 80032d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <HAL_ADC_Init+0x1ac>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800330e:	e018      	b.n	8003342 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	f023 0312 	bic.w	r3, r3, #18
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003330:	e007      	b.n	8003342 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	ffe1f7fd 	.word	0xffe1f7fd
 8003350:	ff1f0efe 	.word	0xff1f0efe

08003354 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADC_Start+0x1a>
 800336a:	2302      	movs	r3, #2
 800336c:	e098      	b.n	80034a0 <HAL_ADC_Start+0x14c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fad0 	bl	800391c <ADC_Enable>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 8087 	bne.w	8003496 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a41      	ldr	r2, [pc, #260]	@ (80034a8 <HAL_ADC_Start+0x154>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d105      	bne.n	80033b2 <HAL_ADC_Start+0x5e>
 80033a6:	4b41      	ldr	r3, [pc, #260]	@ (80034ac <HAL_ADC_Start+0x158>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d026      	beq.n	800341a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033dc:	e01d      	b.n	800341a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2f      	ldr	r2, [pc, #188]	@ (80034ac <HAL_ADC_Start+0x158>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_ADC_Start+0xaa>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2b      	ldr	r2, [pc, #172]	@ (80034a8 <HAL_ADC_Start+0x154>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <HAL_ADC_Start+0xc6>
 80033fe:	4b2b      	ldr	r3, [pc, #172]	@ (80034ac <HAL_ADC_Start+0x158>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003412:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	f023 0206 	bic.w	r2, r3, #6
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003432:	e002      	b.n	800343a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f06f 0202 	mvn.w	r2, #2
 800344a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003456:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800345a:	d113      	bne.n	8003484 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003460:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <HAL_ADC_Start+0x154>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d105      	bne.n	8003472 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003466:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <HAL_ADC_Start+0x158>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	e00c      	b.n	800349e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	e003      	b.n	800349e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40012800 	.word	0x40012800
 80034ac:	40012400 	.word	0x40012400

080034b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_Stop+0x1a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e01a      	b.n	8003500 <HAL_ADC_Stop+0x50>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa7c 	bl	80039d0 <ADC_ConversionStop_Disable>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800351e:	f7ff fe13 	bl	8003148 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0d3      	b.n	80036f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d131      	bne.n	80035bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d12a      	bne.n	80035bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003566:	e021      	b.n	80035ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d01d      	beq.n	80035ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_ADC_PollForConversion+0x7e>
 8003576:	f7ff fde7 	bl	8003148 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d212      	bcs.n	80035ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0a2      	b.n	80036f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0d6      	beq.n	8003568 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80035ba:	e070      	b.n	800369e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80035bc:	4b4f      	ldr	r3, [pc, #316]	@ (80036fc <HAL_ADC_PollForConversion+0x1f4>)
 80035be:	681c      	ldr	r4, [r3, #0]
 80035c0:	2002      	movs	r0, #2
 80035c2:	f001 fd51 	bl	8005068 <HAL_RCCEx_GetPeriphCLKFreq>
 80035c6:	4603      	mov	r3, r0
 80035c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6919      	ldr	r1, [r3, #16]
 80035d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003700 <HAL_ADC_PollForConversion+0x1f8>)
 80035d4:	400b      	ands	r3, r1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_ADC_PollForConversion+0x104>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	4b48      	ldr	r3, [pc, #288]	@ (8003704 <HAL_ADC_PollForConversion+0x1fc>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d111      	bne.n	800360c <HAL_ADC_PollForConversion+0x104>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	4b46      	ldr	r3, [pc, #280]	@ (8003708 <HAL_ADC_PollForConversion+0x200>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_ADC_PollForConversion+0x100>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	4b43      	ldr	r3, [pc, #268]	@ (800370c <HAL_ADC_PollForConversion+0x204>)
 80035fe:	400b      	ands	r3, r1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_PollForConversion+0x100>
 8003604:	2314      	movs	r3, #20
 8003606:	e020      	b.n	800364a <HAL_ADC_PollForConversion+0x142>
 8003608:	2329      	movs	r3, #41	@ 0x29
 800360a:	e01e      	b.n	800364a <HAL_ADC_PollForConversion+0x142>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6919      	ldr	r1, [r3, #16]
 8003612:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_ADC_PollForConversion+0x200>)
 8003614:	400b      	ands	r3, r1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_ADC_PollForConversion+0x120>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68d9      	ldr	r1, [r3, #12]
 8003620:	4b3a      	ldr	r3, [pc, #232]	@ (800370c <HAL_ADC_PollForConversion+0x204>)
 8003622:	400b      	ands	r3, r1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <HAL_ADC_PollForConversion+0x13c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6919      	ldr	r1, [r3, #16]
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <HAL_ADC_PollForConversion+0x208>)
 8003630:	400b      	ands	r3, r1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_ADC_PollForConversion+0x140>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68d9      	ldr	r1, [r3, #12]
 800363c:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_ADC_PollForConversion+0x208>)
 800363e:	400b      	ands	r3, r1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_ADC_PollForConversion+0x140>
 8003644:	2354      	movs	r3, #84	@ 0x54
 8003646:	e000      	b.n	800364a <HAL_ADC_PollForConversion+0x142>
 8003648:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003650:	e021      	b.n	8003696 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d01a      	beq.n	8003690 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_ADC_PollForConversion+0x168>
 8003660:	f7ff fd72 	bl	8003148 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d20f      	bcs.n	8003690 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d90b      	bls.n	8003690 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e030      	b.n	80036f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	429a      	cmp	r2, r3
 800369c:	d8d9      	bhi.n	8003652 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0212 	mvn.w	r2, #18
 80036a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80036be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80036c2:	d115      	bne.n	80036f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2000006c 	.word	0x2000006c
 8003700:	24924924 	.word	0x24924924
 8003704:	00924924 	.word	0x00924924
 8003708:	12492492 	.word	0x12492492
 800370c:	00492492 	.word	0x00492492
 8003710:	00249249 	.word	0x00249249

08003714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x20>
 8003748:	2302      	movs	r3, #2
 800374a:	e0dc      	b.n	8003906 <HAL_ADC_ConfigChannel+0x1da>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b06      	cmp	r3, #6
 800375a:	d81c      	bhi.n	8003796 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	3b05      	subs	r3, #5
 800376e:	221f      	movs	r2, #31
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	4019      	ands	r1, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	3b05      	subs	r3, #5
 8003788:	fa00 f203 	lsl.w	r2, r0, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	@ 0x34
 8003794:	e03c      	b.n	8003810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d81c      	bhi.n	80037d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	3b23      	subs	r3, #35	@ 0x23
 80037b0:	221f      	movs	r2, #31
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4019      	ands	r1, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b23      	subs	r3, #35	@ 0x23
 80037ca:	fa00 f203 	lsl.w	r2, r0, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80037d6:	e01b      	b.n	8003810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	3b41      	subs	r3, #65	@ 0x41
 80037ea:	221f      	movs	r2, #31
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4019      	ands	r1, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	3b41      	subs	r3, #65	@ 0x41
 8003804:	fa00 f203 	lsl.w	r2, r0, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b09      	cmp	r3, #9
 8003816:	d91c      	bls.n	8003852 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68d9      	ldr	r1, [r3, #12]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	3b1e      	subs	r3, #30
 800382a:	2207      	movs	r2, #7
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	4019      	ands	r1, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6898      	ldr	r0, [r3, #8]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	3b1e      	subs	r3, #30
 8003844:	fa00 f203 	lsl.w	r2, r0, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	e019      	b.n	8003886 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6919      	ldr	r1, [r3, #16]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	2207      	movs	r2, #7
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	4019      	ands	r1, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6898      	ldr	r0, [r3, #8]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	fa00 f203 	lsl.w	r2, r0, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b10      	cmp	r3, #16
 800388c:	d003      	beq.n	8003896 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003892:	2b11      	cmp	r3, #17
 8003894:	d132      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <HAL_ADC_ConfigChannel+0x1e4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d125      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d126      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80038bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d11a      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038c6:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <HAL_ADC_ConfigChannel+0x1e8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a13      	ldr	r2, [pc, #76]	@ (8003918 <HAL_ADC_ConfigChannel+0x1ec>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	0c9a      	lsrs	r2, r3, #18
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038dc:	e002      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f9      	bne.n	80038de <HAL_ADC_ConfigChannel+0x1b2>
 80038ea:	e007      	b.n	80038fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40012400 	.word	0x40012400
 8003914:	2000006c 	.word	0x2000006c
 8003918:	431bde83 	.word	0x431bde83

0800391c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d040      	beq.n	80039bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800394a:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <ADC_Enable+0xac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1f      	ldr	r2, [pc, #124]	@ (80039cc <ADC_Enable+0xb0>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003958:	e002      	b.n	8003960 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	3b01      	subs	r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f9      	bne.n	800395a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003966:	f7ff fbef 	bl	8003148 <HAL_GetTick>
 800396a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800396c:	e01f      	b.n	80039ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800396e:	f7ff fbeb 	bl	8003148 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d918      	bls.n	80039ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d011      	beq.n	80039ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e007      	b.n	80039be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d1d8      	bne.n	800396e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000006c 	.word	0x2000006c
 80039cc:	431bde83 	.word	0x431bde83

080039d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d12e      	bne.n	8003a48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039fa:	f7ff fba5 	bl	8003148 <HAL_GetTick>
 80039fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a00:	e01b      	b.n	8003a3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a02:	f7ff fba1 	bl	8003148 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d914      	bls.n	8003a3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d10d      	bne.n	8003a3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e007      	b.n	8003a4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d0dc      	beq.n	8003a02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0ed      	b.n	8003c40 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fe f8f9 	bl	8001c68 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a86:	f7ff fb5f 	bl	8003148 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a8c:	e012      	b.n	8003ab4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a8e:	f7ff fb5b 	bl	8003148 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b0a      	cmp	r3, #10
 8003a9a:	d90b      	bls.n	8003ab4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2205      	movs	r2, #5
 8003aac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0c5      	b.n	8003c40 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0e5      	beq.n	8003a8e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0202 	bic.w	r2, r2, #2
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad2:	f7ff fb39 	bl	8003148 <HAL_GetTick>
 8003ad6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ad8:	e012      	b.n	8003b00 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ada:	f7ff fb35 	bl	8003148 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b0a      	cmp	r3, #10
 8003ae6:	d90b      	bls.n	8003b00 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2205      	movs	r2, #5
 8003af8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e09f      	b.n	8003c40 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7e1b      	ldrb	r3, [r3, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d108      	bne.n	8003b28 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e007      	b.n	8003b38 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7e5b      	ldrb	r3, [r3, #25]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d108      	bne.n	8003b52 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e007      	b.n	8003b62 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7e9b      	ldrb	r3, [r3, #26]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d108      	bne.n	8003b7c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0220 	orr.w	r2, r2, #32
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0220 	bic.w	r2, r2, #32
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7edb      	ldrb	r3, [r3, #27]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d108      	bne.n	8003ba6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0210 	bic.w	r2, r2, #16
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e007      	b.n	8003bb6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0210 	orr.w	r2, r2, #16
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7f1b      	ldrb	r3, [r3, #28]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0208 	orr.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e007      	b.n	8003be0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0208 	bic.w	r2, r2, #8
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7f5b      	ldrb	r3, [r3, #29]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d108      	bne.n	8003bfa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0204 	orr.w	r2, r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e007      	b.n	8003c0a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0204 	bic.w	r2, r2, #4
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	ea42 0103 	orr.w	r1, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	1e5a      	subs	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d12e      	bne.n	8003cba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c74:	f7ff fa68 	bl	8003148 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c7a:	e012      	b.n	8003ca2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c7c:	f7ff fa64 	bl	8003148 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b0a      	cmp	r3, #10
 8003c88:	d90b      	bls.n	8003ca2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e012      	b.n	8003cc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e006      	b.n	8003cc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	@ 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d003      	beq.n	8003cfc <HAL_CAN_AddTxMessage+0x2c>
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	f040 80ad 	bne.w	8003e56 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d105      	bne.n	8003d1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8095 	beq.w	8003e46 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	0e1b      	lsrs	r3, r3, #24
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d26:	2201      	movs	r2, #1
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	6809      	ldr	r1, [r1, #0]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	440b      	add	r3, r1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e00f      	b.n	8003d74 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d5e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003d68:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	440b      	add	r3, r1
 8003d72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3318      	adds	r3, #24
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	440b      	add	r3, r1
 8003d84:	3304      	adds	r3, #4
 8003d86:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	7d1b      	ldrb	r3, [r3, #20]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d111      	bne.n	8003db4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3318      	adds	r3, #24
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3318      	adds	r3, #24
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	440b      	add	r3, r1
 8003db0:	3304      	adds	r3, #4
 8003db2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3307      	adds	r3, #7
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	061a      	lsls	r2, r3, #24
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3306      	adds	r3, #6
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3305      	adds	r3, #5
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	3204      	adds	r2, #4
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	6811      	ldr	r1, [r2, #0]
 8003ddc:	ea43 0200 	orr.w	r2, r3, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	440b      	add	r3, r1
 8003de6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003dea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3303      	adds	r3, #3
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	061a      	lsls	r2, r3, #24
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3302      	adds	r3, #2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3301      	adds	r3, #1
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	4313      	orrs	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	7812      	ldrb	r2, [r2, #0]
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	6811      	ldr	r1, [r2, #0]
 8003e12:	ea43 0200 	orr.w	r2, r3, r0
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003e20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3318      	adds	r3, #24
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	4413      	add	r3, r2
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6811      	ldr	r1, [r2, #0]
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3318      	adds	r3, #24
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	440b      	add	r3, r1
 8003e40:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e00e      	b.n	8003e64 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e006      	b.n	8003e64 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3724      	adds	r7, #36	@ 0x24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d002      	beq.n	8003e8c <HAL_CAN_ActivateNotification+0x1e>
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d109      	bne.n	8003ea0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6959      	ldr	r1, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e006      	b.n	8003eae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <__NVIC_SetPriorityGrouping+0x44>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eea:	4a04      	ldr	r2, [pc, #16]	@ (8003efc <__NVIC_SetPriorityGrouping+0x44>)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	60d3      	str	r3, [r2, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f04:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <__NVIC_GetPriorityGrouping+0x18>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f003 0307 	and.w	r3, r3, #7
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	@ (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	@ (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	@ 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff90 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff49 	bl	8003eb8 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004040:	f7ff ff5e 	bl	8003f00 <__NVIC_GetPriorityGrouping>
 8004044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff90 	bl	8003f70 <NVIC_EncodePriority>
 8004050:	4602      	mov	r2, r0
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff5f 	bl	8003f1c <__NVIC_SetPriority>
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ffb0 	bl	8003fd4 <SysTick_Config>
 8004074:	4603      	mov	r3, r0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004080:	b480      	push	{r7}
 8004082:	b08b      	sub	sp, #44	@ 0x2c
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004092:	e169      	b.n	8004368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004094:	2201      	movs	r2, #1
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 8158 	bne.w	8004362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a9a      	ldr	r2, [pc, #616]	@ (8004320 <HAL_GPIO_Init+0x2a0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d05e      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040bc:	4a98      	ldr	r2, [pc, #608]	@ (8004320 <HAL_GPIO_Init+0x2a0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d875      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040c2:	4a98      	ldr	r2, [pc, #608]	@ (8004324 <HAL_GPIO_Init+0x2a4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d058      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040c8:	4a96      	ldr	r2, [pc, #600]	@ (8004324 <HAL_GPIO_Init+0x2a4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d86f      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040ce:	4a96      	ldr	r2, [pc, #600]	@ (8004328 <HAL_GPIO_Init+0x2a8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d052      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040d4:	4a94      	ldr	r2, [pc, #592]	@ (8004328 <HAL_GPIO_Init+0x2a8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d869      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040da:	4a94      	ldr	r2, [pc, #592]	@ (800432c <HAL_GPIO_Init+0x2ac>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04c      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040e0:	4a92      	ldr	r2, [pc, #584]	@ (800432c <HAL_GPIO_Init+0x2ac>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d863      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040e6:	4a92      	ldr	r2, [pc, #584]	@ (8004330 <HAL_GPIO_Init+0x2b0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d046      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040ec:	4a90      	ldr	r2, [pc, #576]	@ (8004330 <HAL_GPIO_Init+0x2b0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d85d      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040f2:	2b12      	cmp	r3, #18
 80040f4:	d82a      	bhi.n	800414c <HAL_GPIO_Init+0xcc>
 80040f6:	2b12      	cmp	r3, #18
 80040f8:	d859      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_GPIO_Init+0x80>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	0800417b 	.word	0x0800417b
 8004104:	08004155 	.word	0x08004155
 8004108:	08004167 	.word	0x08004167
 800410c:	080041a9 	.word	0x080041a9
 8004110:	080041af 	.word	0x080041af
 8004114:	080041af 	.word	0x080041af
 8004118:	080041af 	.word	0x080041af
 800411c:	080041af 	.word	0x080041af
 8004120:	080041af 	.word	0x080041af
 8004124:	080041af 	.word	0x080041af
 8004128:	080041af 	.word	0x080041af
 800412c:	080041af 	.word	0x080041af
 8004130:	080041af 	.word	0x080041af
 8004134:	080041af 	.word	0x080041af
 8004138:	080041af 	.word	0x080041af
 800413c:	080041af 	.word	0x080041af
 8004140:	080041af 	.word	0x080041af
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004171 	.word	0x08004171
 800414c:	4a79      	ldr	r2, [pc, #484]	@ (8004334 <HAL_GPIO_Init+0x2b4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004152:	e02c      	b.n	80041ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	623b      	str	r3, [r7, #32]
          break;
 800415a:	e029      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	623b      	str	r3, [r7, #32]
          break;
 8004164:	e024      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	3308      	adds	r3, #8
 800416c:	623b      	str	r3, [r7, #32]
          break;
 800416e:	e01f      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	330c      	adds	r3, #12
 8004176:	623b      	str	r3, [r7, #32]
          break;
 8004178:	e01a      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004182:	2304      	movs	r3, #4
 8004184:	623b      	str	r3, [r7, #32]
          break;
 8004186:	e013      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004190:	2308      	movs	r3, #8
 8004192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	611a      	str	r2, [r3, #16]
          break;
 800419a:	e009      	b.n	80041b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800419c:	2308      	movs	r3, #8
 800419e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	615a      	str	r2, [r3, #20]
          break;
 80041a6:	e003      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041a8:	2300      	movs	r3, #0
 80041aa:	623b      	str	r3, [r7, #32]
          break;
 80041ac:	e000      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          break;
 80041ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2bff      	cmp	r3, #255	@ 0xff
 80041b4:	d801      	bhi.n	80041ba <HAL_GPIO_Init+0x13a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_Init+0x13e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2bff      	cmp	r3, #255	@ 0xff
 80041c4:	d802      	bhi.n	80041cc <HAL_GPIO_Init+0x14c>
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	e002      	b.n	80041d2 <HAL_GPIO_Init+0x152>
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	3b08      	subs	r3, #8
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	210f      	movs	r1, #15
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	401a      	ands	r2, r3
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80b1 	beq.w	8004362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <HAL_GPIO_Init+0x2b8>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	4a4c      	ldr	r2, [pc, #304]	@ (8004338 <HAL_GPIO_Init+0x2b8>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6193      	str	r3, [r2, #24]
 800420c:	4b4a      	ldr	r3, [pc, #296]	@ (8004338 <HAL_GPIO_Init+0x2b8>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004218:	4a48      	ldr	r2, [pc, #288]	@ (800433c <HAL_GPIO_Init+0x2bc>)
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3302      	adds	r3, #2
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	220f      	movs	r2, #15
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a40      	ldr	r2, [pc, #256]	@ (8004340 <HAL_GPIO_Init+0x2c0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_GPIO_Init+0x1ec>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <HAL_GPIO_Init+0x2c4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00d      	beq.n	8004268 <HAL_GPIO_Init+0x1e8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3e      	ldr	r2, [pc, #248]	@ (8004348 <HAL_GPIO_Init+0x2c8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <HAL_GPIO_Init+0x1e4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3d      	ldr	r2, [pc, #244]	@ (800434c <HAL_GPIO_Init+0x2cc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_GPIO_Init+0x1e0>
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004260:	2304      	movs	r3, #4
 8004262:	e004      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004264:	2302      	movs	r3, #2
 8004266:	e002      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 800426c:	2300      	movs	r3, #0
 800426e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004270:	f002 0203 	and.w	r2, r2, #3
 8004274:	0092      	lsls	r2, r2, #2
 8004276:	4093      	lsls	r3, r2
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800427e:	492f      	ldr	r1, [pc, #188]	@ (800433c <HAL_GPIO_Init+0x2bc>)
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004298:	4b2d      	ldr	r3, [pc, #180]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	492c      	ldr	r1, [pc, #176]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	4928      	ldr	r1, [pc, #160]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042c0:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4922      	ldr	r1, [pc, #136]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	491e      	ldr	r1, [pc, #120]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042d8:	4013      	ands	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042e8:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4918      	ldr	r1, [pc, #96]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4914      	ldr	r1, [pc, #80]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 8004300:	4013      	ands	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d021      	beq.n	8004354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	490e      	ldr	r1, [pc, #56]	@ (8004350 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e021      	b.n	8004362 <HAL_GPIO_Init+0x2e2>
 800431e:	bf00      	nop
 8004320:	10320000 	.word	0x10320000
 8004324:	10310000 	.word	0x10310000
 8004328:	10220000 	.word	0x10220000
 800432c:	10210000 	.word	0x10210000
 8004330:	10120000 	.word	0x10120000
 8004334:	10110000 	.word	0x10110000
 8004338:	40021000 	.word	0x40021000
 800433c:	40010000 	.word	0x40010000
 8004340:	40010800 	.word	0x40010800
 8004344:	40010c00 	.word	0x40010c00
 8004348:	40011000 	.word	0x40011000
 800434c:	40011400 	.word	0x40011400
 8004350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_GPIO_Init+0x304>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	43db      	mvns	r3, r3
 800435c:	4909      	ldr	r1, [pc, #36]	@ (8004384 <HAL_GPIO_Init+0x304>)
 800435e:	4013      	ands	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	3301      	adds	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	f47f ae8e 	bne.w	8004094 <HAL_GPIO_Init+0x14>
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	372c      	adds	r7, #44	@ 0x2c
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043a4:	e003      	b.n	80043ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	041a      	lsls	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	611a      	str	r2, [r3, #16]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	43d9      	mvns	r1, r3
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	400b      	ands	r3, r1
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	611a      	str	r2, [r3, #16]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e304      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8087 	beq.w	800451a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800440c:	4b92      	ldr	r3, [pc, #584]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b04      	cmp	r3, #4
 8004416:	d00c      	beq.n	8004432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004418:	4b8f      	ldr	r3, [pc, #572]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d112      	bne.n	800444a <HAL_RCC_OscConfig+0x5e>
 8004424:	4b8c      	ldr	r3, [pc, #560]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004430:	d10b      	bne.n	800444a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004432:	4b89      	ldr	r3, [pc, #548]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d06c      	beq.n	8004518 <HAL_RCC_OscConfig+0x12c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d168      	bne.n	8004518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e2de      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x76>
 8004454:	4b80      	ldr	r3, [pc, #512]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7f      	ldr	r2, [pc, #508]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800445a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e02e      	b.n	80044c0 <HAL_RCC_OscConfig+0xd4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x98>
 800446a:	4b7b      	ldr	r3, [pc, #492]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7a      	ldr	r2, [pc, #488]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b78      	ldr	r3, [pc, #480]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a77      	ldr	r2, [pc, #476]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800447c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e01d      	b.n	80044c0 <HAL_RCC_OscConfig+0xd4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0xbc>
 800448e:	4b72      	ldr	r3, [pc, #456]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a71      	ldr	r2, [pc, #452]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b6f      	ldr	r3, [pc, #444]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6e      	ldr	r2, [pc, #440]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0xd4>
 80044a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b68      	ldr	r3, [pc, #416]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a67      	ldr	r2, [pc, #412]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fe3e 	bl	8003148 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fe fe3a 	bl	8003148 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e292      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0xe4>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe fe2a 	bl	8003148 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fe fe26 	bl	8003148 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e27e      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x10c>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d063      	beq.n	80045ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004526:	4b4c      	ldr	r3, [pc, #304]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004532:	4b49      	ldr	r3, [pc, #292]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x18c>
 800453e:	4b46      	ldr	r3, [pc, #280]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	4b43      	ldr	r3, [pc, #268]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x176>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e252      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004562:	4b3d      	ldr	r3, [pc, #244]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4939      	ldr	r1, [pc, #228]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	e03a      	b.n	80045ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b36      	ldr	r3, [pc, #216]	@ (800465c <HAL_RCC_OscConfig+0x270>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe fddf 	bl	8003148 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458e:	f7fe fddb 	bl	8003148 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e233      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4927      	ldr	r1, [pc, #156]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c2:	4b26      	ldr	r3, [pc, #152]	@ (800465c <HAL_RCC_OscConfig+0x270>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fe fdbe 	bl	8003148 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fdba 	bl	8003148 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e212      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03a      	beq.n	8004670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d019      	beq.n	8004636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <HAL_RCC_OscConfig+0x274>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004608:	f7fe fd9e 	bl	8003148 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004610:	f7fe fd9a 	bl	8003148 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1f2      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	4b0d      	ldr	r3, [pc, #52]	@ (8004658 <HAL_RCC_OscConfig+0x26c>)
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800462e:	2001      	movs	r0, #1
 8004630:	f000 fbca 	bl	8004dc8 <RCC_Delay>
 8004634:	e01c      	b.n	8004670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_RCC_OscConfig+0x274>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463c:	f7fe fd84 	bl	8003148 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004642:	e00f      	b.n	8004664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004644:	f7fe fd80 	bl	8003148 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d908      	bls.n	8004664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e1d8      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	42420000 	.word	0x42420000
 8004660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004664:	4b9b      	ldr	r3, [pc, #620]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e9      	bne.n	8004644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a6 	beq.w	80047ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004682:	4b94      	ldr	r3, [pc, #592]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	4b91      	ldr	r3, [pc, #580]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4a90      	ldr	r2, [pc, #576]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004698:	61d3      	str	r3, [r2, #28]
 800469a:	4b8e      	ldr	r3, [pc, #568]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046aa:	4b8b      	ldr	r3, [pc, #556]	@ (80048d8 <HAL_RCC_OscConfig+0x4ec>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d118      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b6:	4b88      	ldr	r3, [pc, #544]	@ (80048d8 <HAL_RCC_OscConfig+0x4ec>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a87      	ldr	r2, [pc, #540]	@ (80048d8 <HAL_RCC_OscConfig+0x4ec>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c2:	f7fe fd41 	bl	8003148 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ca:	f7fe fd3d 	bl	8003148 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b64      	cmp	r3, #100	@ 0x64
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e195      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	4b7e      	ldr	r3, [pc, #504]	@ (80048d8 <HAL_RCC_OscConfig+0x4ec>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x312>
 80046f0:	4b78      	ldr	r3, [pc, #480]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	4a77      	ldr	r2, [pc, #476]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6213      	str	r3, [r2, #32]
 80046fc:	e02d      	b.n	800475a <HAL_RCC_OscConfig+0x36e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x334>
 8004706:	4b73      	ldr	r3, [pc, #460]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	4a72      	ldr	r2, [pc, #456]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	6213      	str	r3, [r2, #32]
 8004712:	4b70      	ldr	r3, [pc, #448]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4a6f      	ldr	r2, [pc, #444]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004718:	f023 0304 	bic.w	r3, r3, #4
 800471c:	6213      	str	r3, [r2, #32]
 800471e:	e01c      	b.n	800475a <HAL_RCC_OscConfig+0x36e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b05      	cmp	r3, #5
 8004726:	d10c      	bne.n	8004742 <HAL_RCC_OscConfig+0x356>
 8004728:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4a69      	ldr	r2, [pc, #420]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800472e:	f043 0304 	orr.w	r3, r3, #4
 8004732:	6213      	str	r3, [r2, #32]
 8004734:	4b67      	ldr	r3, [pc, #412]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4a66      	ldr	r2, [pc, #408]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6213      	str	r3, [r2, #32]
 8004740:	e00b      	b.n	800475a <HAL_RCC_OscConfig+0x36e>
 8004742:	4b64      	ldr	r3, [pc, #400]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4a63      	ldr	r2, [pc, #396]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6213      	str	r3, [r2, #32]
 800474e:	4b61      	ldr	r3, [pc, #388]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	4a60      	ldr	r2, [pc, #384]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004762:	f7fe fcf1 	bl	8003148 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fe fced 	bl	8003148 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e143      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	4b54      	ldr	r3, [pc, #336]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ee      	beq.n	800476a <HAL_RCC_OscConfig+0x37e>
 800478c:	e014      	b.n	80047b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478e:	f7fe fcdb 	bl	8003148 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fe fcd7 	bl	8003148 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e12d      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ac:	4b49      	ldr	r3, [pc, #292]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ee      	bne.n	8004796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047be:	4b45      	ldr	r3, [pc, #276]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4a44      	ldr	r2, [pc, #272]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80047c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047c8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 808c 	beq.w	80048ec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80047d4:	4b3f      	ldr	r3, [pc, #252]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e0:	d10e      	bne.n	8004800 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80047e2:	4b3c      	ldr	r3, [pc, #240]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d108      	bne.n	8004800 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80047ee:	4b39      	ldr	r3, [pc, #228]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e103      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	2b02      	cmp	r3, #2
 8004806:	d14e      	bne.n	80048a6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004808:	4b32      	ldr	r3, [pc, #200]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d009      	beq.n	8004828 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004814:	4b2f      	ldr	r3, [pc, #188]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0ef      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004828:	4b2c      	ldr	r3, [pc, #176]	@ (80048dc <HAL_RCC_OscConfig+0x4f0>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482e:	f7fe fc8b 	bl	8003148 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004836:	f7fe fc87 	bl	8003148 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b64      	cmp	r3, #100	@ 0x64
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e0df      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004848:	4b22      	ldr	r3, [pc, #136]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004854:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004860:	491c      	ldr	r1, [pc, #112]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004862:	4313      	orrs	r3, r2
 8004864:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004866:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	4918      	ldr	r1, [pc, #96]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004878:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <HAL_RCC_OscConfig+0x4f0>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fe fc63 	bl	8003148 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004886:	f7fe fc5f 	bl	8003148 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	@ 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0b7      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004898:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x49a>
 80048a4:	e022      	b.n	80048ec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80048a6:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4a0a      	ldr	r2, [pc, #40]	@ (80048d4 <HAL_RCC_OscConfig+0x4e8>)
 80048ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80048b2:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <HAL_RCC_OscConfig+0x4f0>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fe fc46 	bl	8003148 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80048be:	e00f      	b.n	80048e0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048c0:	f7fe fc42 	bl	8003148 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	@ 0x64
 80048cc:	d908      	bls.n	80048e0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e09a      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80048e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e9      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8088 	beq.w	8004a06 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f6:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d068      	beq.n	80049d4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d14d      	bne.n	80049a6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b42      	ldr	r3, [pc, #264]	@ (8004a14 <HAL_RCC_OscConfig+0x628>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fe fc1a 	bl	8003148 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fe fc16 	bl	8003148 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e06e      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492a:	4b39      	ldr	r3, [pc, #228]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493e:	d10f      	bne.n	8004960 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004940:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 8004942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4931      	ldr	r1, [pc, #196]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 800494a:	4313      	orrs	r3, r2
 800494c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800494e:	4b30      	ldr	r3, [pc, #192]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	f023 020f 	bic.w	r2, r3, #15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	492d      	ldr	r1, [pc, #180]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 800495c:	4313      	orrs	r3, r2
 800495e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004960:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	430b      	orrs	r3, r1
 8004972:	4927      	ldr	r1, [pc, #156]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <HAL_RCC_OscConfig+0x628>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fe fbe3 	bl	8003148 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004986:	f7fe fbdf 	bl	8003148 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e037      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004998:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x59a>
 80049a4:	e02f      	b.n	8004a06 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <HAL_RCC_OscConfig+0x628>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fe fbcc 	bl	8003148 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fe fbc8 	bl	8003148 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e020      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c6:	4b12      	ldr	r3, [pc, #72]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x5c8>
 80049d2:	e018      	b.n	8004a06 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e013      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_OscConfig+0x624>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000
 8004a14:	42420060 	.word	0x42420060

08004a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0d0      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d910      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b67      	ldr	r3, [pc, #412]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 0207 	bic.w	r2, r3, #7
 8004a42:	4965      	ldr	r1, [pc, #404]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b63      	ldr	r3, [pc, #396]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0b8      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d020      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a74:	4b59      	ldr	r3, [pc, #356]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a58      	ldr	r2, [pc, #352]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a8c:	4b53      	ldr	r3, [pc, #332]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a52      	ldr	r2, [pc, #328]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b50      	ldr	r3, [pc, #320]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	494d      	ldr	r1, [pc, #308]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d040      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b41      	ldr	r3, [pc, #260]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e073      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06b      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b39      	ldr	r3, [pc, #228]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4936      	ldr	r1, [pc, #216]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b08:	f7fe fb1e 	bl	8003148 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fe fb1a 	bl	8003148 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e053      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2d      	ldr	r3, [pc, #180]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b27      	ldr	r3, [pc, #156]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d210      	bcs.n	8004b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 0207 	bic.w	r2, r3, #7
 8004b4e:	4922      	ldr	r1, [pc, #136]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e032      	b.n	8004bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4916      	ldr	r1, [pc, #88]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	490e      	ldr	r1, [pc, #56]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba6:	f000 f821 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	490a      	ldr	r1, [pc, #40]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x1cc>)
 8004bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bc2:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCC_ClockConfig+0x1d0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fa7c 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40022000 	.word	0x40022000
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	08006ac8 	.word	0x08006ac8
 8004be4:	2000006c 	.word	0x2000006c
 8004be8:	20000070 	.word	0x20000070

08004bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b08e      	sub	sp, #56	@ 0x38
 8004bf2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c10:	4b4e      	ldr	r3, [pc, #312]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d002      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d003      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	e089      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b4a      	ldr	r3, [pc, #296]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c28:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004c2a:	e089      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	0c9b      	lsrs	r3, r3, #18
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	4b47      	ldr	r3, [pc, #284]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c36:	5c9b      	ldrb	r3, [r3, r2]
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d072      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004c44:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	f003 020f 	and.w	r2, r3, #15
 8004c4c:	4b42      	ldr	r3, [pc, #264]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004c4e:	5c9b      	ldrb	r3, [r3, r2]
 8004c50:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004c52:	4b3e      	ldr	r3, [pc, #248]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d053      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	3301      	adds	r3, #1
 8004c6a:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004c6c:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3302      	adds	r3, #2
 8004c78:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	469a      	mov	sl, r3
 8004c80:	4693      	mov	fp, r2
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	2200      	movs	r2, #0
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	617a      	str	r2, [r7, #20]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	fb03 f20b 	mul.w	r2, r3, fp
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fb0a f303 	mul.w	r3, sl, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	fbaa 0102 	umull	r0, r1, sl, r2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ca4:	fb03 f201 	mul.w	r2, r3, r1
 8004ca8:	2300      	movs	r3, #0
 8004caa:	fb00 f303 	mul.w	r3, r0, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a27      	ldr	r2, [pc, #156]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cb2:	fba0 4502 	umull	r4, r5, r0, r2
 8004cb6:	442b      	add	r3, r5
 8004cb8:	461d      	mov	r5, r3
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	60fa      	str	r2, [r7, #12]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	fb02 f203 	mul.w	r2, r2, r3
 8004cda:	465b      	mov	r3, fp
 8004cdc:	4684      	mov	ip, r0
 8004cde:	fb0c f303 	mul.w	r3, ip, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	fba2 8901 	umull	r8, r9, r2, r1
 8004cec:	444b      	add	r3, r9
 8004cee:	4699      	mov	r9, r3
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fc f9d0 	bl	800109c <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d04:	e007      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	4a11      	ldr	r2, [pc, #68]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x164>)
 8004d0a:	fb03 f202 	mul.w	r2, r3, r2
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004d16:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d18:	7b5b      	ldrb	r3, [r3, #13]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d108      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8004d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d28:	e004      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x170>)
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d36:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004d38:	e002      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x174>)
 8004d3c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3738      	adds	r7, #56	@ 0x38
 8004d46:	46bd      	mov	sp, r7
 8004d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	017d7840 	.word	0x017d7840
 8004d54:	08006ae0 	.word	0x08006ae0
 8004d58:	08006af0 	.word	0x08006af0
 8004d5c:	003d0900 	.word	0x003d0900
 8004d60:	007a1200 	.word	0x007a1200

08004d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d68:	4b02      	ldr	r3, [pc, #8]	@ (8004d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	2000006c 	.word	0x2000006c

08004d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d7c:	f7ff fff2 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4903      	ldr	r1, [pc, #12]	@ (8004d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	08006ad8 	.word	0x08006ad8

08004da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004da4:	f7ff ffde 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0adb      	lsrs	r3, r3, #11
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	@ (8004dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	08006ad8 	.word	0x08006ad8

08004dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <RCC_Delay+0x34>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004e00 <RCC_Delay+0x38>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0a5b      	lsrs	r3, r3, #9
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004de4:	bf00      	nop
  }
  while (Delay --);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1e5a      	subs	r2, r3, #1
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f9      	bne.n	8004de4 <RCC_Delay+0x1c>
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	2000006c 	.word	0x2000006c
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d07d      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e24:	2300      	movs	r3, #0
 8004e26:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e28:	4b8b      	ldr	r3, [pc, #556]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10d      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e34:	4b88      	ldr	r3, [pc, #544]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4a87      	ldr	r2, [pc, #540]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	61d3      	str	r3, [r2, #28]
 8004e40:	4b85      	ldr	r3, [pc, #532]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b82      	ldr	r3, [pc, #520]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d118      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a7e      	ldr	r2, [pc, #504]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e68:	f7fe f96e 	bl	8003148 <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	e008      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e70:	f7fe f96a 	bl	8003148 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	@ 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0e5      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e82:	4b76      	ldr	r3, [pc, #472]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8e:	4b72      	ldr	r3, [pc, #456]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e96:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d02e      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d027      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eac:	4b6a      	ldr	r3, [pc, #424]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebc:	4b68      	ldr	r3, [pc, #416]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ec2:	4a65      	ldr	r2, [pc, #404]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d014      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fe f939 	bl	8003148 <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fe f935 	bl	8003148 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0ae      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	4b59      	ldr	r3, [pc, #356]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ee      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efc:	4b56      	ldr	r3, [pc, #344]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4953      	ldr	r1, [pc, #332]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f0e:	7efb      	ldrb	r3, [r7, #27]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d105      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f14:	4b50      	ldr	r3, [pc, #320]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	4a4f      	ldr	r2, [pc, #316]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4947      	ldr	r1, [pc, #284]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f4a:	4b43      	ldr	r3, [pc, #268]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	4940      	ldr	r1, [pc, #256]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004f68:	4b3b      	ldr	r3, [pc, #236]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	4938      	ldr	r1, [pc, #224]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004f7a:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004f86:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d148      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d138      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004fb4:	4b28      	ldr	r3, [pc, #160]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e042      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004fc8:	4b23      	ldr	r3, [pc, #140]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	4920      	ldr	r1, [pc, #128]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004fda:	4b1f      	ldr	r3, [pc, #124]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	491c      	ldr	r1, [pc, #112]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004fec:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fe f8a9 	bl	8003148 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ffa:	f7fe f8a5 	bl	8003148 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b64      	cmp	r3, #100	@ 0x64
 8005006:	d901      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e020      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800500c:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005018:	e009      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800501a:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e00f      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800503a:	4b07      	ldr	r3, [pc, #28]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	4904      	ldr	r1, [pc, #16]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
 8005060:	42420440 	.word	0x42420440
 8005064:	42420070 	.word	0x42420070

08005068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	@ 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	2300      	movs	r3, #0
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	2300      	movs	r3, #0
 800508e:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	2b0f      	cmp	r3, #15
 8005096:	f200 811d 	bhi.w	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	08005255 	.word	0x08005255
 80050a4:	080052b9 	.word	0x080052b9
 80050a8:	080052d5 	.word	0x080052d5
 80050ac:	080051b3 	.word	0x080051b3
 80050b0:	080052d5 	.word	0x080052d5
 80050b4:	080052d5 	.word	0x080052d5
 80050b8:	080052d5 	.word	0x080052d5
 80050bc:	08005205 	.word	0x08005205
 80050c0:	080052d5 	.word	0x080052d5
 80050c4:	080052d5 	.word	0x080052d5
 80050c8:	080052d5 	.word	0x080052d5
 80050cc:	080052d5 	.word	0x080052d5
 80050d0:	080052d5 	.word	0x080052d5
 80050d4:	080052d5 	.word	0x080052d5
 80050d8:	080052d5 	.word	0x080052d5
 80050dc:	080050e1 	.word	0x080050e1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80050e0:	4b83      	ldr	r3, [pc, #524]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80050e6:	4b82      	ldr	r3, [pc, #520]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80f2 	beq.w	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	0c9b      	lsrs	r3, r3, #18
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	4a7d      	ldr	r2, [pc, #500]	@ (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80050fe:	5cd3      	ldrb	r3, [r2, r3]
 8005100:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d03b      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800510c:	4b78      	ldr	r3, [pc, #480]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	4a78      	ldr	r2, [pc, #480]	@ (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005116:	5cd3      	ldrb	r3, [r2, r3]
 8005118:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800511a:	4b75      	ldr	r3, [pc, #468]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01c      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005126:	4b72      	ldr	r3, [pc, #456]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005134:	4b6e      	ldr	r3, [pc, #440]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	3302      	adds	r3, #2
 8005140:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005142:	4a6e      	ldr	r2, [pc, #440]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	fb03 f202 	mul.w	r2, r3, r2
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	fbb2 f2f3 	udiv	r2, r2, r3
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
 800515e:	e007      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005160:	4a66      	ldr	r2, [pc, #408]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	fbb2 f2f3 	udiv	r2, r2, r3
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005170:	4b60      	ldr	r3, [pc, #384]	@ (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005172:	7b5b      	ldrb	r3, [r3, #13]
 8005174:	461a      	mov	r2, r3
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
 8005182:	e004      	b.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	4a5e      	ldr	r2, [pc, #376]	@ (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005188:	fb02 f303 	mul.w	r3, r2, r3
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800518e:	4b58      	ldr	r3, [pc, #352]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800519a:	d102      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80051a0:	e09a      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4a57      	ldr	r2, [pc, #348]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	623b      	str	r3, [r7, #32]
      break;
 80051b0:	e092      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80051b2:	4b4f      	ldr	r3, [pc, #316]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 80051be:	f7ff fd15 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80051c2:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80051c4:	e08a      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80051c6:	4b4a      	ldr	r3, [pc, #296]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8084 	beq.w	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80051d4:	4b46      	ldr	r3, [pc, #280]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80051e2:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	0b1b      	lsrs	r3, r3, #12
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	3302      	adds	r3, #2
 80051ee:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80051f0:	4a42      	ldr	r2, [pc, #264]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	623b      	str	r3, [r7, #32]
      break;
 8005202:	e06b      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8005204:	4b3a      	ldr	r3, [pc, #232]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005210:	f7ff fcec 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8005214:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005216:	e063      	b.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005218:	4b35      	ldr	r3, [pc, #212]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05d      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005224:	4b32      	ldr	r3, [pc, #200]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005232:	4b2f      	ldr	r3, [pc, #188]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	0b1b      	lsrs	r3, r3, #12
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	3302      	adds	r3, #2
 800523e:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005240:	4a2e      	ldr	r2, [pc, #184]	@ (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	623b      	str	r3, [r7, #32]
      break;
 8005252:	e045      	b.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005254:	4b26      	ldr	r3, [pc, #152]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005264:	d108      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8005270:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	e01e      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005282:	d109      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005284:	4b1a      	ldr	r3, [pc, #104]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8005290:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	e00e      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a2:	d11f      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80052a4:	4b12      	ldr	r3, [pc, #72]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d019      	beq.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 80052b0:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80052b2:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80052b4:	e016      	b.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80052b6:	e015      	b.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052b8:	f7ff fd72 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	0b9b      	lsrs	r3, r3, #14
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	3301      	adds	r3, #1
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	623b      	str	r3, [r7, #32]
      break;
 80052d2:	e008      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 80052d4:	bf00      	nop
 80052d6:	e006      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80052d8:	bf00      	nop
 80052da:	e004      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80052e4:	bf00      	nop
    }
  }
  return (frequency);
 80052e6:	6a3b      	ldr	r3, [r7, #32]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	@ 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	08006b00 	.word	0x08006b00
 80052f8:	08006b10 	.word	0x08006b10
 80052fc:	017d7840 	.word	0x017d7840
 8005300:	003d0900 	.word	0x003d0900
 8005304:	aaaaaaab 	.word	0xaaaaaaab
 8005308:	0002faf0 	.word	0x0002faf0

0800530c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e076      	b.n	800540c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800532e:	d009      	beq.n	8005344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	61da      	str	r2, [r3, #28]
 8005336:	e005      	b.n	8005344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fd fce4 	bl	8002d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c8:	ea42 0103 	orr.w	r1, r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	0c1a      	lsrs	r2, r3, #16
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f002 0204 	and.w	r2, r2, #4
 80053ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005424:	f7fd fe90 	bl	8003148 <HAL_GetTick>
 8005428:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d001      	beq.n	800543e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
 800543c:	e12a      	b.n	8005694 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_SPI_Transmit+0x36>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e122      	b.n	8005694 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_SPI_Transmit+0x48>
 8005458:	2302      	movs	r3, #2
 800545a:	e11b      	b.n	8005694 <HAL_SPI_Transmit+0x280>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2203      	movs	r2, #3
 8005468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054aa:	d10f      	bne.n	80054cc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d6:	2b40      	cmp	r3, #64	@ 0x40
 80054d8:	d007      	beq.n	80054ea <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f2:	d152      	bne.n	800559a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Transmit+0xee>
 80054fc:	8b7b      	ldrh	r3, [r7, #26]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d145      	bne.n	800558e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	881a      	ldrh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005526:	e032      	b.n	800558e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b02      	cmp	r3, #2
 8005534:	d112      	bne.n	800555c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553a:	881a      	ldrh	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	1c9a      	adds	r2, r3, #2
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	86da      	strh	r2, [r3, #54]	@ 0x36
 800555a:	e018      	b.n	800558e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800555c:	f7fd fdf4 	bl	8003148 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d803      	bhi.n	8005574 <HAL_SPI_Transmit+0x160>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d102      	bne.n	800557a <HAL_SPI_Transmit+0x166>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e082      	b.n	8005694 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1c7      	bne.n	8005528 <HAL_SPI_Transmit+0x114>
 8005598:	e053      	b.n	8005642 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Transmit+0x194>
 80055a2:	8b7b      	ldrh	r3, [r7, #26]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d147      	bne.n	8005638 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055ce:	e033      	b.n	8005638 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d113      	bne.n	8005606 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005604:	e018      	b.n	8005638 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005606:	f7fd fd9f 	bl	8003148 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d803      	bhi.n	800561e <HAL_SPI_Transmit+0x20a>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d102      	bne.n	8005624 <HAL_SPI_Transmit+0x210>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e02d      	b.n	8005694 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1c6      	bne.n	80055d0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fbc4 	bl	8005dd4 <SPI_EndRxTxTransaction>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005692:	2300      	movs	r3, #0
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d001      	beq.n	80056bc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
 80056ba:	e104      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c4:	d112      	bne.n	80056ec <HAL_SPI_Receive+0x50>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10e      	bne.n	80056ec <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2204      	movs	r2, #4
 80056d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f8f3 	bl	80058ce <HAL_SPI_TransmitReceive>
 80056e8:	4603      	mov	r3, r0
 80056ea:	e0ec      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ec:	f7fd fd2c 	bl	8003148 <HAL_GetTick>
 80056f0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Receive+0x62>
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0e1      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_SPI_Receive+0x74>
 800570c:	2302      	movs	r3, #2
 800570e:	e0da      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2204      	movs	r2, #4
 800571c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575e:	d10f      	bne.n	8005780 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800577e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b40      	cmp	r3, #64	@ 0x40
 800578c:	d007      	beq.n	800579e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800579c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d170      	bne.n	8005888 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057a6:	e035      	b.n	8005814 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d115      	bne.n	80057e2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f103 020c 	add.w	r2, r3, #12
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057e0:	e018      	b.n	8005814 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e2:	f7fd fcb1 	bl	8003148 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d803      	bhi.n	80057fa <HAL_SPI_Receive+0x15e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_Receive+0x164>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e058      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1c4      	bne.n	80057a8 <HAL_SPI_Receive+0x10c>
 800581e:	e038      	b.n	8005892 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d113      	bne.n	8005856 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	b292      	uxth	r2, r2
 800583a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005854:	e018      	b.n	8005888 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005856:	f7fd fc77 	bl	8003148 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d803      	bhi.n	800586e <HAL_SPI_Receive+0x1d2>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d102      	bne.n	8005874 <HAL_SPI_Receive+0x1d8>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e01e      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1c6      	bne.n	8005820 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fa4a 	bl	8005d30 <SPI_EndRxTransaction>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08a      	sub	sp, #40	@ 0x28
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058dc:	2301      	movs	r3, #1
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e0:	f7fd fc32 	bl	8003148 <HAL_GetTick>
 80058e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058f8:	7ffb      	ldrb	r3, [r7, #31]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d00c      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x4a>
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005904:	d106      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x46>
 800590e:	7ffb      	ldrb	r3, [r7, #31]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d001      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005914:	2302      	movs	r3, #2
 8005916:	e17f      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_SPI_TransmitReceive+0x5c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_TransmitReceive+0x5c>
 8005924:	887b      	ldrh	r3, [r7, #2]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e174      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_SPI_TransmitReceive+0x6e>
 8005938:	2302      	movs	r3, #2
 800593a:	e16d      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b04      	cmp	r3, #4
 800594e:	d003      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2205      	movs	r2, #5
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	887a      	ldrh	r2, [r7, #2]
 800596e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	887a      	ldrh	r2, [r7, #2]
 800597a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005998:	2b40      	cmp	r3, #64	@ 0x40
 800599a:	d007      	beq.n	80059ac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b4:	d17e      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0xf6>
 80059be:	8afb      	ldrh	r3, [r7, #22]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d16c      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e8:	e059      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d11b      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x162>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x162>
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d113      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	1c9a      	adds	r2, r3, #2
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d119      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x1a4>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d014      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	b292      	uxth	r2, r2
 8005a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a72:	f7fd fb69 	bl	8003148 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d80d      	bhi.n	8005a9e <HAL_SPI_TransmitReceive+0x1d0>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d009      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0bc      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1a0      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x11c>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d19b      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x11c>
 8005ab2:	e082      	b.n	8005bba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x1f4>
 8005abc:	8afb      	ldrh	r3, [r7, #22]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d171      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae8:	e05d      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d11c      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x264>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x264>
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d114      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d119      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x2a6>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d014      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b70:	2301      	movs	r3, #1
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b74:	f7fd fae8 	bl	8003148 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d803      	bhi.n	8005b8c <HAL_SPI_TransmitReceive+0x2be>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x2c4>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e038      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d19c      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x21c>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d197      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f908 	bl	8005dd4 <SPI_EndRxTxTransaction>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e01d      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
  }
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	@ 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c30:	f7fd fa8a 	bl	8003148 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c40:	f7fd fa82 	bl	8003148 <HAL_GetTick>
 8005c44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c46:	4b39      	ldr	r3, [pc, #228]	@ (8005d2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	015b      	lsls	r3, r3, #5
 8005c4c:	0d1b      	lsrs	r3, r3, #20
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c56:	e054      	b.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d050      	beq.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c60:	f7fd fa72 	bl	8003148 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d902      	bls.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d13d      	bne.n	8005cf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c8e:	d111      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c98:	d004      	beq.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca2:	d107      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cbc:	d10f      	bne.n	8005cde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e017      	b.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d19b      	bne.n	8005c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	2000006c 	.word	0x2000006c

08005d30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d44:	d111      	bne.n	8005d6a <SPI_EndRxTransaction+0x3a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d4e:	d004      	beq.n	8005d5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d58:	d107      	bne.n	8005d6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d68:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d72:	d117      	bne.n	8005da4 <SPI_EndRxTransaction+0x74>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d7c:	d112      	bne.n	8005da4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2101      	movs	r1, #1
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff ff49 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e013      	b.n	8005dcc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2200      	movs	r2, #0
 8005dac:	2180      	movs	r1, #128	@ 0x80
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff ff36 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e000      	b.n	8005dcc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2201      	movs	r2, #1
 8005de8:	2102      	movs	r1, #2
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff ff18 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e013      	b.n	8005e2e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2180      	movs	r1, #128	@ 0x80
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ff05 	bl	8005c20 <SPI_WaitFlagStateUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e000      	b.n	8005e2e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e041      	b.n	8005ecc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fd f861 	bl	8002f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 f82d 	bl	8005ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a33      	ldr	r2, [pc, #204]	@ (8005fb4 <TIM_Base_SetConfig+0xe0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef2:	d00b      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a30      	ldr	r2, [pc, #192]	@ (8005fb8 <TIM_Base_SetConfig+0xe4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a2f      	ldr	r2, [pc, #188]	@ (8005fbc <TIM_Base_SetConfig+0xe8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a2e      	ldr	r2, [pc, #184]	@ (8005fc0 <TIM_Base_SetConfig+0xec>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d108      	bne.n	8005f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a24      	ldr	r2, [pc, #144]	@ (8005fb4 <TIM_Base_SetConfig+0xe0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00f      	beq.n	8005f46 <TIM_Base_SetConfig+0x72>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2c:	d00b      	beq.n	8005f46 <TIM_Base_SetConfig+0x72>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a21      	ldr	r2, [pc, #132]	@ (8005fb8 <TIM_Base_SetConfig+0xe4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d007      	beq.n	8005f46 <TIM_Base_SetConfig+0x72>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a20      	ldr	r2, [pc, #128]	@ (8005fbc <TIM_Base_SetConfig+0xe8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_Base_SetConfig+0x72>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc0 <TIM_Base_SetConfig+0xec>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d108      	bne.n	8005f58 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb4 <TIM_Base_SetConfig+0xe0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d103      	bne.n	8005f8c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]
  }
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800
 8005fc0:	40000c00 	.word	0x40000c00

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e04b      	b.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a19      	ldr	r2, [pc, #100]	@ (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006028:	d00e      	beq.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a15      	ldr	r2, [pc, #84]	@ (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a13      	ldr	r2, [pc, #76]	@ (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a12      	ldr	r2, [pc, #72]	@ (800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10c      	bne.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800604e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4313      	orrs	r3, r2
 8006058:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00

08006090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e042      	b.n	8006128 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fc ff7c 	bl	8002fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2224      	movs	r2, #36	@ 0x24
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f82b 	bl	8006130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800616a:	f023 030c 	bic.w	r3, r3, #12
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	430b      	orrs	r3, r1
 8006176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2c      	ldr	r2, [pc, #176]	@ (8006244 <UART_SetConfig+0x114>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fe fe02 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	e002      	b.n	80061a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fe fdea 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 80061a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	4a22      	ldr	r2, [pc, #136]	@ (8006248 <UART_SetConfig+0x118>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	0119      	lsls	r1, r3, #4
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009a      	lsls	r2, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <UART_SetConfig+0x118>)
 80061de:	fba3 0302 	umull	r0, r3, r3, r2
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	2064      	movs	r0, #100	@ 0x64
 80061e6:	fb00 f303 	mul.w	r3, r0, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	3332      	adds	r3, #50	@ 0x32
 80061f0:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <UART_SetConfig+0x118>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061fc:	4419      	add	r1, r3
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009a      	lsls	r2, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	fbb2 f2f3 	udiv	r2, r2, r3
 8006214:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <UART_SetConfig+0x118>)
 8006216:	fba3 0302 	umull	r0, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2064      	movs	r0, #100	@ 0x64
 800621e:	fb00 f303 	mul.w	r3, r0, r3
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	3332      	adds	r3, #50	@ 0x32
 8006228:	4a07      	ldr	r2, [pc, #28]	@ (8006248 <UART_SetConfig+0x118>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	440a      	add	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40013800 	.word	0x40013800
 8006248:	51eb851f 	.word	0x51eb851f

0800624c <memset>:
 800624c:	4603      	mov	r3, r0
 800624e:	4402      	add	r2, r0
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	f803 1b01 	strb.w	r1, [r3], #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <__errno>:
 800625c:	4b01      	ldr	r3, [pc, #4]	@ (8006264 <__errno+0x8>)
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000078 	.word	0x20000078

08006268 <__libc_init_array>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	2600      	movs	r6, #0
 800626c:	4d0c      	ldr	r5, [pc, #48]	@ (80062a0 <__libc_init_array+0x38>)
 800626e:	4c0d      	ldr	r4, [pc, #52]	@ (80062a4 <__libc_init_array+0x3c>)
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	42a6      	cmp	r6, r4
 8006276:	d109      	bne.n	800628c <__libc_init_array+0x24>
 8006278:	f000 fa14 	bl	80066a4 <_init>
 800627c:	2600      	movs	r6, #0
 800627e:	4d0a      	ldr	r5, [pc, #40]	@ (80062a8 <__libc_init_array+0x40>)
 8006280:	4c0a      	ldr	r4, [pc, #40]	@ (80062ac <__libc_init_array+0x44>)
 8006282:	1b64      	subs	r4, r4, r5
 8006284:	10a4      	asrs	r4, r4, #2
 8006286:	42a6      	cmp	r6, r4
 8006288:	d105      	bne.n	8006296 <__libc_init_array+0x2e>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006290:	4798      	blx	r3
 8006292:	3601      	adds	r6, #1
 8006294:	e7ee      	b.n	8006274 <__libc_init_array+0xc>
 8006296:	f855 3b04 	ldr.w	r3, [r5], #4
 800629a:	4798      	blx	r3
 800629c:	3601      	adds	r6, #1
 800629e:	e7f2      	b.n	8006286 <__libc_init_array+0x1e>
 80062a0:	08006b2c 	.word	0x08006b2c
 80062a4:	08006b2c 	.word	0x08006b2c
 80062a8:	08006b2c 	.word	0x08006b2c
 80062ac:	08006b30 	.word	0x08006b30

080062b0 <memcpy>:
 80062b0:	440a      	add	r2, r1
 80062b2:	4291      	cmp	r1, r2
 80062b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b8:	d100      	bne.n	80062bc <memcpy+0xc>
 80062ba:	4770      	bx	lr
 80062bc:	b510      	push	{r4, lr}
 80062be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c2:	4291      	cmp	r1, r2
 80062c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c8:	d1f9      	bne.n	80062be <memcpy+0xe>
 80062ca:	bd10      	pop	{r4, pc}

080062cc <log>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	f000 f835 	bl	8006340 <__ieee754_log>
 80062d6:	4622      	mov	r2, r4
 80062d8:	4606      	mov	r6, r0
 80062da:	460f      	mov	r7, r1
 80062dc:	462b      	mov	r3, r5
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7fa fbf7 	bl	8000ad4 <__aeabi_dcmpun>
 80062e6:	b998      	cbnz	r0, 8006310 <log+0x44>
 80062e8:	2200      	movs	r2, #0
 80062ea:	2300      	movs	r3, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	f7fa fbe6 	bl	8000ac0 <__aeabi_dcmpgt>
 80062f4:	b960      	cbnz	r0, 8006310 <log+0x44>
 80062f6:	2200      	movs	r2, #0
 80062f8:	2300      	movs	r3, #0
 80062fa:	4620      	mov	r0, r4
 80062fc:	4629      	mov	r1, r5
 80062fe:	f7fa fbb7 	bl	8000a70 <__aeabi_dcmpeq>
 8006302:	b140      	cbz	r0, 8006316 <log+0x4a>
 8006304:	f7ff ffaa 	bl	800625c <__errno>
 8006308:	2322      	movs	r3, #34	@ 0x22
 800630a:	2600      	movs	r6, #0
 800630c:	4f06      	ldr	r7, [pc, #24]	@ (8006328 <log+0x5c>)
 800630e:	6003      	str	r3, [r0, #0]
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006316:	f7ff ffa1 	bl	800625c <__errno>
 800631a:	2321      	movs	r3, #33	@ 0x21
 800631c:	6003      	str	r3, [r0, #0]
 800631e:	4803      	ldr	r0, [pc, #12]	@ (800632c <log+0x60>)
 8006320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006324:	f000 b804 	b.w	8006330 <nan>
 8006328:	fff00000 	.word	0xfff00000
 800632c:	08006b20 	.word	0x08006b20

08006330 <nan>:
 8006330:	2000      	movs	r0, #0
 8006332:	4901      	ldr	r1, [pc, #4]	@ (8006338 <nan+0x8>)
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	7ff80000 	.word	0x7ff80000
 800633c:	00000000 	.word	0x00000000

08006340 <__ieee754_log>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	460d      	mov	r5, r1
 800634e:	b087      	sub	sp, #28
 8006350:	da24      	bge.n	800639c <__ieee754_log+0x5c>
 8006352:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8006356:	4304      	orrs	r4, r0
 8006358:	d108      	bne.n	800636c <__ieee754_log+0x2c>
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	2000      	movs	r0, #0
 8006360:	49cb      	ldr	r1, [pc, #812]	@ (8006690 <__ieee754_log+0x350>)
 8006362:	f7fa fa47 	bl	80007f4 <__aeabi_ddiv>
 8006366:	b007      	add	sp, #28
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	2900      	cmp	r1, #0
 800636e:	da04      	bge.n	800637a <__ieee754_log+0x3a>
 8006370:	f7f9 ff5e 	bl	8000230 <__aeabi_dsub>
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	e7f3      	b.n	8006362 <__ieee754_log+0x22>
 800637a:	2200      	movs	r2, #0
 800637c:	4bc5      	ldr	r3, [pc, #788]	@ (8006694 <__ieee754_log+0x354>)
 800637e:	f7fa f90f 	bl	80005a0 <__aeabi_dmul>
 8006382:	460b      	mov	r3, r1
 8006384:	460d      	mov	r5, r1
 8006386:	4602      	mov	r2, r0
 8006388:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800638c:	48c2      	ldr	r0, [pc, #776]	@ (8006698 <__ieee754_log+0x358>)
 800638e:	4285      	cmp	r5, r0
 8006390:	dd06      	ble.n	80063a0 <__ieee754_log+0x60>
 8006392:	4610      	mov	r0, r2
 8006394:	4619      	mov	r1, r3
 8006396:	f7f9 ff4d 	bl	8000234 <__adddf3>
 800639a:	e7e4      	b.n	8006366 <__ieee754_log+0x26>
 800639c:	2100      	movs	r1, #0
 800639e:	e7f5      	b.n	800638c <__ieee754_log+0x4c>
 80063a0:	152c      	asrs	r4, r5, #20
 80063a2:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80063a6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80063aa:	440c      	add	r4, r1
 80063ac:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 80063b0:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 80063b4:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 80063b8:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 80063bc:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 80063c0:	ea41 0305 	orr.w	r3, r1, r5
 80063c4:	4610      	mov	r0, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	2200      	movs	r2, #0
 80063ca:	4bb4      	ldr	r3, [pc, #720]	@ (800669c <__ieee754_log+0x35c>)
 80063cc:	f7f9 ff30 	bl	8000230 <__aeabi_dsub>
 80063d0:	1cab      	adds	r3, r5, #2
 80063d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	4682      	mov	sl, r0
 80063da:	468b      	mov	fp, r1
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 80063e4:	dc53      	bgt.n	800648e <__ieee754_log+0x14e>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f7fa fb42 	bl	8000a70 <__aeabi_dcmpeq>
 80063ec:	b1d0      	cbz	r0, 8006424 <__ieee754_log+0xe4>
 80063ee:	2c00      	cmp	r4, #0
 80063f0:	f000 8120 	beq.w	8006634 <__ieee754_log+0x2f4>
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7fa f869 	bl	80004cc <__aeabi_i2d>
 80063fa:	a391      	add	r3, pc, #580	@ (adr r3, 8006640 <__ieee754_log+0x300>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	4606      	mov	r6, r0
 8006402:	460f      	mov	r7, r1
 8006404:	f7fa f8cc 	bl	80005a0 <__aeabi_dmul>
 8006408:	a38f      	add	r3, pc, #572	@ (adr r3, 8006648 <__ieee754_log+0x308>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	4604      	mov	r4, r0
 8006410:	460d      	mov	r5, r1
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7fa f8c3 	bl	80005a0 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	e7b8      	b.n	8006396 <__ieee754_log+0x56>
 8006424:	a38a      	add	r3, pc, #552	@ (adr r3, 8006650 <__ieee754_log+0x310>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	4650      	mov	r0, sl
 800642c:	4659      	mov	r1, fp
 800642e:	f7fa f8b7 	bl	80005a0 <__aeabi_dmul>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	2000      	movs	r0, #0
 8006438:	4999      	ldr	r1, [pc, #612]	@ (80066a0 <__ieee754_log+0x360>)
 800643a:	f7f9 fef9 	bl	8000230 <__aeabi_dsub>
 800643e:	4652      	mov	r2, sl
 8006440:	4606      	mov	r6, r0
 8006442:	460f      	mov	r7, r1
 8006444:	465b      	mov	r3, fp
 8006446:	4650      	mov	r0, sl
 8006448:	4659      	mov	r1, fp
 800644a:	f7fa f8a9 	bl	80005a0 <__aeabi_dmul>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4630      	mov	r0, r6
 8006454:	4639      	mov	r1, r7
 8006456:	f7fa f8a3 	bl	80005a0 <__aeabi_dmul>
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	b914      	cbnz	r4, 8006466 <__ieee754_log+0x126>
 8006460:	4632      	mov	r2, r6
 8006462:	463b      	mov	r3, r7
 8006464:	e0a0      	b.n	80065a8 <__ieee754_log+0x268>
 8006466:	4620      	mov	r0, r4
 8006468:	f7fa f830 	bl	80004cc <__aeabi_i2d>
 800646c:	a374      	add	r3, pc, #464	@ (adr r3, 8006640 <__ieee754_log+0x300>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	4680      	mov	r8, r0
 8006474:	4689      	mov	r9, r1
 8006476:	f7fa f893 	bl	80005a0 <__aeabi_dmul>
 800647a:	a373      	add	r3, pc, #460	@ (adr r3, 8006648 <__ieee754_log+0x308>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	4640      	mov	r0, r8
 8006486:	4649      	mov	r1, r9
 8006488:	f7fa f88a 	bl	80005a0 <__aeabi_dmul>
 800648c:	e0a5      	b.n	80065da <__ieee754_log+0x29a>
 800648e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006492:	f7f9 fecf 	bl	8000234 <__adddf3>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4650      	mov	r0, sl
 800649c:	4659      	mov	r1, fp
 800649e:	f7fa f9a9 	bl	80007f4 <__aeabi_ddiv>
 80064a2:	e9cd 0100 	strd	r0, r1, [sp]
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7fa f810 	bl	80004cc <__aeabi_i2d>
 80064ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	f7fa f872 	bl	80005a0 <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064c4:	f7fa f86c 	bl	80005a0 <__aeabi_dmul>
 80064c8:	a363      	add	r3, pc, #396	@ (adr r3, 8006658 <__ieee754_log+0x318>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	4680      	mov	r8, r0
 80064d0:	4689      	mov	r9, r1
 80064d2:	f7fa f865 	bl	80005a0 <__aeabi_dmul>
 80064d6:	a362      	add	r3, pc, #392	@ (adr r3, 8006660 <__ieee754_log+0x320>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7f9 feaa 	bl	8000234 <__adddf3>
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	f7fa f85c 	bl	80005a0 <__aeabi_dmul>
 80064e8:	a35f      	add	r3, pc, #380	@ (adr r3, 8006668 <__ieee754_log+0x328>)
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7f9 fea1 	bl	8000234 <__adddf3>
 80064f2:	4642      	mov	r2, r8
 80064f4:	464b      	mov	r3, r9
 80064f6:	f7fa f853 	bl	80005a0 <__aeabi_dmul>
 80064fa:	a35d      	add	r3, pc, #372	@ (adr r3, 8006670 <__ieee754_log+0x330>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7f9 fe98 	bl	8000234 <__adddf3>
 8006504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006508:	f7fa f84a 	bl	80005a0 <__aeabi_dmul>
 800650c:	a35a      	add	r3, pc, #360	@ (adr r3, 8006678 <__ieee754_log+0x338>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa f841 	bl	80005a0 <__aeabi_dmul>
 800651e:	a358      	add	r3, pc, #352	@ (adr r3, 8006680 <__ieee754_log+0x340>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7f9 fe86 	bl	8000234 <__adddf3>
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	f7fa f838 	bl	80005a0 <__aeabi_dmul>
 8006530:	a355      	add	r3, pc, #340	@ (adr r3, 8006688 <__ieee754_log+0x348>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f7f9 fe7d 	bl	8000234 <__adddf3>
 800653a:	4642      	mov	r2, r8
 800653c:	464b      	mov	r3, r9
 800653e:	f7fa f82f 	bl	80005a0 <__aeabi_dmul>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654a:	f7f9 fe73 	bl	8000234 <__adddf3>
 800654e:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8006552:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8006556:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800655a:	3551      	adds	r5, #81	@ 0x51
 800655c:	4335      	orrs	r5, r6
 800655e:	2d00      	cmp	r5, #0
 8006560:	4680      	mov	r8, r0
 8006562:	4689      	mov	r9, r1
 8006564:	dd48      	ble.n	80065f8 <__ieee754_log+0x2b8>
 8006566:	2200      	movs	r2, #0
 8006568:	4b4d      	ldr	r3, [pc, #308]	@ (80066a0 <__ieee754_log+0x360>)
 800656a:	4650      	mov	r0, sl
 800656c:	4659      	mov	r1, fp
 800656e:	f7fa f817 	bl	80005a0 <__aeabi_dmul>
 8006572:	4652      	mov	r2, sl
 8006574:	465b      	mov	r3, fp
 8006576:	f7fa f813 	bl	80005a0 <__aeabi_dmul>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7f9 fe55 	bl	8000234 <__adddf3>
 800658a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658e:	f7fa f807 	bl	80005a0 <__aeabi_dmul>
 8006592:	4680      	mov	r8, r0
 8006594:	4689      	mov	r9, r1
 8006596:	b964      	cbnz	r4, 80065b2 <__ieee754_log+0x272>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7f9 fe46 	bl	8000230 <__aeabi_dsub>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4650      	mov	r0, sl
 80065aa:	4659      	mov	r1, fp
 80065ac:	f7f9 fe40 	bl	8000230 <__aeabi_dsub>
 80065b0:	e6d9      	b.n	8006366 <__ieee754_log+0x26>
 80065b2:	a323      	add	r3, pc, #140	@ (adr r3, 8006640 <__ieee754_log+0x300>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065bc:	f7f9 fff0 	bl	80005a0 <__aeabi_dmul>
 80065c0:	a321      	add	r3, pc, #132	@ (adr r3, 8006648 <__ieee754_log+0x308>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ce:	f7f9 ffe7 	bl	80005a0 <__aeabi_dmul>
 80065d2:	4642      	mov	r2, r8
 80065d4:	464b      	mov	r3, r9
 80065d6:	f7f9 fe2d 	bl	8000234 <__adddf3>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 fe25 	bl	8000230 <__aeabi_dsub>
 80065e6:	4652      	mov	r2, sl
 80065e8:	465b      	mov	r3, fp
 80065ea:	f7f9 fe21 	bl	8000230 <__aeabi_dsub>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	e7d9      	b.n	80065ac <__ieee754_log+0x26c>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4650      	mov	r0, sl
 80065fe:	4659      	mov	r1, fp
 8006600:	f7f9 fe16 	bl	8000230 <__aeabi_dsub>
 8006604:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006608:	f7f9 ffca 	bl	80005a0 <__aeabi_dmul>
 800660c:	4606      	mov	r6, r0
 800660e:	460f      	mov	r7, r1
 8006610:	2c00      	cmp	r4, #0
 8006612:	f43f af25 	beq.w	8006460 <__ieee754_log+0x120>
 8006616:	a30a      	add	r3, pc, #40	@ (adr r3, 8006640 <__ieee754_log+0x300>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006620:	f7f9 ffbe 	bl	80005a0 <__aeabi_dmul>
 8006624:	a308      	add	r3, pc, #32	@ (adr r3, 8006648 <__ieee754_log+0x308>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	4604      	mov	r4, r0
 800662c:	460d      	mov	r5, r1
 800662e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006632:	e729      	b.n	8006488 <__ieee754_log+0x148>
 8006634:	2000      	movs	r0, #0
 8006636:	2100      	movs	r1, #0
 8006638:	e695      	b.n	8006366 <__ieee754_log+0x26>
 800663a:	bf00      	nop
 800663c:	f3af 8000 	nop.w
 8006640:	fee00000 	.word	0xfee00000
 8006644:	3fe62e42 	.word	0x3fe62e42
 8006648:	35793c76 	.word	0x35793c76
 800664c:	3dea39ef 	.word	0x3dea39ef
 8006650:	55555555 	.word	0x55555555
 8006654:	3fd55555 	.word	0x3fd55555
 8006658:	df3e5244 	.word	0xdf3e5244
 800665c:	3fc2f112 	.word	0x3fc2f112
 8006660:	96cb03de 	.word	0x96cb03de
 8006664:	3fc74664 	.word	0x3fc74664
 8006668:	94229359 	.word	0x94229359
 800666c:	3fd24924 	.word	0x3fd24924
 8006670:	55555593 	.word	0x55555593
 8006674:	3fe55555 	.word	0x3fe55555
 8006678:	d078c69f 	.word	0xd078c69f
 800667c:	3fc39a09 	.word	0x3fc39a09
 8006680:	1d8e78af 	.word	0x1d8e78af
 8006684:	3fcc71c5 	.word	0x3fcc71c5
 8006688:	9997fa04 	.word	0x9997fa04
 800668c:	3fd99999 	.word	0x3fd99999
 8006690:	c3500000 	.word	0xc3500000
 8006694:	43500000 	.word	0x43500000
 8006698:	7fefffff 	.word	0x7fefffff
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	3fe00000 	.word	0x3fe00000

080066a4 <_init>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr

080066b0 <_fini>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr
