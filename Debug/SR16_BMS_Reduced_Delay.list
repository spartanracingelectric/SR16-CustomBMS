
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a4c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  0000a134  2**0
                  CONTENTS
  4 .ARM          00000008  080080d4  080080d4  000090d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080dc  080080dc  0000a134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000090e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  080080e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000134  08008218  0000a134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08008218  0000a4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b3a  00000000  00000000  0000a15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003623  00000000  00000000  0001cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  000202c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8c  00000000  00000000  000215a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224f6  00000000  00000000  00022434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a60  00000000  00000000  0004492a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf9b4  00000000  00000000  0005d38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cd3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000584c  00000000  00000000  0011cd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001225d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000134 	.word	0x20000134
 8000204:	00000000 	.word	0x00000000
 8000208:	08007c1c 	.word	0x08007c1c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000138 	.word	0x20000138
 8000224:	08007c1c 	.word	0x08007c1c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	@ 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	@ 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	@ 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b968 	b.w	8001384 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9d08      	ldr	r5, [sp, #32]
 80010d2:	460c      	mov	r4, r1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d14e      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010d8:	4694      	mov	ip, r2
 80010da:	458c      	cmp	ip, r1
 80010dc:	4686      	mov	lr, r0
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	d962      	bls.n	80011aa <__udivmoddi4+0xde>
 80010e4:	b14a      	cbz	r2, 80010fa <__udivmoddi4+0x2e>
 80010e6:	f1c2 0320 	rsb	r3, r2, #32
 80010ea:	4091      	lsls	r1, r2
 80010ec:	fa20 f303 	lsr.w	r3, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	4319      	orrs	r1, r3
 80010f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8001102:	fb07 1114 	mls	r1, r7, r4, r1
 8001106:	fa1f f68c 	uxth.w	r6, ip
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001112:	fb04 f106 	mul.w	r1, r4, r6
 8001116:	4299      	cmp	r1, r3
 8001118:	d90a      	bls.n	8001130 <__udivmoddi4+0x64>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001122:	f080 8110 	bcs.w	8001346 <__udivmoddi4+0x27a>
 8001126:	4299      	cmp	r1, r3
 8001128:	f240 810d 	bls.w	8001346 <__udivmoddi4+0x27a>
 800112c:	3c02      	subs	r4, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a59      	subs	r1, r3, r1
 8001132:	fbb1 f0f7 	udiv	r0, r1, r7
 8001136:	fb07 1110 	mls	r1, r7, r0, r1
 800113a:	fb00 f606 	mul.w	r6, r0, r6
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	429e      	cmp	r6, r3
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001152:	f080 80fa 	bcs.w	800134a <__udivmoddi4+0x27e>
 8001156:	429e      	cmp	r6, r3
 8001158:	f240 80f7 	bls.w	800134a <__udivmoddi4+0x27e>
 800115c:	4463      	add	r3, ip
 800115e:	3802      	subs	r0, #2
 8001160:	2100      	movs	r1, #0
 8001162:	1b9b      	subs	r3, r3, r6
 8001164:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001168:	b11d      	cbz	r5, 8001172 <__udivmoddi4+0xa6>
 800116a:	40d3      	lsrs	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	e9c5 3200 	strd	r3, r2, [r5]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d905      	bls.n	8001186 <__udivmoddi4+0xba>
 800117a:	b10d      	cbz	r5, 8001180 <__udivmoddi4+0xb4>
 800117c:	e9c5 0100 	strd	r0, r1, [r5]
 8001180:	2100      	movs	r1, #0
 8001182:	4608      	mov	r0, r1
 8001184:	e7f5      	b.n	8001172 <__udivmoddi4+0xa6>
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d146      	bne.n	800121c <__udivmoddi4+0x150>
 800118e:	42a3      	cmp	r3, r4
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xcc>
 8001192:	4290      	cmp	r0, r2
 8001194:	f0c0 80ee 	bcc.w	8001374 <__udivmoddi4+0x2a8>
 8001198:	1a86      	subs	r6, r0, r2
 800119a:	eb64 0303 	sbc.w	r3, r4, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d0e6      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011a4:	e9c5 6300 	strd	r6, r3, [r5]
 80011a8:	e7e3      	b.n	8001172 <__udivmoddi4+0xa6>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	f040 808f 	bne.w	80012ce <__udivmoddi4+0x202>
 80011b0:	eba1 040c 	sub.w	r4, r1, ip
 80011b4:	2101      	movs	r1, #1
 80011b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ba:	fa1f f78c 	uxth.w	r7, ip
 80011be:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c2:	fb08 4416 	mls	r4, r8, r6, r4
 80011c6:	fb07 f006 	mul.w	r0, r7, r6
 80011ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d908      	bls.n	80011e8 <__udivmoddi4+0x11c>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f106 34ff 	add.w	r4, r6, #4294967295
 80011de:	d202      	bcs.n	80011e6 <__udivmoddi4+0x11a>
 80011e0:	4298      	cmp	r0, r3
 80011e2:	f200 80cb 	bhi.w	800137c <__udivmoddi4+0x2b0>
 80011e6:	4626      	mov	r6, r4
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80011ee:	fb08 4410 	mls	r4, r8, r0, r4
 80011f2:	fb00 f707 	mul.w	r7, r0, r7
 80011f6:	fa1f f38e 	uxth.w	r3, lr
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	429f      	cmp	r7, r3
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x148>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 34ff 	add.w	r4, r0, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x146>
 800120c:	429f      	cmp	r7, r3
 800120e:	f200 80ae 	bhi.w	800136e <__udivmoddi4+0x2a2>
 8001212:	4620      	mov	r0, r4
 8001214:	1bdb      	subs	r3, r3, r7
 8001216:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121a:	e7a5      	b.n	8001168 <__udivmoddi4+0x9c>
 800121c:	f1c1 0720 	rsb	r7, r1, #32
 8001220:	408b      	lsls	r3, r1
 8001222:	fa22 fc07 	lsr.w	ip, r2, r7
 8001226:	ea4c 0c03 	orr.w	ip, ip, r3
 800122a:	fa24 f607 	lsr.w	r6, r4, r7
 800122e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001232:	fbb6 f8f9 	udiv	r8, r6, r9
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	fb09 6618 	mls	r6, r9, r8, r6
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	408c      	lsls	r4, r1
 8001244:	fa00 fa01 	lsl.w	sl, r0, r1
 8001248:	fb08 f00e 	mul.w	r0, r8, lr
 800124c:	431c      	orrs	r4, r3
 800124e:	0c23      	lsrs	r3, r4, #16
 8001250:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001254:	4298      	cmp	r0, r3
 8001256:	fa02 f201 	lsl.w	r2, r2, r1
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x1a6>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f108 36ff 	add.w	r6, r8, #4294967295
 8001264:	f080 8081 	bcs.w	800136a <__udivmoddi4+0x29e>
 8001268:	4298      	cmp	r0, r3
 800126a:	d97e      	bls.n	800136a <__udivmoddi4+0x29e>
 800126c:	f1a8 0802 	sub.w	r8, r8, #2
 8001270:	4463      	add	r3, ip
 8001272:	1a1e      	subs	r6, r3, r0
 8001274:	fbb6 f3f9 	udiv	r3, r6, r9
 8001278:	fb09 6613 	mls	r6, r9, r3, r6
 800127c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001286:	45a6      	cmp	lr, r4
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x1d0>
 800128a:	eb1c 0404 	adds.w	r4, ip, r4
 800128e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001292:	d266      	bcs.n	8001362 <__udivmoddi4+0x296>
 8001294:	45a6      	cmp	lr, r4
 8001296:	d964      	bls.n	8001362 <__udivmoddi4+0x296>
 8001298:	3b02      	subs	r3, #2
 800129a:	4464      	add	r4, ip
 800129c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a0:	fba0 8302 	umull	r8, r3, r0, r2
 80012a4:	eba4 040e 	sub.w	r4, r4, lr
 80012a8:	429c      	cmp	r4, r3
 80012aa:	46c6      	mov	lr, r8
 80012ac:	461e      	mov	r6, r3
 80012ae:	d350      	bcc.n	8001352 <__udivmoddi4+0x286>
 80012b0:	d04d      	beq.n	800134e <__udivmoddi4+0x282>
 80012b2:	b155      	cbz	r5, 80012ca <__udivmoddi4+0x1fe>
 80012b4:	ebba 030e 	subs.w	r3, sl, lr
 80012b8:	eb64 0406 	sbc.w	r4, r4, r6
 80012bc:	fa04 f707 	lsl.w	r7, r4, r7
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	40cc      	lsrs	r4, r1
 80012c6:	e9c5 7400 	strd	r7, r4, [r5]
 80012ca:	2100      	movs	r1, #0
 80012cc:	e751      	b.n	8001172 <__udivmoddi4+0xa6>
 80012ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d2:	f1c2 0320 	rsb	r3, r2, #32
 80012d6:	40d9      	lsrs	r1, r3
 80012d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012dc:	fa20 f303 	lsr.w	r3, r0, r3
 80012e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e8:	fb08 1110 	mls	r1, r8, r0, r1
 80012ec:	4094      	lsls	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	0c23      	lsrs	r3, r4, #16
 80012f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012fa:	fb00 f107 	mul.w	r1, r0, r7
 80012fe:	4299      	cmp	r1, r3
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x248>
 8001302:	eb1c 0303 	adds.w	r3, ip, r3
 8001306:	f100 36ff 	add.w	r6, r0, #4294967295
 800130a:	d22c      	bcs.n	8001366 <__udivmoddi4+0x29a>
 800130c:	4299      	cmp	r1, r3
 800130e:	d92a      	bls.n	8001366 <__udivmoddi4+0x29a>
 8001310:	3802      	subs	r0, #2
 8001312:	4463      	add	r3, ip
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	fbb3 f1f8 	udiv	r1, r3, r8
 800131a:	fb08 3311 	mls	r3, r8, r1, r3
 800131e:	b2a4      	uxth	r4, r4
 8001320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001324:	fb01 f307 	mul.w	r3, r1, r7
 8001328:	42a3      	cmp	r3, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x272>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f101 36ff 	add.w	r6, r1, #4294967295
 8001334:	d213      	bcs.n	800135e <__udivmoddi4+0x292>
 8001336:	42a3      	cmp	r3, r4
 8001338:	d911      	bls.n	800135e <__udivmoddi4+0x292>
 800133a:	3902      	subs	r1, #2
 800133c:	4464      	add	r4, ip
 800133e:	1ae4      	subs	r4, r4, r3
 8001340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001344:	e73b      	b.n	80011be <__udivmoddi4+0xf2>
 8001346:	4604      	mov	r4, r0
 8001348:	e6f2      	b.n	8001130 <__udivmoddi4+0x64>
 800134a:	4608      	mov	r0, r1
 800134c:	e708      	b.n	8001160 <__udivmoddi4+0x94>
 800134e:	45c2      	cmp	sl, r8
 8001350:	d2af      	bcs.n	80012b2 <__udivmoddi4+0x1e6>
 8001352:	ebb8 0e02 	subs.w	lr, r8, r2
 8001356:	eb63 060c 	sbc.w	r6, r3, ip
 800135a:	3801      	subs	r0, #1
 800135c:	e7a9      	b.n	80012b2 <__udivmoddi4+0x1e6>
 800135e:	4631      	mov	r1, r6
 8001360:	e7ed      	b.n	800133e <__udivmoddi4+0x272>
 8001362:	4603      	mov	r3, r0
 8001364:	e79a      	b.n	800129c <__udivmoddi4+0x1d0>
 8001366:	4630      	mov	r0, r6
 8001368:	e7d4      	b.n	8001314 <__udivmoddi4+0x248>
 800136a:	46b0      	mov	r8, r6
 800136c:	e781      	b.n	8001272 <__udivmoddi4+0x1a6>
 800136e:	4463      	add	r3, ip
 8001370:	3802      	subs	r0, #2
 8001372:	e74f      	b.n	8001214 <__udivmoddi4+0x148>
 8001374:	4606      	mov	r6, r0
 8001376:	4623      	mov	r3, r4
 8001378:	4608      	mov	r0, r1
 800137a:	e711      	b.n	80011a0 <__udivmoddi4+0xd4>
 800137c:	3e02      	subs	r6, #2
 800137e:	4463      	add	r3, ip
 8001380:	e732      	b.n	80011e8 <__udivmoddi4+0x11c>
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800138e:	23ff      	movs	r3, #255	@ 0xff
 8001390:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e00c      	b.n	80013b2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 8001398:	f001 ff08 	bl	80031ac <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 800139c:	1cf9      	adds	r1, r7, #3
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Wakeup_Idle+0x3c>)
 80013a4:	f004 faa4 	bl	80058f0 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013a8:	f001 fef4 	bl	8003194 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	ddef      	ble.n	8001398 <Wakeup_Idle+0x10>
	}
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000268 	.word	0x20000268

080013c8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e00c      	b.n	80013ee <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
 80013d4:	f001 feea 	bl	80031ac <LTC_nCS_Low>
		HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f002 f92d 	bl	8003638 <HAL_Delay>
		LTC_nCS_High();
 80013de:	f001 fed9 	bl	8003194 <LTC_nCS_High>
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f002 f928 	bl	8003638 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	ddef      	ble.n	80013d4 <Wakeup_Sleep+0xc>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b089      	sub	sp, #36	@ 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	466b      	mov	r3, sp
 800140c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001416:	7f3b      	ldrb	r3, [r7, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	7f3b      	ldrb	r3, [r7, #28]
 800141e:	2200      	movs	r2, #0
 8001420:	4698      	mov	r8, r3
 8001422:	4691      	mov	r9, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	2200      	movs	r2, #0
 800143c:	461c      	mov	r4, r3
 800143e:	4615      	mov	r5, r2
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	00eb      	lsls	r3, r5, #3
 800144a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144e:	00e2      	lsls	r2, r4, #3
 8001450:	7f3b      	ldrb	r3, [r7, #28]
 8001452:	3307      	adds	r3, #7
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	ebad 0d03 	sub.w	sp, sp, r3
 800145c:	466b      	mov	r3, sp
 800145e:	3300      	adds	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001462:	2300      	movs	r3, #0
 8001464:	77bb      	strb	r3, [r7, #30]
 8001466:	e074      	b.n	8001552 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001468:	7fbb      	ldrb	r3, [r7, #30]
 800146a:	4a3f      	ldr	r2, [pc, #252]	@ (8001568 <Read_Cell_Volt+0x168>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	2002      	movs	r0, #2
 800148c:	f000 fb16 	bl	8001abc <LTC_Pec15_Calc>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014a4:	f7ff ff70 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014a8:	f001 fe80 	bl	80031ac <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	2364      	movs	r3, #100	@ 0x64
 80014b2:	2204      	movs	r2, #4
 80014b4:	482d      	ldr	r0, [pc, #180]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014b6:	f004 fa1b 	bl	80058f0 <HAL_SPI_Transmit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014be:	7c7b      	ldrb	r3, [r7, #17]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014c4:	7c7b      	ldrb	r3, [r7, #17]
 80014c6:	2201      	movs	r2, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2364      	movs	r3, #100	@ 0x64
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	4822      	ldr	r0, [pc, #136]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014e2:	f004 fb49 	bl	8005b78 <HAL_SPI_Receive>
 80014e6:	4603      	mov	r3, r0
 80014e8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014ea:	7c7b      	ldrb	r3, [r7, #17]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80014f0:	7c7b      	ldrb	r3, [r7, #17]
 80014f2:	3304      	adds	r3, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001506:	f001 fe45 	bl	8003194 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800150a:	2300      	movs	r3, #0
 800150c:	777b      	strb	r3, [r7, #29]
 800150e:	e01a      	b.n	8001546 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800151a:	7f7a      	ldrb	r2, [r7, #29]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001526:	7fba      	ldrb	r2, [r7, #30]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
			memcpy(
 8001536:	2206      	movs	r2, #6
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fbcd 	bl	8006cda <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001540:	7f7b      	ldrb	r3, [r7, #29]
 8001542:	3301      	adds	r3, #1
 8001544:	777b      	strb	r3, [r7, #29]
 8001546:	7f7b      	ldrb	r3, [r7, #29]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d9e1      	bls.n	8001510 <Read_Cell_Volt+0x110>
			i++) {
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	3301      	adds	r3, #1
 8001550:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001552:	7fbb      	ldrb	r3, [r7, #30]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d987      	bls.n	8001468 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	46b5      	mov	sp, r6
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	@ 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001566:	bf00      	nop
 8001568:	08007c3c 	.word	0x08007c3c
 800156c:	20000268 	.word	0x20000268

08001570 <LTC6811_WRCFG>:
	LTC_nCS_High();
}

void LTC6811_WRCFG(uint8_t total_ic, //The number of ICs being written to
		uint8_t config[][6] //A two dimensional array of the configuration data that will be written
		) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800157c:	2306      	movs	r3, #6
 800157e:	733b      	strb	r3, [r7, #12]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3304      	adds	r3, #4
 8001588:	72fb      	strb	r3, [r7, #11]
	uint16_t cfg_pec;
	uint8_t cmd_index; //command counter

	wrcfg_buffer[0] = 0x00;
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	wrcfg_buffer[1] = 0x01;
 8001590:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
	wrcfg_buffer[2] = 0x3d;
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 8001598:	223d      	movs	r2, #61	@ 0x3d
 800159a:	709a      	strb	r2, [r3, #2]
	wrcfg_buffer[3] = 0x6e;
 800159c:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 800159e:	226e      	movs	r2, #110	@ 0x6e
 80015a0:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015a2:	2304      	movs	r3, #4
 80015a4:	73fb      	strb	r3, [r7, #15]
	// executes for each ltc6811 in daisy chain, this loops starts with
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	73bb      	strb	r3, [r7, #14]
 80015aa:	e03c      	b.n	8001626 <LTC6811_WRCFG+0xb6>
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		// executes for each of the 6 bytes in the CFGR register
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	737b      	strb	r3, [r7, #13]
 80015b0:	e012      	b.n	80015d8 <LTC6811_WRCFG+0x68>
				current_byte++) {
			// current_byte is the byte counter

			wrcfg_buffer[cmd_index] = config[current_ic - 1][current_byte]; //adding the config data to the array to be sent
 80015b2:	7bba      	ldrb	r2, [r7, #14]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	3b06      	subs	r3, #6
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	18d1      	adds	r1, r2, r3
 80015c2:	7b7a      	ldrb	r2, [r7, #13]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	5c89      	ldrb	r1, [r1, r2]
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 80015ca:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3301      	adds	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
				current_byte++) {
 80015d2:	7b7b      	ldrb	r3, [r7, #13]
 80015d4:	3301      	adds	r3, #1
 80015d6:	737b      	strb	r3, [r7, #13]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015d8:	7b7a      	ldrb	r2, [r7, #13]
 80015da:	7b3b      	ldrb	r3, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e8      	bcc.n	80015b2 <LTC6811_WRCFG+0x42>
		}

		cfg_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG,
				&config[current_ic - 1][0]); // calculating the PEC for each ICs configuration register data
 80015e0:	7bba      	ldrb	r2, [r7, #14]
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	3b06      	subs	r3, #6
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	4413      	add	r3, r2
		cfg_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG,
 80015f0:	461a      	mov	r2, r3
 80015f2:	7b3b      	ldrb	r3, [r7, #12]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fa60 	bl	8001abc <LTC_Pec15_Calc>
 80015fc:	4603      	mov	r3, r0
 80015fe:	813b      	strh	r3, [r7, #8]
		wrcfg_buffer[cmd_index] = (uint8_t) (cfg_pec >> 8);
 8001600:	893b      	ldrh	r3, [r7, #8]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	b29a      	uxth	r2, r3
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	b2d1      	uxtb	r1, r2
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 800160c:	54d1      	strb	r1, [r2, r3]
		wrcfg_buffer[cmd_index + 1] = (uint8_t) cfg_pec;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	893a      	ldrh	r2, [r7, #8]
 8001614:	b2d1      	uxtb	r1, r2
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 8001618:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	3302      	adds	r3, #2
 800161e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	3b01      	subs	r3, #1
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1bf      	bne.n	80015ac <LTC6811_WRCFG+0x3c>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800162c:	f7ff feac 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001630:	f001 fdbc 	bl	80031ac <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcfg_buffer, CMD_LEN, 100);
 8001634:	7afb      	ldrb	r3, [r7, #11]
 8001636:	b29a      	uxth	r2, r3
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	4905      	ldr	r1, [pc, #20]	@ (8001650 <LTC6811_WRCFG+0xe0>)
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <LTC6811_WRCFG+0xe4>)
 800163e:	f004 f957 	bl	80058f0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001642:	f001 fda7 	bl	8003194 <LTC_nCS_High>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000150 	.word	0x20000150
 8001654:	20000268 	.word	0x20000268

08001658 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001664:	2306      	movs	r3, #6
 8001666:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	3304      	adds	r3, #4
 8001670:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 8001672:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <LTC_WRCOMM+0xd4>)
 8001674:	2207      	movs	r2, #7
 8001676:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 8001678:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <LTC_WRCOMM+0xd4>)
 800167a:	2221      	movs	r2, #33	@ 0x21
 800167c:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 800167e:	492b      	ldr	r1, [pc, #172]	@ (800172c <LTC_WRCOMM+0xd4>)
 8001680:	2002      	movs	r0, #2
 8001682:	f000 fa1b 	bl	8001abc <LTC_Pec15_Calc>
 8001686:	4603      	mov	r3, r0
 8001688:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 800168a:	8a3b      	ldrh	r3, [r7, #16]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <LTC_WRCOMM+0xd4>)
 8001694:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 8001696:	8a3b      	ldrh	r3, [r7, #16]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <LTC_WRCOMM+0xd4>)
 800169c:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 800169e:	2304      	movs	r3, #4
 80016a0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	75bb      	strb	r3, [r7, #22]
 80016a6:	e02d      	b.n	8001704 <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80016a8:	2300      	movs	r3, #0
 80016aa:	757b      	strb	r3, [r7, #21]
 80016ac:	e00c      	b.n	80016c8 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80016ae:	7d7b      	ldrb	r3, [r7, #21]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	441a      	add	r2, r3
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <LTC_WRCOMM+0xd4>)
 80016ba:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	3301      	adds	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80016c2:	7d7b      	ldrb	r3, [r7, #21]
 80016c4:	3301      	adds	r3, #1
 80016c6:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80016c8:	7d7a      	ldrb	r2, [r7, #21]
 80016ca:	7d3b      	ldrb	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3ee      	bcc.n	80016ae <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80016d0:	7d3b      	ldrb	r3, [r7, #20]
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f9f1 	bl	8001abc <LTC_Pec15_Calc>
 80016da:	4603      	mov	r3, r0
 80016dc:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	b2d1      	uxtb	r1, r2
 80016e8:	4a10      	ldr	r2, [pc, #64]	@ (800172c <LTC_WRCOMM+0xd4>)
 80016ea:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	3301      	adds	r3, #1
 80016f0:	89fa      	ldrh	r2, [r7, #14]
 80016f2:	b2d1      	uxtb	r1, r2
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LTC_WRCOMM+0xd4>)
 80016f6:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	3302      	adds	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016fe:	7dbb      	ldrb	r3, [r7, #22]
 8001700:	3b01      	subs	r3, #1
 8001702:	75bb      	strb	r3, [r7, #22]
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ce      	bne.n	80016a8 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800170a:	f7ff fe3d 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 800170e:	f001 fd4d 	bl	80031ac <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	b29a      	uxth	r2, r3
 8001716:	2364      	movs	r3, #100	@ 0x64
 8001718:	4904      	ldr	r1, [pc, #16]	@ (800172c <LTC_WRCOMM+0xd4>)
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <LTC_WRCOMM+0xd8>)
 800171c:	f004 f8e8 	bl	80058f0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001720:	f001 fd38 	bl	8003194 <LTC_nCS_High>
}
 8001724:	bf00      	nop
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000194 	.word	0x20000194
 8001730:	20000268 	.word	0x20000268

08001734 <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800173e:	2307      	movs	r3, #7
 8001740:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 8001742:	2323      	movs	r3, #35	@ 0x23
 8001744:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	2002      	movs	r0, #2
 800174e:	f000 f9b5 	bl	8001abc <LTC_Pec15_Calc>
 8001752:	4603      	mov	r3, r0
 8001754:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001756:	8a7b      	ldrh	r3, [r7, #18]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29b      	uxth	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001760:	8a7b      	ldrh	r3, [r7, #18]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001766:	f7ff fe0f 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 800176a:	f001 fd1f 	bl	80031ac <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 800176e:	f107 010c 	add.w	r1, r7, #12
 8001772:	2364      	movs	r3, #100	@ 0x64
 8001774:	2204      	movs	r2, #4
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <LTC_STCOMM+0x7c>)
 8001778:	f004 f8ba 	bl	80058f0 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e008      	b.n	8001794 <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8001782:	2364      	movs	r3, #100	@ 0x64
 8001784:	2201      	movs	r2, #1
 8001786:	21ff      	movs	r1, #255	@ 0xff
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <LTC_STCOMM+0x7c>)
 800178a:	f004 f8b1 	bl	80058f0 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbef      	blt.n	8001782 <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80017a2:	f001 fcf7 	bl	8003194 <LTC_nCS_High>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000268 	.word	0x20000268

080017b4 <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b8:	b089      	sub	sp, #36	@ 0x24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	466b      	mov	r3, sp
 80017c0:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80017ca:	7f3b      	ldrb	r3, [r7, #28]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	7f3b      	ldrb	r3, [r7, #28]
 80017d2:	2200      	movs	r2, #0
 80017d4:	4698      	mov	r8, r3
 80017d6:	4691      	mov	r9, r2
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ec:	7f3b      	ldrb	r3, [r7, #28]
 80017ee:	2200      	movs	r2, #0
 80017f0:	461c      	mov	r4, r3
 80017f2:	4615      	mov	r5, r2
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	00eb      	lsls	r3, r5, #3
 80017fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001802:	00e2      	lsls	r2, r4, #3
 8001804:	7f3b      	ldrb	r3, [r7, #28]
 8001806:	3307      	adds	r3, #7
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	ebad 0d03 	sub.w	sp, sp, r3
 8001810:	466b      	mov	r3, sp
 8001812:	3300      	adds	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	77bb      	strb	r3, [r7, #30]
 800181a:	e074      	b.n	8001906 <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 800181c:	7fbb      	ldrb	r3, [r7, #30]
 800181e:	4a3f      	ldr	r2, [pc, #252]	@ (800191c <Read_Cell_Temps+0x168>)
 8001820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	b29b      	uxth	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 800182c:	7fbb      	ldrb	r3, [r7, #30]
 800182e:	4a3b      	ldr	r2, [pc, #236]	@ (800191c <Read_Cell_Temps+0x168>)
 8001830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	4619      	mov	r1, r3
 800183e:	2002      	movs	r0, #2
 8001840:	f000 f93c 	bl	8001abc <LTC_Pec15_Calc>
 8001844:	4603      	mov	r3, r0
 8001846:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001848:	8a7b      	ldrh	r3, [r7, #18]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8001852:	8a7b      	ldrh	r3, [r7, #18]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001858:	f7ff fd96 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 800185c:	f001 fca6 	bl	80031ac <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001860:	f107 0108 	add.w	r1, r7, #8
 8001864:	2364      	movs	r3, #100	@ 0x64
 8001866:	2204      	movs	r2, #4
 8001868:	482d      	ldr	r0, [pc, #180]	@ (8001920 <Read_Cell_Temps+0x16c>)
 800186a:	f004 f841 	bl	80058f0 <HAL_SPI_Transmit>
 800186e:	4603      	mov	r3, r0
 8001870:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 8001872:	7c7b      	ldrb	r3, [r7, #17]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001878:	7c7b      	ldrb	r3, [r7, #17]
 800187a:	2201      	movs	r2, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	b25a      	sxtb	r2, r3
 8001882:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001886:	4313      	orrs	r3, r2
 8001888:	b25b      	sxtb	r3, r3
 800188a:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 800188c:	7f3b      	ldrb	r3, [r7, #28]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2364      	movs	r3, #100	@ 0x64
 8001892:	6979      	ldr	r1, [r7, #20]
 8001894:	4822      	ldr	r0, [pc, #136]	@ (8001920 <Read_Cell_Temps+0x16c>)
 8001896:	f004 f96f 	bl	8005b78 <HAL_SPI_Receive>
 800189a:	4603      	mov	r3, r0
 800189c:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 800189e:	7c7b      	ldrb	r3, [r7, #17]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00a      	beq.n	80018ba <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80018a4:	7c7b      	ldrb	r3, [r7, #17]
 80018a6:	3304      	adds	r3, #4
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80018ba:	f001 fc6b 	bl	8003194 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	777b      	strb	r3, [r7, #29]
 80018c2:	e01a      	b.n	80018fa <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80018c4:	7f7b      	ldrb	r3, [r7, #29]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80018ce:	7f7a      	ldrb	r2, [r7, #29]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80018da:	7fba      	ldrb	r2, [r7, #30]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
			memcpy(
 80018ea:	2206      	movs	r2, #6
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f005 f9f3 	bl	8006cda <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80018f4:	7f7b      	ldrb	r3, [r7, #29]
 80018f6:	3301      	adds	r3, #1
 80018f8:	777b      	strb	r3, [r7, #29]
 80018fa:	7f7b      	ldrb	r3, [r7, #29]
 80018fc:	2b07      	cmp	r3, #7
 80018fe:	d9e1      	bls.n	80018c4 <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001900:	7fbb      	ldrb	r3, [r7, #30]
 8001902:	3301      	adds	r3, #1
 8001904:	77bb      	strb	r3, [r7, #30]
 8001906:	7fbb      	ldrb	r3, [r7, #30]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d987      	bls.n	800181c <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	46b5      	mov	sp, r6
}
 8001910:	4618      	mov	r0, r3
 8001912:	3724      	adds	r7, #36	@ 0x24
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800191a:	bf00      	nop
 800191c:	08007c44 	.word	0x08007c44
 8001920:	20000268 	.word	0x20000268

08001924 <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	460b      	mov	r3, r1
 8001930:	71bb      	strb	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	105b      	asrs	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	3302      	adds	r3, #2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	01db      	lsls	r3, r3, #7
 800194e:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	b2da      	uxtb	r2, r3
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	4413      	add	r3, r2
 800195a:	b2da      	uxtb	r2, r3
 800195c:	797b      	ldrb	r3, [r7, #5]
 800195e:	4413      	add	r3, r2
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3360      	adds	r3, #96	@ 0x60
 8001964:	b2db      	uxtb	r3, r3
 8001966:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	4619      	mov	r1, r3
 800196e:	2002      	movs	r0, #2
 8001970:	f000 f8a4 	bl	8001abc <LTC_Pec15_Calc>
 8001974:	4603      	mov	r3, r0
 8001976:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001978:	89bb      	ldrh	r3, [r7, #12]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001982:	89bb      	ldrh	r3, [r7, #12]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001988:	f7ff fcfe 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 800198c:	f001 fc0e 	bl	80031ac <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001990:	f107 0108 	add.w	r1, r7, #8
 8001994:	2364      	movs	r3, #100	@ 0x64
 8001996:	2204      	movs	r2, #4
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <LTC_ADCV+0x88>)
 800199a:	f003 ffa9 	bl	80058f0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 800199e:	f001 fbf9 	bl	8003194 <LTC_nCS_High>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000268 	.word	0x20000268

080019b0 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	105b      	asrs	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3304      	adds	r3, #4
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	01db      	lsls	r3, r3, #7
 80019d8:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	4413      	add	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3360      	adds	r3, #96	@ 0x60
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	2002      	movs	r0, #2
 80019f0:	f000 f864 	bl	8001abc <LTC_Pec15_Calc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80019f8:	89bb      	ldrh	r3, [r7, #12]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001a02:	89bb      	ldrh	r3, [r7, #12]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001a08:	f7ff fcbe 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001a0c:	f001 fbce 	bl	80031ac <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001a10:	f107 0108 	add.w	r1, r7, #8
 8001a14:	2364      	movs	r3, #100	@ 0x64
 8001a16:	2204      	movs	r2, #4
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <LTC_ADAX+0x7c>)
 8001a1a:	f003 ff69 	bl	80058f0 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001a1e:	f001 fbb9 	bl	8003194 <LTC_nCS_High>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000268 	.word	0x20000268

08001a30 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001a42:	2307      	movs	r3, #7
 8001a44:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001a46:	2314      	movs	r3, #20
 8001a48:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2002      	movs	r0, #2
 8001a50:	f000 f834 	bl	8001abc <LTC_Pec15_Calc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001a62:	893b      	ldrh	r3, [r7, #8]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001a68:	f7ff fc8e 	bl	8001388 <Wakeup_Idle>

	LTC_nCS_Low();
 8001a6c:	f001 fb9e 	bl	80031ac <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001a70:	1d39      	adds	r1, r7, #4
 8001a72:	2364      	movs	r3, #100	@ 0x64
 8001a74:	2204      	movs	r2, #4
 8001a76:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <LTC_POLLADC+0x84>)
 8001a78:	f003 ff3a 	bl	80058f0 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001a7c:	e00c      	b.n	8001a98 <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 8001a7e:	f001 fdd1 	bl	8003624 <HAL_GetTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8001a86:	7abb      	ldrb	r3, [r7, #10]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <LTC_POLLADC+0x62>
			finished = 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	72fb      	strb	r3, [r7, #11]
 8001a90:	e002      	b.n	8001a98 <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	330a      	adds	r3, #10
 8001a96:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <LTC_POLLADC+0x88>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d802      	bhi.n	8001aa6 <LTC_POLLADC+0x76>
 8001aa0:	7afb      	ldrb	r3, [r7, #11]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0eb      	beq.n	8001a7e <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 8001aa6:	f001 fb75 	bl	8003194 <LTC_nCS_High>
	return (counter);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000268 	.word	0x20000268
 8001ab8:	00030d3f 	.word	0x00030d3f

08001abc <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001ac8:	2310      	movs	r3, #16
 8001aca:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001acc:	2300      	movs	r3, #0
 8001ace:	737b      	strb	r3, [r7, #13]
 8001ad0:	e017      	b.n	8001b02 <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	09db      	lsrs	r3, r3, #7
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	7b7a      	ldrb	r2, [r7, #13]
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	440a      	add	r2, r1
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	4053      	eors	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	897b      	ldrh	r3, [r7, #10]
 8001af0:	490a      	ldr	r1, [pc, #40]	@ (8001b1c <LTC_Pec15_Calc+0x60>)
 8001af2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4053      	eors	r3, r2
 8001afa:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001afc:	7b7b      	ldrb	r3, [r7, #13]
 8001afe:	3301      	adds	r3, #1
 8001b00:	737b      	strb	r3, [r7, #13]
 8001b02:	7b7a      	ldrb	r2, [r7, #13]
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3e3      	bcc.n	8001ad2 <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	b29b      	uxth	r3, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	08007c48 	.word	0x08007c48

08001b20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b32:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b4a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b5c:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b5e:	f001 fd8f 	bl	8003680 <HAL_ADC_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b68:	f000 ffe0 	bl	8002b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_ADC1_Init+0x74>)
 8001b7e:	f002 f843 	bl	8003c08 <HAL_ADC_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b88:	f000 ffd0 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200001d8 	.word	0x200001d8
 8001b98:	40012400 	.word	0x40012400

08001b9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bae:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <MX_ADC2_Init+0x78>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bc6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001bca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bd8:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bda:	f001 fd51 	bl	8003680 <HAL_ADC_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001be4:	f000 ffa2 	bl	8002b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001be8:	230a      	movs	r3, #10
 8001bea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bec:	2301      	movs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_ADC2_Init+0x74>)
 8001bfa:	f002 f805 	bl	8003c08 <HAL_ADC_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001c04:	f000 ff92 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000208 	.word	0x20000208
 8001c14:	40012800 	.word	0x40012800

08001c18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a28      	ldr	r2, [pc, #160]	@ (8001cd4 <HAL_ADC_MspInit+0xbc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d122      	bne.n	8001c7e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c38:	4b27      	ldr	r3, [pc, #156]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a26      	ldr	r2, [pc, #152]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c50:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a20      	ldr	r2, [pc, #128]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	4619      	mov	r1, r3
 8001c76:	4819      	ldr	r0, [pc, #100]	@ (8001cdc <HAL_ADC_MspInit+0xc4>)
 8001c78:	f002 fc70 	bl	800455c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001c7c:	e026      	b.n	8001ccc <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_ADC_MspInit+0xc8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d121      	bne.n	8001ccc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_ADC_MspInit+0xc0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cb8:	230f      	movs	r3, #15
 8001cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <HAL_ADC_MspInit+0xc4>)
 8001cc8:	f002 fc48 	bl	800455c <HAL_GPIO_Init>
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	@ 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012400 	.word	0x40012400
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40011000 	.word	0x40011000
 8001ce0:	40012800 	.word	0x40012800

08001ce4 <Start_Balance>:
//            }
//        }
//    }
//}

void Start_Balance(uint16_t *read_volt, uint8_t length, uint16_t lowest) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	803b      	strh	r3, [r7, #0]
	Discharge_Algo(read_volt, NUM_DEVICES, lowest);
 8001cf4:	883b      	ldrh	r3, [r7, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f824 	bl	8001d48 <Discharge_Algo>
	Wakeup_Sleep();
 8001d00:	f7ff fb62 	bl	80013c8 <Wakeup_Sleep>
	LTC6811_WRCFG(NUM_DEVICES, config);
 8001d04:	4903      	ldr	r1, [pc, #12]	@ (8001d14 <Start_Balance+0x30>)
 8001d06:	2008      	movs	r0, #8
 8001d08:	f7ff fc32 	bl	8001570 <LTC6811_WRCFG>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000000 	.word	0x20000000

08001d18 <End_Balance>:

void End_Balance(uint8_t *faults) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	Wakeup_Sleep();
 8001d20:	f7ff fb52 	bl	80013c8 <Wakeup_Sleep>
	LTC6811_WRCFG(NUM_DEVICES, defaultConfig);
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <End_Balance+0x2c>)
 8001d26:	2008      	movs	r0, #8
 8001d28:	f7ff fc22 	bl	8001570 <LTC6811_WRCFG>
	*faults |= 0b00000010;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	701a      	strb	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000030 	.word	0x20000030

08001d48 <Discharge_Algo>:
 * 
 * @param read_volt array containing cells volts. 
 * @param length count of readings. 
 * @param lowest read_volt's lowest cell reading
 */
void Discharge_Algo(uint16_t *read_volt, uint8_t total_ic, uint16_t lowest) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
 8001d54:	4613      	mov	r3, r2
 8001d56:	803b      	strh	r3, [r7, #0]

	for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	75fb      	strb	r3, [r7, #23]
 8001d5c:	e030      	b.n	8001dc0 <Discharge_Algo+0x78>
		// check if each cell is close within 0.005V of the lowest cell.
		uint8_t DCC[12];
		for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75bb      	strb	r3, [r7, #22]
 8001d62:	e020      	b.n	8001da6 <Discharge_Algo+0x5e>
				cell_idx++) {
			if (read_volt[dev_idx * NUM_CELL_SERIES_GROUP + cell_idx] - lowest
 8001d64:	7dfa      	ldrb	r2, [r7, #23]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	7dbb      	ldrb	r3, [r7, #22]
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	883b      	ldrh	r3, [r7, #0]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b32      	cmp	r3, #50	@ 0x32
 8001d84:	dd06      	ble.n	8001d94 <Discharge_Algo+0x4c>
					> 50) {
				DCC[cell_idx] = 1;
 8001d86:	7dbb      	ldrb	r3, [r7, #22]
 8001d88:	3318      	adds	r3, #24
 8001d8a:	443b      	add	r3, r7
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001d92:	e005      	b.n	8001da0 <Discharge_Algo+0x58>
			} else {
				DCC[cell_idx] = 0;
 8001d94:	7dbb      	ldrb	r3, [r7, #22]
 8001d96:	3318      	adds	r3, #24
 8001d98:	443b      	add	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f803 2c10 	strb.w	r2, [r3, #-16]
				cell_idx++) {
 8001da0:	7dbb      	ldrb	r3, [r7, #22]
 8001da2:	3301      	adds	r3, #1
 8001da4:	75bb      	strb	r3, [r7, #22]
		for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP;
 8001da6:	7dbb      	ldrb	r3, [r7, #22]
 8001da8:	2b0b      	cmp	r3, #11
 8001daa:	d9db      	bls.n	8001d64 <Discharge_Algo+0x1c>
			}
		}
		Set_Cfg(dev_idx, (uint8_t*) DCC);
 8001dac:	f107 0208 	add.w	r2, r7, #8
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f80b 	bl	8001dd0 <Set_Cfg>
	for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	75fb      	strb	r3, [r7, #23]
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b07      	cmp	r3, #7
 8001dc4:	d9cb      	bls.n	8001d5e <Discharge_Algo+0x16>
	}
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <Set_Cfg>:
 * setting configuration registers
 *
 * @param device index
 * @param array of DCC bits
 */
void Set_Cfg(uint8_t dev_idx, uint8_t *DCC) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
	for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP; cell_idx++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e08a      	b.n	8001ef8 <Set_Cfg+0x128>
		if (DCC[cell_idx]) {
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <Set_Cfg+0xa0>
			if (cell_idx < 8) {
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	d81c      	bhi.n	8001e2e <Set_Cfg+0x5e>
				config[dev_idx][4] |= (1 << cell_idx);
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	4945      	ldr	r1, [pc, #276]	@ (8001f0c <Set_Cfg+0x13c>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	440b      	add	r3, r1
 8001e02:	3304      	adds	r3, #4
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	493c      	ldr	r1, [pc, #240]	@ (8001f0c <Set_Cfg+0x13c>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	3304      	adds	r3, #4
 8001e28:	4602      	mov	r2, r0
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e061      	b.n	8001ef2 <Set_Cfg+0x122>
			} else if (cell_idx >= 8) {
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b07      	cmp	r3, #7
 8001e32:	d95e      	bls.n	8001ef2 <Set_Cfg+0x122>
				config[dev_idx][5] |= (1 << (cell_idx - 8));
 8001e34:	79fa      	ldrb	r2, [r7, #7]
 8001e36:	4935      	ldr	r1, [pc, #212]	@ (8001f0c <Set_Cfg+0x13c>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	3305      	adds	r3, #5
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b25a      	sxtb	r2, r3
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	3b08      	subs	r3, #8
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	79fa      	ldrb	r2, [r7, #7]
 8001e5a:	b2d8      	uxtb	r0, r3
 8001e5c:	492b      	ldr	r1, [pc, #172]	@ (8001f0c <Set_Cfg+0x13c>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	3305      	adds	r3, #5
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e040      	b.n	8001ef2 <Set_Cfg+0x122>
			}
		} else {
			if (cell_idx < 8) {
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b07      	cmp	r3, #7
 8001e74:	d81e      	bhi.n	8001eb4 <Set_Cfg+0xe4>
				config[dev_idx][4] &= (~(1 << cell_idx));
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	4924      	ldr	r1, [pc, #144]	@ (8001f0c <Set_Cfg+0x13c>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	440b      	add	r3, r1
 8001e84:	3304      	adds	r3, #4
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b25a      	sxtb	r2, r3
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	b25b      	sxtb	r3, r3
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	491a      	ldr	r1, [pc, #104]	@ (8001f0c <Set_Cfg+0x13c>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	440b      	add	r3, r1
 8001eac:	3304      	adds	r3, #4
 8001eae:	4602      	mov	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e01e      	b.n	8001ef2 <Set_Cfg+0x122>
			} else {
				config[dev_idx][5] &= (~(1 << (cell_idx - 8)));
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	4915      	ldr	r1, [pc, #84]	@ (8001f0c <Set_Cfg+0x13c>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3305      	adds	r3, #5
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b25a      	sxtb	r2, r3
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	79fa      	ldrb	r2, [r7, #7]
 8001ede:	b2d8      	uxtb	r0, r3
 8001ee0:	490a      	ldr	r1, [pc, #40]	@ (8001f0c <Set_Cfg+0x13c>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	3305      	adds	r3, #5
 8001eee:	4602      	mov	r2, r0
 8001ef0:	701a      	strb	r2, [r3, #0]
	for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP; cell_idx++) {
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b0b      	cmp	r3, #11
 8001efc:	f67f af71 	bls.w	8001de2 <Set_Cfg+0x12>
			}
		}
	}
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000000 	.word	0x20000000

08001f10 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <MX_CAN1_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f1c:	2209      	movs	r2, #9
 8001f1e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f32:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f36:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001f3a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_CAN1_Init+0x64>)
 8001f62:	f001 ffe4 	bl	8003f2e <HAL_CAN_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001f6c:	f000 fdde 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000238 	.word	0x20000238
 8001f78:	40006400 	.word	0x40006400

08001f7c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <HAL_CAN_MspInit+0xb0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d143      	bne.n	8002024 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f9c:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <HAL_CAN_MspInit+0xb4>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <HAL_CAN_MspInit+0xb4>)
 8001fa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	61d3      	str	r3, [r2, #28]
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <HAL_CAN_MspInit+0xb4>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_CAN_MspInit+0xb4>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_CAN_MspInit+0xb4>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_CAN_MspInit+0xb4>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4814      	ldr	r0, [pc, #80]	@ (8002034 <HAL_CAN_MspInit+0xb8>)
 8001fe2:	f002 fabb 	bl	800455c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480e      	ldr	r0, [pc, #56]	@ (8002034 <HAL_CAN_MspInit+0xb8>)
 8001ffc:	f002 faae 	bl	800455c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002000:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_CAN_MspInit+0xbc>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
 800201e:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <HAL_CAN_MspInit+0xbc>)
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	@ 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40006400 	.word	0x40006400
 8002030:	40021000 	.word	0x40021000
 8002034:	40010c00 	.word	0x40010c00
 8002038:	40010000 	.word	0x40010000

0800203c <CAN_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <CAN_Start+0x10>)
 8002042:	f002 f86f 	bl	8004124 <HAL_CAN_Start>
 8002046:	4603      	mov	r3, r0
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000238 	.word	0x20000238

08002050 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002054:	2102      	movs	r1, #2
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <CAN_Activate+0x14>)
 8002058:	f002 f977 	bl	800434a <HAL_CAN_ActivateNotification>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000238 	.word	0x20000238

08002068 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f103 021c 	add.w	r2, r3, #28
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3318      	adds	r3, #24
 800207c:	4803      	ldr	r0, [pc, #12]	@ (800208c <CAN_Send+0x24>)
 800207e:	f002 f895 	bl	80041ac <HAL_CAN_AddTxMessage>
 8002082:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000238 	.word	0x20000238

08002090 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8002098:	f7ff ffd0 	bl	800203c <CAN_Start>
	CAN_Activate();
 800209c:	f7ff ffd8 	bl	8002050 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2208      	movs	r2, #8
 80020b6:	611a      	str	r2, [r3, #16]
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 80020e4:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 80020e8:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 80020ea:	8afb      	ldrh	r3, [r7, #22]
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffe6 	bl	80020c0 <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e074      	b.n	80021e4 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d156      	bne.n	80021b2 <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	b2da      	uxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3301      	adds	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b29b      	uxth	r3, r3
 8002150:	b2da      	uxtb	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b29b      	uxth	r3, r3
 800217c:	b2da      	uxtb	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	3301      	adds	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	dd0c      	ble.n	80021d2 <CAN_Send_Voltage+0xf8>
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 80021c2:	8afb      	ldrh	r3, [r7, #22]
 80021c4:	3301      	adds	r3, #1
 80021c6:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 80021c8:	8afb      	ldrh	r3, [r7, #22]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff77 	bl	80020c0 <Set_CAN_Id>
		}
		HAL_Delay(1);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f001 fa30 	bl	8003638 <HAL_Delay>
		CAN_Send(ptr);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff45 	bl	8002068 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3301      	adds	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b5f      	cmp	r3, #95	@ 0x5f
 80021e8:	dd87      	ble.n	80020fa <CAN_Send_Voltage+0x20>
	}

}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 80021fe:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8002202:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff59 	bl	80020c0 <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	737b      	strb	r3, [r7, #13]
 8002212:	e076      	b.n	8002302 <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d156      	bne.n	80022ce <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8002220:	7b7b      	ldrb	r3, [r7, #13]
 8002222:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8002224:	7b3b      	ldrb	r3, [r7, #12]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8002234:	7b3b      	ldrb	r3, [r7, #12]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	b29b      	uxth	r3, r3
 8002242:	b2da      	uxtb	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002248:	7b3b      	ldrb	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 800224e:	7b3b      	ldrb	r3, [r7, #12]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 800225e:	7b3b      	ldrb	r3, [r7, #12]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4413      	add	r3, r2
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	b29b      	uxth	r3, r3
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8002272:	7b3b      	ldrb	r3, [r7, #12]
 8002274:	3301      	adds	r3, #1
 8002276:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8002278:	7b3b      	ldrb	r3, [r7, #12]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 800228a:	7b3b      	ldrb	r3, [r7, #12]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 80022a0:	7b3b      	ldrb	r3, [r7, #12]
 80022a2:	3301      	adds	r3, #1
 80022a4:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 80022a6:	7b3b      	ldrb	r3, [r7, #12]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 80022b8:	7b3b      	ldrb	r3, [r7, #12]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80022ce:	7b7b      	ldrb	r3, [r7, #13]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <CAN_Send_Temperature+0xfc>
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	3301      	adds	r3, #1
 80022e4:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fee8 	bl	80020c0 <Set_CAN_Id>
		}
		HAL_Delay(1);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f001 f9a1 	bl	8003638 <HAL_Delay>
		CAN_Send(ptr);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff feb6 	bl	8002068 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80022fc:	7b7b      	ldrb	r3, [r7, #13]
 80022fe:	3301      	adds	r3, #1
 8002300:	737b      	strb	r3, [r7, #13]
 8002302:	7b7b      	ldrb	r3, [r7, #13]
 8002304:	2b5f      	cmp	r3, #95	@ 0x5f
 8002306:	d985      	bls.n	8002214 <CAN_Send_Temperature+0x20>
	}

}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr, struct batteryModule *batt) {
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 800231c:	f240 6322 	movw	r3, #1570	@ 0x622
 8002320:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff feca 	bl	80020c0 <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002332:	b2da      	uxtb	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2da      	uxtb	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800234e:	b2da      	uxtb	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29b      	uxth	r3, r3
 800235e:	b2da      	uxtb	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 800236a:	b2da      	uxtb	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	b29b      	uxth	r3, r3
 800237c:	b2da      	uxtb	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 800238a:	b2da      	uxtb	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	HAL_Delay(1);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f001 f947 	bl	8003638 <HAL_Delay>
	CAN_Send(ptr);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fe5c 	bl	8002068 <CAN_Send>
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 80023c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023ca:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 80023cc:	8afb      	ldrh	r3, [r7, #22]
 80023ce:	4619      	mov	r1, r3
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fe75 	bl	80020c0 <Set_CAN_Id>
	ptr->data[0] = *faults;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002420:	0e1b      	lsrs	r3, r3, #24
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_Delay(1);
 800242a:	2001      	movs	r0, #1
 800242c:	f001 f904 	bl	8003638 <HAL_Delay>
	CAN_Send(ptr);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fe19 	bl	8002068 <CAN_Send>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002454:	4b3c      	ldr	r3, [pc, #240]	@ (8002548 <MX_GPIO_Init+0x108>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <MX_GPIO_Init+0x108>)
 800245a:	f043 0320 	orr.w	r3, r3, #32
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b39      	ldr	r3, [pc, #228]	@ (8002548 <MX_GPIO_Init+0x108>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246c:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <MX_GPIO_Init+0x108>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a35      	ldr	r2, [pc, #212]	@ (8002548 <MX_GPIO_Init+0x108>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <MX_GPIO_Init+0x108>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b30      	ldr	r3, [pc, #192]	@ (8002548 <MX_GPIO_Init+0x108>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <MX_GPIO_Init+0x108>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <MX_GPIO_Init+0x108>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <MX_GPIO_Init+0x108>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a29      	ldr	r2, [pc, #164]	@ (8002548 <MX_GPIO_Init+0x108>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <MX_GPIO_Init+0x108>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2110      	movs	r1, #16
 80024b8:	4824      	ldr	r0, [pc, #144]	@ (800254c <MX_GPIO_Init+0x10c>)
 80024ba:	f002 f9d3 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	2102      	movs	r1, #2
 80024c2:	4823      	ldr	r0, [pc, #140]	@ (8002550 <MX_GPIO_Init+0x110>)
 80024c4:	f002 f9ce 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2140      	movs	r1, #64	@ 0x40
 80024cc:	4821      	ldr	r0, [pc, #132]	@ (8002554 <MX_GPIO_Init+0x114>)
 80024ce:	f002 f9c9 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80024d2:	2310      	movs	r3, #16
 80024d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2302      	movs	r3, #2
 80024e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4619      	mov	r1, r3
 80024e8:	4818      	ldr	r0, [pc, #96]	@ (800254c <MX_GPIO_Init+0x10c>)
 80024ea:	f002 f837 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80024ee:	2302      	movs	r3, #2
 80024f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4619      	mov	r1, r3
 8002504:	4812      	ldr	r0, [pc, #72]	@ (8002550 <MX_GPIO_Init+0x110>)
 8002506:	f002 f829 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 800250a:	2340      	movs	r3, #64	@ 0x40
 800250c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2302      	movs	r3, #2
 8002518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4619      	mov	r1, r3
 8002520:	480c      	ldr	r0, [pc, #48]	@ (8002554 <MX_GPIO_Init+0x114>)
 8002522:	f002 f81b 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HV_SENSE_ENABLE_Pin */
  GPIO_InitStruct.Pin = MCU_HV_SENSE_ENABLE_Pin;
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_HV_SENSE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	@ (8002550 <MX_GPIO_Init+0x110>)
 800253a:	f002 f80f 	bl	800455c <HAL_GPIO_Init>

}
 800253e:	bf00      	nop
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40010800 	.word	0x40010800
 8002550:	40010c00 	.word	0x40010c00
 8002554:	40011000 	.word	0x40011000

08002558 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(uint32_t *read_volt_HV) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]

		// ADC開始
		HAL_ADC_Start(&hadc1);
 8002564:	4823      	ldr	r0, [pc, #140]	@ (80025f4 <ReadHVInput+0x9c>)
 8002566:	f001 f963 	bl	8003830 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800256a:	f04f 31ff 	mov.w	r1, #4294967295
 800256e:	4821      	ldr	r0, [pc, #132]	@ (80025f4 <ReadHVInput+0x9c>)
 8002570:	f001 fa38 	bl	80039e4 <HAL_ADC_PollForConversion>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);
 800257a:	481e      	ldr	r0, [pc, #120]	@ (80025f4 <ReadHVInput+0x9c>)
 800257c:	f001 fb38 	bl	8003bf0 <HAL_ADC_GetValue>
 8002580:	61f8      	str	r0, [r7, #28]
		}
		HAL_ADC_Stop(&hadc1);
 8002582:	481c      	ldr	r0, [pc, #112]	@ (80025f4 <ReadHVInput+0x9c>)
 8002584:	f001 fa02 	bl	800398c <HAL_ADC_Stop>

		// 電圧計算
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 8002588:	69f8      	ldr	r0, [r7, #28]
 800258a:	f7fe fbbf 	bl	8000d0c <__aeabi_ui2f>
 800258e:	4603      	mov	r3, r0
 8002590:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fcc5 	bl	8000f24 <__aeabi_fdiv>
 800259a:	4603      	mov	r3, r0
 800259c:	4916      	ldr	r1, [pc, #88]	@ (80025f8 <ReadHVInput+0xa0>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fc0c 	bl	8000dbc <__aeabi_fmul>
 80025a4:	4603      	mov	r3, r0
 80025a6:	61bb      	str	r3, [r7, #24]
		float amcOutput = adcVoltage / GAIN_TLV9001;
 80025a8:	4914      	ldr	r1, [pc, #80]	@ (80025fc <ReadHVInput+0xa4>)
 80025aa:	69b8      	ldr	r0, [r7, #24]
 80025ac:	f7fe fcba 	bl	8000f24 <__aeabi_fdiv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	617b      	str	r3, [r7, #20]
		float amcInput = amcOutput / GAIN_AMC1300;
 80025b4:	4912      	ldr	r1, [pc, #72]	@ (8002600 <ReadHVInput+0xa8>)
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7fe fcb4 	bl	8000f24 <__aeabi_fdiv>
 80025bc:	4603      	mov	r3, r0
 80025be:	613b      	str	r3, [r7, #16]
		float hvInput = amcInput * DIVIDER_RATIO;
 80025c0:	4910      	ldr	r1, [pc, #64]	@ (8002604 <ReadHVInput+0xac>)
 80025c2:	6938      	ldr	r0, [r7, #16]
 80025c4:	f7fe fbfa 	bl	8000dbc <__aeabi_fmul>
 80025c8:	4603      	mov	r3, r0
 80025ca:	490f      	ldr	r1, [pc, #60]	@ (8002608 <ReadHVInput+0xb0>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fca9 	bl	8000f24 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	60fb      	str	r3, [r7, #12]

		*read_volt_HV = (uint32_t)(hvInput * 10000);
 80025d6:	490d      	ldr	r1, [pc, #52]	@ (800260c <ReadHVInput+0xb4>)
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7fe fbef 	bl	8000dbc <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fd3b 	bl	800105c <__aeabi_f2uiz>
 80025e6:	4602      	mov	r2, r0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	601a      	str	r2, [r3, #0]
	}
 80025ec:	bf00      	nop
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200001d8 	.word	0x200001d8
 80025f8:	40533333 	.word	0x40533333
 80025fc:	3ff47ae1 	.word	0x3ff47ae1
 8002600:	41033333 	.word	0x41033333
 8002604:	49f8ed00 	.word	0x49f8ed00
 8002608:	447a0000 	.word	0x447a0000
 800260c:	461c4000 	.word	0x461c4000

08002610 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t BMS_MUX_PAUSE[2][6] = { { 0x69, 0x28, 0x0F, 0x09, 0x7F, 0xF9 }, {
		0x69, 0x08, 0x0F, 0x09, 0x7F, 0xF9 } };

int _write(int file, char *ptr, int len) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	b29a      	uxth	r2, r3
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	4804      	ldr	r0, [pc, #16]	@ (8002638 <_write+0x28>)
 8002628:	f003 fff0 	bl	800660c <HAL_UART_Transmit>
    return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000030c 	.word	0x2000030c

0800263c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8002642:	af04      	add	r7, sp, #16
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 8002644:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002648:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 8002650:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002654:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 800265c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002660:	f2a3 2347 	subw	r3, r3, #583	@ 0x247
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002668:	f000 ff84 	bl	8003574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800266c:	f000 f984 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002670:	f7ff fee6 	bl	8002440 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002674:	f7ff fa54 	bl	8001b20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002678:	f7ff fa90 	bl	8001b9c <MX_ADC2_Init>
  MX_TIM7_Init();
 800267c:	f000 fe8a 	bl	8003394 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002680:	f000 fd08 	bl	8003094 <MX_SPI1_Init>
  MX_CAN1_Init();
 8002684:	f7ff fc44 	bl	8001f10 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002688:	f000 fed8 	bl	800343c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fcfd 	bl	8002090 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8002696:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	49b1      	ldr	r1, [pc, #708]	@ (8002964 <main+0x328>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f9d4 	bl	8002a4c <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 80026a4:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80026a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa0d 	bl	8002acc <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 80026b2:	f000 fd6f 	bl	8003194 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 80026b6:	2201      	movs	r2, #1
 80026b8:	2102      	movs	r1, #2
 80026ba:	48ab      	ldr	r0, [pc, #684]	@ (8002968 <main+0x32c>)
 80026bc:	f002 f8d2 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80026c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026c4:	f000 ffb8 	bl	8003638 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2102      	movs	r1, #2
 80026cc:	48a6      	ldr	r0, [pc, #664]	@ (8002968 <main+0x32c>)
 80026ce:	f002 f8c9 	bl	8004864 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	uint8_t indexpause = 8;
 80026d8:	2308      	movs	r3, #8
 80026da:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	uint8_t low_volt_hysteresis = 0;
 80026de:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80026e2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
	uint8_t high_volt_hysteresis = 0;
 80026ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80026ee:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
	uint8_t cell_imbalance_hysteresis = 0;
 80026f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80026fa:	f2a3 234a 	subw	r3, r3, #586	@ 0x24a
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]

	//reading cell voltages
	Wakeup_Sleep();
 8002702:	f7fe fe61 	bl	80013c8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 8002706:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800270a:	4618      	mov	r0, r3
 800270c:	f000 faa8 	bl	8002c60 <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 8002710:	f7fe fe5a 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 8002714:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002718:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
 800271c:	e016      	b.n	800274c <main+0x110>
		Wakeup_Idle();
 800271e:	f7fe fe33 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002726:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 800272a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800272e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002732:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8002736:	4618      	mov	r0, r3
 8002738:	f000 faa6 	bl	8002c88 <Read_Temp>
		HAL_Delay(3);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 ff7b 	bl	8003638 <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 8002742:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8002746:	3301      	adds	r3, #1
 8002748:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
 800274c:	f897 224d 	ldrb.w	r2, [r7, #589]	@ 0x24d
 8002750:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8002754:	429a      	cmp	r2, r3
 8002756:	d3e2      	bcc.n	800271e <main+0xe2>
	}
	Wakeup_Idle();
 8002758:	f7fe fe16 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 800275c:	4983      	ldr	r1, [pc, #524]	@ (800296c <main+0x330>)
 800275e:	2008      	movs	r0, #8
 8002760:	f7fe ff7a 	bl	8001658 <LTC_WRCOMM>
	Wakeup_Idle();
 8002764:	f7fe fe10 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002768:	2002      	movs	r0, #2
 800276a:	f7fe ffe3 	bl	8001734 <LTC_STCOMM>

	Wakeup_Sleep();
 800276e:	f7fe fe2b 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8002772:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8002776:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
 800277a:	e016      	b.n	80027aa <main+0x16e>
		Wakeup_Idle();
 800277c:	f7fe fe04 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002780:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002784:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 8002788:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800278c:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002790:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa77 	bl	8002c88 <Read_Temp>
		HAL_Delay(3);
 800279a:	2003      	movs	r0, #3
 800279c:	f000 ff4c 	bl	8003638 <HAL_Delay>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 80027a0:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 80027a4:	3301      	adds	r3, #1
 80027a6:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
 80027aa:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 80027ae:	2b0b      	cmp	r3, #11
 80027b0:	d9e4      	bls.n	800277c <main+0x140>
	}
	Wakeup_Idle();
 80027b2:	f7fe fde9 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 80027b6:	496e      	ldr	r1, [pc, #440]	@ (8002970 <main+0x334>)
 80027b8:	2008      	movs	r0, #8
 80027ba:	f7fe ff4d 	bl	8001658 <LTC_WRCOMM>
	Wakeup_Idle();
 80027be:	f7fe fde3 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 80027c2:	2002      	movs	r0, #2
 80027c4:	f7fe ffb6 	bl	8001734 <LTC_STCOMM>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80027c8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80027cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f958 	bl	8002a86 <GpioFixedToggle>
		printf("Hello");
 80027d6:	4867      	ldr	r0, [pc, #412]	@ (8002974 <main+0x338>)
 80027d8:	f004 f9ae 	bl	8006b38 <iprintf>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 80027dc:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f986 	bl	8002af2 <TimerPacket_FixedPulse>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ed      	beq.n	80027c8 <main+0x18c>
			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 80027ec:	f107 040a 	add.w	r4, r7, #10
 80027f0:	f107 020b 	add.w	r2, r7, #11
 80027f4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80027f8:	f107 000c 	add.w	r0, r7, #12
 80027fc:	f107 0309 	add.w	r3, r7, #9
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4623      	mov	r3, r4
 8002804:	f7ff fdd8 	bl	80023b8 <CAN_Send_Safety_Checker>
					&safetyWarnings, &safetyStates);
			CAN_Send_Cell_Summary(&msg, &modPackInfo);
 8002808:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fd7d 	bl	8002312 <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 8002818:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fc59 	bl	80020da <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 8002828:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800282c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fcdc 	bl	80021f4 <CAN_Send_Temperature>
			//reading cell voltages
			Wakeup_Sleep();
 800283c:	f7fe fdc4 	bl	80013c8 <Wakeup_Sleep>
			Read_Volt(modPackInfo.cell_volt);
 8002840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fa0b 	bl	8002c60 <Read_Volt>
			//print(NUM_CELLS, (uint16_t*) modPackInfo.cell_volt);

			//reading cell temperatures
//			Wakeup_Sleep();
			for (uint8_t i = tempindex; i < indexpause; i++) {
 800284a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800284e:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
 8002852:	e011      	b.n	8002878 <main+0x23c>
//				Wakeup_Idle();
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002854:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002858:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 800285c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002860:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002864:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fa0d 	bl	8002c88 <Read_Temp>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 800286e:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002872:	3301      	adds	r3, #1
 8002874:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
 8002878:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 800287c:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8002880:	429a      	cmp	r2, r3
 8002882:	d3e7      	bcc.n	8002854 <main+0x218>
//				HAL_Delay(5);
			}
			if (indexpause == 8) {
 8002884:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 8002888:	2b08      	cmp	r3, #8
 800288a:	d10d      	bne.n	80028a8 <main+0x26c>
//				Wakeup_Idle();
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 800288c:	4937      	ldr	r1, [pc, #220]	@ (800296c <main+0x330>)
 800288e:	2008      	movs	r0, #8
 8002890:	f7fe fee2 	bl	8001658 <LTC_WRCOMM>
//				Wakeup_Idle();
				LTC_STCOMM(2);
 8002894:	2002      	movs	r0, #2
 8002896:	f7fe ff4d 	bl	8001734 <LTC_STCOMM>
				tempindex = 8;
 800289a:	2308      	movs	r3, #8
 800289c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				indexpause = NUM_THERM_PER_MOD;
 80028a0:	230c      	movs	r3, #12
 80028a2:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 80028a6:	e010      	b.n	80028ca <main+0x28e>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 80028a8:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d10c      	bne.n	80028ca <main+0x28e>
//				Wakeup_Idle();
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 80028b0:	492f      	ldr	r1, [pc, #188]	@ (8002970 <main+0x334>)
 80028b2:	2008      	movs	r0, #8
 80028b4:	f7fe fed0 	bl	8001658 <LTC_WRCOMM>
//				Wakeup_Idle();
				LTC_STCOMM(2);
 80028b8:	2002      	movs	r0, #2
 80028ba:	f7fe ff3b 	bl	8001734 <LTC_STCOMM>
				indexpause = 8;
 80028be:	2308      	movs	r3, #8
 80028c0:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
				tempindex = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}

			ReadHVInput(&modPackInfo.pack_voltage);
 80028ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028ce:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fe40 	bl	8002558 <ReadHVInput>
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

			//getting the summary of all cells in the pack
			Cell_Summary_Voltage(&modPackInfo, &safetyFaults,
 80028d8:	f107 0409 	add.w	r4, r7, #9
 80028dc:	f107 020a 	add.w	r2, r7, #10
 80028e0:	f107 010b 	add.w	r1, r7, #11
 80028e4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80028e8:	1dbb      	adds	r3, r7, #6
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	4623      	mov	r3, r4
 80028f8:	f000 fa0c 	bl	8002d14 <Cell_Summary_Voltage>
								&safetyWarnings, &safetyStates, &low_volt_hysteresis,
								&high_volt_hysteresis, &cell_imbalance_hysteresis);

			Cell_Summary_Temperature(&modPackInfo, &safetyFaults,&safetyWarnings);
 80028fc:	f107 020a 	add.w	r2, r7, #10
 8002900:	f107 010b 	add.w	r1, r7, #11
 8002904:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fb53 	bl	8002fb4 <Cell_Summary_Temperature>
//			if (safetyFaults != 0) {
//				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
//			}
//
//			Passive balancing is called unless a fault has occurred
			if (safetyFaults == 0 && BALANCE
 800290e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002912:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11c      	bne.n	8002956 <main+0x31a>
					&& ((modPackInfo.cell_volt_highest
 800291c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002920:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002924:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002928:	461a      	mov	r2, r3
							- modPackInfo.cell_volt_lowest) > 50)) {
 800292a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800292e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002932:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002936:	1ad3      	subs	r3, r2, r3
					&& ((modPackInfo.cell_volt_highest
 8002938:	2b32      	cmp	r3, #50	@ 0x32
 800293a:	dd0c      	ble.n	8002956 <main+0x31a>
				Start_Balance((uint16_t*) modPackInfo.cell_volt,
 800293c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002940:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002944:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8002948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800294c:	2108      	movs	r1, #8
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f9c8 	bl	8001ce4 <Start_Balance>
 8002954:	e004      	b.n	8002960 <main+0x324>
				NUM_DEVICES, modPackInfo.cell_volt_lowest);
////
			} else if (BALANCE) {
				End_Balance(&safetyFaults);
 8002956:	f107 030b 	add.w	r3, r7, #11
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f9dc 	bl	8001d18 <End_Balance>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002960:	e732      	b.n	80027c8 <main+0x18c>
 8002962:	bf00      	nop
 8002964:	40011000 	.word	0x40011000
 8002968:	40010c00 	.word	0x40010c00
 800296c:	20000060 	.word	0x20000060
 8002970:	20000066 	.word	0x20000066
 8002974:	08007c34 	.word	0x08007c34

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b09c      	sub	sp, #112	@ 0x70
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002982:	2238      	movs	r2, #56	@ 0x38
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f92b 	bl	8006be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	2220      	movs	r2, #32
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 f91d 	bl	8006be2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80029b2:	2304      	movs	r3, #4
 80029b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b6:	2301      	movs	r3, #1
 80029b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80029ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c0:	2302      	movs	r3, #2
 80029c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80029ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80029d0:	2302      	movs	r3, #2
 80029d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80029d4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80029da:	2340      	movs	r3, #64	@ 0x40
 80029dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 ff70 	bl	80048c8 <HAL_RCC_OscConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80029ee:	f000 f89d 	bl	8002b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f2:	230f      	movs	r3, #15
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f6:	2302      	movs	r3, #2
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 fa70 	bl	8004ef4 <HAL_RCC_ClockConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002a1a:	f000 f887 	bl	8002b2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a26:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fc58 	bl	80052e0 <HAL_RCCEx_PeriphCLKConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a36:	f000 f879 	bl	8002b2c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002a3a:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <SystemClock_Config+0xd0>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	bf00      	nop
 8002a42:	3770      	adds	r7, #112	@ 0x70
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	42420070 	.word	0x42420070

08002a4c <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f001 feff 	bl	8004864 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002a92:	f000 fdc7 	bl	8003624 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d90b      	bls.n	8002ac4 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	889b      	ldrh	r3, [r3, #4]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f001 feec 	bl	8004894 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
	}
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002afa:	f000 fd93 	bl	8003624 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d905      	bls.n	8002b22 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b30:	b672      	cpsid	i
}
 8002b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <Error_Handler+0x8>

08002b38 <Get_Actual_Temps>:
		{ 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F,
				0xF9 }, { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08,
				0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	603a      	str	r2, [r7, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
 8002b46:	460b      	mov	r3, r1
 8002b48:	71bb      	strb	r3, [r7, #6]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 8002b4e:	88bb      	ldrh	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f8db 	bl	8000d0c <__aeabi_ui2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	483a      	ldr	r0, [pc, #232]	@ (8002c44 <Get_Actual_Temps+0x10c>)
 8002b5c:	f7fe f9e2 	bl	8000f24 <__aeabi_fdiv>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f81e 	bl	8000ba8 <__aeabi_fsub>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b35      	ldr	r3, [pc, #212]	@ (8002c48 <Get_Actual_Temps+0x110>)
 8002b72:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <Get_Actual_Temps+0x110>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4834      	ldr	r0, [pc, #208]	@ (8002c4c <Get_Actual_Temps+0x114>)
 8002b7c:	f7fe f9d2 	bl	8000f24 <__aeabi_fdiv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <Get_Actual_Temps+0x110>)
 8002b86:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 8002b88:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <Get_Actual_Temps+0x110>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	492f      	ldr	r1, [pc, #188]	@ (8002c4c <Get_Actual_Temps+0x114>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe f9c8 	bl	8000f24 <__aeabi_fdiv>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b2d      	ldr	r3, [pc, #180]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002b9a:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fca5 	bl	80004f0 <__aeabi_f2d>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f004 fe49 	bl	8007844 <log>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fd ffa1 	bl	8000b00 <__aeabi_d2f>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a23      	ldr	r2, [pc, #140]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002bc2:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4922      	ldr	r1, [pc, #136]	@ (8002c54 <Get_Actual_Temps+0x11c>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe f9aa 	bl	8000f24 <__aeabi_fdiv>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002bd6:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	491e      	ldr	r1, [pc, #120]	@ (8002c58 <Get_Actual_Temps+0x120>)
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd ffe4 	bl	8000bac <__addsf3>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002bea:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 8002bec:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002bf6:	f7fe f995 	bl	8000f24 <__aeabi_fdiv>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002c00:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 8002c02:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4915      	ldr	r1, [pc, #84]	@ (8002c5c <Get_Actual_Temps+0x124>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd ffcd 	bl	8000ba8 <__aeabi_fsub>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002c14:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <Get_Actual_Temps+0x118>)
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	4413      	add	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	18d4      	adds	r4, r2, r3
 8002c30:	4608      	mov	r0, r1
 8002c32:	f7fe fa13 	bl	800105c <__aeabi_f2uiz>
 8002c36:	4603      	mov	r3, r0
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	8023      	strh	r3, [r4, #0]

}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	46ea6000 	.word	0x46ea6000
 8002c48:	20000260 	.word	0x20000260
 8002c4c:	461c4000 	.word	0x461c4000
 8002c50:	20000264 	.word	0x20000264
 8002c54:	4556b000 	.word	0x4556b000
 8002c58:	3b5bcf0f 	.word	0x3b5bcf0f
 8002c5c:	43889333 	.word	0x43889333

08002c60 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2003      	movs	r0, #3
 8002c6e:	f7fe fe59 	bl	8001924 <LTC_ADCV>
	LTC_POLLADC();
 8002c72:	f7fe fedd 	bl	8001a30 <LTC_POLLADC>
	Wakeup_Idle();
 8002c76:	f7fe fb87 	bl	8001388 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fbc0 	bl	8001400 <Read_Cell_Volt>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d10 <Read_Temp+0x88>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2008      	movs	r0, #8
 8002ca8:	f7fe fcd6 	bl	8001658 <LTC_WRCOMM>
	Wakeup_Idle();
 8002cac:	f7fe fb6c 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fe fd3f 	bl	8001734 <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 8002cb6:	f7fe fb67 	bl	8001388 <Wakeup_Idle>
	LTC_ADAX(MD_FAST, 1); //doing GPIO all conversion
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7fe fe77 	bl	80019b0 <LTC_ADAX>
	LTC_POLLADC();
 8002cc2:	f7fe feb5 	bl	8001a30 <LTC_POLLADC>
	Wakeup_Idle();
 8002cc6:	f7fe fb5f 	bl	8001388 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fd72 	bl	80017b4 <Read_Cell_Temps>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
 8002cda:	e012      	b.n	8002d02 <Read_Temp+0x7a>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8002cdc:	7dfa      	ldrb	r2, [r7, #23]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002cf0:	8abb      	ldrh	r3, [r7, #20]
 8002cf2:	7bf9      	ldrb	r1, [r7, #15]
 8002cf4:	7df8      	ldrb	r0, [r7, #23]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f7ff ff1e 	bl	8002b38 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b07      	cmp	r3, #7
 8002d06:	d9e9      	bls.n	8002cdc <Read_Temp+0x54>

		}
	}
}
 8002d08:	bf00      	nop
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2000006c 	.word	0x2000006c

08002d14 <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

	for (int i = 1; i < NUM_CELLS; i++) {
 8002d36:	2301      	movs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e128      	b.n	8002f8e <Cell_Summary_Voltage+0x27a>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d93a      	bls.n	8002dc4 <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002d62:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d906      	bls.n	8002d78 <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f043 0310 	orr.w	r3, r3, #16
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002d7e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d910      	bls.n	8002da8 <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	f043 0310 	orr.w	r3, r3, #16
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2102      	movs	r1, #2
 8002da0:	487f      	ldr	r0, [pc, #508]	@ (8002fa0 <Cell_Summary_Voltage+0x28c>)
 8002da2:	f001 fd5f 	bl	8004864 <HAL_GPIO_WritePin>
 8002da6:	e00d      	b.n	8002dc4 <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002dae:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d903      	bls.n	8002dbe <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e002      	b.n	8002dc4 <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d23a      	bcs.n	8002e4c <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002dea:	f646 1278 	movw	r2, #27000	@ 0x6978
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d806      	bhi.n	8002e00 <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002e06:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d810      	bhi.n	8002e30 <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002e24:	2201      	movs	r2, #1
 8002e26:	2102      	movs	r1, #2
 8002e28:	485d      	ldr	r0, [pc, #372]	@ (8002fa0 <Cell_Summary_Voltage+0x28c>)
 8002e2a:	f001 fd1b 	bl	8004864 <HAL_GPIO_WritePin>
 8002e2e:	e00d      	b.n	8002e4c <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002e36:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d803      	bhi.n	8002e46 <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e002      	b.n	8002e4c <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e60:	db10      	blt.n	8002e84 <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	4848      	ldr	r0, [pc, #288]	@ (8002fa0 <Cell_Summary_Voltage+0x28c>)
 8002e7e:	f001 fcf1 	bl	8004864 <HAL_GPIO_WritePin>
 8002e82:	e011      	b.n	8002ea8 <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e98:	db03      	blt.n	8002ea2 <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e002      	b.n	8002ea8 <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ebc:	db06      	blt.n	8002ecc <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	701a      	strb	r2, [r3, #0]
			}

			if (BALANCE) {
				*states |= 0b10000000;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002ee0:	4a30      	ldr	r2, [pc, #192]	@ (8002fa4 <Cell_Summary_Voltage+0x290>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d906      	bls.n	8002ef4 <Cell_Summary_Voltage+0x1e0>
			*warnings |= 0b10000000;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002efa:	4a2b      	ldr	r2, [pc, #172]	@ (8002fa8 <Cell_Summary_Voltage+0x294>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d806      	bhi.n	8002f0e <Cell_Summary_Voltage+0x1fa>
			*warnings |= 0b01000000;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002f14:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <Cell_Summary_Voltage+0x298>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90b      	bls.n	8002f32 <Cell_Summary_Voltage+0x21e>
			*fault |= 0b10000000;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	481c      	ldr	r0, [pc, #112]	@ (8002fa0 <Cell_Summary_Voltage+0x28c>)
 8002f2e:	f001 fc99 	bl	8004864 <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002f38:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <Cell_Summary_Voltage+0x29c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d80b      	bhi.n	8002f56 <Cell_Summary_Voltage+0x242>
			*fault |= 0b01000000;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4813      	ldr	r0, [pc, #76]	@ (8002fa0 <Cell_Summary_Voltage+0x28c>)
 8002f52:	f001 fc87 	bl	8004864 <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f6a:	db06      	blt.n	8002f7a <Cell_Summary_Voltage+0x266>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	701a      	strb	r2, [r3, #0]
		}
		if (BALANCE) {
			*states |= 0b10000000;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b5f      	cmp	r3, #95	@ 0x5f
 8002f92:	f77f aed3 	ble.w	8002d3c <Cell_Summary_Voltage+0x28>
		}
	}
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40010c00 	.word	0x40010c00
 8002fa4:	003e5507 	.word	0x003e5507
 8002fa8:	002dc6c0 	.word	0x002dc6c0
 8002fac:	003e8f9f 	.word	0x003e8f9f
 8002fb0:	002bf200 	.word	0x002bf200

08002fb4 <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e04f      	b.n	800307e <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 2196 	ldrh.w	r2, [r3, #406]	@ 0x196
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6979      	ldr	r1, [r7, #20]
 8002fe8:	3160      	adds	r1, #96	@ 0x60
 8002fea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d224      	bcs.n	800303c <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	3260      	adds	r2, #96	@ 0x60
 8002ff8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8003008:	2b36      	cmp	r3, #54	@ 0x36
 800300a:	d906      	bls.n	800301a <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	b2da      	uxtb	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8003020:	2b3b      	cmp	r3, #59	@ 0x3b
 8003022:	d90b      	bls.n	800303c <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	f043 0308 	orr.w	r3, r3, #8
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8003032:	2201      	movs	r2, #1
 8003034:	2102      	movs	r1, #2
 8003036:	4816      	ldr	r0, [pc, #88]	@ (8003090 <Cell_Summary_Temperature+0xdc>)
 8003038:	f001 fc14 	bl	8004864 <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8b3 2194 	ldrh.w	r2, [r3, #404]	@ 0x194
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	3160      	adds	r1, #96	@ 0x60
 8003048:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800304c:	429a      	cmp	r2, r3
 800304e:	d913      	bls.n	8003078 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	3260      	adds	r2, #96	@ 0x60
 8003056:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	3301      	adds	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b5f      	cmp	r3, #95	@ 0x5f
 8003082:	ddac      	ble.n	8002fde <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40010c00 	.word	0x40010c00

08003094 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <MX_SPI1_Init+0x64>)
 800309a:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <MX_SPI1_Init+0x68>)
 800309c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030a6:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b2:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030be:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030c8:	2228      	movs	r2, #40	@ 0x28
 80030ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030e0:	220a      	movs	r2, #10
 80030e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030e4:	4804      	ldr	r0, [pc, #16]	@ (80030f8 <MX_SPI1_Init+0x64>)
 80030e6:	f002 fb7f 	bl	80057e8 <HAL_SPI_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030f0:	f7ff fd1c 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000268 	.word	0x20000268
 80030fc:	40013000 	.word	0x40013000

08003100 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1b      	ldr	r2, [pc, #108]	@ (8003188 <HAL_SPI_MspInit+0x88>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d12f      	bne.n	8003180 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003120:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_SPI_MspInit+0x8c>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4a19      	ldr	r2, [pc, #100]	@ (800318c <HAL_SPI_MspInit+0x8c>)
 8003126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	4b17      	ldr	r3, [pc, #92]	@ (800318c <HAL_SPI_MspInit+0x8c>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003138:	4b14      	ldr	r3, [pc, #80]	@ (800318c <HAL_SPI_MspInit+0x8c>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a13      	ldr	r2, [pc, #76]	@ (800318c <HAL_SPI_MspInit+0x8c>)
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_SPI_MspInit+0x8c>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003150:	23a0      	movs	r3, #160	@ 0xa0
 8003152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0310 	add.w	r3, r7, #16
 8003160:	4619      	mov	r1, r3
 8003162:	480b      	ldr	r0, [pc, #44]	@ (8003190 <HAL_SPI_MspInit+0x90>)
 8003164:	f001 f9fa 	bl	800455c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003168:	2340      	movs	r3, #64	@ 0x40
 800316a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	4619      	mov	r1, r3
 800317a:	4805      	ldr	r0, [pc, #20]	@ (8003190 <HAL_SPI_MspInit+0x90>)
 800317c:	f001 f9ee 	bl	800455c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003180:	bf00      	nop
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40013000 	.word	0x40013000
 800318c:	40021000 	.word	0x40021000
 8003190:	40010800 	.word	0x40010800

08003194 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8003198:	2201      	movs	r2, #1
 800319a:	2110      	movs	r1, #16
 800319c:	4802      	ldr	r0, [pc, #8]	@ (80031a8 <LTC_nCS_High+0x14>)
 800319e:	f001 fb61 	bl	8004864 <HAL_GPIO_WritePin>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40010800 	.word	0x40010800

080031ac <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 80031b0:	2200      	movs	r2, #0
 80031b2:	2110      	movs	r1, #16
 80031b4:	4802      	ldr	r0, [pc, #8]	@ (80031c0 <LTC_nCS_Low+0x14>)
 80031b6:	f001 fb55 	bl	8004864 <HAL_GPIO_WritePin>
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40010800 	.word	0x40010800

080031c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031ca:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <HAL_MspInit+0x5c>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	4a14      	ldr	r2, [pc, #80]	@ (8003220 <HAL_MspInit+0x5c>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6193      	str	r3, [r2, #24]
 80031d6:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <HAL_MspInit+0x5c>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_MspInit+0x5c>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <HAL_MspInit+0x5c>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	61d3      	str	r3, [r2, #28]
 80031ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <HAL_MspInit+0x5c>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_MspInit+0x60>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <HAL_MspInit+0x60>)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40021000 	.word	0x40021000
 8003224:	40010000 	.word	0x40010000

08003228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <NMI_Handler+0x4>

08003230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <HardFault_Handler+0x4>

08003238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <MemManage_Handler+0x4>

08003240 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <BusFault_Handler+0x4>

08003248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <UsageFault_Handler+0x4>

08003250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003278:	f000 f9c2 	bl	8003600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e00a      	b.n	80032a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003292:	f3af 8000 	nop.w
 8003296:	4601      	mov	r1, r0
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	60ba      	str	r2, [r7, #8]
 800329e:	b2ca      	uxtb	r2, r1
 80032a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dbf0      	blt.n	8003292 <_read+0x12>
  }

  return len;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032e0:	605a      	str	r2, [r3, #4]
  return 0;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <_isatty>:

int _isatty(int file)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
	...

0800331c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <_sbrk+0x5c>)
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <_sbrk+0x60>)
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003330:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <_sbrk+0x64>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <_sbrk+0x64>)
 800333a:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <_sbrk+0x68>)
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d207      	bcs.n	800335c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800334c:	f003 fc98 	bl	8006c80 <__errno>
 8003350:	4603      	mov	r3, r0
 8003352:	220c      	movs	r2, #12
 8003354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	e009      	b.n	8003370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800335c:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <_sbrk+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <_sbrk+0x64>)
 800336c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20010000 	.word	0x20010000
 800337c:	00000400 	.word	0x00000400
 8003380:	200002c0 	.word	0x200002c0
 8003384:	200004a8 	.word	0x200004a8

08003388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339a:	463b      	mov	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <MX_TIM7_Init+0x68>)
 80033a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ae:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80033b4:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033be:	2280      	movs	r2, #128	@ 0x80
 80033c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033c2:	480d      	ldr	r0, [pc, #52]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033c4:	f002 ffa5 	bl	8006312 <HAL_TIM_Base_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80033ce:	f7ff fbad 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033da:	463b      	mov	r3, r7
 80033dc:	4619      	mov	r1, r3
 80033de:	4806      	ldr	r0, [pc, #24]	@ (80033f8 <MX_TIM7_Init+0x64>)
 80033e0:	f003 f85e 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80033ea:	f7ff fb9f 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200002c4 	.word	0x200002c4
 80033fc:	40001400 	.word	0x40001400

08003400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a09      	ldr	r2, [pc, #36]	@ (8003434 <HAL_TIM_Base_MspInit+0x34>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10b      	bne.n	800342a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_TIM_Base_MspInit+0x38>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <HAL_TIM_Base_MspInit+0x38>)
 8003418:	f043 0320 	orr.w	r3, r3, #32
 800341c:	61d3      	str	r3, [r2, #28]
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_TIM_Base_MspInit+0x38>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40001400 	.word	0x40001400
 8003438:	40021000 	.word	0x40021000

0800343c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003442:	4a12      	ldr	r2, [pc, #72]	@ (800348c <MX_USART1_UART_Init+0x50>)
 8003444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800344c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800344e:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800345a:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003462:	220c      	movs	r2, #12
 8003464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003466:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 800346e:	2200      	movs	r2, #0
 8003470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003472:	4805      	ldr	r0, [pc, #20]	@ (8003488 <MX_USART1_UART_Init+0x4c>)
 8003474:	f003 f87a 	bl	800656c <HAL_UART_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800347e:	f7ff fb55 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000030c 	.word	0x2000030c
 800348c:	40013800 	.word	0x40013800

08003490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0310 	add.w	r3, r7, #16
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_UART_MspInit+0x8c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d131      	bne.n	8003514 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_UART_MspInit+0x90>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003520 <HAL_UART_MspInit+0x90>)
 80034b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ba:	6193      	str	r3, [r2, #24]
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_UART_MspInit+0x90>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c8:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_UART_MspInit+0x90>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4a14      	ldr	r2, [pc, #80]	@ (8003520 <HAL_UART_MspInit+0x90>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6193      	str	r3, [r2, #24]
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_UART_MspInit+0x90>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 80034e0:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80034e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 0310 	add.w	r3, r7, #16
 80034f2:	4619      	mov	r1, r3
 80034f4:	480b      	ldr	r0, [pc, #44]	@ (8003524 <HAL_UART_MspInit+0x94>)
 80034f6:	f001 f831 	bl	800455c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	4619      	mov	r1, r3
 800350e:	4805      	ldr	r0, [pc, #20]	@ (8003524 <HAL_UART_MspInit+0x94>)
 8003510:	f001 f824 	bl	800455c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003514:	bf00      	nop
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40013800 	.word	0x40013800
 8003520:	40021000 	.word	0x40021000
 8003524:	40010800 	.word	0x40010800

08003528 <Reset_Handler>:
 8003528:	f7ff ff2e 	bl	8003388 <SystemInit>
 800352c:	480b      	ldr	r0, [pc, #44]	@ (800355c <LoopFillZerobss+0xe>)
 800352e:	490c      	ldr	r1, [pc, #48]	@ (8003560 <LoopFillZerobss+0x12>)
 8003530:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <LoopFillZerobss+0x16>)
 8003532:	2300      	movs	r3, #0
 8003534:	e002      	b.n	800353c <LoopCopyDataInit>

08003536 <CopyDataInit>:
 8003536:	58d4      	ldr	r4, [r2, r3]
 8003538:	50c4      	str	r4, [r0, r3]
 800353a:	3304      	adds	r3, #4

0800353c <LoopCopyDataInit>:
 800353c:	18c4      	adds	r4, r0, r3
 800353e:	428c      	cmp	r4, r1
 8003540:	d3f9      	bcc.n	8003536 <CopyDataInit>
 8003542:	4a09      	ldr	r2, [pc, #36]	@ (8003568 <LoopFillZerobss+0x1a>)
 8003544:	4c09      	ldr	r4, [pc, #36]	@ (800356c <LoopFillZerobss+0x1e>)
 8003546:	2300      	movs	r3, #0
 8003548:	e001      	b.n	800354e <LoopFillZerobss>

0800354a <FillZerobss>:
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	3204      	adds	r2, #4

0800354e <LoopFillZerobss>:
 800354e:	42a2      	cmp	r2, r4
 8003550:	d3fb      	bcc.n	800354a <FillZerobss>
 8003552:	f003 fb9b 	bl	8006c8c <__libc_init_array>
 8003556:	f7ff f871 	bl	800263c <main>
 800355a:	4770      	bx	lr
 800355c:	20000000 	.word	0x20000000
 8003560:	20000134 	.word	0x20000134
 8003564:	080080e4 	.word	0x080080e4
 8003568:	20000134 	.word	0x20000134
 800356c:	200004a4 	.word	0x200004a4

08003570 <ADC1_2_IRQHandler>:
 8003570:	e7fe      	b.n	8003570 <ADC1_2_IRQHandler>
	...

08003574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <HAL_Init+0x28>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_Init+0x28>)
 800357e:	f043 0310 	orr.w	r3, r3, #16
 8003582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003584:	2003      	movs	r0, #3
 8003586:	f000 ffb5 	bl	80044f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800358a:	200f      	movs	r0, #15
 800358c:	f000 f808 	bl	80035a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003590:	f7ff fe18 	bl	80031c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40022000 	.word	0x40022000

080035a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_InitTick+0x54>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <HAL_InitTick+0x58>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4619      	mov	r1, r3
 80035b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 ffbf 	bl	8004542 <HAL_SYSTICK_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00e      	b.n	80035ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b0f      	cmp	r3, #15
 80035d2:	d80a      	bhi.n	80035ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d4:	2200      	movs	r2, #0
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	f000 ff95 	bl	800450a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e0:	4a06      	ldr	r2, [pc, #24]	@ (80035fc <HAL_InitTick+0x5c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	200000cc 	.word	0x200000cc
 80035f8:	200000d4 	.word	0x200000d4
 80035fc:	200000d0 	.word	0x200000d0

08003600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_IncTick+0x1c>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_IncTick+0x20>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4413      	add	r3, r2
 8003610:	4a03      	ldr	r2, [pc, #12]	@ (8003620 <HAL_IncTick+0x20>)
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	200000d4 	.word	0x200000d4
 8003620:	20000354 	.word	0x20000354

08003624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return uwTick;
 8003628:	4b02      	ldr	r3, [pc, #8]	@ (8003634 <HAL_GetTick+0x10>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	20000354 	.word	0x20000354

08003638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff fff0 	bl	8003624 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d005      	beq.n	800365e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HAL_Delay+0x44>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800365e:	bf00      	nop
 8003660:	f7ff ffe0 	bl	8003624 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d8f7      	bhi.n	8003660 <HAL_Delay+0x28>
  {
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200000d4 	.word	0x200000d4

08003680 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0be      	b.n	8003820 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe faaa 	bl	8001c18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fbf1 	bl	8003eac <ADC_ConversionStop_Disable>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 8099 	bne.w	800380e <HAL_ADC_Init+0x18e>
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 8095 	bne.w	800380e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036ec:	f023 0302 	bic.w	r3, r3, #2
 80036f0:	f043 0202 	orr.w	r2, r3, #2
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003700:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7b1b      	ldrb	r3, [r3, #12]
 8003706:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003708:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003718:	d003      	beq.n	8003722 <HAL_ADC_Init+0xa2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_ADC_Init+0xa8>
 8003722:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003726:	e000      	b.n	800372a <HAL_ADC_Init+0xaa>
 8003728:	2300      	movs	r3, #0
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7d1b      	ldrb	r3, [r3, #20]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d119      	bne.n	800376c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	3b01      	subs	r3, #1
 8003746:	035a      	lsls	r2, r3, #13
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e00b      	b.n	800376c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	4b28      	ldr	r3, [pc, #160]	@ (8003828 <HAL_ADC_Init+0x1a8>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	430b      	orrs	r3, r1
 8003792:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379c:	d003      	beq.n	80037a6 <HAL_ADC_Init+0x126>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	051b      	lsls	r3, r3, #20
 80037ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	4b18      	ldr	r3, [pc, #96]	@ (800382c <HAL_ADC_Init+0x1ac>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10b      	bne.n	80037ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037ea:	e018      	b.n	800381e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	f023 0312 	bic.w	r3, r3, #18
 80037f4:	f043 0210 	orr.w	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800380c:	e007      	b.n	800381e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	ffe1f7fd 	.word	0xffe1f7fd
 800382c:	ff1f0efe 	.word	0xff1f0efe

08003830 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ADC_Start+0x1a>
 8003846:	2302      	movs	r3, #2
 8003848:	e098      	b.n	800397c <HAL_ADC_Start+0x14c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fad0 	bl	8003df8 <ADC_Enable>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8087 	bne.w	8003972 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a41      	ldr	r2, [pc, #260]	@ (8003984 <HAL_ADC_Start+0x154>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d105      	bne.n	800388e <HAL_ADC_Start+0x5e>
 8003882:	4b41      	ldr	r3, [pc, #260]	@ (8003988 <HAL_ADC_Start+0x158>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d026      	beq.n	80038f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038b8:	e01d      	b.n	80038f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003988 <HAL_ADC_Start+0x158>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_ADC_Start+0xaa>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <HAL_ADC_Start+0x154>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10d      	bne.n	80038f6 <HAL_ADC_Start+0xc6>
 80038da:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <HAL_ADC_Start+0x158>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	f023 0206 	bic.w	r2, r3, #6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800390e:	e002      	b.n	8003916 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0202 	mvn.w	r2, #2
 8003926:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003932:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003936:	d113      	bne.n	8003960 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800393c:	4a11      	ldr	r2, [pc, #68]	@ (8003984 <HAL_ADC_Start+0x154>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d105      	bne.n	800394e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003942:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <HAL_ADC_Start+0x158>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	e00c      	b.n	800397a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	e003      	b.n	800397a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40012800 	.word	0x40012800
 8003988:	40012400 	.word	0x40012400

0800398c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Stop+0x1a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e01a      	b.n	80039dc <HAL_ADC_Stop+0x50>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa7c 	bl	8003eac <ADC_ConversionStop_Disable>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80039fa:	f7ff fe13 	bl	8003624 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0d3      	b.n	8003bce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d131      	bne.n	8003a98 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12a      	bne.n	8003a98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003a42:	e021      	b.n	8003a88 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d01d      	beq.n	8003a88 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x7e>
 8003a52:	f7ff fde7 	bl	8003624 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d212      	bcs.n	8003a88 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	f043 0204 	orr.w	r2, r3, #4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0a2      	b.n	8003bce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0d6      	beq.n	8003a44 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003a96:	e070      	b.n	8003b7a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003a98:	4b4f      	ldr	r3, [pc, #316]	@ (8003bd8 <HAL_ADC_PollForConversion+0x1f4>)
 8003a9a:	681c      	ldr	r4, [r3, #0]
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f001 fd51 	bl	8005544 <HAL_RCCEx_GetPeriphCLKFreq>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6919      	ldr	r1, [r3, #16]
 8003aae:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <HAL_ADC_PollForConversion+0x1f8>)
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_ADC_PollForConversion+0x104>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68d9      	ldr	r1, [r3, #12]
 8003abc:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <HAL_ADC_PollForConversion+0x1fc>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <HAL_ADC_PollForConversion+0x104>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	4b46      	ldr	r3, [pc, #280]	@ (8003be4 <HAL_ADC_PollForConversion+0x200>)
 8003acc:	400b      	ands	r3, r1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d108      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x100>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68d9      	ldr	r1, [r3, #12]
 8003ad8:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_ADC_PollForConversion+0x204>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x100>
 8003ae0:	2314      	movs	r3, #20
 8003ae2:	e020      	b.n	8003b26 <HAL_ADC_PollForConversion+0x142>
 8003ae4:	2329      	movs	r3, #41	@ 0x29
 8003ae6:	e01e      	b.n	8003b26 <HAL_ADC_PollForConversion+0x142>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6919      	ldr	r1, [r3, #16]
 8003aee:	4b3d      	ldr	r3, [pc, #244]	@ (8003be4 <HAL_ADC_PollForConversion+0x200>)
 8003af0:	400b      	ands	r3, r1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_ADC_PollForConversion+0x120>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68d9      	ldr	r1, [r3, #12]
 8003afc:	4b3a      	ldr	r3, [pc, #232]	@ (8003be8 <HAL_ADC_PollForConversion+0x204>)
 8003afe:	400b      	ands	r3, r1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00d      	beq.n	8003b20 <HAL_ADC_PollForConversion+0x13c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6919      	ldr	r1, [r3, #16]
 8003b0a:	4b38      	ldr	r3, [pc, #224]	@ (8003bec <HAL_ADC_PollForConversion+0x208>)
 8003b0c:	400b      	ands	r3, r1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d108      	bne.n	8003b24 <HAL_ADC_PollForConversion+0x140>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68d9      	ldr	r1, [r3, #12]
 8003b18:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_ADC_PollForConversion+0x208>)
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_PollForConversion+0x140>
 8003b20:	2354      	movs	r3, #84	@ 0x54
 8003b22:	e000      	b.n	8003b26 <HAL_ADC_PollForConversion+0x142>
 8003b24:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003b2c:	e021      	b.n	8003b72 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d01a      	beq.n	8003b6c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_ADC_PollForConversion+0x168>
 8003b3c:	f7ff fd72 	bl	8003624 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d20f      	bcs.n	8003b6c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d90b      	bls.n	8003b6c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e030      	b.n	8003bce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d8d9      	bhi.n	8003b2e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0212 	mvn.w	r2, #18
 8003b82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003b9a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003b9e:	d115      	bne.n	8003bcc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200000cc 	.word	0x200000cc
 8003bdc:	24924924 	.word	0x24924924
 8003be0:	00924924 	.word	0x00924924
 8003be4:	12492492 	.word	0x12492492
 8003be8:	00492492 	.word	0x00492492
 8003bec:	00249249 	.word	0x00249249

08003bf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x20>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e0dc      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x1da>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d81c      	bhi.n	8003c72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	3b05      	subs	r3, #5
 8003c4a:	221f      	movs	r2, #31
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	4019      	ands	r1, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	3b05      	subs	r3, #5
 8003c64:	fa00 f203 	lsl.w	r2, r0, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c70:	e03c      	b.n	8003cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d81c      	bhi.n	8003cb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	3b23      	subs	r3, #35	@ 0x23
 8003c8c:	221f      	movs	r2, #31
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	4019      	ands	r1, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b23      	subs	r3, #35	@ 0x23
 8003ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cb2:	e01b      	b.n	8003cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3b41      	subs	r3, #65	@ 0x41
 8003cc6:	221f      	movs	r2, #31
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	4019      	ands	r1, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b41      	subs	r3, #65	@ 0x41
 8003ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d91c      	bls.n	8003d2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68d9      	ldr	r1, [r3, #12]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	3b1e      	subs	r3, #30
 8003d06:	2207      	movs	r2, #7
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	4019      	ands	r1, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6898      	ldr	r0, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b1e      	subs	r3, #30
 8003d20:	fa00 f203 	lsl.w	r2, r0, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e019      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6919      	ldr	r1, [r3, #16]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	2207      	movs	r2, #7
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	4019      	ands	r1, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6898      	ldr	r0, [r3, #8]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	fa00 f203 	lsl.w	r2, r0, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d003      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d6e:	2b11      	cmp	r3, #17
 8003d70:	d132      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_ADC_ConfigChannel+0x1e4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d125      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d126      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003d98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d11a      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003da2:	4b13      	ldr	r3, [pc, #76]	@ (8003df0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a13      	ldr	r2, [pc, #76]	@ (8003df4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	0c9a      	lsrs	r2, r3, #18
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003db8:	e002      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f9      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x1b2>
 8003dc6:	e007      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40012400 	.word	0x40012400
 8003df0:	200000cc 	.word	0x200000cc
 8003df4:	431bde83 	.word	0x431bde83

08003df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d040      	beq.n	8003e98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e26:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea4 <ADC_Enable+0xac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <ADC_Enable+0xb0>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	0c9b      	lsrs	r3, r3, #18
 8003e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e34:	e002      	b.n	8003e3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f9      	bne.n	8003e36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e42:	f7ff fbef 	bl	8003624 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e48:	e01f      	b.n	8003e8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e4a:	f7ff fbeb 	bl	8003624 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d918      	bls.n	8003e8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d011      	beq.n	8003e8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e007      	b.n	8003e9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d1d8      	bne.n	8003e4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200000cc 	.word	0x200000cc
 8003ea8:	431bde83 	.word	0x431bde83

08003eac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d12e      	bne.n	8003f24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ed6:	f7ff fba5 	bl	8003624 <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003edc:	e01b      	b.n	8003f16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ede:	f7ff fba1 	bl	8003624 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d914      	bls.n	8003f16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10d      	bne.n	8003f16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	f043 0210 	orr.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e007      	b.n	8003f26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d0dc      	beq.n	8003ede <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0ed      	b.n	800411c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fe f815 	bl	8001f7c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f62:	f7ff fb5f 	bl	8003624 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f68:	e012      	b.n	8003f90 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f6a:	f7ff fb5b 	bl	8003624 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b0a      	cmp	r3, #10
 8003f76:	d90b      	bls.n	8003f90 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2205      	movs	r2, #5
 8003f88:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0c5      	b.n	800411c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0e5      	beq.n	8003f6a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0202 	bic.w	r2, r2, #2
 8003fac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fae:	f7ff fb39 	bl	8003624 <HAL_GetTick>
 8003fb2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fb4:	e012      	b.n	8003fdc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fb6:	f7ff fb35 	bl	8003624 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b0a      	cmp	r3, #10
 8003fc2:	d90b      	bls.n	8003fdc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e09f      	b.n	800411c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e5      	bne.n	8003fb6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7e1b      	ldrb	r3, [r3, #24]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d108      	bne.n	8004004 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e007      	b.n	8004014 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004012:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7e5b      	ldrb	r3, [r3, #25]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d108      	bne.n	800402e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e007      	b.n	800403e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7e9b      	ldrb	r3, [r3, #26]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0220 	orr.w	r2, r2, #32
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e007      	b.n	8004068 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0220 	bic.w	r2, r2, #32
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7edb      	ldrb	r3, [r3, #27]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d108      	bne.n	8004082 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e007      	b.n	8004092 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0210 	orr.w	r2, r2, #16
 8004090:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7f1b      	ldrb	r3, [r3, #28]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d108      	bne.n	80040ac <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0208 	orr.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e007      	b.n	80040bc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0208 	bic.w	r2, r2, #8
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7f5b      	ldrb	r3, [r3, #29]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d108      	bne.n	80040d6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0204 	orr.w	r2, r2, #4
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e007      	b.n	80040e6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0204 	bic.w	r2, r2, #4
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	ea42 0103 	orr.w	r1, r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	1e5a      	subs	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d12e      	bne.n	8004196 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004150:	f7ff fa68 	bl	8003624 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004156:	e012      	b.n	800417e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004158:	f7ff fa64 	bl	8003624 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b0a      	cmp	r3, #10
 8004164:	d90b      	bls.n	800417e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e012      	b.n	80041a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e5      	bne.n	8004158 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e006      	b.n	80041a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	@ 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d003      	beq.n	80041d8 <HAL_CAN_AddTxMessage+0x2c>
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	f040 80ad 	bne.w	8004332 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8095 	beq.w	8004322 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	0e1b      	lsrs	r3, r3, #24
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004202:	2201      	movs	r2, #1
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	409a      	lsls	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	6809      	ldr	r1, [r1, #0]
 8004222:	431a      	orrs	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3318      	adds	r3, #24
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	440b      	add	r3, r1
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e00f      	b.n	8004250 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800423a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004244:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3318      	adds	r3, #24
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	440b      	add	r3, r1
 800424e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3318      	adds	r3, #24
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	440b      	add	r3, r1
 8004260:	3304      	adds	r3, #4
 8004262:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	7d1b      	ldrb	r3, [r3, #20]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d111      	bne.n	8004290 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3318      	adds	r3, #24
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6811      	ldr	r1, [r2, #0]
 8004280:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3318      	adds	r3, #24
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	440b      	add	r3, r1
 800428c:	3304      	adds	r3, #4
 800428e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3307      	adds	r3, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	061a      	lsls	r2, r3, #24
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3306      	adds	r3, #6
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3305      	adds	r3, #5
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	4313      	orrs	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	3204      	adds	r2, #4
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	4610      	mov	r0, r2
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	6811      	ldr	r1, [r2, #0]
 80042b8:	ea43 0200 	orr.w	r2, r3, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80042c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3303      	adds	r3, #3
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	061a      	lsls	r2, r3, #24
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3302      	adds	r3, #2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3301      	adds	r3, #1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	4313      	orrs	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	4610      	mov	r0, r2
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	6811      	ldr	r1, [r2, #0]
 80042ee:	ea43 0200 	orr.w	r2, r3, r0
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	440b      	add	r3, r1
 80042f8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80042fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3318      	adds	r3, #24
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	4413      	add	r3, r2
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	6811      	ldr	r1, [r2, #0]
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3318      	adds	r3, #24
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	440b      	add	r3, r1
 800431c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e00e      	b.n	8004340 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e006      	b.n	8004340 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3724      	adds	r7, #36	@ 0x24
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800435a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d002      	beq.n	8004368 <HAL_CAN_ActivateNotification+0x1e>
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d109      	bne.n	800437c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6959      	ldr	r1, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e006      	b.n	800438a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	@ (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	2b00      	cmp	r3, #0
 800440a:	db0a      	blt.n	8004422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	490c      	ldr	r1, [pc, #48]	@ (8004444 <__NVIC_SetPriority+0x4c>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	440b      	add	r3, r1
 800441c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004420:	e00a      	b.n	8004438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4908      	ldr	r1, [pc, #32]	@ (8004448 <__NVIC_SetPriority+0x50>)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	3b04      	subs	r3, #4
 8004430:	0112      	lsls	r2, r2, #4
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	440b      	add	r3, r1
 8004436:	761a      	strb	r2, [r3, #24]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	@ 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f1c3 0307 	rsb	r3, r3, #7
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf28      	it	cs
 800446a:	2304      	movcs	r3, #4
 800446c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3304      	adds	r3, #4
 8004472:	2b06      	cmp	r3, #6
 8004474:	d902      	bls.n	800447c <NVIC_EncodePriority+0x30>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3b03      	subs	r3, #3
 800447a:	e000      	b.n	800447e <NVIC_EncodePriority+0x32>
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	401a      	ands	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004494:	f04f 31ff 	mov.w	r1, #4294967295
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	43d9      	mvns	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	4313      	orrs	r3, r2
         );
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3724      	adds	r7, #36	@ 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044c0:	d301      	bcc.n	80044c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c2:	2301      	movs	r3, #1
 80044c4:	e00f      	b.n	80044e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c6:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <SysTick_Config+0x40>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ce:	210f      	movs	r1, #15
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	f7ff ff90 	bl	80043f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <SysTick_Config+0x40>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044de:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <SysTick_Config+0x40>)
 80044e0:	2207      	movs	r2, #7
 80044e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	e000e010 	.word	0xe000e010

080044f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff49 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	4603      	mov	r3, r0
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800451c:	f7ff ff5e 	bl	80043dc <__NVIC_GetPriorityGrouping>
 8004520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f7ff ff90 	bl	800444c <NVIC_EncodePriority>
 800452c:	4602      	mov	r2, r0
 800452e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff5f 	bl	80043f8 <__NVIC_SetPriority>
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ffb0 	bl	80044b0 <SysTick_Config>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b08b      	sub	sp, #44	@ 0x2c
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456e:	e169      	b.n	8004844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004570:	2201      	movs	r2, #1
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	429a      	cmp	r2, r3
 800458a:	f040 8158 	bne.w	800483e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4a9a      	ldr	r2, [pc, #616]	@ (80047fc <HAL_GPIO_Init+0x2a0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d05e      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 8004598:	4a98      	ldr	r2, [pc, #608]	@ (80047fc <HAL_GPIO_Init+0x2a0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d875      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 800459e:	4a98      	ldr	r2, [pc, #608]	@ (8004800 <HAL_GPIO_Init+0x2a4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d058      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045a4:	4a96      	ldr	r2, [pc, #600]	@ (8004800 <HAL_GPIO_Init+0x2a4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d86f      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045aa:	4a96      	ldr	r2, [pc, #600]	@ (8004804 <HAL_GPIO_Init+0x2a8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d052      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045b0:	4a94      	ldr	r2, [pc, #592]	@ (8004804 <HAL_GPIO_Init+0x2a8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d869      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045b6:	4a94      	ldr	r2, [pc, #592]	@ (8004808 <HAL_GPIO_Init+0x2ac>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d04c      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045bc:	4a92      	ldr	r2, [pc, #584]	@ (8004808 <HAL_GPIO_Init+0x2ac>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d863      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045c2:	4a92      	ldr	r2, [pc, #584]	@ (800480c <HAL_GPIO_Init+0x2b0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d046      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045c8:	4a90      	ldr	r2, [pc, #576]	@ (800480c <HAL_GPIO_Init+0x2b0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d85d      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045ce:	2b12      	cmp	r3, #18
 80045d0:	d82a      	bhi.n	8004628 <HAL_GPIO_Init+0xcc>
 80045d2:	2b12      	cmp	r3, #18
 80045d4:	d859      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045d6:	a201      	add	r2, pc, #4	@ (adr r2, 80045dc <HAL_GPIO_Init+0x80>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004657 	.word	0x08004657
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004643 	.word	0x08004643
 80045e8:	08004685 	.word	0x08004685
 80045ec:	0800468b 	.word	0x0800468b
 80045f0:	0800468b 	.word	0x0800468b
 80045f4:	0800468b 	.word	0x0800468b
 80045f8:	0800468b 	.word	0x0800468b
 80045fc:	0800468b 	.word	0x0800468b
 8004600:	0800468b 	.word	0x0800468b
 8004604:	0800468b 	.word	0x0800468b
 8004608:	0800468b 	.word	0x0800468b
 800460c:	0800468b 	.word	0x0800468b
 8004610:	0800468b 	.word	0x0800468b
 8004614:	0800468b 	.word	0x0800468b
 8004618:	0800468b 	.word	0x0800468b
 800461c:	0800468b 	.word	0x0800468b
 8004620:	08004639 	.word	0x08004639
 8004624:	0800464d 	.word	0x0800464d
 8004628:	4a79      	ldr	r2, [pc, #484]	@ (8004810 <HAL_GPIO_Init+0x2b4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800462e:	e02c      	b.n	800468a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	623b      	str	r3, [r7, #32]
          break;
 8004636:	e029      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	3304      	adds	r3, #4
 800463e:	623b      	str	r3, [r7, #32]
          break;
 8004640:	e024      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	3308      	adds	r3, #8
 8004648:	623b      	str	r3, [r7, #32]
          break;
 800464a:	e01f      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	330c      	adds	r3, #12
 8004652:	623b      	str	r3, [r7, #32]
          break;
 8004654:	e01a      	b.n	800468c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800465e:	2304      	movs	r3, #4
 8004660:	623b      	str	r3, [r7, #32]
          break;
 8004662:	e013      	b.n	800468c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800466c:	2308      	movs	r3, #8
 800466e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	611a      	str	r2, [r3, #16]
          break;
 8004676:	e009      	b.n	800468c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004678:	2308      	movs	r3, #8
 800467a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	615a      	str	r2, [r3, #20]
          break;
 8004682:	e003      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
          break;
 8004688:	e000      	b.n	800468c <HAL_GPIO_Init+0x130>
          break;
 800468a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2bff      	cmp	r3, #255	@ 0xff
 8004690:	d801      	bhi.n	8004696 <HAL_GPIO_Init+0x13a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	e001      	b.n	800469a <HAL_GPIO_Init+0x13e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2bff      	cmp	r3, #255	@ 0xff
 80046a0:	d802      	bhi.n	80046a8 <HAL_GPIO_Init+0x14c>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	e002      	b.n	80046ae <HAL_GPIO_Init+0x152>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	3b08      	subs	r3, #8
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	210f      	movs	r1, #15
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	401a      	ands	r2, r3
 80046c0:	6a39      	ldr	r1, [r7, #32]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80b1 	beq.w	800483e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004814 <HAL_GPIO_Init+0x2b8>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004814 <HAL_GPIO_Init+0x2b8>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6193      	str	r3, [r2, #24]
 80046e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004814 <HAL_GPIO_Init+0x2b8>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046f4:	4a48      	ldr	r2, [pc, #288]	@ (8004818 <HAL_GPIO_Init+0x2bc>)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	220f      	movs	r2, #15
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a40      	ldr	r2, [pc, #256]	@ (800481c <HAL_GPIO_Init+0x2c0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <HAL_GPIO_Init+0x1ec>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3f      	ldr	r2, [pc, #252]	@ (8004820 <HAL_GPIO_Init+0x2c4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00d      	beq.n	8004744 <HAL_GPIO_Init+0x1e8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3e      	ldr	r2, [pc, #248]	@ (8004824 <HAL_GPIO_Init+0x2c8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <HAL_GPIO_Init+0x1e4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3d      	ldr	r2, [pc, #244]	@ (8004828 <HAL_GPIO_Init+0x2cc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d101      	bne.n	800473c <HAL_GPIO_Init+0x1e0>
 8004738:	2303      	movs	r3, #3
 800473a:	e006      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 800473c:	2304      	movs	r3, #4
 800473e:	e004      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 8004740:	2302      	movs	r3, #2
 8004742:	e002      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 8004748:	2300      	movs	r3, #0
 800474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474c:	f002 0203 	and.w	r2, r2, #3
 8004750:	0092      	lsls	r2, r2, #2
 8004752:	4093      	lsls	r3, r2
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800475a:	492f      	ldr	r1, [pc, #188]	@ (8004818 <HAL_GPIO_Init+0x2bc>)
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	3302      	adds	r3, #2
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004774:	4b2d      	ldr	r3, [pc, #180]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	492c      	ldr	r1, [pc, #176]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004782:	4b2a      	ldr	r3, [pc, #168]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	43db      	mvns	r3, r3
 800478a:	4928      	ldr	r1, [pc, #160]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 800478c:	4013      	ands	r3, r2
 800478e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800479c:	4b23      	ldr	r3, [pc, #140]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4922      	ldr	r1, [pc, #136]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
 80047a8:	e006      	b.n	80047b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	491e      	ldr	r1, [pc, #120]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4918      	ldr	r1, [pc, #96]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047d2:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	43db      	mvns	r3, r3
 80047da:	4914      	ldr	r1, [pc, #80]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047dc:	4013      	ands	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d021      	beq.n	8004830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	490e      	ldr	r1, [pc, #56]	@ (800482c <HAL_GPIO_Init+0x2d0>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
 80047f8:	e021      	b.n	800483e <HAL_GPIO_Init+0x2e2>
 80047fa:	bf00      	nop
 80047fc:	10320000 	.word	0x10320000
 8004800:	10310000 	.word	0x10310000
 8004804:	10220000 	.word	0x10220000
 8004808:	10210000 	.word	0x10210000
 800480c:	10120000 	.word	0x10120000
 8004810:	10110000 	.word	0x10110000
 8004814:	40021000 	.word	0x40021000
 8004818:	40010000 	.word	0x40010000
 800481c:	40010800 	.word	0x40010800
 8004820:	40010c00 	.word	0x40010c00
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004830:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <HAL_GPIO_Init+0x304>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	43db      	mvns	r3, r3
 8004838:	4909      	ldr	r1, [pc, #36]	@ (8004860 <HAL_GPIO_Init+0x304>)
 800483a:	4013      	ands	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	3301      	adds	r3, #1
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	f47f ae8e 	bne.w	8004570 <HAL_GPIO_Init+0x14>
  }
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	372c      	adds	r7, #44	@ 0x2c
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40010400 	.word	0x40010400

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004880:	e003      	b.n	800488a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	041a      	lsls	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4013      	ands	r3, r2
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43d9      	mvns	r1, r3
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	400b      	ands	r3, r1
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	611a      	str	r2, [r3, #16]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e304      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8087 	beq.w	80049f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e8:	4b92      	ldr	r3, [pc, #584]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d00c      	beq.n	800490e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d112      	bne.n	8004926 <HAL_RCC_OscConfig+0x5e>
 8004900:	4b8c      	ldr	r3, [pc, #560]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d10b      	bne.n	8004926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490e:	4b89      	ldr	r3, [pc, #548]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d06c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x12c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d168      	bne.n	80049f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e2de      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x76>
 8004930:	4b80      	ldr	r3, [pc, #512]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7f      	ldr	r2, [pc, #508]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e02e      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b7b      	ldr	r3, [pc, #492]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a7a      	ldr	r2, [pc, #488]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b78      	ldr	r3, [pc, #480]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a77      	ldr	r2, [pc, #476]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004958:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e01d      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0xbc>
 800496a:	4b72      	ldr	r3, [pc, #456]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a71      	ldr	r2, [pc, #452]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b6f      	ldr	r3, [pc, #444]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 8004984:	4b6b      	ldr	r3, [pc, #428]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6a      	ldr	r2, [pc, #424]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800498a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b68      	ldr	r3, [pc, #416]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a67      	ldr	r2, [pc, #412]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fe fe3e 	bl	8003624 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fe fe3a 	bl	8003624 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	@ 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e292      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	4b5d      	ldr	r3, [pc, #372]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0xe4>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fe fe2a 	bl	8003624 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fe fe26 	bl	8003624 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	@ 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e27e      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x10c>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d063      	beq.n	8004aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a02:	4b4c      	ldr	r3, [pc, #304]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a0e:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d11c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x18c>
 8004a1a:	4b46      	ldr	r3, [pc, #280]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	4b43      	ldr	r3, [pc, #268]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_RCC_OscConfig+0x176>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e252      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4939      	ldr	r1, [pc, #228]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	e03a      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a5c:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe fddf 	bl	8003624 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fe fddb 	bl	8003624 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e233      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4b2a      	ldr	r3, [pc, #168]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4927      	ldr	r1, [pc, #156]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]
 8004a9c:	e015      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9e:	4b26      	ldr	r3, [pc, #152]	@ (8004b38 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fdbe 	bl	8003624 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aac:	f7fe fdba 	bl	8003624 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e212      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03a      	beq.n	8004b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ade:	4b17      	ldr	r3, [pc, #92]	@ (8004b3c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae4:	f7fe fd9e 	bl	8003624 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aec:	f7fe fd9a 	bl	8003624 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1f2      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f000 fbca 	bl	80052a4 <RCC_Delay>
 8004b10:	e01c      	b.n	8004b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b12:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <HAL_RCC_OscConfig+0x274>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b18:	f7fe fd84 	bl	8003624 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	e00f      	b.n	8004b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b20:	f7fe fd80 	bl	8003624 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d908      	bls.n	8004b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e1d8      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	42420000 	.word	0x42420000
 8004b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	4b9b      	ldr	r3, [pc, #620]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e9      	bne.n	8004b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a6 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5e:	4b94      	ldr	r3, [pc, #592]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10d      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	4b91      	ldr	r3, [pc, #580]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4a90      	ldr	r2, [pc, #576]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b74:	61d3      	str	r3, [r2, #28]
 8004b76:	4b8e      	ldr	r3, [pc, #568]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b8b      	ldr	r3, [pc, #556]	@ (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d118      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a87      	ldr	r2, [pc, #540]	@ (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fe fd41 	bl	8003624 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba6:	f7fe fd3d 	bl	8003624 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	@ 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e195      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x312>
 8004bcc:	4b78      	ldr	r3, [pc, #480]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a77      	ldr	r2, [pc, #476]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6213      	str	r3, [r2, #32]
 8004bd8:	e02d      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x334>
 8004be2:	4b73      	ldr	r3, [pc, #460]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a72      	ldr	r2, [pc, #456]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6213      	str	r3, [r2, #32]
 8004bee:	4b70      	ldr	r3, [pc, #448]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4a6f      	ldr	r2, [pc, #444]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004bf4:	f023 0304 	bic.w	r3, r3, #4
 8004bf8:	6213      	str	r3, [r2, #32]
 8004bfa:	e01c      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCC_OscConfig+0x356>
 8004c04:	4b6a      	ldr	r3, [pc, #424]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4a69      	ldr	r2, [pc, #420]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6213      	str	r3, [r2, #32]
 8004c10:	4b67      	ldr	r3, [pc, #412]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4a66      	ldr	r2, [pc, #408]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6213      	str	r3, [r2, #32]
 8004c1c:	e00b      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004c1e:	4b64      	ldr	r3, [pc, #400]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4a63      	ldr	r2, [pc, #396]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6213      	str	r3, [r2, #32]
 8004c2a:	4b61      	ldr	r3, [pc, #388]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a60      	ldr	r2, [pc, #384]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3e:	f7fe fcf1 	bl	8003624 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe fced 	bl	8003624 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e143      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5c:	4b54      	ldr	r3, [pc, #336]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ee      	beq.n	8004c46 <HAL_RCC_OscConfig+0x37e>
 8004c68:	e014      	b.n	8004c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fe fcdb 	bl	8003624 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fe fcd7 	bl	8003624 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e12d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c88:	4b49      	ldr	r3, [pc, #292]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9a:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4a44      	ldr	r2, [pc, #272]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 808c 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbc:	d10e      	bne.n	8004cdc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d108      	bne.n	8004cdc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004cca:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e103      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d14e      	bne.n	8004d82 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004ce4:	4b32      	ldr	r3, [pc, #200]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0ef      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004d04:	4b2c      	ldr	r3, [pc, #176]	@ (8004db8 <HAL_RCC_OscConfig+0x4f0>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7fe fc8b 	bl	8003624 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d12:	f7fe fc87 	bl	8003624 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b64      	cmp	r3, #100	@ 0x64
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0df      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004d24:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f0      	bne.n	8004d12 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	491c      	ldr	r1, [pc, #112]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004d42:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	4918      	ldr	r1, [pc, #96]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004d54:	4b18      	ldr	r3, [pc, #96]	@ (8004db8 <HAL_RCC_OscConfig+0x4f0>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fc63 	bl	8003624 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d62:	f7fe fc5f 	bl	8003624 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0b7      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x49a>
 8004d80:	e022      	b.n	8004dc8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004d82:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <HAL_RCC_OscConfig+0x4e8>)
 8004d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <HAL_RCC_OscConfig+0x4f0>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fe fc46 	bl	8003624 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d9c:	f7fe fc42 	bl	8003624 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	@ 0x64
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e09a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40007000 	.word	0x40007000
 8004db8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e9      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8088 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd2:	4b46      	ldr	r3, [pc, #280]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d068      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d14d      	bne.n	8004e82 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b42      	ldr	r3, [pc, #264]	@ (8004ef0 <HAL_RCC_OscConfig+0x628>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe fc1a 	bl	8003624 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fe fc16 	bl	8003624 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e06e      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e06:	4b39      	ldr	r3, [pc, #228]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1a:	d10f      	bne.n	8004e3c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004e1c:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4931      	ldr	r1, [pc, #196]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e2a:	4b30      	ldr	r3, [pc, #192]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	f023 020f 	bic.w	r2, r3, #15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	492d      	ldr	r1, [pc, #180]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	4927      	ldr	r1, [pc, #156]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e54:	4b26      	ldr	r3, [pc, #152]	@ (8004ef0 <HAL_RCC_OscConfig+0x628>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7fe fbe3 	bl	8003624 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e62:	f7fe fbdf 	bl	8003624 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e037      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e74:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x59a>
 8004e80:	e02f      	b.n	8004ee2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <HAL_RCC_OscConfig+0x628>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fe fbcc 	bl	8003624 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe fbc8 	bl	8003624 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e020      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x5c8>
 8004eae:	e018      	b.n	8004ee2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e013      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCC_OscConfig+0x624>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d106      	bne.n	8004ede <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	42420060 	.word	0x42420060

08004ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0d0      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b6a      	ldr	r3, [pc, #424]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d910      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4965      	ldr	r1, [pc, #404]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b63      	ldr	r3, [pc, #396]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0b8      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f50:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a58      	ldr	r2, [pc, #352]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f68:	4b53      	ldr	r3, [pc, #332]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b50      	ldr	r3, [pc, #320]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	494d      	ldr	r1, [pc, #308]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d040      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b47      	ldr	r3, [pc, #284]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d115      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b41      	ldr	r3, [pc, #260]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e073      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06b      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b39      	ldr	r3, [pc, #228]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4936      	ldr	r1, [pc, #216]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fe fb1e 	bl	8003624 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fe fb1a 	bl	8003624 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e053      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2d      	ldr	r3, [pc, #180]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b27      	ldr	r3, [pc, #156]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d210      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b24      	ldr	r3, [pc, #144]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 0207 	bic.w	r2, r3, #7
 800502a:	4922      	ldr	r1, [pc, #136]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e032      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4916      	ldr	r1, [pc, #88]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490e      	ldr	r1, [pc, #56]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005082:	f000 f821 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490a      	ldr	r1, [pc, #40]	@ (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	@ (80050c0 <HAL_RCC_ClockConfig+0x1cc>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <HAL_RCC_ClockConfig+0x1d0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fa7c 	bl	80035a0 <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40022000 	.word	0x40022000
 80050b8:	40021000 	.word	0x40021000
 80050bc:	08008048 	.word	0x08008048
 80050c0:	200000cc 	.word	0x200000cc
 80050c4:	200000d0 	.word	0x200000d0

080050c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050cc:	b08e      	sub	sp, #56	@ 0x38
 80050ce:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d4:	2300      	movs	r3, #0
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
 80050dc:	2300      	movs	r3, #0
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ec:	4b4e      	ldr	r3, [pc, #312]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x160>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d002      	beq.n	8005102 <HAL_RCC_GetSysClockFreq+0x3a>
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d003      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x40>
 8005100:	e089      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005102:	4b4a      	ldr	r3, [pc, #296]	@ (800522c <HAL_RCC_GetSysClockFreq+0x164>)
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005106:	e089      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	0c9b      	lsrs	r3, r3, #18
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	4b47      	ldr	r3, [pc, #284]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x168>)
 8005112:	5c9b      	ldrb	r3, [r3, r2]
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d072      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005120:	4b41      	ldr	r3, [pc, #260]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x160>)
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	4b42      	ldr	r3, [pc, #264]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x16c>)
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800512e:	4b3e      	ldr	r3, [pc, #248]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x160>)
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d053      	beq.n	80051e2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800513a:	4b3b      	ldr	r3, [pc, #236]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x160>)
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	3301      	adds	r3, #1
 8005146:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005148:	4b37      	ldr	r3, [pc, #220]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x160>)
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3302      	adds	r3, #2
 8005154:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2200      	movs	r2, #0
 800515a:	469a      	mov	sl, r3
 800515c:	4693      	mov	fp, r2
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	2200      	movs	r2, #0
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	617a      	str	r2, [r7, #20]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	fb03 f20b 	mul.w	r2, r3, fp
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	fb0a f303 	mul.w	r3, sl, r3
 8005172:	4413      	add	r3, r2
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	fbaa 0102 	umull	r0, r1, sl, r2
 800517a:	440b      	add	r3, r1
 800517c:	4619      	mov	r1, r3
 800517e:	4b2b      	ldr	r3, [pc, #172]	@ (800522c <HAL_RCC_GetSysClockFreq+0x164>)
 8005180:	fb03 f201 	mul.w	r2, r3, r1
 8005184:	2300      	movs	r3, #0
 8005186:	fb00 f303 	mul.w	r3, r0, r3
 800518a:	4413      	add	r3, r2
 800518c:	4a27      	ldr	r2, [pc, #156]	@ (800522c <HAL_RCC_GetSysClockFreq+0x164>)
 800518e:	fba0 4502 	umull	r4, r5, r0, r2
 8005192:	442b      	add	r3, r5
 8005194:	461d      	mov	r5, r3
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	2200      	movs	r2, #0
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	60fa      	str	r2, [r7, #12]
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	2200      	movs	r2, #0
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b0:	4652      	mov	r2, sl
 80051b2:	fb02 f203 	mul.w	r2, r2, r3
 80051b6:	465b      	mov	r3, fp
 80051b8:	4684      	mov	ip, r0
 80051ba:	fb0c f303 	mul.w	r3, ip, r3
 80051be:	4413      	add	r3, r2
 80051c0:	4602      	mov	r2, r0
 80051c2:	4651      	mov	r1, sl
 80051c4:	fba2 8901 	umull	r8, r9, r2, r1
 80051c8:	444b      	add	r3, r9
 80051ca:	4699      	mov	r9, r3
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb ff62 	bl	800109c <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4613      	mov	r3, r2
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e0:	e007      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	4a11      	ldr	r2, [pc, #68]	@ (800522c <HAL_RCC_GetSysClockFreq+0x164>)
 80051e6:	fb03 f202 	mul.w	r2, r3, r2
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80051f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x168>)
 80051f4:	7b5b      	ldrb	r3, [r3, #13]
 80051f6:	461a      	mov	r2, r3
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80051fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
 8005204:	e004      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	4a0b      	ldr	r2, [pc, #44]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x170>)
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8005210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005212:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005214:	e002      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005216:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_RCC_GetSysClockFreq+0x174>)
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800521a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800521e:	4618      	mov	r0, r3
 8005220:	3738      	adds	r7, #56	@ 0x38
 8005222:	46bd      	mov	sp, r7
 8005224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005228:	40021000 	.word	0x40021000
 800522c:	017d7840 	.word	0x017d7840
 8005230:	08008060 	.word	0x08008060
 8005234:	08008070 	.word	0x08008070
 8005238:	003d0900 	.word	0x003d0900
 800523c:	007a1200 	.word	0x007a1200

08005240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005244:	4b02      	ldr	r3, [pc, #8]	@ (8005250 <HAL_RCC_GetHCLKFreq+0x10>)
 8005246:	681b      	ldr	r3, [r3, #0]
}
 8005248:	4618      	mov	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	200000cc 	.word	0x200000cc

08005254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005258:	f7ff fff2 	bl	8005240 <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	@ (8005278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	08008058 	.word	0x08008058

0800527c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005280:	f7ff ffde 	bl	8005240 <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b05      	ldr	r3, [pc, #20]	@ (800529c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0adb      	lsrs	r3, r3, #11
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4903      	ldr	r1, [pc, #12]	@ (80052a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	08008058 	.word	0x08008058

080052a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <RCC_Delay+0x34>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <RCC_Delay+0x38>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0a5b      	lsrs	r3, r3, #9
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052c0:	bf00      	nop
  }
  while (Delay --);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1e5a      	subs	r2, r3, #1
 80052c6:	60fa      	str	r2, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f9      	bne.n	80052c0 <RCC_Delay+0x1c>
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	200000cc 	.word	0x200000cc
 80052dc:	10624dd3 	.word	0x10624dd3

080052e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d07d      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005300:	2300      	movs	r3, #0
 8005302:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005304:	4b8b      	ldr	r3, [pc, #556]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	4b88      	ldr	r3, [pc, #544]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4a87      	ldr	r2, [pc, #540]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531a:	61d3      	str	r3, [r2, #28]
 800531c:	4b85      	ldr	r3, [pc, #532]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005328:	2301      	movs	r3, #1
 800532a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	4b82      	ldr	r3, [pc, #520]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d118      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005338:	4b7f      	ldr	r3, [pc, #508]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a7e      	ldr	r2, [pc, #504]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005344:	f7fe f96e 	bl	8003624 <HAL_GetTick>
 8005348:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	e008      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534c:	f7fe f96a 	bl	8003624 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	@ 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e0e5      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535e:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800536a:	4b72      	ldr	r3, [pc, #456]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005372:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d02e      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	429a      	cmp	r2, r3
 8005386:	d027      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005388:	4b6a      	ldr	r3, [pc, #424]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005390:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005392:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005394:	2201      	movs	r2, #1
 8005396:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005398:	4b68      	ldr	r3, [pc, #416]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800539e:	4a65      	ldr	r2, [pc, #404]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ae:	f7fe f939 	bl	8003624 <HAL_GetTick>
 80053b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	e00a      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fe f935 	bl	8003624 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e0ae      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	4b59      	ldr	r3, [pc, #356]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ee      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d8:	4b56      	ldr	r3, [pc, #344]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	4953      	ldr	r1, [pc, #332]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053ea:	7efb      	ldrb	r3, [r7, #27]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d105      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f0:	4b50      	ldr	r3, [pc, #320]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005408:	4b4a      	ldr	r3, [pc, #296]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4947      	ldr	r1, [pc, #284]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005426:	4b43      	ldr	r3, [pc, #268]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	4940      	ldr	r1, [pc, #256]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005434:	4313      	orrs	r3, r2
 8005436:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005444:	4b3b      	ldr	r3, [pc, #236]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	4938      	ldr	r1, [pc, #224]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005452:	4313      	orrs	r3, r2
 8005454:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005456:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005462:	4b34      	ldr	r3, [pc, #208]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d148      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005478:	4b2e      	ldr	r3, [pc, #184]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d138      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005484:	4b2b      	ldr	r3, [pc, #172]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005490:	4b28      	ldr	r3, [pc, #160]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e042      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80054a4:	4b23      	ldr	r3, [pc, #140]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	4920      	ldr	r1, [pc, #128]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80054b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	491c      	ldr	r1, [pc, #112]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80054c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ce:	f7fe f8a9 	bl	8003624 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d6:	f7fe f8a5 	bl	8003624 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b64      	cmp	r3, #100	@ 0x64
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e020      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e8:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80054f4:	e009      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80054f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	429a      	cmp	r2, r3
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e00f      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005516:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4904      	ldr	r1, [pc, #16]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	40007000 	.word	0x40007000
 800553c:	42420440 	.word	0x42420440
 8005540:	42420070 	.word	0x42420070

08005544 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	@ 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	2300      	movs	r3, #0
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	2300      	movs	r3, #0
 800556a:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3b01      	subs	r3, #1
 8005570:	2b0f      	cmp	r3, #15
 8005572:	f200 811d 	bhi.w	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005576:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	08005731 	.word	0x08005731
 8005580:	08005795 	.word	0x08005795
 8005584:	080057b1 	.word	0x080057b1
 8005588:	0800568f 	.word	0x0800568f
 800558c:	080057b1 	.word	0x080057b1
 8005590:	080057b1 	.word	0x080057b1
 8005594:	080057b1 	.word	0x080057b1
 8005598:	080056e1 	.word	0x080056e1
 800559c:	080057b1 	.word	0x080057b1
 80055a0:	080057b1 	.word	0x080057b1
 80055a4:	080057b1 	.word	0x080057b1
 80055a8:	080057b1 	.word	0x080057b1
 80055ac:	080057b1 	.word	0x080057b1
 80055b0:	080057b1 	.word	0x080057b1
 80055b4:	080057b1 	.word	0x080057b1
 80055b8:	080055bd 	.word	0x080055bd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80055bc:	4b83      	ldr	r3, [pc, #524]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80055c2:	4b82      	ldr	r3, [pc, #520]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80f2 	beq.w	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	0c9b      	lsrs	r3, r3, #18
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	4a7d      	ldr	r2, [pc, #500]	@ (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80055da:	5cd3      	ldrb	r3, [r2, r3]
 80055dc:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d03b      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80055e8:	4b78      	ldr	r3, [pc, #480]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	4a78      	ldr	r2, [pc, #480]	@ (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80055f2:	5cd3      	ldrb	r3, [r2, r3]
 80055f4:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80055f6:	4b75      	ldr	r3, [pc, #468]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01c      	beq.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005602:	4b72      	ldr	r3, [pc, #456]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005610:	4b6e      	ldr	r3, [pc, #440]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	0a1b      	lsrs	r3, r3, #8
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3302      	adds	r3, #2
 800561c:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 800561e:	4a6e      	ldr	r2, [pc, #440]	@ (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	fb03 f202 	mul.w	r2, r3, r2
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
 800563a:	e007      	b.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800563c:	4a66      	ldr	r2, [pc, #408]	@ (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fbb2 f2f3 	udiv	r2, r2, r3
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800564c:	4b60      	ldr	r3, [pc, #384]	@ (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800564e:	7b5b      	ldrb	r3, [r3, #13]
 8005650:	461a      	mov	r2, r3
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
 800565e:	e004      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	4a5e      	ldr	r2, [pc, #376]	@ (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800566a:	4b58      	ldr	r3, [pc, #352]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800567c:	e09a      	b.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4a57      	ldr	r2, [pc, #348]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	085b      	lsrs	r3, r3, #1
 800568a:	623b      	str	r3, [r7, #32]
      break;
 800568c:	e092      	b.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800568e:	4b4f      	ldr	r3, [pc, #316]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800569a:	f7ff fd15 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 800569e:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80056a0:	e08a      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80056a2:	4b4a      	ldr	r3, [pc, #296]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 8084 	beq.w	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80056b0:	4b46      	ldr	r3, [pc, #280]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80056be:	4b43      	ldr	r3, [pc, #268]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	0b1b      	lsrs	r3, r3, #12
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	3302      	adds	r3, #2
 80056ca:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80056cc:	4a42      	ldr	r2, [pc, #264]	@ (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	623b      	str	r3, [r7, #32]
      break;
 80056de:	e06b      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 80056e0:	4b3a      	ldr	r3, [pc, #232]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80056ec:	f7ff fcec 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 80056f0:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80056f2:	e063      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80056f4:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05d      	beq.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005700:	4b32      	ldr	r3, [pc, #200]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800570e:	4b2f      	ldr	r3, [pc, #188]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	0b1b      	lsrs	r3, r3, #12
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	3302      	adds	r3, #2
 800571a:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 800571c:	4a2e      	ldr	r2, [pc, #184]	@ (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	623b      	str	r3, [r7, #32]
      break;
 800572e:	e045      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005730:	4b26      	ldr	r3, [pc, #152]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800573c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005740:	d108      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 800574c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	e01e      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575e:	d109      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005760:	4b1a      	ldr	r3, [pc, #104]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 800576c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	e00e      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577e:	d11f      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005780:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d019      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 800578c:	4b15      	ldr	r3, [pc, #84]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800578e:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005790:	e016      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005792:	e015      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005794:	f7ff fd72 	bl	800527c <HAL_RCC_GetPCLK2Freq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	0b9b      	lsrs	r3, r3, #14
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	3301      	adds	r3, #1
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	623b      	str	r3, [r7, #32]
      break;
 80057ae:	e008      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 80057b0:	bf00      	nop
 80057b2:	e006      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80057b4:	bf00      	nop
 80057b6:	e004      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80057c0:	bf00      	nop
    }
  }
  return (frequency);
 80057c2:	6a3b      	ldr	r3, [r7, #32]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3728      	adds	r7, #40	@ 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000
 80057d0:	08008080 	.word	0x08008080
 80057d4:	08008090 	.word	0x08008090
 80057d8:	017d7840 	.word	0x017d7840
 80057dc:	003d0900 	.word	0x003d0900
 80057e0:	aaaaaaab 	.word	0xaaaaaaab
 80057e4:	0002faf0 	.word	0x0002faf0

080057e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e076      	b.n	80058e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d108      	bne.n	8005814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800580a:	d009      	beq.n	8005820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	61da      	str	r2, [r3, #28]
 8005812:	e005      	b.n	8005820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fd fc60 	bl	8003100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005856:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a4:	ea42 0103 	orr.w	r1, r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	0c1a      	lsrs	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f002 0204 	and.w	r2, r2, #4
 80058c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005900:	f7fd fe90 	bl	8003624 <HAL_GetTick>
 8005904:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	e12a      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Transmit+0x36>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e122      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_SPI_Transmit+0x48>
 8005934:	2302      	movs	r3, #2
 8005936:	e11b      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2203      	movs	r2, #3
 8005944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005986:	d10f      	bne.n	80059a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005996:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b2:	2b40      	cmp	r3, #64	@ 0x40
 80059b4:	d007      	beq.n	80059c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ce:	d152      	bne.n	8005a76 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_SPI_Transmit+0xee>
 80059d8:	8b7b      	ldrh	r3, [r7, #26]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d145      	bne.n	8005a6a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a02:	e032      	b.n	8005a6a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d112      	bne.n	8005a38 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a36:	e018      	b.n	8005a6a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a38:	f7fd fdf4 	bl	8003624 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d803      	bhi.n	8005a50 <HAL_SPI_Transmit+0x160>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d102      	bne.n	8005a56 <HAL_SPI_Transmit+0x166>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e082      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1c7      	bne.n	8005a04 <HAL_SPI_Transmit+0x114>
 8005a74:	e053      	b.n	8005b1e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_SPI_Transmit+0x194>
 8005a7e:	8b7b      	ldrh	r3, [r7, #26]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d147      	bne.n	8005b14 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	7812      	ldrb	r2, [r2, #0]
 8005a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aaa:	e033      	b.n	8005b14 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d113      	bne.n	8005ae2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	7812      	ldrb	r2, [r2, #0]
 8005ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ae0:	e018      	b.n	8005b14 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae2:	f7fd fd9f 	bl	8003624 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d803      	bhi.n	8005afa <HAL_SPI_Transmit+0x20a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Transmit+0x210>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e02d      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1c6      	bne.n	8005aac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fbc4 	bl	80062b0 <SPI_EndRxTxTransaction>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
 8005b96:	e104      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba0:	d112      	bne.n	8005bc8 <HAL_SPI_Receive+0x50>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2204      	movs	r2, #4
 8005bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f8f3 	bl	8005daa <HAL_SPI_TransmitReceive>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	e0ec      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc8:	f7fd fd2c 	bl	8003624 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_Receive+0x62>
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e0e1      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_SPI_Receive+0x74>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0da      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3a:	d10f      	bne.n	8005c5c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b40      	cmp	r3, #64	@ 0x40
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d170      	bne.n	8005d64 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c82:	e035      	b.n	8005cf0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d115      	bne.n	8005cbe <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f103 020c 	add.w	r2, r3, #12
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cbc:	e018      	b.n	8005cf0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbe:	f7fd fcb1 	bl	8003624 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d803      	bhi.n	8005cd6 <HAL_SPI_Receive+0x15e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d102      	bne.n	8005cdc <HAL_SPI_Receive+0x164>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e058      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1c4      	bne.n	8005c84 <HAL_SPI_Receive+0x10c>
 8005cfa:	e038      	b.n	8005d6e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d113      	bne.n	8005d32 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d14:	b292      	uxth	r2, r2
 8005d16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	1c9a      	adds	r2, r3, #2
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d30:	e018      	b.n	8005d64 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d32:	f7fd fc77 	bl	8003624 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d803      	bhi.n	8005d4a <HAL_SPI_Receive+0x1d2>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_Receive+0x1d8>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e01e      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1c6      	bne.n	8005cfc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa4a 	bl	800620c <SPI_EndRxTransaction>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b08a      	sub	sp, #40	@ 0x28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005db8:	2301      	movs	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dbc:	f7fd fc32 	bl	8003624 <HAL_GetTick>
 8005dc0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dc8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d00c      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x4a>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x46>
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d001      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	e17f      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x5c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x5c>
 8005e00:	887b      	ldrh	r3, [r7, #2]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e174      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x6e>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e16d      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d003      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2205      	movs	r2, #5
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	887a      	ldrh	r2, [r7, #2]
 8005e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	887a      	ldrh	r2, [r7, #2]
 8005e4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e74:	2b40      	cmp	r3, #64	@ 0x40
 8005e76:	d007      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e90:	d17e      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0xf6>
 8005e9a:	8afb      	ldrh	r3, [r7, #22]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d16c      	bne.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec4:	e059      	b.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d11b      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x162>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <HAL_SPI_TransmitReceive+0x162>
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d113      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	1c9a      	adds	r2, r3, #2
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d119      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x1a4>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d014      	beq.n	8005f4e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	1c9a      	adds	r2, r3, #2
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f4e:	f7fd fb69 	bl	8003624 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d80d      	bhi.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d009      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0bc      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1a0      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x11c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d19b      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x11c>
 8005f8e:	e082      	b.n	8006096 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x1f4>
 8005f98:	8afb      	ldrh	r3, [r7, #22]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d171      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc4:	e05d      	b.n	8006082 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d11c      	bne.n	800600e <HAL_SPI_TransmitReceive+0x264>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d017      	beq.n	800600e <HAL_SPI_TransmitReceive+0x264>
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d114      	bne.n	800600e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	d119      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x2a6>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d014      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800604c:	2301      	movs	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006050:	f7fd fae8 	bl	8003624 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605c:	429a      	cmp	r2, r3
 800605e:	d803      	bhi.n	8006068 <HAL_SPI_TransmitReceive+0x2be>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d102      	bne.n	800606e <HAL_SPI_TransmitReceive+0x2c4>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e038      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d19c      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x21c>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d197      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f908 	bl	80062b0 <SPI_EndRxTxTransaction>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e01d      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80060f2:	2300      	movs	r3, #0
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	@ 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800610c:	f7fd fa8a 	bl	8003624 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	4413      	add	r3, r2
 800611a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800611c:	f7fd fa82 	bl	8003624 <HAL_GetTick>
 8006120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006122:	4b39      	ldr	r3, [pc, #228]	@ (8006208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	015b      	lsls	r3, r3, #5
 8006128:	0d1b      	lsrs	r3, r3, #20
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	fb02 f303 	mul.w	r3, r2, r3
 8006130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006132:	e054      	b.n	80061de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d050      	beq.n	80061de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800613c:	f7fd fa72 	bl	8003624 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	429a      	cmp	r2, r3
 800614a:	d902      	bls.n	8006152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d13d      	bne.n	80061ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800616a:	d111      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006174:	d004      	beq.n	8006180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617e:	d107      	bne.n	8006190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800618e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006198:	d10f      	bne.n	80061ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e017      	b.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3b01      	subs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	bf0c      	ite	eq
 80061ee:	2301      	moveq	r3, #1
 80061f0:	2300      	movne	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d19b      	bne.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200000cc 	.word	0x200000cc

0800620c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006220:	d111      	bne.n	8006246 <SPI_EndRxTransaction+0x3a>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622a:	d004      	beq.n	8006236 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006234:	d107      	bne.n	8006246 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006244:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800624e:	d117      	bne.n	8006280 <SPI_EndRxTransaction+0x74>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006258:	d112      	bne.n	8006280 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2200      	movs	r2, #0
 8006262:	2101      	movs	r1, #1
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff ff49 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01a      	beq.n	80062a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e013      	b.n	80062a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	2180      	movs	r1, #128	@ 0x80
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff ff36 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e000      	b.n	80062a8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2201      	movs	r2, #1
 80062c4:	2102      	movs	r1, #2
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff18 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e013      	b.n	800630a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	@ 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff ff05 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e000      	b.n	800630a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e041      	b.n	80063a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7fd f861 	bl	8003400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2202      	movs	r2, #2
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f000 f82d 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a33      	ldr	r2, [pc, #204]	@ (8006490 <TIM_Base_SetConfig+0xe0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00f      	beq.n	80063e8 <TIM_Base_SetConfig+0x38>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ce:	d00b      	beq.n	80063e8 <TIM_Base_SetConfig+0x38>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a30      	ldr	r2, [pc, #192]	@ (8006494 <TIM_Base_SetConfig+0xe4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_Base_SetConfig+0x38>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2f      	ldr	r2, [pc, #188]	@ (8006498 <TIM_Base_SetConfig+0xe8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_Base_SetConfig+0x38>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a2e      	ldr	r2, [pc, #184]	@ (800649c <TIM_Base_SetConfig+0xec>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d108      	bne.n	80063fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a24      	ldr	r2, [pc, #144]	@ (8006490 <TIM_Base_SetConfig+0xe0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x72>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x72>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a21      	ldr	r2, [pc, #132]	@ (8006494 <TIM_Base_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x72>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a20      	ldr	r2, [pc, #128]	@ (8006498 <TIM_Base_SetConfig+0xe8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x72>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <TIM_Base_SetConfig+0xec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a0d      	ldr	r2, [pc, #52]	@ (8006490 <TIM_Base_SetConfig+0xe0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	611a      	str	r2, [r3, #16]
  }
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40000400 	.word	0x40000400
 8006498:	40000800 	.word	0x40000800
 800649c:	40000c00 	.word	0x40000c00

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e04b      	b.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a19      	ldr	r2, [pc, #100]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006504:	d00e      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d009      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a13      	ldr	r2, [pc, #76]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d10c      	bne.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800652a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	40012c00 	.word	0x40012c00
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	40000c00 	.word	0x40000c00

0800656c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e042      	b.n	8006604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fc ff7c 	bl	8003490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2224      	movs	r2, #36	@ 0x24
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f971 	bl	8006898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	@ 0x28
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b20      	cmp	r3, #32
 800662a:	d175      	bne.n	8006718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_UART_Transmit+0x2c>
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e06e      	b.n	800671a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2221      	movs	r2, #33	@ 0x21
 8006646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800664a:	f7fc ffeb 	bl	8003624 <HAL_GetTick>
 800664e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006664:	d108      	bne.n	8006678 <HAL_UART_Transmit+0x6c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e003      	b.n	8006680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006680:	e02e      	b.n	80066e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2200      	movs	r2, #0
 800668a:	2180      	movs	r1, #128	@ 0x80
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f848 	bl	8006722 <UART_WaitOnFlagUntilTimeout>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e03a      	b.n	800671a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	3302      	adds	r3, #2
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e007      	b.n	80066d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1cb      	bne.n	8006682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2200      	movs	r2, #0
 80066f2:	2140      	movs	r1, #64	@ 0x40
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f814 	bl	8006722 <UART_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e006      	b.n	800671a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e000      	b.n	800671a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	603b      	str	r3, [r7, #0]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006732:	e03b      	b.n	80067ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d037      	beq.n	80067ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673c:	f7fc ff72 	bl	8003624 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	429a      	cmp	r2, r3
 800674a:	d302      	bcc.n	8006752 <UART_WaitOnFlagUntilTimeout+0x30>
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e03a      	b.n	80067cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d023      	beq.n	80067ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d020      	beq.n	80067ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d01d      	beq.n	80067ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b08      	cmp	r3, #8
 800677c:	d116      	bne.n	80067ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f81d 	bl	80067d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2208      	movs	r2, #8
 800679e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e00f      	b.n	80067cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d0b4      	beq.n	8006734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b095      	sub	sp, #84	@ 0x54
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006802:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e5      	bne.n	80067dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3314      	adds	r3, #20
 8006816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e5      	bne.n	8006810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	2b01      	cmp	r3, #1
 800684a:	d119      	bne.n	8006880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	60bb      	str	r3, [r7, #8]
   return(result);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f023 0310 	bic.w	r3, r3, #16
 8006862:	647b      	str	r3, [r7, #68]	@ 0x44
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686c:	61ba      	str	r2, [r7, #24]
 800686e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6979      	ldr	r1, [r7, #20]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	613b      	str	r3, [r7, #16]
   return(result);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800688e:	bf00      	nop
 8006890:	3754      	adds	r7, #84	@ 0x54
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80068d2:	f023 030c 	bic.w	r3, r3, #12
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	430b      	orrs	r3, r1
 80068de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2c      	ldr	r2, [pc, #176]	@ (80069ac <UART_SetConfig+0x114>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d103      	bne.n	8006908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006900:	f7fe fcbc 	bl	800527c <HAL_RCC_GetPCLK2Freq>
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	e002      	b.n	800690e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006908:	f7fe fca4 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 800690c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009a      	lsls	r2, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <UART_SetConfig+0x118>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	0119      	lsls	r1, r3, #4
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009a      	lsls	r2, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	fbb2 f2f3 	udiv	r2, r2, r3
 8006944:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <UART_SetConfig+0x118>)
 8006946:	fba3 0302 	umull	r0, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2064      	movs	r0, #100	@ 0x64
 800694e:	fb00 f303 	mul.w	r3, r0, r3
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	3332      	adds	r3, #50	@ 0x32
 8006958:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <UART_SetConfig+0x118>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006964:	4419      	add	r1, r3
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	009a      	lsls	r2, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	fbb2 f2f3 	udiv	r2, r2, r3
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <UART_SetConfig+0x118>)
 800697e:	fba3 0302 	umull	r0, r3, r3, r2
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2064      	movs	r0, #100	@ 0x64
 8006986:	fb00 f303 	mul.w	r3, r0, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	3332      	adds	r3, #50	@ 0x32
 8006990:	4a07      	ldr	r2, [pc, #28]	@ (80069b0 <UART_SetConfig+0x118>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	f003 020f 	and.w	r2, r3, #15
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	440a      	add	r2, r1
 80069a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40013800 	.word	0x40013800
 80069b0:	51eb851f 	.word	0x51eb851f

080069b4 <std>:
 80069b4:	2300      	movs	r3, #0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	e9c0 3300 	strd	r3, r3, [r0]
 80069be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069c2:	6083      	str	r3, [r0, #8]
 80069c4:	8181      	strh	r1, [r0, #12]
 80069c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069c8:	81c2      	strh	r2, [r0, #14]
 80069ca:	6183      	str	r3, [r0, #24]
 80069cc:	4619      	mov	r1, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	305c      	adds	r0, #92	@ 0x5c
 80069d2:	f000 f906 	bl	8006be2 <memset>
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x58>)
 80069d8:	6224      	str	r4, [r4, #32]
 80069da:	6263      	str	r3, [r4, #36]	@ 0x24
 80069dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a10 <std+0x5c>)
 80069de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a14 <std+0x60>)
 80069e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <std+0x64>)
 80069e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80069e8:	4b0c      	ldr	r3, [pc, #48]	@ (8006a1c <std+0x68>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d006      	beq.n	80069fc <std+0x48>
 80069ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069f2:	4294      	cmp	r4, r2
 80069f4:	d002      	beq.n	80069fc <std+0x48>
 80069f6:	33d0      	adds	r3, #208	@ 0xd0
 80069f8:	429c      	cmp	r4, r3
 80069fa:	d105      	bne.n	8006a08 <std+0x54>
 80069fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f000 b966 	b.w	8006cd4 <__retarget_lock_init_recursive>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006b5d 	.word	0x08006b5d
 8006a10:	08006b7f 	.word	0x08006b7f
 8006a14:	08006bb7 	.word	0x08006bb7
 8006a18:	08006bdb 	.word	0x08006bdb
 8006a1c:	20000358 	.word	0x20000358

08006a20 <stdio_exit_handler>:
 8006a20:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <stdio_exit_handler+0xc>)
 8006a22:	4903      	ldr	r1, [pc, #12]	@ (8006a30 <stdio_exit_handler+0x10>)
 8006a24:	4803      	ldr	r0, [pc, #12]	@ (8006a34 <stdio_exit_handler+0x14>)
 8006a26:	f000 b869 	b.w	8006afc <_fwalk_sglue>
 8006a2a:	bf00      	nop
 8006a2c:	200000d8 	.word	0x200000d8
 8006a30:	08007589 	.word	0x08007589
 8006a34:	200000e8 	.word	0x200000e8

08006a38 <cleanup_stdio>:
 8006a38:	6841      	ldr	r1, [r0, #4]
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <cleanup_stdio+0x34>)
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	4604      	mov	r4, r0
 8006a42:	d001      	beq.n	8006a48 <cleanup_stdio+0x10>
 8006a44:	f000 fda0 	bl	8007588 <_fflush_r>
 8006a48:	68a1      	ldr	r1, [r4, #8]
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <cleanup_stdio+0x38>)
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <cleanup_stdio+0x1e>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fd99 	bl	8007588 <_fflush_r>
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <cleanup_stdio+0x3c>)
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d004      	beq.n	8006a68 <cleanup_stdio+0x30>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f000 bd90 	b.w	8007588 <_fflush_r>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000358 	.word	0x20000358
 8006a70:	200003c0 	.word	0x200003c0
 8006a74:	20000428 	.word	0x20000428

08006a78 <global_stdio_init.part.0>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <global_stdio_init.part.0+0x30>)
 8006a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006aac <global_stdio_init.part.0+0x34>)
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <global_stdio_init.part.0+0x38>)
 8006a80:	4620      	mov	r0, r4
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	2104      	movs	r1, #4
 8006a86:	2200      	movs	r2, #0
 8006a88:	f7ff ff94 	bl	80069b4 <std>
 8006a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a90:	2201      	movs	r2, #1
 8006a92:	2109      	movs	r1, #9
 8006a94:	f7ff ff8e 	bl	80069b4 <std>
 8006a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	f7ff bf86 	b.w	80069b4 <std>
 8006aa8:	20000490 	.word	0x20000490
 8006aac:	20000358 	.word	0x20000358
 8006ab0:	08006a21 	.word	0x08006a21

08006ab4 <__sfp_lock_acquire>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_acquire+0x8>)
 8006ab6:	f000 b90e 	b.w	8006cd6 <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000499 	.word	0x20000499

08006ac0 <__sfp_lock_release>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__sfp_lock_release+0x8>)
 8006ac2:	f000 b909 	b.w	8006cd8 <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20000499 	.word	0x20000499

08006acc <__sinit>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f7ff fff0 	bl	8006ab4 <__sfp_lock_acquire>
 8006ad4:	6a23      	ldr	r3, [r4, #32]
 8006ad6:	b11b      	cbz	r3, 8006ae0 <__sinit+0x14>
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f7ff bff0 	b.w	8006ac0 <__sfp_lock_release>
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <__sinit+0x28>)
 8006ae2:	6223      	str	r3, [r4, #32]
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <__sinit+0x2c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <__sinit+0xc>
 8006aec:	f7ff ffc4 	bl	8006a78 <global_stdio_init.part.0>
 8006af0:	e7f2      	b.n	8006ad8 <__sinit+0xc>
 8006af2:	bf00      	nop
 8006af4:	08006a39 	.word	0x08006a39
 8006af8:	20000490 	.word	0x20000490

08006afc <_fwalk_sglue>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4607      	mov	r7, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	2600      	movs	r6, #0
 8006b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b10:	d505      	bpl.n	8006b1e <_fwalk_sglue+0x22>
 8006b12:	6824      	ldr	r4, [r4, #0]
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d1f7      	bne.n	8006b08 <_fwalk_sglue+0xc>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d907      	bls.n	8006b34 <_fwalk_sglue+0x38>
 8006b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <_fwalk_sglue+0x38>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	4306      	orrs	r6, r0
 8006b34:	3568      	adds	r5, #104	@ 0x68
 8006b36:	e7e9      	b.n	8006b0c <_fwalk_sglue+0x10>

08006b38 <iprintf>:
 8006b38:	b40f      	push	{r0, r1, r2, r3}
 8006b3a:	b507      	push	{r0, r1, r2, lr}
 8006b3c:	4906      	ldr	r1, [pc, #24]	@ (8006b58 <iprintf+0x20>)
 8006b3e:	ab04      	add	r3, sp, #16
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b46:	6881      	ldr	r1, [r0, #8]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	f000 f9f3 	bl	8006f34 <_vfiprintf_r>
 8006b4e:	b003      	add	sp, #12
 8006b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr
 8006b58:	200000e4 	.word	0x200000e4

08006b5c <__sread>:
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	460c      	mov	r4, r1
 8006b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b64:	f000 f868 	bl	8006c38 <_read_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	bfab      	itete	ge
 8006b6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b70:	181b      	addge	r3, r3, r0
 8006b72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b76:	bfac      	ite	ge
 8006b78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b7a:	81a3      	strhlt	r3, [r4, #12]
 8006b7c:	bd10      	pop	{r4, pc}

08006b7e <__swrite>:
 8006b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b82:	461f      	mov	r7, r3
 8006b84:	898b      	ldrh	r3, [r1, #12]
 8006b86:	4605      	mov	r5, r0
 8006b88:	05db      	lsls	r3, r3, #23
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	4616      	mov	r6, r2
 8006b8e:	d505      	bpl.n	8006b9c <__swrite+0x1e>
 8006b90:	2302      	movs	r3, #2
 8006b92:	2200      	movs	r2, #0
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	f000 f83c 	bl	8006c14 <_lseek_r>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	463b      	mov	r3, r7
 8006baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb2:	f000 b853 	b.w	8006c5c <_write_r>

08006bb6 <__sseek>:
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	460c      	mov	r4, r1
 8006bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbe:	f000 f829 	bl	8006c14 <_lseek_r>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	bf15      	itete	ne
 8006bc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bd2:	81a3      	strheq	r3, [r4, #12]
 8006bd4:	bf18      	it	ne
 8006bd6:	81a3      	strhne	r3, [r4, #12]
 8006bd8:	bd10      	pop	{r4, pc}

08006bda <__sclose>:
 8006bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bde:	f000 b809 	b.w	8006bf4 <_close_r>

08006be2 <memset>:
 8006be2:	4603      	mov	r3, r0
 8006be4:	4402      	add	r2, r0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d100      	bne.n	8006bec <memset+0xa>
 8006bea:	4770      	bx	lr
 8006bec:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf0:	e7f9      	b.n	8006be6 <memset+0x4>
	...

08006bf4 <_close_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d05      	ldr	r5, [pc, #20]	@ (8006c10 <_close_r+0x1c>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fc fb5b 	bl	80032ba <_close>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_close_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_close_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20000494 	.word	0x20000494

08006c14 <_lseek_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4d05      	ldr	r5, [pc, #20]	@ (8006c34 <_lseek_r+0x20>)
 8006c20:	602a      	str	r2, [r5, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f7fc fb6d 	bl	8003302 <_lseek>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_lseek_r+0x1e>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_lseek_r+0x1e>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	20000494 	.word	0x20000494

08006c38 <_read_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	2200      	movs	r2, #0
 8006c42:	4d05      	ldr	r5, [pc, #20]	@ (8006c58 <_read_r+0x20>)
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7fc fb1a 	bl	8003280 <_read>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_read_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_read_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20000494 	.word	0x20000494

08006c5c <_write_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	2200      	movs	r2, #0
 8006c66:	4d05      	ldr	r5, [pc, #20]	@ (8006c7c <_write_r+0x20>)
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fb fcd0 	bl	8002610 <_write>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_write_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_write_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	20000494 	.word	0x20000494

08006c80 <__errno>:
 8006c80:	4b01      	ldr	r3, [pc, #4]	@ (8006c88 <__errno+0x8>)
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	200000e4 	.word	0x200000e4

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	2600      	movs	r6, #0
 8006c90:	4d0c      	ldr	r5, [pc, #48]	@ (8006cc4 <__libc_init_array+0x38>)
 8006c92:	4c0d      	ldr	r4, [pc, #52]	@ (8006cc8 <__libc_init_array+0x3c>)
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	f000 ffbe 	bl	8007c1c <_init>
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	4d0a      	ldr	r5, [pc, #40]	@ (8006ccc <__libc_init_array+0x40>)
 8006ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8006cd0 <__libc_init_array+0x44>)
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	4798      	blx	r3
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	4798      	blx	r3
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	080080dc 	.word	0x080080dc
 8006cc8:	080080dc 	.word	0x080080dc
 8006ccc:	080080dc 	.word	0x080080dc
 8006cd0:	080080e0 	.word	0x080080e0

08006cd4 <__retarget_lock_init_recursive>:
 8006cd4:	4770      	bx	lr

08006cd6 <__retarget_lock_acquire_recursive>:
 8006cd6:	4770      	bx	lr

08006cd8 <__retarget_lock_release_recursive>:
 8006cd8:	4770      	bx	lr

08006cda <memcpy>:
 8006cda:	440a      	add	r2, r1
 8006cdc:	4291      	cmp	r1, r2
 8006cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce2:	d100      	bne.n	8006ce6 <memcpy+0xc>
 8006ce4:	4770      	bx	lr
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cec:	4291      	cmp	r1, r2
 8006cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf2:	d1f9      	bne.n	8006ce8 <memcpy+0xe>
 8006cf4:	bd10      	pop	{r4, pc}
	...

08006cf8 <_free_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d040      	beq.n	8006d82 <_free_r+0x8a>
 8006d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d04:	1f0c      	subs	r4, r1, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfb8      	it	lt
 8006d0a:	18e4      	addlt	r4, r4, r3
 8006d0c:	f000 f8de 	bl	8006ecc <__malloc_lock>
 8006d10:	4a1c      	ldr	r2, [pc, #112]	@ (8006d84 <_free_r+0x8c>)
 8006d12:	6813      	ldr	r3, [r2, #0]
 8006d14:	b933      	cbnz	r3, 8006d24 <_free_r+0x2c>
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	6014      	str	r4, [r2, #0]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d20:	f000 b8da 	b.w	8006ed8 <__malloc_unlock>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d908      	bls.n	8006d3a <_free_r+0x42>
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	1821      	adds	r1, r4, r0
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	bf01      	itttt	eq
 8006d30:	6819      	ldreq	r1, [r3, #0]
 8006d32:	685b      	ldreq	r3, [r3, #4]
 8006d34:	1809      	addeq	r1, r1, r0
 8006d36:	6021      	streq	r1, [r4, #0]
 8006d38:	e7ed      	b.n	8006d16 <_free_r+0x1e>
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b10b      	cbz	r3, 8006d44 <_free_r+0x4c>
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	d9fa      	bls.n	8006d3a <_free_r+0x42>
 8006d44:	6811      	ldr	r1, [r2, #0]
 8006d46:	1850      	adds	r0, r2, r1
 8006d48:	42a0      	cmp	r0, r4
 8006d4a:	d10b      	bne.n	8006d64 <_free_r+0x6c>
 8006d4c:	6820      	ldr	r0, [r4, #0]
 8006d4e:	4401      	add	r1, r0
 8006d50:	1850      	adds	r0, r2, r1
 8006d52:	4283      	cmp	r3, r0
 8006d54:	6011      	str	r1, [r2, #0]
 8006d56:	d1e0      	bne.n	8006d1a <_free_r+0x22>
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4408      	add	r0, r1
 8006d5e:	6010      	str	r0, [r2, #0]
 8006d60:	6053      	str	r3, [r2, #4]
 8006d62:	e7da      	b.n	8006d1a <_free_r+0x22>
 8006d64:	d902      	bls.n	8006d6c <_free_r+0x74>
 8006d66:	230c      	movs	r3, #12
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	e7d6      	b.n	8006d1a <_free_r+0x22>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	1821      	adds	r1, r4, r0
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf01      	itttt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	1809      	addeq	r1, r1, r0
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	6054      	str	r4, [r2, #4]
 8006d80:	e7cb      	b.n	8006d1a <_free_r+0x22>
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	200004a0 	.word	0x200004a0

08006d88 <sbrk_aligned>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8006dc8 <sbrk_aligned+0x40>)
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	6831      	ldr	r1, [r6, #0]
 8006d90:	4605      	mov	r5, r0
 8006d92:	b911      	cbnz	r1, 8006d9a <sbrk_aligned+0x12>
 8006d94:	f000 fcb4 	bl	8007700 <_sbrk_r>
 8006d98:	6030      	str	r0, [r6, #0]
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 fcaf 	bl	8007700 <_sbrk_r>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d103      	bne.n	8006dae <sbrk_aligned+0x26>
 8006da6:	f04f 34ff 	mov.w	r4, #4294967295
 8006daa:	4620      	mov	r0, r4
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	1cc4      	adds	r4, r0, #3
 8006db0:	f024 0403 	bic.w	r4, r4, #3
 8006db4:	42a0      	cmp	r0, r4
 8006db6:	d0f8      	beq.n	8006daa <sbrk_aligned+0x22>
 8006db8:	1a21      	subs	r1, r4, r0
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 fca0 	bl	8007700 <_sbrk_r>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d1f2      	bne.n	8006daa <sbrk_aligned+0x22>
 8006dc4:	e7ef      	b.n	8006da6 <sbrk_aligned+0x1e>
 8006dc6:	bf00      	nop
 8006dc8:	2000049c 	.word	0x2000049c

08006dcc <_malloc_r>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	1ccd      	adds	r5, r1, #3
 8006dd2:	f025 0503 	bic.w	r5, r5, #3
 8006dd6:	3508      	adds	r5, #8
 8006dd8:	2d0c      	cmp	r5, #12
 8006dda:	bf38      	it	cc
 8006ddc:	250c      	movcc	r5, #12
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	4606      	mov	r6, r0
 8006de2:	db01      	blt.n	8006de8 <_malloc_r+0x1c>
 8006de4:	42a9      	cmp	r1, r5
 8006de6:	d904      	bls.n	8006df2 <_malloc_r+0x26>
 8006de8:	230c      	movs	r3, #12
 8006dea:	6033      	str	r3, [r6, #0]
 8006dec:	2000      	movs	r0, #0
 8006dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ec8 <_malloc_r+0xfc>
 8006df6:	f000 f869 	bl	8006ecc <__malloc_lock>
 8006dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006dfe:	461c      	mov	r4, r3
 8006e00:	bb44      	cbnz	r4, 8006e54 <_malloc_r+0x88>
 8006e02:	4629      	mov	r1, r5
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff ffbf 	bl	8006d88 <sbrk_aligned>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	d158      	bne.n	8006ec2 <_malloc_r+0xf6>
 8006e10:	f8d8 4000 	ldr.w	r4, [r8]
 8006e14:	4627      	mov	r7, r4
 8006e16:	2f00      	cmp	r7, #0
 8006e18:	d143      	bne.n	8006ea2 <_malloc_r+0xd6>
 8006e1a:	2c00      	cmp	r4, #0
 8006e1c:	d04b      	beq.n	8006eb6 <_malloc_r+0xea>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	4639      	mov	r1, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	eb04 0903 	add.w	r9, r4, r3
 8006e28:	f000 fc6a 	bl	8007700 <_sbrk_r>
 8006e2c:	4581      	cmp	r9, r0
 8006e2e:	d142      	bne.n	8006eb6 <_malloc_r+0xea>
 8006e30:	6821      	ldr	r1, [r4, #0]
 8006e32:	4630      	mov	r0, r6
 8006e34:	1a6d      	subs	r5, r5, r1
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7ff ffa6 	bl	8006d88 <sbrk_aligned>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d03a      	beq.n	8006eb6 <_malloc_r+0xea>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	442b      	add	r3, r5
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	f8d8 3000 	ldr.w	r3, [r8]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	bb62      	cbnz	r2, 8006ea8 <_malloc_r+0xdc>
 8006e4e:	f8c8 7000 	str.w	r7, [r8]
 8006e52:	e00f      	b.n	8006e74 <_malloc_r+0xa8>
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	1b52      	subs	r2, r2, r5
 8006e58:	d420      	bmi.n	8006e9c <_malloc_r+0xd0>
 8006e5a:	2a0b      	cmp	r2, #11
 8006e5c:	d917      	bls.n	8006e8e <_malloc_r+0xc2>
 8006e5e:	1961      	adds	r1, r4, r5
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	6025      	str	r5, [r4, #0]
 8006e64:	bf18      	it	ne
 8006e66:	6059      	strne	r1, [r3, #4]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	bf08      	it	eq
 8006e6c:	f8c8 1000 	streq.w	r1, [r8]
 8006e70:	5162      	str	r2, [r4, r5]
 8006e72:	604b      	str	r3, [r1, #4]
 8006e74:	4630      	mov	r0, r6
 8006e76:	f000 f82f 	bl	8006ed8 <__malloc_unlock>
 8006e7a:	f104 000b 	add.w	r0, r4, #11
 8006e7e:	1d23      	adds	r3, r4, #4
 8006e80:	f020 0007 	bic.w	r0, r0, #7
 8006e84:	1ac2      	subs	r2, r0, r3
 8006e86:	bf1c      	itt	ne
 8006e88:	1a1b      	subne	r3, r3, r0
 8006e8a:	50a3      	strne	r3, [r4, r2]
 8006e8c:	e7af      	b.n	8006dee <_malloc_r+0x22>
 8006e8e:	6862      	ldr	r2, [r4, #4]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	bf0c      	ite	eq
 8006e94:	f8c8 2000 	streq.w	r2, [r8]
 8006e98:	605a      	strne	r2, [r3, #4]
 8006e9a:	e7eb      	b.n	8006e74 <_malloc_r+0xa8>
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	6864      	ldr	r4, [r4, #4]
 8006ea0:	e7ae      	b.n	8006e00 <_malloc_r+0x34>
 8006ea2:	463c      	mov	r4, r7
 8006ea4:	687f      	ldr	r7, [r7, #4]
 8006ea6:	e7b6      	b.n	8006e16 <_malloc_r+0x4a>
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	d1fb      	bne.n	8006ea8 <_malloc_r+0xdc>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6053      	str	r3, [r2, #4]
 8006eb4:	e7de      	b.n	8006e74 <_malloc_r+0xa8>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	4630      	mov	r0, r6
 8006eba:	6033      	str	r3, [r6, #0]
 8006ebc:	f000 f80c 	bl	8006ed8 <__malloc_unlock>
 8006ec0:	e794      	b.n	8006dec <_malloc_r+0x20>
 8006ec2:	6005      	str	r5, [r0, #0]
 8006ec4:	e7d6      	b.n	8006e74 <_malloc_r+0xa8>
 8006ec6:	bf00      	nop
 8006ec8:	200004a0 	.word	0x200004a0

08006ecc <__malloc_lock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	@ (8006ed4 <__malloc_lock+0x8>)
 8006ece:	f7ff bf02 	b.w	8006cd6 <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20000498 	.word	0x20000498

08006ed8 <__malloc_unlock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	@ (8006ee0 <__malloc_unlock+0x8>)
 8006eda:	f7ff befd 	b.w	8006cd8 <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20000498 	.word	0x20000498

08006ee4 <__sfputc_r>:
 8006ee4:	6893      	ldr	r3, [r2, #8]
 8006ee6:	b410      	push	{r4}
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	6093      	str	r3, [r2, #8]
 8006eee:	da07      	bge.n	8006f00 <__sfputc_r+0x1c>
 8006ef0:	6994      	ldr	r4, [r2, #24]
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	db01      	blt.n	8006efa <__sfputc_r+0x16>
 8006ef6:	290a      	cmp	r1, #10
 8006ef8:	d102      	bne.n	8006f00 <__sfputc_r+0x1c>
 8006efa:	bc10      	pop	{r4}
 8006efc:	f000 bb6c 	b.w	80075d8 <__swbuf_r>
 8006f00:	6813      	ldr	r3, [r2, #0]
 8006f02:	1c58      	adds	r0, r3, #1
 8006f04:	6010      	str	r0, [r2, #0]
 8006f06:	7019      	strb	r1, [r3, #0]
 8006f08:	4608      	mov	r0, r1
 8006f0a:	bc10      	pop	{r4}
 8006f0c:	4770      	bx	lr

08006f0e <__sfputs_r>:
 8006f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f10:	4606      	mov	r6, r0
 8006f12:	460f      	mov	r7, r1
 8006f14:	4614      	mov	r4, r2
 8006f16:	18d5      	adds	r5, r2, r3
 8006f18:	42ac      	cmp	r4, r5
 8006f1a:	d101      	bne.n	8006f20 <__sfputs_r+0x12>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e007      	b.n	8006f30 <__sfputs_r+0x22>
 8006f20:	463a      	mov	r2, r7
 8006f22:	4630      	mov	r0, r6
 8006f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f28:	f7ff ffdc 	bl	8006ee4 <__sfputc_r>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d1f3      	bne.n	8006f18 <__sfputs_r+0xa>
 8006f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f34 <_vfiprintf_r>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	460d      	mov	r5, r1
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	4606      	mov	r6, r0
 8006f40:	b09d      	sub	sp, #116	@ 0x74
 8006f42:	b118      	cbz	r0, 8006f4c <_vfiprintf_r+0x18>
 8006f44:	6a03      	ldr	r3, [r0, #32]
 8006f46:	b90b      	cbnz	r3, 8006f4c <_vfiprintf_r+0x18>
 8006f48:	f7ff fdc0 	bl	8006acc <__sinit>
 8006f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d405      	bmi.n	8006f5e <_vfiprintf_r+0x2a>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	059a      	lsls	r2, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_vfiprintf_r+0x2a>
 8006f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f5a:	f7ff febc 	bl	8006cd6 <__retarget_lock_acquire_recursive>
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	d501      	bpl.n	8006f68 <_vfiprintf_r+0x34>
 8006f64:	692b      	ldr	r3, [r5, #16]
 8006f66:	b99b      	cbnz	r3, 8006f90 <_vfiprintf_r+0x5c>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 fb72 	bl	8007654 <__swsetup_r>
 8006f70:	b170      	cbz	r0, 8006f90 <_vfiprintf_r+0x5c>
 8006f72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f74:	07dc      	lsls	r4, r3, #31
 8006f76:	d504      	bpl.n	8006f82 <_vfiprintf_r+0x4e>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b01d      	add	sp, #116	@ 0x74
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	0598      	lsls	r0, r3, #22
 8006f86:	d4f7      	bmi.n	8006f78 <_vfiprintf_r+0x44>
 8006f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f8a:	f7ff fea5 	bl	8006cd8 <__retarget_lock_release_recursive>
 8006f8e:	e7f3      	b.n	8006f78 <_vfiprintf_r+0x44>
 8006f90:	2300      	movs	r3, #0
 8006f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f94:	2320      	movs	r3, #32
 8006f96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f9a:	2330      	movs	r3, #48	@ 0x30
 8006f9c:	f04f 0901 	mov.w	r9, #1
 8006fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fa4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007150 <_vfiprintf_r+0x21c>
 8006fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fac:	4623      	mov	r3, r4
 8006fae:	469a      	mov	sl, r3
 8006fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb4:	b10a      	cbz	r2, 8006fba <_vfiprintf_r+0x86>
 8006fb6:	2a25      	cmp	r2, #37	@ 0x25
 8006fb8:	d1f9      	bne.n	8006fae <_vfiprintf_r+0x7a>
 8006fba:	ebba 0b04 	subs.w	fp, sl, r4
 8006fbe:	d00b      	beq.n	8006fd8 <_vfiprintf_r+0xa4>
 8006fc0:	465b      	mov	r3, fp
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7ff ffa1 	bl	8006f0e <__sfputs_r>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f000 80a7 	beq.w	8007120 <_vfiprintf_r+0x1ec>
 8006fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd4:	445a      	add	r2, fp
 8006fd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 809f 	beq.w	8007120 <_vfiprintf_r+0x1ec>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fec:	f10a 0a01 	add.w	sl, sl, #1
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ff8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ffa:	4654      	mov	r4, sl
 8006ffc:	2205      	movs	r2, #5
 8006ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007002:	4853      	ldr	r0, [pc, #332]	@ (8007150 <_vfiprintf_r+0x21c>)
 8007004:	f000 fb8c 	bl	8007720 <memchr>
 8007008:	9a04      	ldr	r2, [sp, #16]
 800700a:	b9d8      	cbnz	r0, 8007044 <_vfiprintf_r+0x110>
 800700c:	06d1      	lsls	r1, r2, #27
 800700e:	bf44      	itt	mi
 8007010:	2320      	movmi	r3, #32
 8007012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007016:	0713      	lsls	r3, r2, #28
 8007018:	bf44      	itt	mi
 800701a:	232b      	movmi	r3, #43	@ 0x2b
 800701c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007020:	f89a 3000 	ldrb.w	r3, [sl]
 8007024:	2b2a      	cmp	r3, #42	@ 0x2a
 8007026:	d015      	beq.n	8007054 <_vfiprintf_r+0x120>
 8007028:	4654      	mov	r4, sl
 800702a:	2000      	movs	r0, #0
 800702c:	f04f 0c0a 	mov.w	ip, #10
 8007030:	9a07      	ldr	r2, [sp, #28]
 8007032:	4621      	mov	r1, r4
 8007034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007038:	3b30      	subs	r3, #48	@ 0x30
 800703a:	2b09      	cmp	r3, #9
 800703c:	d94b      	bls.n	80070d6 <_vfiprintf_r+0x1a2>
 800703e:	b1b0      	cbz	r0, 800706e <_vfiprintf_r+0x13a>
 8007040:	9207      	str	r2, [sp, #28]
 8007042:	e014      	b.n	800706e <_vfiprintf_r+0x13a>
 8007044:	eba0 0308 	sub.w	r3, r0, r8
 8007048:	fa09 f303 	lsl.w	r3, r9, r3
 800704c:	4313      	orrs	r3, r2
 800704e:	46a2      	mov	sl, r4
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	e7d2      	b.n	8006ffa <_vfiprintf_r+0xc6>
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	1d19      	adds	r1, r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	9103      	str	r1, [sp, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfbb      	ittet	lt
 8007060:	425b      	neglt	r3, r3
 8007062:	f042 0202 	orrlt.w	r2, r2, #2
 8007066:	9307      	strge	r3, [sp, #28]
 8007068:	9307      	strlt	r3, [sp, #28]
 800706a:	bfb8      	it	lt
 800706c:	9204      	strlt	r2, [sp, #16]
 800706e:	7823      	ldrb	r3, [r4, #0]
 8007070:	2b2e      	cmp	r3, #46	@ 0x2e
 8007072:	d10a      	bne.n	800708a <_vfiprintf_r+0x156>
 8007074:	7863      	ldrb	r3, [r4, #1]
 8007076:	2b2a      	cmp	r3, #42	@ 0x2a
 8007078:	d132      	bne.n	80070e0 <_vfiprintf_r+0x1ac>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	3402      	adds	r4, #2
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	9203      	str	r2, [sp, #12]
 8007084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007088:	9305      	str	r3, [sp, #20]
 800708a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007154 <_vfiprintf_r+0x220>
 800708e:	2203      	movs	r2, #3
 8007090:	4650      	mov	r0, sl
 8007092:	7821      	ldrb	r1, [r4, #0]
 8007094:	f000 fb44 	bl	8007720 <memchr>
 8007098:	b138      	cbz	r0, 80070aa <_vfiprintf_r+0x176>
 800709a:	2240      	movs	r2, #64	@ 0x40
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	eba0 000a 	sub.w	r0, r0, sl
 80070a2:	4082      	lsls	r2, r0
 80070a4:	4313      	orrs	r3, r2
 80070a6:	3401      	adds	r4, #1
 80070a8:	9304      	str	r3, [sp, #16]
 80070aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ae:	2206      	movs	r2, #6
 80070b0:	4829      	ldr	r0, [pc, #164]	@ (8007158 <_vfiprintf_r+0x224>)
 80070b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070b6:	f000 fb33 	bl	8007720 <memchr>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d03f      	beq.n	800713e <_vfiprintf_r+0x20a>
 80070be:	4b27      	ldr	r3, [pc, #156]	@ (800715c <_vfiprintf_r+0x228>)
 80070c0:	bb1b      	cbnz	r3, 800710a <_vfiprintf_r+0x1d6>
 80070c2:	9b03      	ldr	r3, [sp, #12]
 80070c4:	3307      	adds	r3, #7
 80070c6:	f023 0307 	bic.w	r3, r3, #7
 80070ca:	3308      	adds	r3, #8
 80070cc:	9303      	str	r3, [sp, #12]
 80070ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d0:	443b      	add	r3, r7
 80070d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d4:	e76a      	b.n	8006fac <_vfiprintf_r+0x78>
 80070d6:	460c      	mov	r4, r1
 80070d8:	2001      	movs	r0, #1
 80070da:	fb0c 3202 	mla	r2, ip, r2, r3
 80070de:	e7a8      	b.n	8007032 <_vfiprintf_r+0xfe>
 80070e0:	2300      	movs	r3, #0
 80070e2:	f04f 0c0a 	mov.w	ip, #10
 80070e6:	4619      	mov	r1, r3
 80070e8:	3401      	adds	r4, #1
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	4620      	mov	r0, r4
 80070ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070f2:	3a30      	subs	r2, #48	@ 0x30
 80070f4:	2a09      	cmp	r2, #9
 80070f6:	d903      	bls.n	8007100 <_vfiprintf_r+0x1cc>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0c6      	beq.n	800708a <_vfiprintf_r+0x156>
 80070fc:	9105      	str	r1, [sp, #20]
 80070fe:	e7c4      	b.n	800708a <_vfiprintf_r+0x156>
 8007100:	4604      	mov	r4, r0
 8007102:	2301      	movs	r3, #1
 8007104:	fb0c 2101 	mla	r1, ip, r1, r2
 8007108:	e7f0      	b.n	80070ec <_vfiprintf_r+0x1b8>
 800710a:	ab03      	add	r3, sp, #12
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	462a      	mov	r2, r5
 8007110:	4630      	mov	r0, r6
 8007112:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <_vfiprintf_r+0x22c>)
 8007114:	a904      	add	r1, sp, #16
 8007116:	f3af 8000 	nop.w
 800711a:	4607      	mov	r7, r0
 800711c:	1c78      	adds	r0, r7, #1
 800711e:	d1d6      	bne.n	80070ce <_vfiprintf_r+0x19a>
 8007120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007122:	07d9      	lsls	r1, r3, #31
 8007124:	d405      	bmi.n	8007132 <_vfiprintf_r+0x1fe>
 8007126:	89ab      	ldrh	r3, [r5, #12]
 8007128:	059a      	lsls	r2, r3, #22
 800712a:	d402      	bmi.n	8007132 <_vfiprintf_r+0x1fe>
 800712c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800712e:	f7ff fdd3 	bl	8006cd8 <__retarget_lock_release_recursive>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	065b      	lsls	r3, r3, #25
 8007136:	f53f af1f 	bmi.w	8006f78 <_vfiprintf_r+0x44>
 800713a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800713c:	e71e      	b.n	8006f7c <_vfiprintf_r+0x48>
 800713e:	ab03      	add	r3, sp, #12
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	462a      	mov	r2, r5
 8007144:	4630      	mov	r0, r6
 8007146:	4b06      	ldr	r3, [pc, #24]	@ (8007160 <_vfiprintf_r+0x22c>)
 8007148:	a904      	add	r1, sp, #16
 800714a:	f000 f87d 	bl	8007248 <_printf_i>
 800714e:	e7e4      	b.n	800711a <_vfiprintf_r+0x1e6>
 8007150:	080080a0 	.word	0x080080a0
 8007154:	080080a6 	.word	0x080080a6
 8007158:	080080aa 	.word	0x080080aa
 800715c:	00000000 	.word	0x00000000
 8007160:	08006f0f 	.word	0x08006f0f

08007164 <_printf_common>:
 8007164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007168:	4616      	mov	r6, r2
 800716a:	4698      	mov	r8, r3
 800716c:	688a      	ldr	r2, [r1, #8]
 800716e:	690b      	ldr	r3, [r1, #16]
 8007170:	4607      	mov	r7, r0
 8007172:	4293      	cmp	r3, r2
 8007174:	bfb8      	it	lt
 8007176:	4613      	movlt	r3, r2
 8007178:	6033      	str	r3, [r6, #0]
 800717a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800717e:	460c      	mov	r4, r1
 8007180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007184:	b10a      	cbz	r2, 800718a <_printf_common+0x26>
 8007186:	3301      	adds	r3, #1
 8007188:	6033      	str	r3, [r6, #0]
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	0699      	lsls	r1, r3, #26
 800718e:	bf42      	ittt	mi
 8007190:	6833      	ldrmi	r3, [r6, #0]
 8007192:	3302      	addmi	r3, #2
 8007194:	6033      	strmi	r3, [r6, #0]
 8007196:	6825      	ldr	r5, [r4, #0]
 8007198:	f015 0506 	ands.w	r5, r5, #6
 800719c:	d106      	bne.n	80071ac <_printf_common+0x48>
 800719e:	f104 0a19 	add.w	sl, r4, #25
 80071a2:	68e3      	ldr	r3, [r4, #12]
 80071a4:	6832      	ldr	r2, [r6, #0]
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	42ab      	cmp	r3, r5
 80071aa:	dc2b      	bgt.n	8007204 <_printf_common+0xa0>
 80071ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071b0:	6822      	ldr	r2, [r4, #0]
 80071b2:	3b00      	subs	r3, #0
 80071b4:	bf18      	it	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	0692      	lsls	r2, r2, #26
 80071ba:	d430      	bmi.n	800721e <_printf_common+0xba>
 80071bc:	4641      	mov	r1, r8
 80071be:	4638      	mov	r0, r7
 80071c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071c4:	47c8      	blx	r9
 80071c6:	3001      	adds	r0, #1
 80071c8:	d023      	beq.n	8007212 <_printf_common+0xae>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	6922      	ldr	r2, [r4, #16]
 80071ce:	f003 0306 	and.w	r3, r3, #6
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	bf14      	ite	ne
 80071d6:	2500      	movne	r5, #0
 80071d8:	6833      	ldreq	r3, [r6, #0]
 80071da:	f04f 0600 	mov.w	r6, #0
 80071de:	bf08      	it	eq
 80071e0:	68e5      	ldreq	r5, [r4, #12]
 80071e2:	f104 041a 	add.w	r4, r4, #26
 80071e6:	bf08      	it	eq
 80071e8:	1aed      	subeq	r5, r5, r3
 80071ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80071ee:	bf08      	it	eq
 80071f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071f4:	4293      	cmp	r3, r2
 80071f6:	bfc4      	itt	gt
 80071f8:	1a9b      	subgt	r3, r3, r2
 80071fa:	18ed      	addgt	r5, r5, r3
 80071fc:	42b5      	cmp	r5, r6
 80071fe:	d11a      	bne.n	8007236 <_printf_common+0xd2>
 8007200:	2000      	movs	r0, #0
 8007202:	e008      	b.n	8007216 <_printf_common+0xb2>
 8007204:	2301      	movs	r3, #1
 8007206:	4652      	mov	r2, sl
 8007208:	4641      	mov	r1, r8
 800720a:	4638      	mov	r0, r7
 800720c:	47c8      	blx	r9
 800720e:	3001      	adds	r0, #1
 8007210:	d103      	bne.n	800721a <_printf_common+0xb6>
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	3501      	adds	r5, #1
 800721c:	e7c1      	b.n	80071a2 <_printf_common+0x3e>
 800721e:	2030      	movs	r0, #48	@ 0x30
 8007220:	18e1      	adds	r1, r4, r3
 8007222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800722c:	4422      	add	r2, r4
 800722e:	3302      	adds	r3, #2
 8007230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007234:	e7c2      	b.n	80071bc <_printf_common+0x58>
 8007236:	2301      	movs	r3, #1
 8007238:	4622      	mov	r2, r4
 800723a:	4641      	mov	r1, r8
 800723c:	4638      	mov	r0, r7
 800723e:	47c8      	blx	r9
 8007240:	3001      	adds	r0, #1
 8007242:	d0e6      	beq.n	8007212 <_printf_common+0xae>
 8007244:	3601      	adds	r6, #1
 8007246:	e7d9      	b.n	80071fc <_printf_common+0x98>

08007248 <_printf_i>:
 8007248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	7e0f      	ldrb	r7, [r1, #24]
 800724e:	4691      	mov	r9, r2
 8007250:	2f78      	cmp	r7, #120	@ 0x78
 8007252:	4680      	mov	r8, r0
 8007254:	460c      	mov	r4, r1
 8007256:	469a      	mov	sl, r3
 8007258:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800725a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800725e:	d807      	bhi.n	8007270 <_printf_i+0x28>
 8007260:	2f62      	cmp	r7, #98	@ 0x62
 8007262:	d80a      	bhi.n	800727a <_printf_i+0x32>
 8007264:	2f00      	cmp	r7, #0
 8007266:	f000 80d3 	beq.w	8007410 <_printf_i+0x1c8>
 800726a:	2f58      	cmp	r7, #88	@ 0x58
 800726c:	f000 80ba 	beq.w	80073e4 <_printf_i+0x19c>
 8007270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007278:	e03a      	b.n	80072f0 <_printf_i+0xa8>
 800727a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800727e:	2b15      	cmp	r3, #21
 8007280:	d8f6      	bhi.n	8007270 <_printf_i+0x28>
 8007282:	a101      	add	r1, pc, #4	@ (adr r1, 8007288 <_printf_i+0x40>)
 8007284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007288:	080072e1 	.word	0x080072e1
 800728c:	080072f5 	.word	0x080072f5
 8007290:	08007271 	.word	0x08007271
 8007294:	08007271 	.word	0x08007271
 8007298:	08007271 	.word	0x08007271
 800729c:	08007271 	.word	0x08007271
 80072a0:	080072f5 	.word	0x080072f5
 80072a4:	08007271 	.word	0x08007271
 80072a8:	08007271 	.word	0x08007271
 80072ac:	08007271 	.word	0x08007271
 80072b0:	08007271 	.word	0x08007271
 80072b4:	080073f7 	.word	0x080073f7
 80072b8:	0800731f 	.word	0x0800731f
 80072bc:	080073b1 	.word	0x080073b1
 80072c0:	08007271 	.word	0x08007271
 80072c4:	08007271 	.word	0x08007271
 80072c8:	08007419 	.word	0x08007419
 80072cc:	08007271 	.word	0x08007271
 80072d0:	0800731f 	.word	0x0800731f
 80072d4:	08007271 	.word	0x08007271
 80072d8:	08007271 	.word	0x08007271
 80072dc:	080073b9 	.word	0x080073b9
 80072e0:	6833      	ldr	r3, [r6, #0]
 80072e2:	1d1a      	adds	r2, r3, #4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6032      	str	r2, [r6, #0]
 80072e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072f0:	2301      	movs	r3, #1
 80072f2:	e09e      	b.n	8007432 <_printf_i+0x1ea>
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	6820      	ldr	r0, [r4, #0]
 80072f8:	1d19      	adds	r1, r3, #4
 80072fa:	6031      	str	r1, [r6, #0]
 80072fc:	0606      	lsls	r6, r0, #24
 80072fe:	d501      	bpl.n	8007304 <_printf_i+0xbc>
 8007300:	681d      	ldr	r5, [r3, #0]
 8007302:	e003      	b.n	800730c <_printf_i+0xc4>
 8007304:	0645      	lsls	r5, r0, #25
 8007306:	d5fb      	bpl.n	8007300 <_printf_i+0xb8>
 8007308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800730c:	2d00      	cmp	r5, #0
 800730e:	da03      	bge.n	8007318 <_printf_i+0xd0>
 8007310:	232d      	movs	r3, #45	@ 0x2d
 8007312:	426d      	negs	r5, r5
 8007314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007318:	230a      	movs	r3, #10
 800731a:	4859      	ldr	r0, [pc, #356]	@ (8007480 <_printf_i+0x238>)
 800731c:	e011      	b.n	8007342 <_printf_i+0xfa>
 800731e:	6821      	ldr	r1, [r4, #0]
 8007320:	6833      	ldr	r3, [r6, #0]
 8007322:	0608      	lsls	r0, r1, #24
 8007324:	f853 5b04 	ldr.w	r5, [r3], #4
 8007328:	d402      	bmi.n	8007330 <_printf_i+0xe8>
 800732a:	0649      	lsls	r1, r1, #25
 800732c:	bf48      	it	mi
 800732e:	b2ad      	uxthmi	r5, r5
 8007330:	2f6f      	cmp	r7, #111	@ 0x6f
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	bf14      	ite	ne
 8007336:	230a      	movne	r3, #10
 8007338:	2308      	moveq	r3, #8
 800733a:	4851      	ldr	r0, [pc, #324]	@ (8007480 <_printf_i+0x238>)
 800733c:	2100      	movs	r1, #0
 800733e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007342:	6866      	ldr	r6, [r4, #4]
 8007344:	2e00      	cmp	r6, #0
 8007346:	bfa8      	it	ge
 8007348:	6821      	ldrge	r1, [r4, #0]
 800734a:	60a6      	str	r6, [r4, #8]
 800734c:	bfa4      	itt	ge
 800734e:	f021 0104 	bicge.w	r1, r1, #4
 8007352:	6021      	strge	r1, [r4, #0]
 8007354:	b90d      	cbnz	r5, 800735a <_printf_i+0x112>
 8007356:	2e00      	cmp	r6, #0
 8007358:	d04b      	beq.n	80073f2 <_printf_i+0x1aa>
 800735a:	4616      	mov	r6, r2
 800735c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007360:	fb03 5711 	mls	r7, r3, r1, r5
 8007364:	5dc7      	ldrb	r7, [r0, r7]
 8007366:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800736a:	462f      	mov	r7, r5
 800736c:	42bb      	cmp	r3, r7
 800736e:	460d      	mov	r5, r1
 8007370:	d9f4      	bls.n	800735c <_printf_i+0x114>
 8007372:	2b08      	cmp	r3, #8
 8007374:	d10b      	bne.n	800738e <_printf_i+0x146>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	07df      	lsls	r7, r3, #31
 800737a:	d508      	bpl.n	800738e <_printf_i+0x146>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	6861      	ldr	r1, [r4, #4]
 8007380:	4299      	cmp	r1, r3
 8007382:	bfde      	ittt	le
 8007384:	2330      	movle	r3, #48	@ 0x30
 8007386:	f806 3c01 	strble.w	r3, [r6, #-1]
 800738a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800738e:	1b92      	subs	r2, r2, r6
 8007390:	6122      	str	r2, [r4, #16]
 8007392:	464b      	mov	r3, r9
 8007394:	4621      	mov	r1, r4
 8007396:	4640      	mov	r0, r8
 8007398:	f8cd a000 	str.w	sl, [sp]
 800739c:	aa03      	add	r2, sp, #12
 800739e:	f7ff fee1 	bl	8007164 <_printf_common>
 80073a2:	3001      	adds	r0, #1
 80073a4:	d14a      	bne.n	800743c <_printf_i+0x1f4>
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
 80073aa:	b004      	add	sp, #16
 80073ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	f043 0320 	orr.w	r3, r3, #32
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	2778      	movs	r7, #120	@ 0x78
 80073ba:	4832      	ldr	r0, [pc, #200]	@ (8007484 <_printf_i+0x23c>)
 80073bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	6831      	ldr	r1, [r6, #0]
 80073c4:	061f      	lsls	r7, r3, #24
 80073c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80073ca:	d402      	bmi.n	80073d2 <_printf_i+0x18a>
 80073cc:	065f      	lsls	r7, r3, #25
 80073ce:	bf48      	it	mi
 80073d0:	b2ad      	uxthmi	r5, r5
 80073d2:	6031      	str	r1, [r6, #0]
 80073d4:	07d9      	lsls	r1, r3, #31
 80073d6:	bf44      	itt	mi
 80073d8:	f043 0320 	orrmi.w	r3, r3, #32
 80073dc:	6023      	strmi	r3, [r4, #0]
 80073de:	b11d      	cbz	r5, 80073e8 <_printf_i+0x1a0>
 80073e0:	2310      	movs	r3, #16
 80073e2:	e7ab      	b.n	800733c <_printf_i+0xf4>
 80073e4:	4826      	ldr	r0, [pc, #152]	@ (8007480 <_printf_i+0x238>)
 80073e6:	e7e9      	b.n	80073bc <_printf_i+0x174>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	f023 0320 	bic.w	r3, r3, #32
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	e7f6      	b.n	80073e0 <_printf_i+0x198>
 80073f2:	4616      	mov	r6, r2
 80073f4:	e7bd      	b.n	8007372 <_printf_i+0x12a>
 80073f6:	6833      	ldr	r3, [r6, #0]
 80073f8:	6825      	ldr	r5, [r4, #0]
 80073fa:	1d18      	adds	r0, r3, #4
 80073fc:	6961      	ldr	r1, [r4, #20]
 80073fe:	6030      	str	r0, [r6, #0]
 8007400:	062e      	lsls	r6, r5, #24
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	d501      	bpl.n	800740a <_printf_i+0x1c2>
 8007406:	6019      	str	r1, [r3, #0]
 8007408:	e002      	b.n	8007410 <_printf_i+0x1c8>
 800740a:	0668      	lsls	r0, r5, #25
 800740c:	d5fb      	bpl.n	8007406 <_printf_i+0x1be>
 800740e:	8019      	strh	r1, [r3, #0]
 8007410:	2300      	movs	r3, #0
 8007412:	4616      	mov	r6, r2
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	e7bc      	b.n	8007392 <_printf_i+0x14a>
 8007418:	6833      	ldr	r3, [r6, #0]
 800741a:	2100      	movs	r1, #0
 800741c:	1d1a      	adds	r2, r3, #4
 800741e:	6032      	str	r2, [r6, #0]
 8007420:	681e      	ldr	r6, [r3, #0]
 8007422:	6862      	ldr	r2, [r4, #4]
 8007424:	4630      	mov	r0, r6
 8007426:	f000 f97b 	bl	8007720 <memchr>
 800742a:	b108      	cbz	r0, 8007430 <_printf_i+0x1e8>
 800742c:	1b80      	subs	r0, r0, r6
 800742e:	6060      	str	r0, [r4, #4]
 8007430:	6863      	ldr	r3, [r4, #4]
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	2300      	movs	r3, #0
 8007436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800743a:	e7aa      	b.n	8007392 <_printf_i+0x14a>
 800743c:	4632      	mov	r2, r6
 800743e:	4649      	mov	r1, r9
 8007440:	4640      	mov	r0, r8
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	47d0      	blx	sl
 8007446:	3001      	adds	r0, #1
 8007448:	d0ad      	beq.n	80073a6 <_printf_i+0x15e>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	079b      	lsls	r3, r3, #30
 800744e:	d413      	bmi.n	8007478 <_printf_i+0x230>
 8007450:	68e0      	ldr	r0, [r4, #12]
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	4298      	cmp	r0, r3
 8007456:	bfb8      	it	lt
 8007458:	4618      	movlt	r0, r3
 800745a:	e7a6      	b.n	80073aa <_printf_i+0x162>
 800745c:	2301      	movs	r3, #1
 800745e:	4632      	mov	r2, r6
 8007460:	4649      	mov	r1, r9
 8007462:	4640      	mov	r0, r8
 8007464:	47d0      	blx	sl
 8007466:	3001      	adds	r0, #1
 8007468:	d09d      	beq.n	80073a6 <_printf_i+0x15e>
 800746a:	3501      	adds	r5, #1
 800746c:	68e3      	ldr	r3, [r4, #12]
 800746e:	9903      	ldr	r1, [sp, #12]
 8007470:	1a5b      	subs	r3, r3, r1
 8007472:	42ab      	cmp	r3, r5
 8007474:	dcf2      	bgt.n	800745c <_printf_i+0x214>
 8007476:	e7eb      	b.n	8007450 <_printf_i+0x208>
 8007478:	2500      	movs	r5, #0
 800747a:	f104 0619 	add.w	r6, r4, #25
 800747e:	e7f5      	b.n	800746c <_printf_i+0x224>
 8007480:	080080b1 	.word	0x080080b1
 8007484:	080080c2 	.word	0x080080c2

08007488 <__sflush_r>:
 8007488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	0716      	lsls	r6, r2, #28
 8007490:	4605      	mov	r5, r0
 8007492:	460c      	mov	r4, r1
 8007494:	d454      	bmi.n	8007540 <__sflush_r+0xb8>
 8007496:	684b      	ldr	r3, [r1, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dc02      	bgt.n	80074a2 <__sflush_r+0x1a>
 800749c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd48      	ble.n	8007534 <__sflush_r+0xac>
 80074a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074a4:	2e00      	cmp	r6, #0
 80074a6:	d045      	beq.n	8007534 <__sflush_r+0xac>
 80074a8:	2300      	movs	r3, #0
 80074aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074ae:	682f      	ldr	r7, [r5, #0]
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	d030      	beq.n	8007518 <__sflush_r+0x90>
 80074b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	0759      	lsls	r1, r3, #29
 80074bc:	d505      	bpl.n	80074ca <__sflush_r+0x42>
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074c4:	b10b      	cbz	r3, 80074ca <__sflush_r+0x42>
 80074c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	2300      	movs	r3, #0
 80074cc:	4628      	mov	r0, r5
 80074ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074d0:	6a21      	ldr	r1, [r4, #32]
 80074d2:	47b0      	blx	r6
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	d106      	bne.n	80074e8 <__sflush_r+0x60>
 80074da:	6829      	ldr	r1, [r5, #0]
 80074dc:	291d      	cmp	r1, #29
 80074de:	d82b      	bhi.n	8007538 <__sflush_r+0xb0>
 80074e0:	4a28      	ldr	r2, [pc, #160]	@ (8007584 <__sflush_r+0xfc>)
 80074e2:	410a      	asrs	r2, r1
 80074e4:	07d6      	lsls	r6, r2, #31
 80074e6:	d427      	bmi.n	8007538 <__sflush_r+0xb0>
 80074e8:	2200      	movs	r2, #0
 80074ea:	6062      	str	r2, [r4, #4]
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	04d9      	lsls	r1, r3, #19
 80074f0:	6022      	str	r2, [r4, #0]
 80074f2:	d504      	bpl.n	80074fe <__sflush_r+0x76>
 80074f4:	1c42      	adds	r2, r0, #1
 80074f6:	d101      	bne.n	80074fc <__sflush_r+0x74>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b903      	cbnz	r3, 80074fe <__sflush_r+0x76>
 80074fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80074fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007500:	602f      	str	r7, [r5, #0]
 8007502:	b1b9      	cbz	r1, 8007534 <__sflush_r+0xac>
 8007504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007508:	4299      	cmp	r1, r3
 800750a:	d002      	beq.n	8007512 <__sflush_r+0x8a>
 800750c:	4628      	mov	r0, r5
 800750e:	f7ff fbf3 	bl	8006cf8 <_free_r>
 8007512:	2300      	movs	r3, #0
 8007514:	6363      	str	r3, [r4, #52]	@ 0x34
 8007516:	e00d      	b.n	8007534 <__sflush_r+0xac>
 8007518:	2301      	movs	r3, #1
 800751a:	4628      	mov	r0, r5
 800751c:	47b0      	blx	r6
 800751e:	4602      	mov	r2, r0
 8007520:	1c50      	adds	r0, r2, #1
 8007522:	d1c9      	bne.n	80074b8 <__sflush_r+0x30>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0c6      	beq.n	80074b8 <__sflush_r+0x30>
 800752a:	2b1d      	cmp	r3, #29
 800752c:	d001      	beq.n	8007532 <__sflush_r+0xaa>
 800752e:	2b16      	cmp	r3, #22
 8007530:	d11d      	bne.n	800756e <__sflush_r+0xe6>
 8007532:	602f      	str	r7, [r5, #0]
 8007534:	2000      	movs	r0, #0
 8007536:	e021      	b.n	800757c <__sflush_r+0xf4>
 8007538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800753c:	b21b      	sxth	r3, r3
 800753e:	e01a      	b.n	8007576 <__sflush_r+0xee>
 8007540:	690f      	ldr	r7, [r1, #16]
 8007542:	2f00      	cmp	r7, #0
 8007544:	d0f6      	beq.n	8007534 <__sflush_r+0xac>
 8007546:	0793      	lsls	r3, r2, #30
 8007548:	bf18      	it	ne
 800754a:	2300      	movne	r3, #0
 800754c:	680e      	ldr	r6, [r1, #0]
 800754e:	bf08      	it	eq
 8007550:	694b      	ldreq	r3, [r1, #20]
 8007552:	1bf6      	subs	r6, r6, r7
 8007554:	600f      	str	r7, [r1, #0]
 8007556:	608b      	str	r3, [r1, #8]
 8007558:	2e00      	cmp	r6, #0
 800755a:	ddeb      	ble.n	8007534 <__sflush_r+0xac>
 800755c:	4633      	mov	r3, r6
 800755e:	463a      	mov	r2, r7
 8007560:	4628      	mov	r0, r5
 8007562:	6a21      	ldr	r1, [r4, #32]
 8007564:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007568:	47e0      	blx	ip
 800756a:	2800      	cmp	r0, #0
 800756c:	dc07      	bgt.n	800757e <__sflush_r+0xf6>
 800756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007576:	f04f 30ff 	mov.w	r0, #4294967295
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757e:	4407      	add	r7, r0
 8007580:	1a36      	subs	r6, r6, r0
 8007582:	e7e9      	b.n	8007558 <__sflush_r+0xd0>
 8007584:	dfbffffe 	.word	0xdfbffffe

08007588 <_fflush_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	690b      	ldr	r3, [r1, #16]
 800758c:	4605      	mov	r5, r0
 800758e:	460c      	mov	r4, r1
 8007590:	b913      	cbnz	r3, 8007598 <_fflush_r+0x10>
 8007592:	2500      	movs	r5, #0
 8007594:	4628      	mov	r0, r5
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	b118      	cbz	r0, 80075a2 <_fflush_r+0x1a>
 800759a:	6a03      	ldr	r3, [r0, #32]
 800759c:	b90b      	cbnz	r3, 80075a2 <_fflush_r+0x1a>
 800759e:	f7ff fa95 	bl	8006acc <__sinit>
 80075a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0f3      	beq.n	8007592 <_fflush_r+0xa>
 80075aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075ac:	07d0      	lsls	r0, r2, #31
 80075ae:	d404      	bmi.n	80075ba <_fflush_r+0x32>
 80075b0:	0599      	lsls	r1, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_fflush_r+0x32>
 80075b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075b6:	f7ff fb8e 	bl	8006cd6 <__retarget_lock_acquire_recursive>
 80075ba:	4628      	mov	r0, r5
 80075bc:	4621      	mov	r1, r4
 80075be:	f7ff ff63 	bl	8007488 <__sflush_r>
 80075c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075c4:	4605      	mov	r5, r0
 80075c6:	07da      	lsls	r2, r3, #31
 80075c8:	d4e4      	bmi.n	8007594 <_fflush_r+0xc>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	059b      	lsls	r3, r3, #22
 80075ce:	d4e1      	bmi.n	8007594 <_fflush_r+0xc>
 80075d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075d2:	f7ff fb81 	bl	8006cd8 <__retarget_lock_release_recursive>
 80075d6:	e7dd      	b.n	8007594 <_fflush_r+0xc>

080075d8 <__swbuf_r>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	460e      	mov	r6, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	4605      	mov	r5, r0
 80075e0:	b118      	cbz	r0, 80075ea <__swbuf_r+0x12>
 80075e2:	6a03      	ldr	r3, [r0, #32]
 80075e4:	b90b      	cbnz	r3, 80075ea <__swbuf_r+0x12>
 80075e6:	f7ff fa71 	bl	8006acc <__sinit>
 80075ea:	69a3      	ldr	r3, [r4, #24]
 80075ec:	60a3      	str	r3, [r4, #8]
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	071a      	lsls	r2, r3, #28
 80075f2:	d501      	bpl.n	80075f8 <__swbuf_r+0x20>
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	b943      	cbnz	r3, 800760a <__swbuf_r+0x32>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f82a 	bl	8007654 <__swsetup_r>
 8007600:	b118      	cbz	r0, 800760a <__swbuf_r+0x32>
 8007602:	f04f 37ff 	mov.w	r7, #4294967295
 8007606:	4638      	mov	r0, r7
 8007608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	6922      	ldr	r2, [r4, #16]
 800760e:	b2f6      	uxtb	r6, r6
 8007610:	1a98      	subs	r0, r3, r2
 8007612:	6963      	ldr	r3, [r4, #20]
 8007614:	4637      	mov	r7, r6
 8007616:	4283      	cmp	r3, r0
 8007618:	dc05      	bgt.n	8007626 <__swbuf_r+0x4e>
 800761a:	4621      	mov	r1, r4
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff ffb3 	bl	8007588 <_fflush_r>
 8007622:	2800      	cmp	r0, #0
 8007624:	d1ed      	bne.n	8007602 <__swbuf_r+0x2a>
 8007626:	68a3      	ldr	r3, [r4, #8]
 8007628:	3b01      	subs	r3, #1
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	6022      	str	r2, [r4, #0]
 8007632:	701e      	strb	r6, [r3, #0]
 8007634:	6962      	ldr	r2, [r4, #20]
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	429a      	cmp	r2, r3
 800763a:	d004      	beq.n	8007646 <__swbuf_r+0x6e>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	07db      	lsls	r3, r3, #31
 8007640:	d5e1      	bpl.n	8007606 <__swbuf_r+0x2e>
 8007642:	2e0a      	cmp	r6, #10
 8007644:	d1df      	bne.n	8007606 <__swbuf_r+0x2e>
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f7ff ff9d 	bl	8007588 <_fflush_r>
 800764e:	2800      	cmp	r0, #0
 8007650:	d0d9      	beq.n	8007606 <__swbuf_r+0x2e>
 8007652:	e7d6      	b.n	8007602 <__swbuf_r+0x2a>

08007654 <__swsetup_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4b29      	ldr	r3, [pc, #164]	@ (80076fc <__swsetup_r+0xa8>)
 8007658:	4605      	mov	r5, r0
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	460c      	mov	r4, r1
 800765e:	b118      	cbz	r0, 8007668 <__swsetup_r+0x14>
 8007660:	6a03      	ldr	r3, [r0, #32]
 8007662:	b90b      	cbnz	r3, 8007668 <__swsetup_r+0x14>
 8007664:	f7ff fa32 	bl	8006acc <__sinit>
 8007668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766c:	0719      	lsls	r1, r3, #28
 800766e:	d422      	bmi.n	80076b6 <__swsetup_r+0x62>
 8007670:	06da      	lsls	r2, r3, #27
 8007672:	d407      	bmi.n	8007684 <__swsetup_r+0x30>
 8007674:	2209      	movs	r2, #9
 8007676:	602a      	str	r2, [r5, #0]
 8007678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e033      	b.n	80076ec <__swsetup_r+0x98>
 8007684:	0758      	lsls	r0, r3, #29
 8007686:	d512      	bpl.n	80076ae <__swsetup_r+0x5a>
 8007688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800768a:	b141      	cbz	r1, 800769e <__swsetup_r+0x4a>
 800768c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007690:	4299      	cmp	r1, r3
 8007692:	d002      	beq.n	800769a <__swsetup_r+0x46>
 8007694:	4628      	mov	r0, r5
 8007696:	f7ff fb2f 	bl	8006cf8 <_free_r>
 800769a:	2300      	movs	r3, #0
 800769c:	6363      	str	r3, [r4, #52]	@ 0x34
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	2300      	movs	r3, #0
 80076a8:	6063      	str	r3, [r4, #4]
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f043 0308 	orr.w	r3, r3, #8
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	b94b      	cbnz	r3, 80076ce <__swsetup_r+0x7a>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076c4:	d003      	beq.n	80076ce <__swsetup_r+0x7a>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 f85c 	bl	8007786 <__smakebuf_r>
 80076ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d2:	f013 0201 	ands.w	r2, r3, #1
 80076d6:	d00a      	beq.n	80076ee <__swsetup_r+0x9a>
 80076d8:	2200      	movs	r2, #0
 80076da:	60a2      	str	r2, [r4, #8]
 80076dc:	6962      	ldr	r2, [r4, #20]
 80076de:	4252      	negs	r2, r2
 80076e0:	61a2      	str	r2, [r4, #24]
 80076e2:	6922      	ldr	r2, [r4, #16]
 80076e4:	b942      	cbnz	r2, 80076f8 <__swsetup_r+0xa4>
 80076e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076ea:	d1c5      	bne.n	8007678 <__swsetup_r+0x24>
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	0799      	lsls	r1, r3, #30
 80076f0:	bf58      	it	pl
 80076f2:	6962      	ldrpl	r2, [r4, #20]
 80076f4:	60a2      	str	r2, [r4, #8]
 80076f6:	e7f4      	b.n	80076e2 <__swsetup_r+0x8e>
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7f7      	b.n	80076ec <__swsetup_r+0x98>
 80076fc:	200000e4 	.word	0x200000e4

08007700 <_sbrk_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	2300      	movs	r3, #0
 8007704:	4d05      	ldr	r5, [pc, #20]	@ (800771c <_sbrk_r+0x1c>)
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7fb fe06 	bl	800331c <_sbrk>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_sbrk_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_sbrk_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20000494 	.word	0x20000494

08007720 <memchr>:
 8007720:	4603      	mov	r3, r0
 8007722:	b510      	push	{r4, lr}
 8007724:	b2c9      	uxtb	r1, r1
 8007726:	4402      	add	r2, r0
 8007728:	4293      	cmp	r3, r2
 800772a:	4618      	mov	r0, r3
 800772c:	d101      	bne.n	8007732 <memchr+0x12>
 800772e:	2000      	movs	r0, #0
 8007730:	e003      	b.n	800773a <memchr+0x1a>
 8007732:	7804      	ldrb	r4, [r0, #0]
 8007734:	3301      	adds	r3, #1
 8007736:	428c      	cmp	r4, r1
 8007738:	d1f6      	bne.n	8007728 <memchr+0x8>
 800773a:	bd10      	pop	{r4, pc}

0800773c <__swhatbuf_r>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	460c      	mov	r4, r1
 8007740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007744:	4615      	mov	r5, r2
 8007746:	2900      	cmp	r1, #0
 8007748:	461e      	mov	r6, r3
 800774a:	b096      	sub	sp, #88	@ 0x58
 800774c:	da0c      	bge.n	8007768 <__swhatbuf_r+0x2c>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	2100      	movs	r1, #0
 8007752:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007756:	bf14      	ite	ne
 8007758:	2340      	movne	r3, #64	@ 0x40
 800775a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800775e:	2000      	movs	r0, #0
 8007760:	6031      	str	r1, [r6, #0]
 8007762:	602b      	str	r3, [r5, #0]
 8007764:	b016      	add	sp, #88	@ 0x58
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	466a      	mov	r2, sp
 800776a:	f000 f849 	bl	8007800 <_fstat_r>
 800776e:	2800      	cmp	r0, #0
 8007770:	dbed      	blt.n	800774e <__swhatbuf_r+0x12>
 8007772:	9901      	ldr	r1, [sp, #4]
 8007774:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007778:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800777c:	4259      	negs	r1, r3
 800777e:	4159      	adcs	r1, r3
 8007780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007784:	e7eb      	b.n	800775e <__swhatbuf_r+0x22>

08007786 <__smakebuf_r>:
 8007786:	898b      	ldrh	r3, [r1, #12]
 8007788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800778a:	079d      	lsls	r5, r3, #30
 800778c:	4606      	mov	r6, r0
 800778e:	460c      	mov	r4, r1
 8007790:	d507      	bpl.n	80077a2 <__smakebuf_r+0x1c>
 8007792:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	2301      	movs	r3, #1
 800779c:	6163      	str	r3, [r4, #20]
 800779e:	b003      	add	sp, #12
 80077a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a2:	466a      	mov	r2, sp
 80077a4:	ab01      	add	r3, sp, #4
 80077a6:	f7ff ffc9 	bl	800773c <__swhatbuf_r>
 80077aa:	9f00      	ldr	r7, [sp, #0]
 80077ac:	4605      	mov	r5, r0
 80077ae:	4639      	mov	r1, r7
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff fb0b 	bl	8006dcc <_malloc_r>
 80077b6:	b948      	cbnz	r0, 80077cc <__smakebuf_r+0x46>
 80077b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077bc:	059a      	lsls	r2, r3, #22
 80077be:	d4ee      	bmi.n	800779e <__smakebuf_r+0x18>
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	f043 0302 	orr.w	r3, r3, #2
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	e7e2      	b.n	8007792 <__smakebuf_r+0xc>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	9b01      	ldr	r3, [sp, #4]
 80077da:	6020      	str	r0, [r4, #0]
 80077dc:	b15b      	cbz	r3, 80077f6 <__smakebuf_r+0x70>
 80077de:	4630      	mov	r0, r6
 80077e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e4:	f000 f81e 	bl	8007824 <_isatty_r>
 80077e8:	b128      	cbz	r0, 80077f6 <__smakebuf_r+0x70>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	f023 0303 	bic.w	r3, r3, #3
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	81a3      	strh	r3, [r4, #12]
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	431d      	orrs	r5, r3
 80077fa:	81a5      	strh	r5, [r4, #12]
 80077fc:	e7cf      	b.n	800779e <__smakebuf_r+0x18>
	...

08007800 <_fstat_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	2300      	movs	r3, #0
 8007804:	4d06      	ldr	r5, [pc, #24]	@ (8007820 <_fstat_r+0x20>)
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	f7fb fd5f 	bl	80032d0 <_fstat>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d102      	bne.n	800781c <_fstat_r+0x1c>
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	b103      	cbz	r3, 800781c <_fstat_r+0x1c>
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	bd38      	pop	{r3, r4, r5, pc}
 800781e:	bf00      	nop
 8007820:	20000494 	.word	0x20000494

08007824 <_isatty_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	2300      	movs	r3, #0
 8007828:	4d05      	ldr	r5, [pc, #20]	@ (8007840 <_isatty_r+0x1c>)
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7fb fd5d 	bl	80032ee <_isatty>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_isatty_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_isatty_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20000494 	.word	0x20000494

08007844 <log>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	f000 f835 	bl	80078b8 <__ieee754_log>
 800784e:	4622      	mov	r2, r4
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	462b      	mov	r3, r5
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f9 f93b 	bl	8000ad4 <__aeabi_dcmpun>
 800785e:	b998      	cbnz	r0, 8007888 <log+0x44>
 8007860:	2200      	movs	r2, #0
 8007862:	2300      	movs	r3, #0
 8007864:	4620      	mov	r0, r4
 8007866:	4629      	mov	r1, r5
 8007868:	f7f9 f92a 	bl	8000ac0 <__aeabi_dcmpgt>
 800786c:	b960      	cbnz	r0, 8007888 <log+0x44>
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4620      	mov	r0, r4
 8007874:	4629      	mov	r1, r5
 8007876:	f7f9 f8fb 	bl	8000a70 <__aeabi_dcmpeq>
 800787a:	b140      	cbz	r0, 800788e <log+0x4a>
 800787c:	f7ff fa00 	bl	8006c80 <__errno>
 8007880:	2322      	movs	r3, #34	@ 0x22
 8007882:	2600      	movs	r6, #0
 8007884:	4f06      	ldr	r7, [pc, #24]	@ (80078a0 <log+0x5c>)
 8007886:	6003      	str	r3, [r0, #0]
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788e:	f7ff f9f7 	bl	8006c80 <__errno>
 8007892:	2321      	movs	r3, #33	@ 0x21
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	4803      	ldr	r0, [pc, #12]	@ (80078a4 <log+0x60>)
 8007898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800789c:	f000 b804 	b.w	80078a8 <nan>
 80078a0:	fff00000 	.word	0xfff00000
 80078a4:	080080a5 	.word	0x080080a5

080078a8 <nan>:
 80078a8:	2000      	movs	r0, #0
 80078aa:	4901      	ldr	r1, [pc, #4]	@ (80078b0 <nan+0x8>)
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	7ff80000 	.word	0x7ff80000
 80078b4:	00000000 	.word	0x00000000

080078b8 <__ieee754_log>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	460d      	mov	r5, r1
 80078c6:	b087      	sub	sp, #28
 80078c8:	da24      	bge.n	8007914 <__ieee754_log+0x5c>
 80078ca:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80078ce:	4304      	orrs	r4, r0
 80078d0:	d108      	bne.n	80078e4 <__ieee754_log+0x2c>
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	2000      	movs	r0, #0
 80078d8:	49cb      	ldr	r1, [pc, #812]	@ (8007c08 <__ieee754_log+0x350>)
 80078da:	f7f8 ff8b 	bl	80007f4 <__aeabi_ddiv>
 80078de:	b007      	add	sp, #28
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	2900      	cmp	r1, #0
 80078e6:	da04      	bge.n	80078f2 <__ieee754_log+0x3a>
 80078e8:	f7f8 fca2 	bl	8000230 <__aeabi_dsub>
 80078ec:	2200      	movs	r2, #0
 80078ee:	2300      	movs	r3, #0
 80078f0:	e7f3      	b.n	80078da <__ieee754_log+0x22>
 80078f2:	2200      	movs	r2, #0
 80078f4:	4bc5      	ldr	r3, [pc, #788]	@ (8007c0c <__ieee754_log+0x354>)
 80078f6:	f7f8 fe53 	bl	80005a0 <__aeabi_dmul>
 80078fa:	460b      	mov	r3, r1
 80078fc:	460d      	mov	r5, r1
 80078fe:	4602      	mov	r2, r0
 8007900:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8007904:	48c2      	ldr	r0, [pc, #776]	@ (8007c10 <__ieee754_log+0x358>)
 8007906:	4285      	cmp	r5, r0
 8007908:	dd06      	ble.n	8007918 <__ieee754_log+0x60>
 800790a:	4610      	mov	r0, r2
 800790c:	4619      	mov	r1, r3
 800790e:	f7f8 fc91 	bl	8000234 <__adddf3>
 8007912:	e7e4      	b.n	80078de <__ieee754_log+0x26>
 8007914:	2100      	movs	r1, #0
 8007916:	e7f5      	b.n	8007904 <__ieee754_log+0x4c>
 8007918:	152c      	asrs	r4, r5, #20
 800791a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800791e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007922:	440c      	add	r4, r1
 8007924:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8007928:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800792c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8007930:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8007934:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8007938:	ea41 0305 	orr.w	r3, r1, r5
 800793c:	4610      	mov	r0, r2
 800793e:	4619      	mov	r1, r3
 8007940:	2200      	movs	r2, #0
 8007942:	4bb4      	ldr	r3, [pc, #720]	@ (8007c14 <__ieee754_log+0x35c>)
 8007944:	f7f8 fc74 	bl	8000230 <__aeabi_dsub>
 8007948:	1cab      	adds	r3, r5, #2
 800794a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800794e:	2b02      	cmp	r3, #2
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800795c:	dc53      	bgt.n	8007a06 <__ieee754_log+0x14e>
 800795e:	2300      	movs	r3, #0
 8007960:	f7f9 f886 	bl	8000a70 <__aeabi_dcmpeq>
 8007964:	b1d0      	cbz	r0, 800799c <__ieee754_log+0xe4>
 8007966:	2c00      	cmp	r4, #0
 8007968:	f000 8120 	beq.w	8007bac <__ieee754_log+0x2f4>
 800796c:	4620      	mov	r0, r4
 800796e:	f7f8 fdad 	bl	80004cc <__aeabi_i2d>
 8007972:	a391      	add	r3, pc, #580	@ (adr r3, 8007bb8 <__ieee754_log+0x300>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	f7f8 fe10 	bl	80005a0 <__aeabi_dmul>
 8007980:	a38f      	add	r3, pc, #572	@ (adr r3, 8007bc0 <__ieee754_log+0x308>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	4604      	mov	r4, r0
 8007988:	460d      	mov	r5, r1
 800798a:	4630      	mov	r0, r6
 800798c:	4639      	mov	r1, r7
 800798e:	f7f8 fe07 	bl	80005a0 <__aeabi_dmul>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4620      	mov	r0, r4
 8007998:	4629      	mov	r1, r5
 800799a:	e7b8      	b.n	800790e <__ieee754_log+0x56>
 800799c:	a38a      	add	r3, pc, #552	@ (adr r3, 8007bc8 <__ieee754_log+0x310>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	4650      	mov	r0, sl
 80079a4:	4659      	mov	r1, fp
 80079a6:	f7f8 fdfb 	bl	80005a0 <__aeabi_dmul>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	2000      	movs	r0, #0
 80079b0:	4999      	ldr	r1, [pc, #612]	@ (8007c18 <__ieee754_log+0x360>)
 80079b2:	f7f8 fc3d 	bl	8000230 <__aeabi_dsub>
 80079b6:	4652      	mov	r2, sl
 80079b8:	4606      	mov	r6, r0
 80079ba:	460f      	mov	r7, r1
 80079bc:	465b      	mov	r3, fp
 80079be:	4650      	mov	r0, sl
 80079c0:	4659      	mov	r1, fp
 80079c2:	f7f8 fded 	bl	80005a0 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fde7 	bl	80005a0 <__aeabi_dmul>
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	b914      	cbnz	r4, 80079de <__ieee754_log+0x126>
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	e0a0      	b.n	8007b20 <__ieee754_log+0x268>
 80079de:	4620      	mov	r0, r4
 80079e0:	f7f8 fd74 	bl	80004cc <__aeabi_i2d>
 80079e4:	a374      	add	r3, pc, #464	@ (adr r3, 8007bb8 <__ieee754_log+0x300>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	4680      	mov	r8, r0
 80079ec:	4689      	mov	r9, r1
 80079ee:	f7f8 fdd7 	bl	80005a0 <__aeabi_dmul>
 80079f2:	a373      	add	r3, pc, #460	@ (adr r3, 8007bc0 <__ieee754_log+0x308>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	4604      	mov	r4, r0
 80079fa:	460d      	mov	r5, r1
 80079fc:	4640      	mov	r0, r8
 80079fe:	4649      	mov	r1, r9
 8007a00:	f7f8 fdce 	bl	80005a0 <__aeabi_dmul>
 8007a04:	e0a5      	b.n	8007b52 <__ieee754_log+0x29a>
 8007a06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a0a:	f7f8 fc13 	bl	8000234 <__adddf3>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4650      	mov	r0, sl
 8007a14:	4659      	mov	r1, fp
 8007a16:	f7f8 feed 	bl	80007f4 <__aeabi_ddiv>
 8007a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7f8 fd54 	bl	80004cc <__aeabi_i2d>
 8007a24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	f7f8 fdb6 	bl	80005a0 <__aeabi_dmul>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a3c:	f7f8 fdb0 	bl	80005a0 <__aeabi_dmul>
 8007a40:	a363      	add	r3, pc, #396	@ (adr r3, 8007bd0 <__ieee754_log+0x318>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	4680      	mov	r8, r0
 8007a48:	4689      	mov	r9, r1
 8007a4a:	f7f8 fda9 	bl	80005a0 <__aeabi_dmul>
 8007a4e:	a362      	add	r3, pc, #392	@ (adr r3, 8007bd8 <__ieee754_log+0x320>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fbee 	bl	8000234 <__adddf3>
 8007a58:	4642      	mov	r2, r8
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	f7f8 fda0 	bl	80005a0 <__aeabi_dmul>
 8007a60:	a35f      	add	r3, pc, #380	@ (adr r3, 8007be0 <__ieee754_log+0x328>)
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f7f8 fbe5 	bl	8000234 <__adddf3>
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	f7f8 fd97 	bl	80005a0 <__aeabi_dmul>
 8007a72:	a35d      	add	r3, pc, #372	@ (adr r3, 8007be8 <__ieee754_log+0x330>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f7f8 fbdc 	bl	8000234 <__adddf3>
 8007a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a80:	f7f8 fd8e 	bl	80005a0 <__aeabi_dmul>
 8007a84:	a35a      	add	r3, pc, #360	@ (adr r3, 8007bf0 <__ieee754_log+0x338>)
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8e:	4640      	mov	r0, r8
 8007a90:	4649      	mov	r1, r9
 8007a92:	f7f8 fd85 	bl	80005a0 <__aeabi_dmul>
 8007a96:	a358      	add	r3, pc, #352	@ (adr r3, 8007bf8 <__ieee754_log+0x340>)
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f7f8 fbca 	bl	8000234 <__adddf3>
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	f7f8 fd7c 	bl	80005a0 <__aeabi_dmul>
 8007aa8:	a355      	add	r3, pc, #340	@ (adr r3, 8007c00 <__ieee754_log+0x348>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f8 fbc1 	bl	8000234 <__adddf3>
 8007ab2:	4642      	mov	r2, r8
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	f7f8 fd73 	bl	80005a0 <__aeabi_dmul>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac2:	f7f8 fbb7 	bl	8000234 <__adddf3>
 8007ac6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8007aca:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8007ace:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007ad2:	3551      	adds	r5, #81	@ 0x51
 8007ad4:	4335      	orrs	r5, r6
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	4680      	mov	r8, r0
 8007ada:	4689      	mov	r9, r1
 8007adc:	dd48      	ble.n	8007b70 <__ieee754_log+0x2b8>
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8007c18 <__ieee754_log+0x360>)
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	f7f8 fd5b 	bl	80005a0 <__aeabi_dmul>
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	f7f8 fd57 	bl	80005a0 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	f7f8 fb99 	bl	8000234 <__adddf3>
 8007b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b06:	f7f8 fd4b 	bl	80005a0 <__aeabi_dmul>
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	b964      	cbnz	r4, 8007b2a <__ieee754_log+0x272>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fb8a 	bl	8000230 <__aeabi_dsub>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4650      	mov	r0, sl
 8007b22:	4659      	mov	r1, fp
 8007b24:	f7f8 fb84 	bl	8000230 <__aeabi_dsub>
 8007b28:	e6d9      	b.n	80078de <__ieee754_log+0x26>
 8007b2a:	a323      	add	r3, pc, #140	@ (adr r3, 8007bb8 <__ieee754_log+0x300>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b34:	f7f8 fd34 	bl	80005a0 <__aeabi_dmul>
 8007b38:	a321      	add	r3, pc, #132	@ (adr r3, 8007bc0 <__ieee754_log+0x308>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b46:	f7f8 fd2b 	bl	80005a0 <__aeabi_dmul>
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	f7f8 fb71 	bl	8000234 <__adddf3>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4630      	mov	r0, r6
 8007b58:	4639      	mov	r1, r7
 8007b5a:	f7f8 fb69 	bl	8000230 <__aeabi_dsub>
 8007b5e:	4652      	mov	r2, sl
 8007b60:	465b      	mov	r3, fp
 8007b62:	f7f8 fb65 	bl	8000230 <__aeabi_dsub>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	e7d9      	b.n	8007b24 <__ieee754_log+0x26c>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4650      	mov	r0, sl
 8007b76:	4659      	mov	r1, fp
 8007b78:	f7f8 fb5a 	bl	8000230 <__aeabi_dsub>
 8007b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b80:	f7f8 fd0e 	bl	80005a0 <__aeabi_dmul>
 8007b84:	4606      	mov	r6, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	2c00      	cmp	r4, #0
 8007b8a:	f43f af25 	beq.w	80079d8 <__ieee754_log+0x120>
 8007b8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007bb8 <__ieee754_log+0x300>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b98:	f7f8 fd02 	bl	80005a0 <__aeabi_dmul>
 8007b9c:	a308      	add	r3, pc, #32	@ (adr r3, 8007bc0 <__ieee754_log+0x308>)
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007baa:	e729      	b.n	8007a00 <__ieee754_log+0x148>
 8007bac:	2000      	movs	r0, #0
 8007bae:	2100      	movs	r1, #0
 8007bb0:	e695      	b.n	80078de <__ieee754_log+0x26>
 8007bb2:	bf00      	nop
 8007bb4:	f3af 8000 	nop.w
 8007bb8:	fee00000 	.word	0xfee00000
 8007bbc:	3fe62e42 	.word	0x3fe62e42
 8007bc0:	35793c76 	.word	0x35793c76
 8007bc4:	3dea39ef 	.word	0x3dea39ef
 8007bc8:	55555555 	.word	0x55555555
 8007bcc:	3fd55555 	.word	0x3fd55555
 8007bd0:	df3e5244 	.word	0xdf3e5244
 8007bd4:	3fc2f112 	.word	0x3fc2f112
 8007bd8:	96cb03de 	.word	0x96cb03de
 8007bdc:	3fc74664 	.word	0x3fc74664
 8007be0:	94229359 	.word	0x94229359
 8007be4:	3fd24924 	.word	0x3fd24924
 8007be8:	55555593 	.word	0x55555593
 8007bec:	3fe55555 	.word	0x3fe55555
 8007bf0:	d078c69f 	.word	0xd078c69f
 8007bf4:	3fc39a09 	.word	0x3fc39a09
 8007bf8:	1d8e78af 	.word	0x1d8e78af
 8007bfc:	3fcc71c5 	.word	0x3fcc71c5
 8007c00:	9997fa04 	.word	0x9997fa04
 8007c04:	3fd99999 	.word	0x3fd99999
 8007c08:	c3500000 	.word	0xc3500000
 8007c0c:	43500000 	.word	0x43500000
 8007c10:	7fefffff 	.word	0x7fefffff
 8007c14:	3ff00000 	.word	0x3ff00000
 8007c18:	3fe00000 	.word	0x3fe00000

08007c1c <_init>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr

08007c28 <_fini>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr
