
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00007b84  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007d6c  08007d6c  00008d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d4  080081d4  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000008  080081d4  080081d4  000091d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081dc  080081dc  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081dc  080081dc  000091dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e0  080081e0  000091e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080081e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200000c8  080082ac  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080082ac  0000a4e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001457c  00000000  00000000  0000a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398d  00000000  00000000  0001e66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00022000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edf  00000000  00000000  00023340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021919  00000000  00000000  0002421f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b8a  00000000  00000000  00045b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bde88  00000000  00000000  0005f6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d54a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005380  00000000  00000000  0011d590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00122910  2**0
=======
  1 .text         000077dc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e0c  08007e0c  000090c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e14  08007e14  000090c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00008e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e18  08007e18  00008e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007e1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200000c8  08007ee4  000090c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08007ee4  00009530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146f1  00000000  00000000  000090f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036eb  00000000  00000000  0001d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec6  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f8  00000000  00000000  000230ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b14  00000000  00000000  000445a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdc62  00000000  00000000  0005d0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ad1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  0011ad60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001200a8  2**0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c8 	.word	0x200000c8
 8000204:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000208:	08007d54 	.word	0x08007d54
=======
 8000208:	080079ac 	.word	0x080079ac
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000cc 	.word	0x200000cc
<<<<<<< HEAD
 8000224:	08007d54 	.word	0x08007d54
=======
 8000224:	080079ac 	.word	0x080079ac
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	@ 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	@ 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	@ 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b968 	b.w	8001384 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9d08      	ldr	r5, [sp, #32]
 80010d2:	460c      	mov	r4, r1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d14e      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010d8:	4694      	mov	ip, r2
 80010da:	458c      	cmp	ip, r1
 80010dc:	4686      	mov	lr, r0
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	d962      	bls.n	80011aa <__udivmoddi4+0xde>
 80010e4:	b14a      	cbz	r2, 80010fa <__udivmoddi4+0x2e>
 80010e6:	f1c2 0320 	rsb	r3, r2, #32
 80010ea:	4091      	lsls	r1, r2
 80010ec:	fa20 f303 	lsr.w	r3, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	4319      	orrs	r1, r3
 80010f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8001102:	fb07 1114 	mls	r1, r7, r4, r1
 8001106:	fa1f f68c 	uxth.w	r6, ip
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001112:	fb04 f106 	mul.w	r1, r4, r6
 8001116:	4299      	cmp	r1, r3
 8001118:	d90a      	bls.n	8001130 <__udivmoddi4+0x64>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001122:	f080 8110 	bcs.w	8001346 <__udivmoddi4+0x27a>
 8001126:	4299      	cmp	r1, r3
 8001128:	f240 810d 	bls.w	8001346 <__udivmoddi4+0x27a>
 800112c:	3c02      	subs	r4, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a59      	subs	r1, r3, r1
 8001132:	fbb1 f0f7 	udiv	r0, r1, r7
 8001136:	fb07 1110 	mls	r1, r7, r0, r1
 800113a:	fb00 f606 	mul.w	r6, r0, r6
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	429e      	cmp	r6, r3
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001152:	f080 80fa 	bcs.w	800134a <__udivmoddi4+0x27e>
 8001156:	429e      	cmp	r6, r3
 8001158:	f240 80f7 	bls.w	800134a <__udivmoddi4+0x27e>
 800115c:	4463      	add	r3, ip
 800115e:	3802      	subs	r0, #2
 8001160:	2100      	movs	r1, #0
 8001162:	1b9b      	subs	r3, r3, r6
 8001164:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001168:	b11d      	cbz	r5, 8001172 <__udivmoddi4+0xa6>
 800116a:	40d3      	lsrs	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	e9c5 3200 	strd	r3, r2, [r5]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d905      	bls.n	8001186 <__udivmoddi4+0xba>
 800117a:	b10d      	cbz	r5, 8001180 <__udivmoddi4+0xb4>
 800117c:	e9c5 0100 	strd	r0, r1, [r5]
 8001180:	2100      	movs	r1, #0
 8001182:	4608      	mov	r0, r1
 8001184:	e7f5      	b.n	8001172 <__udivmoddi4+0xa6>
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d146      	bne.n	800121c <__udivmoddi4+0x150>
 800118e:	42a3      	cmp	r3, r4
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xcc>
 8001192:	4290      	cmp	r0, r2
 8001194:	f0c0 80ee 	bcc.w	8001374 <__udivmoddi4+0x2a8>
 8001198:	1a86      	subs	r6, r0, r2
 800119a:	eb64 0303 	sbc.w	r3, r4, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d0e6      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011a4:	e9c5 6300 	strd	r6, r3, [r5]
 80011a8:	e7e3      	b.n	8001172 <__udivmoddi4+0xa6>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	f040 808f 	bne.w	80012ce <__udivmoddi4+0x202>
 80011b0:	eba1 040c 	sub.w	r4, r1, ip
 80011b4:	2101      	movs	r1, #1
 80011b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ba:	fa1f f78c 	uxth.w	r7, ip
 80011be:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c2:	fb08 4416 	mls	r4, r8, r6, r4
 80011c6:	fb07 f006 	mul.w	r0, r7, r6
 80011ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d908      	bls.n	80011e8 <__udivmoddi4+0x11c>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f106 34ff 	add.w	r4, r6, #4294967295
 80011de:	d202      	bcs.n	80011e6 <__udivmoddi4+0x11a>
 80011e0:	4298      	cmp	r0, r3
 80011e2:	f200 80cb 	bhi.w	800137c <__udivmoddi4+0x2b0>
 80011e6:	4626      	mov	r6, r4
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80011ee:	fb08 4410 	mls	r4, r8, r0, r4
 80011f2:	fb00 f707 	mul.w	r7, r0, r7
 80011f6:	fa1f f38e 	uxth.w	r3, lr
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	429f      	cmp	r7, r3
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x148>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 34ff 	add.w	r4, r0, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x146>
 800120c:	429f      	cmp	r7, r3
 800120e:	f200 80ae 	bhi.w	800136e <__udivmoddi4+0x2a2>
 8001212:	4620      	mov	r0, r4
 8001214:	1bdb      	subs	r3, r3, r7
 8001216:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121a:	e7a5      	b.n	8001168 <__udivmoddi4+0x9c>
 800121c:	f1c1 0720 	rsb	r7, r1, #32
 8001220:	408b      	lsls	r3, r1
 8001222:	fa22 fc07 	lsr.w	ip, r2, r7
 8001226:	ea4c 0c03 	orr.w	ip, ip, r3
 800122a:	fa24 f607 	lsr.w	r6, r4, r7
 800122e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001232:	fbb6 f8f9 	udiv	r8, r6, r9
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	fb09 6618 	mls	r6, r9, r8, r6
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	408c      	lsls	r4, r1
 8001244:	fa00 fa01 	lsl.w	sl, r0, r1
 8001248:	fb08 f00e 	mul.w	r0, r8, lr
 800124c:	431c      	orrs	r4, r3
 800124e:	0c23      	lsrs	r3, r4, #16
 8001250:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001254:	4298      	cmp	r0, r3
 8001256:	fa02 f201 	lsl.w	r2, r2, r1
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x1a6>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f108 36ff 	add.w	r6, r8, #4294967295
 8001264:	f080 8081 	bcs.w	800136a <__udivmoddi4+0x29e>
 8001268:	4298      	cmp	r0, r3
 800126a:	d97e      	bls.n	800136a <__udivmoddi4+0x29e>
 800126c:	f1a8 0802 	sub.w	r8, r8, #2
 8001270:	4463      	add	r3, ip
 8001272:	1a1e      	subs	r6, r3, r0
 8001274:	fbb6 f3f9 	udiv	r3, r6, r9
 8001278:	fb09 6613 	mls	r6, r9, r3, r6
 800127c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001286:	45a6      	cmp	lr, r4
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x1d0>
 800128a:	eb1c 0404 	adds.w	r4, ip, r4
 800128e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001292:	d266      	bcs.n	8001362 <__udivmoddi4+0x296>
 8001294:	45a6      	cmp	lr, r4
 8001296:	d964      	bls.n	8001362 <__udivmoddi4+0x296>
 8001298:	3b02      	subs	r3, #2
 800129a:	4464      	add	r4, ip
 800129c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a0:	fba0 8302 	umull	r8, r3, r0, r2
 80012a4:	eba4 040e 	sub.w	r4, r4, lr
 80012a8:	429c      	cmp	r4, r3
 80012aa:	46c6      	mov	lr, r8
 80012ac:	461e      	mov	r6, r3
 80012ae:	d350      	bcc.n	8001352 <__udivmoddi4+0x286>
 80012b0:	d04d      	beq.n	800134e <__udivmoddi4+0x282>
 80012b2:	b155      	cbz	r5, 80012ca <__udivmoddi4+0x1fe>
 80012b4:	ebba 030e 	subs.w	r3, sl, lr
 80012b8:	eb64 0406 	sbc.w	r4, r4, r6
 80012bc:	fa04 f707 	lsl.w	r7, r4, r7
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	40cc      	lsrs	r4, r1
 80012c6:	e9c5 7400 	strd	r7, r4, [r5]
 80012ca:	2100      	movs	r1, #0
 80012cc:	e751      	b.n	8001172 <__udivmoddi4+0xa6>
 80012ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d2:	f1c2 0320 	rsb	r3, r2, #32
 80012d6:	40d9      	lsrs	r1, r3
 80012d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012dc:	fa20 f303 	lsr.w	r3, r0, r3
 80012e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e8:	fb08 1110 	mls	r1, r8, r0, r1
 80012ec:	4094      	lsls	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	0c23      	lsrs	r3, r4, #16
 80012f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012fa:	fb00 f107 	mul.w	r1, r0, r7
 80012fe:	4299      	cmp	r1, r3
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x248>
 8001302:	eb1c 0303 	adds.w	r3, ip, r3
 8001306:	f100 36ff 	add.w	r6, r0, #4294967295
 800130a:	d22c      	bcs.n	8001366 <__udivmoddi4+0x29a>
 800130c:	4299      	cmp	r1, r3
 800130e:	d92a      	bls.n	8001366 <__udivmoddi4+0x29a>
 8001310:	3802      	subs	r0, #2
 8001312:	4463      	add	r3, ip
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	fbb3 f1f8 	udiv	r1, r3, r8
 800131a:	fb08 3311 	mls	r3, r8, r1, r3
 800131e:	b2a4      	uxth	r4, r4
 8001320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001324:	fb01 f307 	mul.w	r3, r1, r7
 8001328:	42a3      	cmp	r3, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x272>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f101 36ff 	add.w	r6, r1, #4294967295
 8001334:	d213      	bcs.n	800135e <__udivmoddi4+0x292>
 8001336:	42a3      	cmp	r3, r4
 8001338:	d911      	bls.n	800135e <__udivmoddi4+0x292>
 800133a:	3902      	subs	r1, #2
 800133c:	4464      	add	r4, ip
 800133e:	1ae4      	subs	r4, r4, r3
 8001340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001344:	e73b      	b.n	80011be <__udivmoddi4+0xf2>
 8001346:	4604      	mov	r4, r0
 8001348:	e6f2      	b.n	8001130 <__udivmoddi4+0x64>
 800134a:	4608      	mov	r0, r1
 800134c:	e708      	b.n	8001160 <__udivmoddi4+0x94>
 800134e:	45c2      	cmp	sl, r8
 8001350:	d2af      	bcs.n	80012b2 <__udivmoddi4+0x1e6>
 8001352:	ebb8 0e02 	subs.w	lr, r8, r2
 8001356:	eb63 060c 	sbc.w	r6, r3, ip
 800135a:	3801      	subs	r0, #1
 800135c:	e7a9      	b.n	80012b2 <__udivmoddi4+0x1e6>
 800135e:	4631      	mov	r1, r6
 8001360:	e7ed      	b.n	800133e <__udivmoddi4+0x272>
 8001362:	4603      	mov	r3, r0
 8001364:	e79a      	b.n	800129c <__udivmoddi4+0x1d0>
 8001366:	4630      	mov	r0, r6
 8001368:	e7d4      	b.n	8001314 <__udivmoddi4+0x248>
 800136a:	46b0      	mov	r8, r6
 800136c:	e781      	b.n	8001272 <__udivmoddi4+0x1a6>
 800136e:	4463      	add	r3, ip
 8001370:	3802      	subs	r0, #2
 8001372:	e74f      	b.n	8001214 <__udivmoddi4+0x148>
 8001374:	4606      	mov	r6, r0
 8001376:	4623      	mov	r3, r4
 8001378:	4608      	mov	r0, r1
 800137a:	e711      	b.n	80011a0 <__udivmoddi4+0xd4>
 800137c:	3e02      	subs	r6, #2
 800137e:	4463      	add	r3, ip
 8001380:	e732      	b.n	80011e8 <__udivmoddi4+0x11c>
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800138e:	23ff      	movs	r3, #255	@ 0xff
 8001390:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e00c      	b.n	80013b2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
<<<<<<< HEAD
 8001398:	f001 fdae 	bl	8002ef8 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 800139c:	1cf9      	adds	r1, r7, #3
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Wakeup_Idle+0x3c>)
 80013a4:	f004 fe3e 	bl	8006024 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013a8:	f001 fd9a 	bl	8002ee0 <LTC_nCS_High>
=======
 8001398:	f001 fa22 	bl	80027e0 <LTC_nCS_Low>
		HAL_SPI_Transmit_DMA(&hspi1, &hex_ff, 1); // Send byte 0xFF to wake LTC up
 800139c:	1cfb      	adds	r3, r7, #3
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Wakeup_Idle+0x3c>)
 80013a4:	f004 fb64 	bl	8005a70 <HAL_SPI_Transmit_DMA>
		LTC_nCS_High();							   // Pull CS high
 80013a8:	f001 fa0e 	bl	80027c8 <LTC_nCS_High>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	ddef      	ble.n	8001398 <Wakeup_Idle+0x10>
	}
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
<<<<<<< HEAD
 80013c4:	200001f4 	.word	0x200001f4
=======
 80013c4:	200001fc 	.word	0x200001fc
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

080013c8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e00c      	b.n	80013ee <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
<<<<<<< HEAD
 80013d4:	f001 fd90 	bl	8002ef8 <LTC_nCS_Low>
		HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 ffcb 	bl	8003374 <HAL_Delay>
		LTC_nCS_High();
 80013de:	f001 fd7f 	bl	8002ee0 <LTC_nCS_High>
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 ffc6 	bl	8003374 <HAL_Delay>
=======
 80013d4:	f001 fa04 	bl	80027e0 <LTC_nCS_Low>
		HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 fca5 	bl	8002d28 <HAL_Delay>
		LTC_nCS_High();
 80013de:	f001 f9f3 	bl	80027c8 <LTC_nCS_High>
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 fca0 	bl	8002d28 <HAL_Delay>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	ddef      	ble.n	80013d4 <Wakeup_Sleep+0xc>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b089      	sub	sp, #36	@ 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	466b      	mov	r3, sp
 800140c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001416:	7f3b      	ldrb	r3, [r7, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	7f3b      	ldrb	r3, [r7, #28]
 800141e:	2200      	movs	r2, #0
 8001420:	4698      	mov	r8, r3
 8001422:	4691      	mov	r9, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	2200      	movs	r2, #0
 800143c:	461c      	mov	r4, r3
 800143e:	4615      	mov	r5, r2
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	00eb      	lsls	r3, r5, #3
 800144a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144e:	00e2      	lsls	r2, r4, #3
 8001450:	7f3b      	ldrb	r3, [r7, #28]
 8001452:	3307      	adds	r3, #7
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	ebad 0d03 	sub.w	sp, sp, r3
 800145c:	466b      	mov	r3, sp
 800145e:	3300      	adds	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001462:	2300      	movs	r3, #0
 8001464:	77bb      	strb	r3, [r7, #30]
 8001466:	e074      	b.n	8001552 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001468:	7fbb      	ldrb	r3, [r7, #30]
 800146a:	4a3f      	ldr	r2, [pc, #252]	@ (8001568 <Read_Cell_Volt+0x168>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	2002      	movs	r0, #2
<<<<<<< HEAD
 800148c:	f000 faa2 	bl	80019d4 <LTC_Pec15_Calc>
=======
 800148c:	f000 faa0 	bl	80019d0 <LTC_Pec15_Calc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014a4:	f7ff ff70 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
<<<<<<< HEAD
 80014a8:	f001 fd26 	bl	8002ef8 <LTC_nCS_Low>
=======
 80014a8:	f001 f99a 	bl	80027e0 <LTC_nCS_Low>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

		hal_ret = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) cmd, 4);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	482d      	ldr	r0, [pc, #180]	@ (800156c <Read_Cell_Volt+0x16c>)
<<<<<<< HEAD
 80014b6:	f004 fdb5 	bl	8006024 <HAL_SPI_Transmit>
=======
 80014b6:	f004 fadb 	bl	8005a70 <HAL_SPI_Transmit_DMA>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 80014ba:	4603      	mov	r3, r0
 80014bc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014be:	7c7b      	ldrb	r3, [r7, #17]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014c4:	7c7b      	ldrb	r3, [r7, #17]
 80014c6:	2201      	movs	r2, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) read_voltages_reg,
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	4822      	ldr	r0, [pc, #136]	@ (800156c <Read_Cell_Volt+0x16c>)
<<<<<<< HEAD
 80014e2:	f004 fee3 	bl	80062ac <HAL_SPI_Receive>
=======
 80014e2:	f004 fb77 	bl	8005bd4 <HAL_SPI_Receive_DMA>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 80014e6:	4603      	mov	r3, r0
 80014e8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG);
		if (hal_ret) {									// Non-zero means error
 80014ea:	7c7b      	ldrb	r3, [r7, #17]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80014f0:	7c7b      	ldrb	r3, [r7, #17]
 80014f2:	3304      	adds	r3, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
<<<<<<< HEAD
 8001506:	f001 fceb 	bl	8002ee0 <LTC_nCS_High>
=======
 8001506:	f001 f95f 	bl	80027c8 <LTC_nCS_High>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800150a:	2300      	movs	r3, #0
 800150c:	777b      	strb	r3, [r7, #29]
 800150e:	e01a      	b.n	8001546 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800151a:	7f7a      	ldrb	r2, [r7, #29]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001526:	7fba      	ldrb	r2, [r7, #30]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
			memcpy(
 8001536:	2206      	movs	r2, #6
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800153c:	f006 fa10 	bl	8007960 <memcpy>
=======
 800153c:	f006 f83e 	bl	80075bc <memcpy>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001540:	7f7b      	ldrb	r3, [r7, #29]
 8001542:	3301      	adds	r3, #1
 8001544:	777b      	strb	r3, [r7, #29]
 8001546:	7f7b      	ldrb	r3, [r7, #29]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d9e1      	bls.n	8001510 <Read_Cell_Volt+0x110>
			i++) {
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	3301      	adds	r3, #1
 8001550:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001552:	7fbb      	ldrb	r3, [r7, #30]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d987      	bls.n	8001468 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	46b5      	mov	sp, r6
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	@ 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001566:	bf00      	nop
<<<<<<< HEAD
 8001568:	08007d6c 	.word	0x08007d6c
 800156c:	200001f4 	.word	0x200001f4
=======
 8001568:	080079c4 	.word	0x080079c4
 800156c:	200001fc 	.word	0x200001fc
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

08001570 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800157c:	2306      	movs	r3, #6
 800157e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3304      	adds	r3, #4
 8001588:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800158c:	2207      	movs	r2, #7
 800158e:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001592:	2221      	movs	r2, #33	@ 0x21
 8001594:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 8001596:	492b      	ldr	r1, [pc, #172]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001598:	2002      	movs	r0, #2
<<<<<<< HEAD
 800159a:	f000 fa1b 	bl	80019d4 <LTC_Pec15_Calc>
=======
 800159a:	f000 fa19 	bl	80019d0 <LTC_Pec15_Calc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 800159e:	4603      	mov	r3, r0
 80015a0:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015a2:	8a3b      	ldrh	r3, [r7, #16]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015ac:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015b4:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015b6:	2304      	movs	r3, #4
 80015b8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	75bb      	strb	r3, [r7, #22]
 80015be:	e02d      	b.n	800161c <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	757b      	strb	r3, [r7, #21]
 80015c4:	e00c      	b.n	80015e0 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	441a      	add	r2, r3
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015d2:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	3301      	adds	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015da:	7d7b      	ldrb	r3, [r7, #21]
 80015dc:	3301      	adds	r3, #1
 80015de:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015e0:	7d7a      	ldrb	r2, [r7, #21]
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3ee      	bcc.n	80015c6 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015e8:	7d3b      	ldrb	r3, [r7, #20]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	4618      	mov	r0, r3
<<<<<<< HEAD
 80015ee:	f000 f9f1 	bl	80019d4 <LTC_Pec15_Calc>
=======
 80015ee:	f000 f9ef 	bl	80019d0 <LTC_Pec15_Calc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 80015f2:	4603      	mov	r3, r0
 80015f4:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001602:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	3301      	adds	r3, #1
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	b2d1      	uxtb	r1, r2
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800160e:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3302      	adds	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	3b01      	subs	r3, #1
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ce      	bne.n	80015c0 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001622:	f7ff feb1 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
<<<<<<< HEAD
 8001626:	f001 fc67 	bl	8002ef8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 800162a:	7cfb      	ldrb	r3, [r7, #19]
 800162c:	b29a      	uxth	r2, r3
 800162e:	2364      	movs	r3, #100	@ 0x64
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <LTC_WRCOMM+0xd8>)
 8001634:	f004 fcf6 	bl	8006024 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001638:	f001 fc52 	bl	8002ee0 <LTC_nCS_High>
=======
 8001626:	f001 f8db 	bl	80027e0 <LTC_nCS_Low>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN);
 800162a:	7cfb      	ldrb	r3, [r7, #19]
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <LTC_WRCOMM+0xd8>)
 8001634:	f004 fa1c 	bl	8005a70 <HAL_SPI_Transmit_DMA>
	LTC_nCS_High();
 8001638:	f001 f8c6 	bl	80027c8 <LTC_nCS_High>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000e4 	.word	0x200000e4
<<<<<<< HEAD
 8001648:	200001f4 	.word	0x200001f4
=======
 8001648:	200001fc 	.word	0x200001fc
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

0800164c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001656:	2307      	movs	r3, #7
 8001658:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800165a:	2323      	movs	r3, #35	@ 0x23
 800165c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	2002      	movs	r0, #2
<<<<<<< HEAD
 8001666:	f000 f9b5 	bl	80019d4 <LTC_Pec15_Calc>
=======
 8001666:	f000 f9b3 	bl	80019d0 <LTC_Pec15_Calc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 800166a:	4603      	mov	r3, r0
 800166c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800166e:	8a7b      	ldrh	r3, [r7, #18]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800167e:	f7ff fe83 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
<<<<<<< HEAD
 8001682:	f001 fc39 	bl	8002ef8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	2364      	movs	r3, #100	@ 0x64
 800168c:	2204      	movs	r2, #4
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <LTC_STCOMM+0x7c>)
 8001690:	f004 fcc8 	bl	8006024 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e008      	b.n	80016ac <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	21ff      	movs	r1, #255	@ 0xff
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <LTC_STCOMM+0x7c>)
 80016a2:	f004 fcbf 	bl	8006024 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbef      	blt.n	800169a <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ba:	f001 fc11 	bl	8002ee0 <LTC_nCS_High>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001f4 	.word	0x200001f4

080016cc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d0:	b089      	sub	sp, #36	@ 0x24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	466b      	mov	r3, sp
 80016d8:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016de:	2340      	movs	r3, #64	@ 0x40
 80016e0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016e2:	7f3b      	ldrb	r3, [r7, #28]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	7f3b      	ldrb	r3, [r7, #28]
 80016ea:	2200      	movs	r2, #0
 80016ec:	4698      	mov	r8, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001700:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	2200      	movs	r2, #0
 8001708:	461c      	mov	r4, r3
 800170a:	4615      	mov	r5, r2
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	00eb      	lsls	r3, r5, #3
 8001716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171a:	00e2      	lsls	r2, r4, #3
 800171c:	7f3b      	ldrb	r3, [r7, #28]
 800171e:	3307      	adds	r3, #7
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	ebad 0d03 	sub.w	sp, sp, r3
 8001728:	466b      	mov	r3, sp
 800172a:	3300      	adds	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	77bb      	strb	r3, [r7, #30]
 8001732:	e074      	b.n	800181e <Read_Cell_Temps+0x152>
=======
 8001682:	f001 f8ad 	bl	80027e0 <LTC_nCS_Low>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) cmd, 4);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	2204      	movs	r2, #4
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <LTC_STCOMM+0x78>)
 8001690:	f004 f9ee 	bl	8005a70 <HAL_SPI_Transmit_DMA>
	for (int i = 0; i < len * 3; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e007      	b.n	80016aa <LTC_STCOMM+0x5e>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) 0xFF, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	21ff      	movs	r1, #255	@ 0xff
 800169e:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <LTC_STCOMM+0x78>)
 80016a0:	f004 f9e6 	bl	8005a70 <HAL_SPI_Transmit_DMA>
	for (int i = 0; i < len * 3; i++) {
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016b8:	f001 f886 	bl	80027c8 <LTC_nCS_High>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200001fc 	.word	0x200001fc

080016c8 <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016cc:	b089      	sub	sp, #36	@ 0x24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	466b      	mov	r3, sp
 80016d4:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016da:	2340      	movs	r3, #64	@ 0x40
 80016dc:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016de:	7f3b      	ldrb	r3, [r7, #28]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	7f3b      	ldrb	r3, [r7, #28]
 80016e6:	2200      	movs	r2, #0
 80016e8:	4698      	mov	r8, r3
 80016ea:	4691      	mov	r9, r2
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001700:	7f3b      	ldrb	r3, [r7, #28]
 8001702:	2200      	movs	r2, #0
 8001704:	461c      	mov	r4, r3
 8001706:	4615      	mov	r5, r2
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	00eb      	lsls	r3, r5, #3
 8001712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001716:	00e2      	lsls	r2, r4, #3
 8001718:	7f3b      	ldrb	r3, [r7, #28]
 800171a:	3307      	adds	r3, #7
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	ebad 0d03 	sub.w	sp, sp, r3
 8001724:	466b      	mov	r3, sp
 8001726:	3300      	adds	r3, #0
 8001728:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	77bb      	strb	r3, [r7, #30]
 800172e:	e074      	b.n	800181a <Read_Cell_Temps+0x152>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
<<<<<<< HEAD
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f93c 	bl	80019d4 <LTC_Pec15_Calc>
 800175c:	4603      	mov	r3, r0
 800175e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001760:	8a7b      	ldrh	r3, [r7, #18]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001770:	f7ff fe0a 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001774:	f001 fbc0 	bl	8002ef8 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	2364      	movs	r3, #100	@ 0x64
 800177e:	2204      	movs	r2, #4
 8001780:	482d      	ldr	r0, [pc, #180]	@ (8001838 <Read_Cell_Temps+0x16c>)
 8001782:	f004 fc4f 	bl	8006024 <HAL_SPI_Transmit>
 8001786:	4603      	mov	r3, r0
 8001788:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800178a:	7c7b      	ldrb	r3, [r7, #17]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001790:	7c7b      	ldrb	r3, [r7, #17]
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	b25a      	sxtb	r2, r3
 800179a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017a4:	7f3b      	ldrb	r3, [r7, #28]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	4822      	ldr	r0, [pc, #136]	@ (8001838 <Read_Cell_Temps+0x16c>)
 80017ae:	f004 fd7d 	bl	80062ac <HAL_SPI_Receive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017b6:	7c7b      	ldrb	r3, [r7, #17]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017bc:	7c7b      	ldrb	r3, [r7, #17]
 80017be:	3304      	adds	r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017d2:	f001 fb85 	bl	8002ee0 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	777b      	strb	r3, [r7, #29]
 80017da:	e01a      	b.n	8001812 <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017dc:	7f7b      	ldrb	r3, [r7, #29]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017e6:	7f7a      	ldrb	r2, [r7, #29]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80017f2:	7fba      	ldrb	r2, [r7, #30]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
			memcpy(
 8001802:	2206      	movs	r2, #6
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f006 f8aa 	bl	8007960 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	3301      	adds	r3, #1
 8001810:	777b      	strb	r3, [r7, #29]
 8001812:	7f7b      	ldrb	r3, [r7, #29]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d9e1      	bls.n	80017dc <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001818:	7fbb      	ldrb	r3, [r7, #30]
 800181a:	3301      	adds	r3, #1
 800181c:	77bb      	strb	r3, [r7, #30]
 800181e:	7fbb      	ldrb	r3, [r7, #30]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d987      	bls.n	8001734 <Read_Cell_Temps+0x68>
=======
 8001730:	7fbb      	ldrb	r3, [r7, #30]
 8001732:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <Read_Cell_Temps+0x168>)
 8001734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001740:	7fbb      	ldrb	r3, [r7, #30]
 8001742:	4a3b      	ldr	r2, [pc, #236]	@ (8001830 <Read_Cell_Temps+0x168>)
 8001744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	2002      	movs	r0, #2
 8001754:	f000 f93c 	bl	80019d0 <LTC_Pec15_Calc>
 8001758:	4603      	mov	r3, r0
 800175a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800175c:	8a7b      	ldrh	r3, [r7, #18]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8001766:	8a7b      	ldrh	r3, [r7, #18]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 800176c:	f7ff fe0c 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001770:	f001 f836 	bl	80027e0 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) cmd, 4);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	2204      	movs	r2, #4
 800177a:	4619      	mov	r1, r3
 800177c:	482d      	ldr	r0, [pc, #180]	@ (8001834 <Read_Cell_Temps+0x16c>)
 800177e:	f004 f977 	bl	8005a70 <HAL_SPI_Transmit_DMA>
 8001782:	4603      	mov	r3, r0
 8001784:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 8001786:	7c7b      	ldrb	r3, [r7, #17]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d009      	beq.n	80017a0 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 800178c:	7c7b      	ldrb	r3, [r7, #17]
 800178e:	2201      	movs	r2, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	b25a      	sxtb	r2, r3
 8001796:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800179a:	4313      	orrs	r3, r2
 800179c:	b25b      	sxtb	r3, r3
 800179e:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017a0:	7f3b      	ldrb	r3, [r7, #28]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	4822      	ldr	r0, [pc, #136]	@ (8001834 <Read_Cell_Temps+0x16c>)
 80017aa:	f004 fa13 	bl	8005bd4 <HAL_SPI_Receive_DMA>
 80017ae:	4603      	mov	r3, r0
 80017b0:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG);
		if (hal_ret) {									// Non-zero means error
 80017b2:	7c7b      	ldrb	r3, [r7, #17]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00a      	beq.n	80017ce <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017b8:	7c7b      	ldrb	r3, [r7, #17]
 80017ba:	3304      	adds	r3, #4
 80017bc:	2201      	movs	r2, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017ce:	f000 fffb 	bl	80027c8 <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	777b      	strb	r3, [r7, #29]
 80017d6:	e01a      	b.n	800180e <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017d8:	7f7b      	ldrb	r3, [r7, #29]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017e2:	7f7a      	ldrb	r2, [r7, #29]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80017ee:	7fba      	ldrb	r2, [r7, #30]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
			memcpy(
 80017fe:	2206      	movs	r2, #6
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 feda 	bl	80075bc <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001808:	7f7b      	ldrb	r3, [r7, #29]
 800180a:	3301      	adds	r3, #1
 800180c:	777b      	strb	r3, [r7, #29]
 800180e:	7f7b      	ldrb	r3, [r7, #29]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d9e1      	bls.n	80017d8 <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001814:	7fbb      	ldrb	r3, [r7, #30]
 8001816:	3301      	adds	r3, #1
 8001818:	77bb      	strb	r3, [r7, #30]
 800181a:	7fbb      	ldrb	r3, [r7, #30]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d987      	bls.n	8001730 <Read_Cell_Temps+0x68>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
					REG_LEN - 2);
		}

	}

	return ret;
<<<<<<< HEAD
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	46b5      	mov	sp, r6
}
 8001828:	4618      	mov	r0, r3
 800182a:	3724      	adds	r7, #36	@ 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001832:	bf00      	nop
 8001834:	08007d74 	.word	0x08007d74
 8001838:	200001f4 	.word	0x200001f4

0800183c <LTC_ADCV>:
=======
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	46b5      	mov	sp, r6
}
 8001824:	4618      	mov	r0, r3
 8001826:	3724      	adds	r7, #36	@ 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800182e:	bf00      	nop
 8001830:	080079cc 	.word	0x080079cc
 8001834:	200001fc 	.word	0x200001fc

08001838 <LTC_ADCV>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
<<<<<<< HEAD
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
=======
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	460b      	mov	r3, r1
 8001844:	71bb      	strb	r3, [r7, #6]
 8001846:	4613      	mov	r3, r2
 8001848:	717b      	strb	r3, [r7, #5]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
<<<<<<< HEAD
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	105b      	asrs	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3302      	adds	r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	b2da      	uxtb	r2, r3
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	797b      	ldrb	r3, [r7, #5]
 8001876:	4413      	add	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3360      	adds	r3, #96	@ 0x60
 800187c:	b2db      	uxtb	r3, r3
 800187e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	2002      	movs	r0, #2
 8001888:	f000 f8a4 	bl	80019d4 <LTC_Pec15_Calc>
 800188c:	4603      	mov	r3, r0
 800188e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001890:	89bb      	ldrh	r3, [r7, #12]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018a0:	f7ff fd72 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 80018a4:	f001 fb28 	bl	8002ef8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018a8:	f107 0108 	add.w	r1, r7, #8
 80018ac:	2364      	movs	r3, #100	@ 0x64
 80018ae:	2204      	movs	r2, #4
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <LTC_ADCV+0x88>)
 80018b2:	f004 fbb7 	bl	8006024 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018b6:	f001 fb13 	bl	8002ee0 <LTC_nCS_High>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001f4 	.word	0x200001f4

080018c8 <LTC_ADAX>:
=======
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	105b      	asrs	r3, r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	3302      	adds	r3, #2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	01db      	lsls	r3, r3, #7
 8001862:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	b2da      	uxtb	r2, r3
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	4413      	add	r3, r2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	797b      	ldrb	r3, [r7, #5]
 8001872:	4413      	add	r3, r2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3360      	adds	r3, #96	@ 0x60
 8001878:	b2db      	uxtb	r3, r3
 800187a:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4619      	mov	r1, r3
 8001882:	2002      	movs	r0, #2
 8001884:	f000 f8a4 	bl	80019d0 <LTC_Pec15_Calc>
 8001888:	4603      	mov	r3, r0
 800188a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001896:	89bb      	ldrh	r3, [r7, #12]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800189c:	f7ff fd74 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 80018a0:	f000 ff9e 	bl	80027e0 <LTC_nCS_Low>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) cmd, 4);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <LTC_ADCV+0x88>)
 80018ae:	f004 f8df 	bl	8005a70 <HAL_SPI_Transmit_DMA>
	LTC_nCS_High();
 80018b2:	f000 ff89 	bl	80027c8 <LTC_nCS_High>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200001fc 	.word	0x200001fc

080018c4 <LTC_ADAX>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
<<<<<<< HEAD
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
=======
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	460a      	mov	r2, r1
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71bb      	strb	r3, [r7, #6]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
<<<<<<< HEAD
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	105b      	asrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3304      	adds	r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3360      	adds	r3, #96	@ 0x60
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	2002      	movs	r0, #2
 8001908:	f000 f864 	bl	80019d4 <LTC_Pec15_Calc>
 800190c:	4603      	mov	r3, r0
 800190e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	72fb      	strb	r3, [r7, #11]
=======
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	105b      	asrs	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	3304      	adds	r3, #4
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	4413      	add	r3, r2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3360      	adds	r3, #96	@ 0x60
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	4619      	mov	r1, r3
 8001902:	2002      	movs	r0, #2
 8001904:	f000 f864 	bl	80019d0 <LTC_Pec15_Calc>
 8001908:	4603      	mov	r3, r0
 800190a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800190c:	89bb      	ldrh	r3, [r7, #12]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	b29b      	uxth	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001916:	89bb      	ldrh	r3, [r7, #12]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	72fb      	strb	r3, [r7, #11]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
<<<<<<< HEAD
 8001920:	f7ff fd32 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001924:	f001 fae8 	bl	8002ef8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001928:	f107 0108 	add.w	r1, r7, #8
 800192c:	2364      	movs	r3, #100	@ 0x64
 800192e:	2204      	movs	r2, #4
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <LTC_ADAX+0x7c>)
 8001932:	f004 fb77 	bl	8006024 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001936:	f001 fad3 	bl	8002ee0 <LTC_nCS_High>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001f4 	.word	0x200001f4

08001948 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	72bb      	strb	r3, [r7, #10]
=======
 800191c:	f7ff fd34 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001920:	f000 ff5e 	bl	80027e0 <LTC_nCS_Low>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) cmd, 4);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	2204      	movs	r2, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <LTC_ADAX+0x7c>)
 800192e:	f004 f89f 	bl	8005a70 <HAL_SPI_Transmit_DMA>
	LTC_nCS_High();
 8001932:	f000 ff49 	bl	80027c8 <LTC_nCS_High>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001fc 	.word	0x200001fc

08001944 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	72bb      	strb	r3, [r7, #10]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
<<<<<<< HEAD
 800195a:	2307      	movs	r3, #7
 800195c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800195e:	2314      	movs	r3, #20
 8001960:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	2002      	movs	r0, #2
 8001968:	f000 f834 	bl	80019d4 <LTC_Pec15_Calc>
 800196c:	4603      	mov	r3, r0
 800196e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001980:	f7ff fd02 	bl	8001388 <Wakeup_Idle>

	LTC_nCS_Low();
 8001984:	f001 fab8 	bl	8002ef8 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	2364      	movs	r3, #100	@ 0x64
 800198c:	2204      	movs	r2, #4
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <LTC_POLLADC+0x84>)
 8001990:	f004 fb48 	bl	8006024 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001994:	e00c      	b.n	80019b0 <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 8001996:	f001 fce3 	bl	8003360 <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
 800199c:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800199e:	7abb      	ldrb	r3, [r7, #10]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <LTC_POLLADC+0x62>
			finished = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	72fb      	strb	r3, [r7, #11]
 80019a8:	e002      	b.n	80019b0 <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	330a      	adds	r3, #10
 80019ae:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <LTC_POLLADC+0x88>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d802      	bhi.n	80019be <LTC_POLLADC+0x76>
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0eb      	beq.n	8001996 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019be:	f001 fa8f 	bl	8002ee0 <LTC_nCS_High>
	return (counter);
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001f4 	.word	0x200001f4
 80019d0:	00030d3f 	.word	0x00030d3f

080019d4 <LTC_Pec15_Calc>:
=======
 8001956:	2307      	movs	r3, #7
 8001958:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800195a:	2314      	movs	r3, #20
 800195c:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	2002      	movs	r0, #2
 8001964:	f000 f834 	bl	80019d0 <LTC_Pec15_Calc>
 8001968:	4603      	mov	r3, r0
 800196a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800196c:	893b      	ldrh	r3, [r7, #8]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	b29b      	uxth	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001976:	893b      	ldrh	r3, [r7, #8]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800197c:	f7ff fd04 	bl	8001388 <Wakeup_Idle>

	LTC_nCS_Low();
 8001980:	f000 ff2e 	bl	80027e0 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001984:	1d39      	adds	r1, r7, #4
 8001986:	2364      	movs	r3, #100	@ 0x64
 8001988:	2204      	movs	r2, #4
 800198a:	480f      	ldr	r0, [pc, #60]	@ (80019c8 <LTC_POLLADC+0x84>)
 800198c:	f003 ff2c 	bl	80057e8 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001990:	e00c      	b.n	80019ac <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 8001992:	f001 f9bf 	bl	8002d14 <HAL_GetTick>
 8001996:	4603      	mov	r3, r0
 8001998:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800199a:	7abb      	ldrb	r3, [r7, #10]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <LTC_POLLADC+0x62>
			finished = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	72fb      	strb	r3, [r7, #11]
 80019a4:	e002      	b.n	80019ac <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	330a      	adds	r3, #10
 80019aa:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <LTC_POLLADC+0x88>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d802      	bhi.n	80019ba <LTC_POLLADC+0x76>
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0eb      	beq.n	8001992 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019ba:	f000 ff05 	bl	80027c8 <LTC_nCS_High>
	return (counter);
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200001fc 	.word	0x200001fc
 80019cc:	00030d3f 	.word	0x00030d3f

080019d0 <LTC_Pec15_Calc>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
<<<<<<< HEAD
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 80019e0:	2310      	movs	r3, #16
 80019e2:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80019e4:	2300      	movs	r3, #0
 80019e6:	737b      	strb	r3, [r7, #13]
 80019e8:	e017      	b.n	8001a1a <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	09db      	lsrs	r3, r3, #7
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	7b7a      	ldrb	r2, [r7, #13]
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	4053      	eors	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <LTC_Pec15_Calc+0x60>)
 8001a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4053      	eors	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a14:	7b7b      	ldrb	r3, [r7, #13]
 8001a16:	3301      	adds	r3, #1
 8001a18:	737b      	strb	r3, [r7, #13]
 8001a1a:	7b7a      	ldrb	r2, [r7, #13]
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e3      	bcc.n	80019ea <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b29b      	uxth	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	08007d78 	.word	0x08007d78

08001a38 <MX_ADC1_Init>:
=======
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 80019dc:	2310      	movs	r3, #16
 80019de:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80019e0:	2300      	movs	r3, #0
 80019e2:	737b      	strb	r3, [r7, #13]
 80019e4:	e017      	b.n	8001a16 <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	09db      	lsrs	r3, r3, #7
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	7b7a      	ldrb	r2, [r7, #13]
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	440a      	add	r2, r1
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	4053      	eors	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	490a      	ldr	r1, [pc, #40]	@ (8001a30 <LTC_Pec15_Calc+0x60>)
 8001a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4053      	eors	r3, r2
 8001a0e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a10:	7b7b      	ldrb	r3, [r7, #13]
 8001a12:	3301      	adds	r3, #1
 8001a14:	737b      	strb	r3, [r7, #13]
 8001a16:	7b7a      	ldrb	r2, [r7, #13]
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3e3      	bcc.n	80019e6 <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	b29b      	uxth	r3, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	080079d0 	.word	0x080079d0

08001a34 <MX_ADC1_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
=======
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
=======
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_ADC1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a76:	f001 fca1 	bl	80033bc <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 feb8 	bl	80027f4 <Error_Handler>
=======
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a46:	4a19      	ldr	r2, [pc, #100]	@ (8001aac <MX_ADC1_Init+0x78>)
 8001a48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a50:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a5e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a64:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a72:	f001 f97d 	bl	8002d70 <HAL_ADC_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f000 fccd 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
<<<<<<< HEAD
 8001a84:	230f      	movs	r3, #15
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a96:	f002 f827 	bl	8003ae8 <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 fea8 	bl	80027f4 <Error_Handler>
=======
 8001a80:	230f      	movs	r3, #15
 8001a82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_ADC1_Init+0x74>)
 8001a92:	f001 fb17 	bl	80030c4 <HAL_ADC_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a9c:	f000 fcbd 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000128 	.word	0x20000128
 8001ab0:	40012400 	.word	0x40012400

08001ab4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
=======
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000128 	.word	0x20000128
 8001aac:	40012400 	.word	0x40012400

08001ab0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
=======
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
<<<<<<< HEAD
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ac6:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <MX_ADC2_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ade:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ae2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001af2:	f001 fc63 	bl	80033bc <HAL_ADC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001afc:	f000 fe7a 	bl	80027f4 <Error_Handler>
=======
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ac2:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <MX_ADC2_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ada:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ade:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001aee:	f001 f93f 	bl	8002d70 <HAL_ADC_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001af8:	f000 fc8f 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
<<<<<<< HEAD
 8001b00:	230a      	movs	r3, #10
 8001b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001b12:	f001 ffe9 	bl	8003ae8 <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001b1c:	f000 fe6a 	bl	80027f4 <Error_Handler>
=======
 8001afc:	230a      	movs	r3, #10
 8001afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_ADC2_Init+0x74>)
 8001b0e:	f001 fad9 	bl	80030c4 <HAL_ADC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001b18:	f000 fc7f 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
<<<<<<< HEAD
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000158 	.word	0x20000158
 8001b2c:	40012800 	.word	0x40012800

08001b30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a44      	ldr	r2, [pc, #272]	@ (8001c5c <HAL_ADC_MspInit+0x12c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d152      	bne.n	8001bf6 <HAL_ADC_MspInit+0xc6>
=======
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000158 	.word	0x20000158
 8001b28:	40012800 	.word	0x40012800

08001b2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <HAL_ADC_MspInit+0x130>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d153      	bne.n	8001bf4 <HAL_ADC_MspInit+0xc8>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001b50:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a42      	ldr	r2, [pc, #264]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b40      	ldr	r3, [pc, #256]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
=======
 8001b4c:	4b44      	ldr	r3, [pc, #272]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a43      	ldr	r2, [pc, #268]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a3d      	ldr	r2, [pc, #244]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
<<<<<<< HEAD
 8001b80:	2320      	movs	r3, #32
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b84:	2303      	movs	r3, #3
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4835      	ldr	r0, [pc, #212]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001b90:	f003 f87e 	bl	8004c90 <HAL_GPIO_Init>
=======
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b80:	2303      	movs	r3, #3
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4836      	ldr	r0, [pc, #216]	@ (8001c64 <HAL_ADC_MspInit+0x138>)
 8001b8c:	f002 fdce 	bl	800472c <HAL_GPIO_Init>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
<<<<<<< HEAD
 8001b94:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001b96:	4a35      	ldr	r2, [pc, #212]	@ (8001c6c <HAL_ADC_MspInit+0x13c>)
 8001b98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9a:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001bae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bc8:	4827      	ldr	r0, [pc, #156]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001bca:	f002 fc6b 	bl	80044a4 <HAL_DMA_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001bd4:	f000 fe0e 	bl	80027f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a23      	ldr	r2, [pc, #140]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001bdc:	621a      	str	r2, [r3, #32]
 8001bde:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_ADC_MspInit+0x138>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	2012      	movs	r0, #18
 8001bea:	f002 fc24 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bee:	2012      	movs	r0, #18
 8001bf0:	f002 fc3d 	bl	800446e <HAL_NVIC_EnableIRQ>
=======
 8001b90:	4b35      	ldr	r3, [pc, #212]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001b92:	4a36      	ldr	r2, [pc, #216]	@ (8001c6c <HAL_ADC_MspInit+0x140>)
 8001b94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b96:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9c:	4b32      	ldr	r3, [pc, #200]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bc6:	4828      	ldr	r0, [pc, #160]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001bc8:	f002 f92c 	bl	8003e24 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001bd2:	f000 fc22 	bl	800241a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001bda:	621a      	str	r2, [r3, #32]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_ADC_MspInit+0x13c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2102      	movs	r1, #2
 8001be6:	2012      	movs	r0, #18
 8001be8:	f002 f8e5 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bec:	2012      	movs	r0, #18
 8001bee:	f002 f8fe 	bl	8003dee <HAL_NVIC_EnableIRQ>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001bf4:	e02e      	b.n	8001c54 <HAL_ADC_MspInit+0x124>
  else if(adcHandle->Instance==ADC2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <HAL_ADC_MspInit+0x140>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d129      	bne.n	8001c54 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_ADC_MspInit+0x130>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c30:	230f      	movs	r3, #15
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c34:	2303      	movs	r3, #3
 8001c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <HAL_ADC_MspInit+0x134>)
 8001c40:	f003 f826 	bl	8004c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	2012      	movs	r0, #18
 8001c4a:	f002 fbf4 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c4e:	2012      	movs	r0, #18
 8001c50:	f002 fc0d 	bl	800446e <HAL_NVIC_EnableIRQ>
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	@ 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
=======
 8001bf2:	e02e      	b.n	8001c52 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <HAL_ADC_MspInit+0x144>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d129      	bne.n	8001c52 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_ADC_MspInit+0x134>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c2e:	230f      	movs	r3, #15
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c32:	2303      	movs	r3, #3
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <HAL_ADC_MspInit+0x138>)
 8001c3e:	f002 fd75 	bl	800472c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2102      	movs	r1, #2
 8001c46:	2012      	movs	r0, #18
 8001c48:	f002 f8b5 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c4c:	2012      	movs	r0, #18
 8001c4e:	f002 f8ce 	bl	8003dee <HAL_NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	@ 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001c5c:	40012400 	.word	0x40012400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40011000 	.word	0x40011000
 8001c68:	20000188 	.word	0x20000188
 8001c6c:	40020008 	.word	0x40020008
 8001c70:	40012800 	.word	0x40012800

08001c74 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001c7a:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <MX_CAN1_Init+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001c80:	2209      	movs	r2, #9
 8001c82:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c84:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001c92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c96:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001c9a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001c9e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <MX_CAN1_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <MX_CAN1_Init+0x64>)
<<<<<<< HEAD
 8001cc6:	f002 f8ab 	bl	8003e20 <HAL_CAN_Init>
=======
 8001cc6:	f001 fb3f 	bl	8003348 <HAL_CAN_Init>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
<<<<<<< HEAD
 8001cd0:	f000 fd90 	bl	80027f4 <Error_Handler>
=======
 8001cd0:	f000 fba3 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200001cc 	.word	0x200001cc
 8001cdc:	40006400 	.word	0x40006400

08001ce0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
<<<<<<< HEAD
 8001cfa:	4a25      	ldr	r2, [pc, #148]	@ (8001d90 <HAL_CAN_MspInit+0xb0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d143      	bne.n	8001d88 <HAL_CAN_MspInit+0xa8>
=======
 8001cfa:	4a31      	ldr	r2, [pc, #196]	@ (8001dc0 <HAL_CAN_MspInit+0xe0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d15b      	bne.n	8001db8 <HAL_CAN_MspInit+0xd8>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
<<<<<<< HEAD
 8001d00:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <HAL_CAN_MspInit+0xb4>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	4a23      	ldr	r2, [pc, #140]	@ (8001d94 <HAL_CAN_MspInit+0xb4>)
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	61d3      	str	r3, [r2, #28]
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <HAL_CAN_MspInit+0xb4>)
=======
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <HAL_CAN_MspInit+0xe4>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc4 <HAL_CAN_MspInit+0xe4>)
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	61d3      	str	r3, [r2, #28]
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_CAN_MspInit+0xe4>)
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <HAL_CAN_MspInit+0xb4>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <HAL_CAN_MspInit+0xb4>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_CAN_MspInit+0xb4>)
=======
 8001d18:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_CAN_MspInit+0xe4>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a29      	ldr	r2, [pc, #164]	@ (8001dc4 <HAL_CAN_MspInit+0xe4>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <HAL_CAN_MspInit+0xe4>)
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
<<<<<<< HEAD
 8001d44:	4814      	ldr	r0, [pc, #80]	@ (8001d98 <HAL_CAN_MspInit+0xb8>)
 8001d46:	f002 ffa3 	bl	8004c90 <HAL_GPIO_Init>
=======
 8001d44:	4820      	ldr	r0, [pc, #128]	@ (8001dc8 <HAL_CAN_MspInit+0xe8>)
 8001d46:	f002 fcf1 	bl	800472c <HAL_GPIO_Init>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
<<<<<<< HEAD
 8001d5e:	480e      	ldr	r0, [pc, #56]	@ (8001d98 <HAL_CAN_MspInit+0xb8>)
 8001d60:	f002 ff96 	bl	8004c90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_CAN_MspInit+0xbc>)
=======
 8001d5e:	481a      	ldr	r0, [pc, #104]	@ (8001dc8 <HAL_CAN_MspInit+0xe8>)
 8001d60:	f002 fce4 	bl	800472c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_CAN_MspInit+0xec>)
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
<<<<<<< HEAD
 8001d82:	4a06      	ldr	r2, [pc, #24]	@ (8001d9c <HAL_CAN_MspInit+0xbc>)
=======
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <HAL_CAN_MspInit+0xec>)
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2013      	movs	r0, #19
 8001d8e:	f002 f812 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d92:	2013      	movs	r0, #19
 8001d94:	f002 f82b 	bl	8003dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2014      	movs	r0, #20
 8001d9e:	f002 f80a 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001da2:	2014      	movs	r0, #20
 8001da4:	f002 f823 	bl	8003dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	2015      	movs	r0, #21
 8001dae:	f002 f802 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001db2:	2015      	movs	r0, #21
 8001db4:	f002 f81b 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	@ 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40006400 	.word	0x40006400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010c00 	.word	0x40010c00
 8001d9c:	40010000 	.word	0x40010000

08001da0 <CAN_Start>:
=======
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	@ 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	40010000 	.word	0x40010000

08001dd0 <CAN_Start>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
<<<<<<< HEAD
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <CAN_Start+0x10>)
 8001da6:	f002 f936 	bl	8004016 <HAL_CAN_Start>
 8001daa:	4603      	mov	r3, r0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200001cc 	.word	0x200001cc

08001db4 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001db8:	2102      	movs	r1, #2
 8001dba:	4803      	ldr	r0, [pc, #12]	@ (8001dc8 <CAN_Activate+0x14>)
 8001dbc:	f002 fa3e 	bl	800423c <HAL_CAN_ActivateNotification>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200001cc 	.word	0x200001cc

08001dcc <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 021c 	add.w	r2, r3, #28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3318      	adds	r3, #24
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <CAN_Send+0x24>)
 8001de2:	f002 f95c 	bl	800409e <HAL_CAN_AddTxMessage>
 8001de6:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200001cc 	.word	0x200001cc

08001df4 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001dfc:	f7ff ffd0 	bl	8001da0 <CAN_Start>
	CAN_Activate();
 8001e00:	f7ff ffd8 	bl	8001db4 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	611a      	str	r2, [r3, #16]
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001e48:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 8001e4c:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001e4e:	8afb      	ldrh	r3, [r7, #22]
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffe6 	bl	8001e24 <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e074      	b.n	8001f48 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d156      	bne.n	8001f16 <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	dd0c      	ble.n	8001f36 <CAN_Send_Voltage+0xf8>
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001f26:	8afb      	ldrh	r3, [r7, #22]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001f2c:	8afb      	ldrh	r3, [r7, #22]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff77 	bl	8001e24 <Set_CAN_Id>
		}
		HAL_Delay(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f001 fa1c 	bl	8003374 <HAL_Delay>
		CAN_Send(ptr);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff45 	bl	8001dcc <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	3301      	adds	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b5f      	cmp	r3, #95	@ 0x5f
 8001f4c:	dd87      	ble.n	8001e5e <CAN_Send_Voltage+0x20>
	}

}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001f62:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8001f66:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff59 	bl	8001e24 <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	737b      	strb	r3, [r7, #13]
 8001f76:	e076      	b.n	8002066 <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8001f78:	7b7b      	ldrb	r3, [r7, #13]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d156      	bne.n	8002032 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8001f88:	7b3b      	ldrb	r3, [r7, #12]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8001f98:	7b3b      	ldrb	r3, [r7, #12]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001fac:	7b3b      	ldrb	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8001fb2:	7b3b      	ldrb	r3, [r7, #12]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001fc2:	7b3b      	ldrb	r3, [r7, #12]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001fd6:	7b3b      	ldrb	r3, [r7, #12]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001fdc:	7b3b      	ldrb	r3, [r7, #12]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001fee:	7b3b      	ldrb	r3, [r7, #12]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8002004:	7b3b      	ldrb	r3, [r7, #12]
 8002006:	3301      	adds	r3, #1
 8002008:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 800200a:	7b3b      	ldrb	r3, [r7, #12]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 800201c:	7b3b      	ldrb	r3, [r7, #12]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2da      	uxtb	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8002032:	7b7b      	ldrb	r3, [r7, #13]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <CAN_Send_Temperature+0xfc>
 8002038:	7b7b      	ldrb	r3, [r7, #13]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8002044:	89fb      	ldrh	r3, [r7, #14]
 8002046:	3301      	adds	r3, #1
 8002048:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fee8 	bl	8001e24 <Set_CAN_Id>
		}
		HAL_Delay(1);
 8002054:	2001      	movs	r0, #1
 8002056:	f001 f98d 	bl	8003374 <HAL_Delay>
		CAN_Send(ptr);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff feb6 	bl	8001dcc <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8002060:	7b7b      	ldrb	r3, [r7, #13]
 8002062:	3301      	adds	r3, #1
 8002064:	737b      	strb	r3, [r7, #13]
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	2b5f      	cmp	r3, #95	@ 0x5f
 800206a:	d985      	bls.n	8001f78 <CAN_Send_Temperature+0x20>
	}

}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr, struct batteryModule *batt) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8002080:	f240 6322 	movw	r3, #1570	@ 0x622
 8002084:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff feca 	bl	8001e24 <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b2da      	uxtb	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	HAL_Delay(1);
 8002108:	2001      	movs	r0, #1
 800210a:	f001 f933 	bl	8003374 <HAL_Delay>
	CAN_Send(ptr);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fe5c 	bl	8001dcc <CAN_Send>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 800212a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800212e:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8002130:	8afb      	ldrh	r3, [r7, #22]
 8002132:	4619      	mov	r1, r3
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fe75 	bl	8001e24 <Set_CAN_Id>
	ptr->data[0] = *faults;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002184:	0e1b      	lsrs	r3, r3, #24
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_Delay(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f001 f8f0 	bl	8003374 <HAL_Delay>
	CAN_Send(ptr);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fe19 	bl	8001dcc <CAN_Send>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <MX_DMA_Init+0x68>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a17      	ldr	r2, [pc, #92]	@ (800220c <MX_DMA_Init+0x68>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6153      	str	r3, [r2, #20]
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <MX_DMA_Init+0x68>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2101      	movs	r1, #1
 80021c6:	200b      	movs	r0, #11
 80021c8:	f002 f935 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021cc:	200b      	movs	r0, #11
 80021ce:	f002 f94e 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2103      	movs	r1, #3
 80021d6:	200c      	movs	r0, #12
 80021d8:	f002 f92d 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021dc:	200c      	movs	r0, #12
 80021de:	f002 f946 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2103      	movs	r1, #3
 80021e6:	200d      	movs	r0, #13
 80021e8:	f002 f925 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021ec:	200d      	movs	r0, #13
 80021ee:	f002 f93e 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2102      	movs	r1, #2
 80021f6:	200e      	movs	r0, #14
 80021f8:	f002 f91d 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80021fc:	200e      	movs	r0, #14
 80021fe:	f002 f936 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <MX_GPIO_Init>:
=======
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <CAN_Start+0x10>)
 8001dd6:	f001 fbb2 	bl	800353e <HAL_CAN_Start>
 8001dda:	4603      	mov	r3, r0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200001cc 	.word	0x200001cc

08001de4 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001de8:	2102      	movs	r1, #2
 8001dea:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <CAN_Activate+0x14>)
 8001dec:	f001 fcba 	bl	8003764 <HAL_CAN_ActivateNotification>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200001cc 	.word	0x200001cc

08001dfc <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f103 021c 	add.w	r2, r3, #28
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	4803      	ldr	r0, [pc, #12]	@ (8001e20 <CAN_Send+0x24>)
 8001e12:	f001 fbd8 	bl	80035c6 <HAL_CAN_AddTxMessage>
 8001e16:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200001cc 	.word	0x200001cc

08001e24 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001e2c:	f7ff ffd0 	bl	8001dd0 <CAN_Start>
	CAN_Activate();
 8001e30:	f7ff ffd8 	bl	8001de4 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	611a      	str	r2, [r3, #16]
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001e78:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 8001e7c:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001e7e:	8afb      	ldrh	r3, [r7, #22]
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffe6 	bl	8001e54 <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e074      	b.n	8001f78 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d156      	bne.n	8001f46 <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	3301      	adds	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	dd0c      	ble.n	8001f66 <CAN_Send_Voltage+0xf8>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001f56:	8afb      	ldrh	r3, [r7, #22]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001f5c:	8afb      	ldrh	r3, [r7, #22]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff77 	bl	8001e54 <Set_CAN_Id>
		}
		HAL_Delay(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f000 fede 	bl	8002d28 <HAL_Delay>
		CAN_Send(ptr);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff45 	bl	8001dfc <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	3301      	adds	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b5f      	cmp	r3, #95	@ 0x5f
 8001f7c:	dd87      	ble.n	8001e8e <CAN_Send_Voltage+0x20>
	}

}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <MX_DMA_Init+0x78>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4a1b      	ldr	r2, [pc, #108]	@ (8002000 <MX_DMA_Init+0x78>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6153      	str	r3, [r2, #20]
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <MX_DMA_Init+0x78>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2102      	movs	r1, #2
 8001faa:	200b      	movs	r0, #11
 8001fac:	f001 ff03 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fb0:	200b      	movs	r0, #11
 8001fb2:	f001 ff1c 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2103      	movs	r1, #3
 8001fba:	200c      	movs	r0, #12
 8001fbc:	f001 fefb 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001fc0:	200c      	movs	r0, #12
 8001fc2:	f001 ff14 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2103      	movs	r1, #3
 8001fca:	200d      	movs	r0, #13
 8001fcc:	f001 fef3 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fd0:	200d      	movs	r0, #13
 8001fd2:	f001 ff0c 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	200e      	movs	r0, #14
 8001fdc:	f001 feeb 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fe0:	200e      	movs	r0, #14
 8001fe2:	f001 ff04 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2101      	movs	r1, #1
 8001fea:	200f      	movs	r0, #15
 8001fec:	f001 fee3 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ff0:	200f      	movs	r0, #15
 8001ff2:	f001 fefc 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <MX_GPIO_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002224:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <MX_GPIO_Init+0x108>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a3b      	ldr	r2, [pc, #236]	@ (8002318 <MX_GPIO_Init+0x108>)
 800222a:	f043 0320 	orr.w	r3, r3, #32
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <MX_GPIO_Init+0x108>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223c:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <MX_GPIO_Init+0x108>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a35      	ldr	r2, [pc, #212]	@ (8002318 <MX_GPIO_Init+0x108>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b33      	ldr	r3, [pc, #204]	@ (8002318 <MX_GPIO_Init+0x108>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <MX_GPIO_Init+0x108>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a2f      	ldr	r2, [pc, #188]	@ (8002318 <MX_GPIO_Init+0x108>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <MX_GPIO_Init+0x108>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226c:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <MX_GPIO_Init+0x108>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <MX_GPIO_Init+0x108>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <MX_GPIO_Init+0x108>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	2110      	movs	r1, #16
 8002288:	4824      	ldr	r0, [pc, #144]	@ (800231c <MX_GPIO_Init+0x10c>)
 800228a:	f002 fe85 	bl	8004f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2102      	movs	r1, #2
 8002292:	4823      	ldr	r0, [pc, #140]	@ (8002320 <MX_GPIO_Init+0x110>)
 8002294:	f002 fe80 	bl	8004f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	@ 0x40
 800229c:	4821      	ldr	r0, [pc, #132]	@ (8002324 <MX_GPIO_Init+0x114>)
 800229e:	f002 fe7b 	bl	8004f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80022a2:	2310      	movs	r3, #16
 80022a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	4619      	mov	r1, r3
 80022b8:	4818      	ldr	r0, [pc, #96]	@ (800231c <MX_GPIO_Init+0x10c>)
 80022ba:	f002 fce9 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80022be:	2302      	movs	r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c2:	2301      	movs	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	4619      	mov	r1, r3
 80022d4:	4812      	ldr	r0, [pc, #72]	@ (8002320 <MX_GPIO_Init+0x110>)
 80022d6:	f002 fcdb 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80022da:	2340      	movs	r3, #64	@ 0x40
 80022dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <MX_GPIO_Init+0x114>)
 80022f2:	f002 fccd 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HV_SENSE_ENABLE_Pin */
  GPIO_InitStruct.Pin = MCU_HV_SENSE_ENABLE_Pin;
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_HV_SENSE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	@ (8002320 <MX_GPIO_Init+0x110>)
 800230a:	f002 fcc1 	bl	8004c90 <HAL_GPIO_Init>

}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000

08002328 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(uint32_t *read_volt_HV) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

		// ADC開始
		HAL_ADC_Start(&hadc1);
 8002334:	481e      	ldr	r0, [pc, #120]	@ (80023b0 <ReadHVInput+0x88>)
 8002336:	f001 f919 	bl	800356c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800233a:	f04f 31ff 	mov.w	r1, #4294967295
 800233e:	481c      	ldr	r0, [pc, #112]	@ (80023b0 <ReadHVInput+0x88>)
 8002340:	f001 f9ee 	bl	8003720 <HAL_ADC_PollForConversion>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);
 800234a:	4819      	ldr	r0, [pc, #100]	@ (80023b0 <ReadHVInput+0x88>)
 800234c:	f001 faee 	bl	800392c <HAL_ADC_GetValue>
 8002350:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);
 8002352:	4817      	ldr	r0, [pc, #92]	@ (80023b0 <ReadHVInput+0x88>)
 8002354:	f001 f9b8 	bl	80036c8 <HAL_ADC_Stop>

		// 電圧計算
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	f7fe fcd7 	bl	8000d0c <__aeabi_ui2f>
 800235e:	4603      	mov	r3, r0
 8002360:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fddd 	bl	8000f24 <__aeabi_fdiv>
 800236a:	4603      	mov	r3, r0
 800236c:	4911      	ldr	r1, [pc, #68]	@ (80023b4 <ReadHVInput+0x8c>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fd24 	bl	8000dbc <__aeabi_fmul>
 8002374:	4603      	mov	r3, r0
 8002376:	613b      	str	r3, [r7, #16]
		float amcOutput = adcVoltage / GAIN_TLV9001;
 8002378:	490f      	ldr	r1, [pc, #60]	@ (80023b8 <ReadHVInput+0x90>)
 800237a:	6938      	ldr	r0, [r7, #16]
 800237c:	f7fe fdd2 	bl	8000f24 <__aeabi_fdiv>
 8002380:	4603      	mov	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]
		float hvInput = amcOutput * DIVIDER_RATIO;
 8002384:	490d      	ldr	r1, [pc, #52]	@ (80023bc <ReadHVInput+0x94>)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7fe fd18 	bl	8000dbc <__aeabi_fmul>
 800238c:	4603      	mov	r3, r0
 800238e:	490c      	ldr	r1, [pc, #48]	@ (80023c0 <ReadHVInput+0x98>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fdc7 	bl	8000f24 <__aeabi_fdiv>
 8002396:	4603      	mov	r3, r0
 8002398:	60bb      	str	r3, [r7, #8]

		*read_volt_HV = (uint32_t)(hvInput);
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f7fe fe5e 	bl	800105c <__aeabi_f2uiz>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	601a      	str	r2, [r3, #0]
	}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000128 	.word	0x20000128
 80023b4:	40533333 	.word	0x40533333
 80023b8:	3fca3d71 	.word	0x3fca3d71
 80023bc:	49aae7e0 	.word	0x49aae7e0
 80023c0:	45d4d000 	.word	0x45d4d000

080023c4 <main>:
=======
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a35      	ldr	r2, [pc, #212]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 800201e:	f043 0320 	orr.w	r3, r3, #32
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a2f      	ldr	r2, [pc, #188]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b2a      	ldr	r3, [pc, #168]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a29      	ldr	r2, [pc, #164]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b27      	ldr	r3, [pc, #156]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a23      	ldr	r2, [pc, #140]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <MX_GPIO_Init+0xf0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2110      	movs	r1, #16
 800207c:	481e      	ldr	r0, [pc, #120]	@ (80020f8 <MX_GPIO_Init+0xf4>)
 800207e:	f002 fcd9 	bl	8004a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2102      	movs	r1, #2
 8002086:	481d      	ldr	r0, [pc, #116]	@ (80020fc <MX_GPIO_Init+0xf8>)
 8002088:	f002 fcd4 	bl	8004a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	@ 0x40
 8002090:	481b      	ldr	r0, [pc, #108]	@ (8002100 <MX_GPIO_Init+0xfc>)
 8002092:	f002 fccf 	bl	8004a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8002096:	2310      	movs	r3, #16
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	4619      	mov	r1, r3
 80020ac:	4812      	ldr	r0, [pc, #72]	@ (80020f8 <MX_GPIO_Init+0xf4>)
 80020ae:	f002 fb3d 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80020b2:	2302      	movs	r3, #2
 80020b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2302      	movs	r3, #2
 80020c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	4619      	mov	r1, r3
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <MX_GPIO_Init+0xf8>)
 80020ca:	f002 fb2f 	bl	800472c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80020ce:	2340      	movs	r3, #64	@ 0x40
 80020d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2302      	movs	r3, #2
 80020dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	4619      	mov	r1, r3
 80020e4:	4806      	ldr	r0, [pc, #24]	@ (8002100 <MX_GPIO_Init+0xfc>)
 80020e6:	f002 fb21 	bl	800472c <HAL_GPIO_Init>

}
 80020ea:	bf00      	nop
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00
 8002100:	40011000 	.word	0x40011000

08002104 <main>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80023ca:	af04      	add	r7, sp, #16
=======
 8002104:	b580      	push	{r7, lr}
 8002106:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 800210a:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	batteryModule modPackInfo;
	struct CANMessage msg;
	uint8_t safetyFaults = 0;
<<<<<<< HEAD
 80023cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023d0:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
	uint8_t safetyWarnings = 0;
 80023d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023dc:	f2a3 2342 	subw	r3, r3, #578	@ 0x242
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
	uint8_t safetyStates = 0;
 80023e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023e8:	f2a3 2343 	subw	r3, r3, #579	@ 0x243
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
=======
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
	uint8_t safetyWarnings = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
	uint8_t safetyStates = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80023f0:	f000 ff5e 	bl	80032b0 <HAL_Init>
=======
 800211e:	f000 fda1 	bl	8002c64 <HAL_Init>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80023f4:	f000 f924 	bl	8002640 <SystemClock_Config>
=======
 8002122:	f000 f8c3 	bl	80022ac <SystemClock_Config>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80023f8:	f7ff ff0a 	bl	8002210 <MX_GPIO_Init>
  MX_DMA_Init();
 80023fc:	f7ff fed2 	bl	80021a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002400:	f7ff fb1a 	bl	8001a38 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002404:	f7ff fb56 	bl	8001ab4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8002408:	f000 fe30 	bl	800306c <MX_TIM7_Init>
  MX_SPI1_Init();
 800240c:	f000 fc88 	bl	8002d20 <MX_SPI1_Init>
  MX_CAN1_Init();
 8002410:	f7ff fc30 	bl	8001c74 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002414:	f000 fe7e 	bl	8003114 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fce9 	bl	8001df4 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8002422:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8002426:	2240      	movs	r2, #64	@ 0x40
 8002428:	4981      	ldr	r1, [pc, #516]	@ (8002630 <main+0x26c>)
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f972 	bl	8002714 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8002430:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002434:	210a      	movs	r1, #10
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f9ac 	bl	8002794 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 800243c:	f000 fd50 	bl	8002ee0 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002440:	2201      	movs	r2, #1
 8002442:	2102      	movs	r1, #2
 8002444:	487b      	ldr	r0, [pc, #492]	@ (8002634 <main+0x270>)
 8002446:	f002 fda7 	bl	8004f98 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800244a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800244e:	f000 ff91 	bl	8003374 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	2102      	movs	r1, #2
 8002456:	4877      	ldr	r0, [pc, #476]	@ (8002634 <main+0x270>)
 8002458:	f002 fd9e 	bl	8004f98 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
	uint8_t indexpause = 8;
 8002462:	2308      	movs	r3, #8
 8002464:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
	uint8_t low_volt_hysteresis = 0;
 8002468:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800246c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
	uint8_t high_volt_hysteresis = 0;
 8002474:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002478:	f2a3 2345 	subw	r3, r3, #581	@ 0x245
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	uint8_t cell_imbalance_hysteresis = 0;
 8002480:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002484:	f2a3 2346 	subw	r3, r3, #582	@ 0x246
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]

	//reading cell voltages
	Wakeup_Sleep();
 800248c:	f7fe ff9c 	bl	80013c8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 8002490:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fa37 	bl	8002908 <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 800249a:	f7fe ff95 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 800249e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80024a2:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
 80024a6:	e016      	b.n	80024d6 <main+0x112>
		Wakeup_Idle();
 80024a8:	f7fe ff6e 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80024ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b0:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80024b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b8:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80024bc:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fa35 	bl	8002930 <Read_Temp>
		HAL_Delay(3);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f000 ff54 	bl	8003374 <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80024cc:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 80024d0:	3301      	adds	r3, #1
 80024d2:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
 80024d6:	f897 2245 	ldrb.w	r2, [r7, #581]	@ 0x245
 80024da:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3e2      	bcc.n	80024a8 <main+0xe4>
	}
	Wakeup_Idle();
 80024e2:	f7fe ff51 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 80024e6:	4954      	ldr	r1, [pc, #336]	@ (8002638 <main+0x274>)
 80024e8:	2008      	movs	r0, #8
 80024ea:	f7ff f841 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 80024ee:	f7fe ff4b 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7ff f8aa 	bl	800164c <LTC_STCOMM>

	ReadHVInput(&modPackInfo.pack_voltage);
 80024f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff11 	bl	8002328 <ReadHVInput>
  /* USER CODE BEGIN WHILE */
=======
 8002126:	f7ff ff6d 	bl	8002004 <MX_GPIO_Init>
  MX_DMA_Init();
 800212a:	f7ff ff2d 	bl	8001f88 <MX_DMA_Init>
  MX_ADC1_Init();
 800212e:	f7ff fc81 	bl	8001a34 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002132:	f7ff fcbd 	bl	8001ab0 <MX_ADC2_Init>
  MX_TIM7_Init();
 8002136:	f000 fc3f 	bl	80029b8 <MX_TIM7_Init>
  MX_SPI1_Init();
 800213a:	f000 fa63 	bl	8002604 <MX_SPI1_Init>
  MX_CAN1_Init();
 800213e:	f7ff fd99 	bl	8001c74 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002142:	f000 fc95 	bl	8002a70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8002146:	463b      	mov	r3, r7
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fe6b 	bl	8001e24 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 800214e:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	4951      	ldr	r1, [pc, #324]	@ (800229c <main+0x198>)
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f912 	bl	8002380 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 800215c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002160:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f928 	bl	80023ba <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 800216a:	f000 fb2d 	bl	80027c8 <LTC_nCS_High>

//	//Sending a fault signal and reseting it
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2102      	movs	r1, #2
 8002172:	484b      	ldr	r0, [pc, #300]	@ (80022a0 <main+0x19c>)
 8002174:	f002 fc5e 	bl	8004a34 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002178:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800217c:	f000 fdd4 	bl	8002d28 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2102      	movs	r1, #2
 8002184:	4846      	ldr	r0, [pc, #280]	@ (80022a0 <main+0x19c>)
 8002186:	f002 fc55 	bl	8004a34 <HAL_GPIO_WritePin>

	//initializing variables
	uint8_t tempindex = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
	uint8_t indexpause = 8;
 8002190:	2308      	movs	r3, #8
 8002192:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
	uint8_t low_volt_hysteresis = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
	uint8_t high_volt_hysteresis = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	uint8_t cell_imbalance_hysteresis = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e

	//reading cell voltages
	Wakeup_Sleep();
 80021a8:	f7ff f90e 	bl	80013c8 <Wakeup_Sleep>
	Read_Volt(modPackInfo.cell_volt);
 80021ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f9cd 	bl	8002550 <Read_Volt>

	//reading cell temperatures
	Wakeup_Sleep();
 80021b6:	f7ff f907 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80021ba:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 80021be:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 80021c2:	e016      	b.n	80021f2 <main+0xee>
		Wakeup_Idle();
 80021c4:	f7ff f8e0 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80021c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021cc:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80021d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d4:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80021d8:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f9cb 	bl	8002578 <Read_Temp>
		HAL_Delay(3);
 80021e2:	2003      	movs	r0, #3
 80021e4:	f000 fda0 	bl	8002d28 <HAL_Delay>
	for (uint8_t i = tempindex; i < indexpause; i++) {
 80021e8:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80021ec:	3301      	adds	r3, #1
 80021ee:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 80021f2:	f897 2247 	ldrb.w	r2, [r7, #583]	@ 0x247
 80021f6:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3e2      	bcc.n	80021c4 <main+0xc0>
	}
	Wakeup_Idle();
 80021fe:	f7ff f8c3 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8002202:	4928      	ldr	r1, [pc, #160]	@ (80022a4 <main+0x1a0>)
 8002204:	2008      	movs	r0, #8
 8002206:	f7ff f9b3 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 800220a:	f7ff f8bd 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fa1c 	bl	800164c <LTC_STCOMM>

	Wakeup_Sleep();
 8002214:	f7ff f8d8 	bl	80013c8 <Wakeup_Sleep>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8002218:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 800221c:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 8002220:	e016      	b.n	8002250 <main+0x14c>
		Wakeup_Idle();
 8002222:	f7ff f8b1 	bl	8001388 <Wakeup_Idle>
		Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222a:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 800222e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002232:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002236:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f99c 	bl	8002578 <Read_Temp>
		HAL_Delay(3);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 fd71 	bl	8002d28 <HAL_Delay>
	for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8002246:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 800224a:	3301      	adds	r3, #1
 800224c:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 8002250:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8002254:	2b0b      	cmp	r3, #11
 8002256:	d9e4      	bls.n	8002222 <main+0x11e>
	}
	Wakeup_Idle();
 8002258:	f7ff f896 	bl	8001388 <Wakeup_Idle>
	LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 800225c:	4912      	ldr	r1, [pc, #72]	@ (80022a8 <main+0x1a4>)
 800225e:	2008      	movs	r0, #8
 8002260:	f7ff f986 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002264:	f7ff f890 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002268:	2002      	movs	r0, #2
 800226a:	f7ff f9ef 	bl	800164c <LTC_STCOMM>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
<<<<<<< HEAD
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002506:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800250a:	210a      	movs	r1, #10
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f91e 	bl	800274e <GpioFixedToggle>
//		printf("Hello");
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8002512:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f94f 	bl	80027ba <TimerPacket_FixedPulse>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f1      	beq.n	8002506 <main+0x142>
			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 8002522:	1dbc      	adds	r4, r7, #6
 8002524:	1dfa      	adds	r2, r7, #7
 8002526:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800252a:	f107 0008 	add.w	r0, r7, #8
 800252e:	1d7b      	adds	r3, r7, #5
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4623      	mov	r3, r4
 8002534:	f7ff fdf2 	bl	800211c <CAN_Send_Safety_Checker>
					&safetyWarnings, &safetyStates);
			CAN_Send_Cell_Summary(&msg, &modPackInfo);
 8002538:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fd97 	bl	8002076 <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 8002548:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fc73 	bl	8001e3e <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 8002558:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800255c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fcf6 	bl	8001f58 <CAN_Send_Temperature>
			//reading cell voltages
//			Wakeup_Sleep();
			Read_Volt(modPackInfo.cell_volt);
 800256c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f9c9 	bl	8002908 <Read_Volt>
			//print(NUM_CELLS, (uint16_t*) modPackInfo.cell_volt);

			//reading cell temperatures
//			Wakeup_Sleep();
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002576:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800257a:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
 800257e:	e011      	b.n	80025a4 <main+0x1e0>
//				Wakeup_Idle();
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 8002580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002584:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 8002588:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800258c:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002590:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f9cb 	bl	8002930 <Read_Temp>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 800259a:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 800259e:	3301      	adds	r3, #1
 80025a0:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
 80025a4:	f897 2244 	ldrb.w	r2, [r7, #580]	@ 0x244
 80025a8:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3e7      	bcc.n	8002580 <main+0x1bc>
//				HAL_Delay(5);
			}
			if (indexpause == 8) {
 80025b0:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d10d      	bne.n	80025d4 <main+0x210>
//				Wakeup_Idle();
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 80025b8:	491f      	ldr	r1, [pc, #124]	@ (8002638 <main+0x274>)
 80025ba:	2008      	movs	r0, #8
 80025bc:	f7fe ffd8 	bl	8001570 <LTC_WRCOMM>
//				Wakeup_Idle();
				LTC_STCOMM(2);
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7ff f843 	bl	800164c <LTC_STCOMM>
				tempindex = 8;
 80025c6:	2308      	movs	r3, #8
 80025c8:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
				indexpause = NUM_THERM_PER_MOD;
 80025cc:	230c      	movs	r3, #12
 80025ce:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
 80025d2:	e010      	b.n	80025f6 <main+0x232>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 80025d4:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d10c      	bne.n	80025f6 <main+0x232>
//				Wakeup_Idle();
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 80025dc:	4917      	ldr	r1, [pc, #92]	@ (800263c <main+0x278>)
 80025de:	2008      	movs	r0, #8
 80025e0:	f7fe ffc6 	bl	8001570 <LTC_WRCOMM>
//				Wakeup_Idle();
				LTC_STCOMM(2);
 80025e4:	2002      	movs	r0, #2
 80025e6:	f7ff f831 	bl	800164c <LTC_STCOMM>
				indexpause = 8;
 80025ea:	2308      	movs	r3, #8
 80025ec:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
				tempindex = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
			}

			ReadHVInput(&modPackInfo.pack_voltage);
 80025f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025fa:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fe92 	bl	8002328 <ReadHVInput>
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

			//getting the summary of all cells in the pack
			Cell_Summary_Voltage(&modPackInfo, &safetyFaults,
 8002604:	1d7c      	adds	r4, r7, #5
 8002606:	1dba      	adds	r2, r7, #6
 8002608:	1df9      	adds	r1, r7, #7
 800260a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800260e:	1cbb      	adds	r3, r7, #2
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	1cfb      	adds	r3, r7, #3
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4623      	mov	r3, r4
 800261c:	f000 f9ce 	bl	80029bc <Cell_Summary_Voltage>
								&safetyWarnings, &safetyStates, &low_volt_hysteresis,
								&high_volt_hysteresis, &cell_imbalance_hysteresis);

			Cell_Summary_Temperature(&modPackInfo, &safetyFaults,&safetyWarnings);
 8002620:	1dba      	adds	r2, r7, #6
 8002622:	1df9      	adds	r1, r7, #7
 8002624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fb09 	bl	8002c40 <Cell_Summary_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800262e:	e76a      	b.n	8002506 <main+0x142>
 8002630:	40011000 	.word	0x40011000
 8002634:	40010c00 	.word	0x40010c00
 8002638:	20000000 	.word	0x20000000
 800263c:	20000006 	.word	0x20000006

08002640 <SystemClock_Config>:
=======
//		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800226e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f8b4 	bl	80023e0 <TimerPacket_FixedPulse>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f7      	beq.n	800226e <main+0x16a>
			//calling all CAN realated methods
//			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
//					&safetyWarnings, &safetyStates);
//			CAN_Send_Cell_Summary(&msg, &modPackInfo);
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 800227e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002282:	463b      	mov	r3, r7
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fdf1 	bl	8001e6e <CAN_Send_Voltage>
//			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
			//reading cell voltages
			Wakeup_Sleep();
 800228c:	f7ff f89c 	bl	80013c8 <Wakeup_Sleep>
			Read_Volt(modPackInfo.cell_volt);
 8002290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f95b 	bl	8002550 <Read_Volt>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800229a:	e7e8      	b.n	800226e <main+0x16a>
 800229c:	40011000 	.word	0x40011000
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000006 	.word	0x20000006

080022ac <SystemClock_Config>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8002640:	b580      	push	{r7, lr}
 8002642:	b09c      	sub	sp, #112	@ 0x70
 8002644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002646:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800264a:	2238      	movs	r2, #56	@ 0x38
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f005 f954 	bl	80078fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2220      	movs	r2, #32
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f005 f946 	bl	80078fc <memset>
=======
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09c      	sub	sp, #112	@ 0x70
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022b6:	2238      	movs	r2, #56	@ 0x38
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f005 f94c 	bl	8007558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2220      	movs	r2, #32
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 f93e 	bl	8007558 <memset>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8002670:	2301      	movs	r3, #1
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002678:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800267a:	2304      	movs	r3, #4
 800267c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800267e:	2301      	movs	r3, #1
 8002680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002688:	2302      	movs	r3, #2
 800268a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800268c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002690:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002692:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002696:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002698:	2302      	movs	r3, #2
 800269a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800269c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80026a2:	2340      	movs	r3, #64	@ 0x40
 80026a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fca6 	bl	8004ffc <HAL_RCC_OscConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80026b6:	f000 f89d 	bl	80027f4 <Error_Handler>
=======
 80022dc:	2301      	movs	r3, #1
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80022e6:	2304      	movs	r3, #4
 80022e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ea:	2301      	movs	r3, #1
 80022ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80022ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f4:	2302      	movs	r3, #2
 80022f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002302:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002304:	2302      	movs	r3, #2
 8002306:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002308:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800230c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800230e:	2340      	movs	r3, #64	@ 0x40
 8002310:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002312:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fba4 	bl	8004a64 <HAL_RCC_OscConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002322:	f000 f87a 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80026ba:	230f      	movs	r3, #15
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 ffa6 	bl	8005628 <HAL_RCC_ClockConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026e2:	f000 f887 	bl	80027f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026e6:	2302      	movs	r3, #2
 80026e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 f98e 	bl	8005a14 <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026fe:	f000 f879 	bl	80027f4 <Error_Handler>
=======
 8002326:	230f      	movs	r3, #15
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232a:	2302      	movs	r3, #2
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800233c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fea4 	bl	8005090 <HAL_RCC_ClockConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800234e:	f000 f864 	bl	800241a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002352:	2302      	movs	r3, #2
 8002354:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f88c 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800236a:	f000 f856 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< HEAD
 8002702:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <SystemClock_Config+0xd0>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	bf00      	nop
 800270a:	3770      	adds	r7, #112	@ 0x70
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	42420070 	.word	0x42420070

08002714 <GpioTimePacket_Init>:
=======
 800236e:	4b03      	ldr	r3, [pc, #12]	@ (800237c <SystemClock_Config+0xd0>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3770      	adds	r7, #112	@ 0x70
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	42420070 	.word	0x42420070

08002380 <GpioTimePacket_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
<<<<<<< HEAD
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	2200      	movs	r2, #0
 8002726:	4619      	mov	r1, r3
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f002 fc35 	bl	8004f98 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 800275a:	f000 fe01 	bl	8003360 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	1ad2      	subs	r2, r2, r3
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	429a      	cmp	r2, r3
 8002772:	d90b      	bls.n	800278c <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	889b      	ldrh	r3, [r3, #4]
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f002 fc22 	bl	8004fc8 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]
	}
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80027c2:	f000 fdcd 	bl	8003360 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1ad2      	subs	r2, r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d905      	bls.n	80027ea <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <Error_Handler>:
=======
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	2200      	movs	r2, #0
 8002392:	4619      	mov	r1, r3
 8002394:	68b8      	ldr	r0, [r7, #8]
 8002396:	f002 fb4d 	bl	8004a34 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <TimerPacket_Init>:
		gtp->ts_prev = gtp->ts_curr;
	}
}
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	609a      	str	r2, [r3, #8]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80023e8:	f000 fc94 	bl	8002d14 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1ad2      	subs	r2, r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	d905      	bls.n	8002410 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <Error_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
=======
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
=======
 800241e:	b672      	cpsid	i
}
 8002420:	bf00      	nop
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
<<<<<<< HEAD
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <Error_Handler+0x8>

08002800 <Get_Actual_Temps>:
								 { 0x69, 0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F, 0xF9 },
							 	 { 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F, 0xF9 },
								 { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp, uint16_t data) {
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	603a      	str	r2, [r7, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
 800280e:	460b      	mov	r3, r1
 8002810:	71bb      	strb	r3, [r7, #6]
 8002812:	4613      	mov	r3, r2
 8002814:	80bb      	strh	r3, [r7, #4]
    if (data == 0) {
 8002816:	88bb      	ldrh	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10e      	bne.n	800283a <Get_Actual_Temps+0x3a>
        actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = 999.0f; // error value
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	79bb      	ldrb	r3, [r7, #6]
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002836:	801a      	strh	r2, [r3, #0]
        return;
 8002838:	e059      	b.n	80028ee <Get_Actual_Temps+0xee>
    }

    float scalar = 30000.0f / (float)(data) - 1.0f;
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fa65 	bl	8000d0c <__aeabi_ui2f>
 8002842:	4603      	mov	r3, r0
 8002844:	4619      	mov	r1, r3
 8002846:	482b      	ldr	r0, [pc, #172]	@ (80028f4 <Get_Actual_Temps+0xf4>)
 8002848:	f7fe fb6c 	bl	8000f24 <__aeabi_fdiv>
 800284c:	4603      	mov	r3, r0
 800284e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f9a8 	bl	8000ba8 <__aeabi_fsub>
 8002858:	4603      	mov	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]
    scalar = ntcSeriesResistance / scalar;
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	4826      	ldr	r0, [pc, #152]	@ (80028f8 <Get_Actual_Temps+0xf8>)
 8002860:	f7fe fb60 	bl	8000f24 <__aeabi_fdiv>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
=======
 8002422:	bf00      	nop
 8002424:	e7fd      	b.n	8002422 <Error_Handler+0x8>
	...

08002428 <Get_Actual_Temps>:
		{ 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F,
				0xF9 }, { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08,
				0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	603a      	str	r2, [r7, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	460b      	mov	r3, r1
 8002438:	71bb      	strb	r3, [r7, #6]
 800243a:	4613      	mov	r3, r2
 800243c:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fc63 	bl	8000d0c <__aeabi_ui2f>
 8002446:	4603      	mov	r3, r0
 8002448:	4619      	mov	r1, r3
 800244a:	483a      	ldr	r0, [pc, #232]	@ (8002534 <Get_Actual_Temps+0x10c>)
 800244c:	f7fe fd6a 	bl	8000f24 <__aeabi_fdiv>
 8002450:	4603      	mov	r3, r0
 8002452:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fba6 	bl	8000ba8 <__aeabi_fsub>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <Get_Actual_Temps+0x110>)
 8002462:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 8002464:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <Get_Actual_Temps+0x110>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	4834      	ldr	r0, [pc, #208]	@ (800253c <Get_Actual_Temps+0x114>)
 800246c:	f7fe fd5a 	bl	8000f24 <__aeabi_fdiv>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <Get_Actual_Temps+0x110>)
 8002476:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 8002478:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <Get_Actual_Temps+0x110>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	492f      	ldr	r1, [pc, #188]	@ (800253c <Get_Actual_Temps+0x114>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fd50 	bl	8000f24 <__aeabi_fdiv>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <Get_Actual_Temps+0x118>)
 800248a:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 800248c:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <Get_Actual_Temps+0x118>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f82d 	bl	80004f0 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f005 f89b 	bl	80075d8 <log>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb29 	bl	8000b00 <__aeabi_d2f>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024b2:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4922      	ldr	r1, [pc, #136]	@ (8002544 <Get_Actual_Temps+0x11c>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fd32 	bl	8000f24 <__aeabi_fdiv>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024c6:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	491e      	ldr	r1, [pc, #120]	@ (8002548 <Get_Actual_Temps+0x120>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fb6c 	bl	8000bac <__addsf3>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024da:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80024e6:	f7fe fd1d 	bl	8000f24 <__aeabi_fdiv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024f0:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 80024f2:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <Get_Actual_Temps+0x118>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4915      	ldr	r1, [pc, #84]	@ (800254c <Get_Actual_Temps+0x124>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fb55 	bl	8000ba8 <__aeabi_fsub>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <Get_Actual_Temps+0x118>)
 8002504:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <Get_Actual_Temps+0x118>)
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	461a      	mov	r2, r3
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	4413      	add	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	18d4      	adds	r4, r2, r3
 8002520:	4608      	mov	r0, r1
 8002522:	f7fe fd9b 	bl	800105c <__aeabi_f2uiz>
 8002526:	4603      	mov	r3, r0
 8002528:	b29b      	uxth	r3, r3
 800252a:	8023      	strh	r3, [r4, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    float steinhart = scalar / ntcNominal;
 8002868:	4923      	ldr	r1, [pc, #140]	@ (80028f8 <Get_Actual_Temps+0xf8>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7fe fb5a 	bl	8000f24 <__aeabi_fdiv>
 8002870:	4603      	mov	r3, r0
 8002872:	60bb      	str	r3, [r7, #8]
    steinhart = log(steinhart);
 8002874:	68b8      	ldr	r0, [r7, #8]
 8002876:	f7fd fe3b 	bl	80004f0 <__aeabi_f2d>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f005 f87b 	bl	800797c <log>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe f937 	bl	8000b00 <__aeabi_d2f>
 8002892:	4603      	mov	r3, r0
 8002894:	60bb      	str	r3, [r7, #8]
    steinhart *= invBetaFactor;
 8002896:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <Get_Actual_Temps+0xfc>)
 8002898:	4619      	mov	r1, r3
 800289a:	68b8      	ldr	r0, [r7, #8]
 800289c:	f7fe fa8e 	bl	8000dbc <__aeabi_fmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	60bb      	str	r3, [r7, #8]
    steinhart += invNominalTemp;
 80028a4:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <Get_Actual_Temps+0x100>)
 80028a6:	4619      	mov	r1, r3
 80028a8:	68b8      	ldr	r0, [r7, #8]
 80028aa:	f7fe f97f 	bl	8000bac <__addsf3>
 80028ae:	4603      	mov	r3, r0
 80028b0:	60bb      	str	r3, [r7, #8]
    steinhart = 1.0f / steinhart;
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80028b8:	f7fe fb34 	bl	8000f24 <__aeabi_fdiv>
 80028bc:	4603      	mov	r3, r0
 80028be:	60bb      	str	r3, [r7, #8]
    steinhart -= 273.15f;
 80028c0:	4910      	ldr	r1, [pc, #64]	@ (8002904 <Get_Actual_Temps+0x104>)
 80028c2:	68b8      	ldr	r0, [r7, #8]
 80028c4:	f7fe f970 	bl	8000ba8 <__aeabi_fsub>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60bb      	str	r3, [r7, #8]

    actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 80028cc:	79fa      	ldrb	r2, [r7, #7]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	461a      	mov	r2, r3
 80028d8:	79bb      	ldrb	r3, [r7, #6]
 80028da:	4413      	add	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	18d4      	adds	r4, r2, r3
 80028e2:	68b8      	ldr	r0, [r7, #8]
 80028e4:	f7fe fbba 	bl	800105c <__aeabi_f2uiz>
 80028e8:	4603      	mov	r3, r0
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	8023      	strh	r3, [r4, #0]
}
<<<<<<< HEAD
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	46ea6000 	.word	0x46ea6000
 80028f8:	461c4000 	.word	0x461c4000
 80028fc:	3998a193 	.word	0x3998a193
 8002900:	3b5bcf0f 	.word	0x3b5bcf0f
 8002904:	43889333 	.word	0x43889333

08002908 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	2003      	movs	r0, #3
 8002916:	f7fe ff91 	bl	800183c <LTC_ADCV>
	LTC_POLLADC();
 800291a:	f7ff f815 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 800291e:	f7fe fd33 	bl	8001388 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fd6c 	bl	8001400 <Read_Cell_Volt>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <Read_Temp+0x88>)
 800294a:	4413      	add	r3, r2
 800294c:	4619      	mov	r1, r3
 800294e:	2008      	movs	r0, #8
 8002950:	f7fe fe0e 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002954:	f7fe fd18 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002958:	2002      	movs	r0, #2
 800295a:	f7fe fe77 	bl	800164c <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 800295e:	f7fe fd13 	bl	8001388 <Wakeup_Idle>
	LTC_ADAX(MD_FAST, 1); //doing GPIO all conversion
 8002962:	2101      	movs	r1, #1
 8002964:	2001      	movs	r0, #1
 8002966:	f7fe ffaf 	bl	80018c8 <LTC_ADAX>
	LTC_POLLADC();
 800296a:	f7fe ffed 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 800296e:	f7fe fd0b 	bl	8001388 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe feaa 	bl	80016cc <Read_Cell_Temps>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
 8002982:	e012      	b.n	80029aa <Read_Temp+0x7a>
=======
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	46ea6000 	.word	0x46ea6000
 8002538:	200001f4 	.word	0x200001f4
 800253c:	461c4000 	.word	0x461c4000
 8002540:	200001f8 	.word	0x200001f8
 8002544:	4556b000 	.word	0x4556b000
 8002548:	3b5bcf0f 	.word	0x3b5bcf0f
 800254c:	43889333 	.word	0x43889333

08002550 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	2003      	movs	r0, #3
 800255e:	f7ff f96b 	bl	8001838 <LTC_ADCV>
	LTC_POLLADC();
 8002562:	f7ff f9ef 	bl	8001944 <LTC_POLLADC>
	Wakeup_Idle();
 8002566:	f7fe ff0f 	bl	8001388 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe ff48 	bl	8001400 <Read_Cell_Volt>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4a1b      	ldr	r2, [pc, #108]	@ (8002600 <Read_Temp+0x88>)
 8002592:	4413      	add	r3, r2
 8002594:	4619      	mov	r1, r3
 8002596:	2008      	movs	r0, #8
 8002598:	f7fe ffea 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 800259c:	f7fe fef4 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7ff f853 	bl	800164c <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 80025a6:	f7fe feef 	bl	8001388 <Wakeup_Idle>
	LTC_ADAX(MD_FAST, 1); //doing GPIO all conversion
 80025aa:	2101      	movs	r1, #1
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff f989 	bl	80018c4 <LTC_ADAX>
	LTC_POLLADC();
 80025b2:	f7ff f9c7 	bl	8001944 <LTC_POLLADC>
	Wakeup_Idle();
 80025b6:	f7fe fee7 	bl	8001388 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff f884 	bl	80016c8 <Read_Cell_Temps>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
 80025ca:	e012      	b.n	80025f2 <Read_Temp+0x7a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
<<<<<<< HEAD
 8002984:	7dfa      	ldrb	r2, [r7, #23]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002998:	8abb      	ldrh	r3, [r7, #20]
 800299a:	7bf9      	ldrb	r1, [r7, #15]
 800299c:	7df8      	ldrb	r0, [r7, #23]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f7ff ff2e 	bl	8002800 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	3301      	adds	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	d9e9      	bls.n	8002984 <Read_Temp+0x54>
=======
 80025cc:	7dfa      	ldrb	r2, [r7, #23]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 80025e0:	8abb      	ldrh	r3, [r7, #20]
 80025e2:	7bf9      	ldrb	r1, [r7, #15]
 80025e4:	7df8      	ldrb	r0, [r7, #23]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f7ff ff1e 	bl	8002428 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	3301      	adds	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	2b07      	cmp	r3, #7
 80025f6:	d9e9      	bls.n	80025cc <Read_Temp+0x54>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

		}
	}
}
<<<<<<< HEAD
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000000c 	.word	0x2000000c

080029bc <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	881a      	ldrh	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	batt->cell_volt_lowest = batt->cell_volt[0];
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

	for (int i = 1; i < NUM_CELLS; i++) {
 80029de:	2301      	movs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e11a      	b.n	8002c1a <Cell_Summary_Voltage+0x25e>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d93a      	bls.n	8002a6c <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002a0a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d906      	bls.n	8002a20 <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f043 0310 	orr.w	r3, r3, #16
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002a26:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d910      	bls.n	8002a50 <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f043 0310 	orr.w	r3, r3, #16
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	2102      	movs	r1, #2
 8002a48:	4878      	ldr	r0, [pc, #480]	@ (8002c2c <Cell_Summary_Voltage+0x270>)
 8002a4a:	f002 faa5 	bl	8004f98 <HAL_GPIO_WritePin>
 8002a4e:	e00d      	b.n	8002a6c <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002a56:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d903      	bls.n	8002a66 <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e002      	b.n	8002a6c <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d23a      	bcs.n	8002af4 <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002a92:	f646 1278 	movw	r2, #27000	@ 0x6978
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d806      	bhi.n	8002aa8 <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002aae:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d810      	bhi.n	8002ad8 <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002acc:	2201      	movs	r2, #1
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4856      	ldr	r0, [pc, #344]	@ (8002c2c <Cell_Summary_Voltage+0x270>)
 8002ad2:	f002 fa61 	bl	8004f98 <HAL_GPIO_WritePin>
 8002ad6:	e00d      	b.n	8002af4 <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002ade:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d803      	bhi.n	8002aee <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e002      	b.n	8002af4 <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b08:	db10      	blt.n	8002b2c <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002b20:	2201      	movs	r2, #1
 8002b22:	2102      	movs	r1, #2
 8002b24:	4841      	ldr	r0, [pc, #260]	@ (8002c2c <Cell_Summary_Voltage+0x270>)
 8002b26:	f002 fa37 	bl	8004f98 <HAL_GPIO_WritePin>
 8002b2a:	e011      	b.n	8002b50 <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b40:	db03      	blt.n	8002b4a <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e002      	b.n	8002b50 <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b64:	db06      	blt.n	8002b74 <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c30 <Cell_Summary_Voltage+0x274>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d906      	bls.n	8002b8e <Cell_Summary_Voltage+0x1d2>
			*warnings |= 0b10000000;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002b94:	4a27      	ldr	r2, [pc, #156]	@ (8002c34 <Cell_Summary_Voltage+0x278>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d806      	bhi.n	8002ba8 <Cell_Summary_Voltage+0x1ec>
			*warnings |= 0b01000000;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002bae:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <Cell_Summary_Voltage+0x27c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d90b      	bls.n	8002bcc <Cell_Summary_Voltage+0x210>
			*fault |= 0b10000000;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <Cell_Summary_Voltage+0x270>)
 8002bc8:	f002 f9e6 	bl	8004f98 <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c3c <Cell_Summary_Voltage+0x280>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d80b      	bhi.n	8002bf0 <Cell_Summary_Voltage+0x234>
			*fault |= 0b01000000;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002be6:	2201      	movs	r2, #1
 8002be8:	2102      	movs	r1, #2
 8002bea:	4810      	ldr	r0, [pc, #64]	@ (8002c2c <Cell_Summary_Voltage+0x270>)
 8002bec:	f002 f9d4 	bl	8004f98 <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c04:	db06      	blt.n	8002c14 <Cell_Summary_Voltage+0x258>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b5f      	cmp	r3, #95	@ 0x5f
 8002c1e:	f77f aee1 	ble.w	80029e4 <Cell_Summary_Voltage+0x28>
		}
		if (BALANCE) {
			*states |= 0b10000000;
		}
	}
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40010c00 	.word	0x40010c00
 8002c30:	003e5507 	.word	0x003e5507
 8002c34:	002dc6c0 	.word	0x002dc6c0
 8002c38:	003e8f9f 	.word	0x003e8f9f
 8002c3c:	002bf200 	.word	0x002bf200

08002c40 <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e04f      	b.n	8002d0a <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 2196 	ldrh.w	r2, [r3, #406]	@ 0x196
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	3160      	adds	r1, #96	@ 0x60
 8002c76:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d224      	bcs.n	8002cc8 <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	3260      	adds	r2, #96	@ 0x60
 8002c84:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002c94:	2b36      	cmp	r3, #54	@ 0x36
 8002c96:	d906      	bls.n	8002ca6 <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002cac:	2b3b      	cmp	r3, #59	@ 0x3b
 8002cae:	d90b      	bls.n	8002cc8 <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	f043 0308 	orr.w	r3, r3, #8
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4816      	ldr	r0, [pc, #88]	@ (8002d1c <Cell_Summary_Temperature+0xdc>)
 8002cc4:	f002 f968 	bl	8004f98 <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8b3 2194 	ldrh.w	r2, [r3, #404]	@ 0x194
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6979      	ldr	r1, [r7, #20]
 8002cd2:	3160      	adds	r1, #96	@ 0x60
 8002cd4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d913      	bls.n	8002d04 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	3260      	adds	r2, #96	@ 0x60
 8002ce2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b5f      	cmp	r3, #95	@ 0x5f
 8002d0e:	ddac      	ble.n	8002c6a <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <MX_SPI1_Init>:
=======
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000000c 	.word	0x2000000c

08002604 <MX_SPI1_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
=======
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8002d24:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <MX_SPI1_Init+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d32:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d54:	2228      	movs	r2, #40	@ 0x28
 8002d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d70:	4804      	ldr	r0, [pc, #16]	@ (8002d84 <MX_SPI1_Init+0x64>)
 8002d72:	f003 f8d3 	bl	8005f1c <HAL_SPI_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d7c:	f7ff fd3a 	bl	80027f4 <Error_Handler>
=======
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <MX_SPI1_Init+0x64>)
 800260a:	4a18      	ldr	r2, [pc, #96]	@ (800266c <MX_SPI1_Init+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <MX_SPI1_Init+0x64>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <MX_SPI1_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002634:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002638:	2228      	movs	r2, #40	@ 0x28
 800263a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <MX_SPI1_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002648:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <MX_SPI1_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002650:	220a      	movs	r2, #10
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002654:	4804      	ldr	r0, [pc, #16]	@ (8002668 <MX_SPI1_Init+0x64>)
 8002656:	f003 f843 	bl	80056e0 <HAL_SPI_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002660:	f7ff fedb 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200001f4 	.word	0x200001f4
 8002d88:	40013000 	.word	0x40013000

08002d8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a47      	ldr	r2, [pc, #284]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	f040 8086 	bne.w	8002eba <HAL_SPI_MspInit+0x12e>
=======
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001fc 	.word	0x200001fc
 800266c:	40013000 	.word	0x40013000

08002670 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a48      	ldr	r2, [pc, #288]	@ (80027ac <HAL_SPI_MspInit+0x13c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	f040 8088 	bne.w	80027a2 <HAL_SPI_MspInit+0x132>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8002dae:	4b46      	ldr	r3, [pc, #280]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	4a45      	ldr	r2, [pc, #276]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002db4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002db8:	6193      	str	r3, [r2, #24]
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	4a3f      	ldr	r2, [pc, #252]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6193      	str	r3, [r2, #24]
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
=======
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <HAL_SPI_MspInit+0x140>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4a46      	ldr	r2, [pc, #280]	@ (80027b0 <HAL_SPI_MspInit+0x140>)
 8002698:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800269c:	6193      	str	r3, [r2, #24]
 800269e:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <HAL_SPI_MspInit+0x140>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <HAL_SPI_MspInit+0x140>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	4a40      	ldr	r2, [pc, #256]	@ (80027b0 <HAL_SPI_MspInit+0x140>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6193      	str	r3, [r2, #24]
 80026b6:	4b3e      	ldr	r3, [pc, #248]	@ (80027b0 <HAL_SPI_MspInit+0x140>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
<<<<<<< HEAD
 8002dde:	23a0      	movs	r3, #160	@ 0xa0
 8002de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	4619      	mov	r1, r3
 8002df0:	4836      	ldr	r0, [pc, #216]	@ (8002ecc <HAL_SPI_MspInit+0x140>)
 8002df2:	f001 ff4d 	bl	8004c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002df6:	2340      	movs	r3, #64	@ 0x40
 8002df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 0310 	add.w	r3, r7, #16
 8002e06:	4619      	mov	r1, r3
 8002e08:	4830      	ldr	r0, [pc, #192]	@ (8002ecc <HAL_SPI_MspInit+0x140>)
 8002e0a:	f001 ff41 	bl	8004c90 <HAL_GPIO_Init>
=======
 80026c2:	23a0      	movs	r3, #160	@ 0xa0
 80026c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	4619      	mov	r1, r3
 80026d4:	4837      	ldr	r0, [pc, #220]	@ (80027b4 <HAL_SPI_MspInit+0x144>)
 80026d6:	f002 f829 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026da:	2340      	movs	r3, #64	@ 0x40
 80026dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e6:	f107 0310 	add.w	r3, r7, #16
 80026ea:	4619      	mov	r1, r3
 80026ec:	4831      	ldr	r0, [pc, #196]	@ (80027b4 <HAL_SPI_MspInit+0x144>)
 80026ee:	f002 f81d 	bl	800472c <HAL_GPIO_Init>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
<<<<<<< HEAD
 8002e0e:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e10:	4a30      	ldr	r2, [pc, #192]	@ (8002ed4 <HAL_SPI_MspInit+0x148>)
 8002e12:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e14:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e34:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002e36:	4b26      	ldr	r3, [pc, #152]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002e42:	4823      	ldr	r0, [pc, #140]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e44:	f001 fb2e 	bl	80044a4 <HAL_DMA_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8002e4e:	f7ff fcd1 	bl	80027f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed0 <HAL_SPI_MspInit+0x144>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e60:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <HAL_SPI_MspInit+0x150>)
 8002e62:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e66:	2210      	movs	r2, #16
 8002e68:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e76:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e88:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e8e:	4812      	ldr	r0, [pc, #72]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002e90:	f001 fb08 	bl	80044a4 <HAL_DMA_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8002e9a:	f7ff fcab 	bl	80027f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002ea2:	649a      	str	r2, [r3, #72]	@ 0x48
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <HAL_SPI_MspInit+0x14c>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2103      	movs	r1, #3
 8002eae:	2023      	movs	r0, #35	@ 0x23
 8002eb0:	f001 fac1 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002eb4:	2023      	movs	r0, #35	@ 0x23
 8002eb6:	f001 fada 	bl	800446e <HAL_NVIC_EnableIRQ>
=======
 80026f2:	4b31      	ldr	r3, [pc, #196]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <HAL_SPI_MspInit+0x14c>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f8:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026fe:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002704:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800270a:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 800270c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002710:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002712:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 8002714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002718:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800271a:	4b27      	ldr	r3, [pc, #156]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002720:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 8002722:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002726:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002728:	4823      	ldr	r0, [pc, #140]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 800272a:	f001 fb7b 	bl	8003e24 <HAL_DMA_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002734:	f7ff fe71 	bl	800241a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 800273c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800273e:	4a1e      	ldr	r2, [pc, #120]	@ (80027b8 <HAL_SPI_MspInit+0x148>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002744:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 8002746:	4a1f      	ldr	r2, [pc, #124]	@ (80027c4 <HAL_SPI_MspInit+0x154>)
 8002748:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 800274c:	2210      	movs	r2, #16
 800274e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002756:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 8002758:	2280      	movs	r2, #128	@ 0x80
 800275a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275c:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002768:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 8002770:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002774:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002776:	4812      	ldr	r0, [pc, #72]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 8002778:	f001 fb54 	bl	8003e24 <HAL_DMA_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8002782:	f7ff fe4a 	bl	800241a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0d      	ldr	r2, [pc, #52]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 800278a:	649a      	str	r2, [r3, #72]	@ 0x48
 800278c:	4a0c      	ldr	r2, [pc, #48]	@ (80027c0 <HAL_SPI_MspInit+0x150>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2103      	movs	r1, #3
 8002796:	2023      	movs	r0, #35	@ 0x23
 8002798:	f001 fb0d 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800279c:	2023      	movs	r0, #35	@ 0x23
 800279e:	f001 fb26 	bl	8003dee <HAL_NVIC_EnableIRQ>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002eba:	bf00      	nop
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40013000 	.word	0x40013000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40010800 	.word	0x40010800
 8002ed0:	2000024c 	.word	0x2000024c
 8002ed4:	4002001c 	.word	0x4002001c
 8002ed8:	20000290 	.word	0x20000290
 8002edc:	40020030 	.word	0x40020030

08002ee0 <LTC_nCS_High>:
=======
 80027a2:	bf00      	nop
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40013000 	.word	0x40013000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010800 	.word	0x40010800
 80027b8:	20000254 	.word	0x20000254
 80027bc:	4002001c 	.word	0x4002001c
 80027c0:	20000298 	.word	0x20000298
 80027c4:	40020030 	.word	0x40020030

080027c8 <LTC_nCS_High>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
<<<<<<< HEAD
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2110      	movs	r1, #16
 8002ee8:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <LTC_nCS_High+0x14>)
 8002eea:	f002 f855 	bl	8004f98 <HAL_GPIO_WritePin>
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40010800 	.word	0x40010800

08002ef8 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002efc:	2200      	movs	r2, #0
 8002efe:	2110      	movs	r1, #16
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <LTC_nCS_Low+0x14>)
 8002f02:	f002 f849 	bl	8004f98 <HAL_GPIO_WritePin>
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40010800 	.word	0x40010800

08002f10 <HAL_MspInit>:
=======
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 80027cc:	2201      	movs	r2, #1
 80027ce:	2110      	movs	r1, #16
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <LTC_nCS_High+0x14>)
 80027d2:	f002 f92f 	bl	8004a34 <HAL_GPIO_WritePin>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40010800 	.word	0x40010800

080027e0 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 80027e4:	2200      	movs	r2, #0
 80027e6:	2110      	movs	r1, #16
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <LTC_nCS_Low+0x14>)
 80027ea:	f002 f923 	bl	8004a34 <HAL_GPIO_WritePin>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40010800 	.word	0x40010800

080027f8 <HAL_MspInit>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
=======
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_MspInit+0x5c>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_MspInit+0x5c>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6193      	str	r3, [r2, #24]
 8002f22:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_MspInit+0x5c>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <HAL_MspInit+0x5c>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a0e      	ldr	r2, [pc, #56]	@ (8002f6c <HAL_MspInit+0x5c>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <HAL_MspInit+0x5c>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
=======
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_MspInit+0x5c>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_MspInit+0x5c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6193      	str	r3, [r2, #24]
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_MspInit+0x5c>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <HAL_MspInit+0x5c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a0e      	ldr	r2, [pc, #56]	@ (8002854 <HAL_MspInit+0x5c>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002820:	61d3      	str	r3, [r2, #28]
 8002822:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <HAL_MspInit+0x5c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_MspInit+0x60>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <HAL_MspInit+0x60>)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6053      	str	r3, [r2, #4]
=======
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_MspInit+0x60>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <HAL_MspInit+0x60>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6053      	str	r3, [r2, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010000 	.word	0x40010000

08002f74 <NMI_Handler>:
=======
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000

0800285c <NMI_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
=======
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <NMI_Handler+0x4>

08002f7c <HardFault_Handler>:
=======
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <NMI_Handler+0x4>

08002864 <HardFault_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
=======
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <HardFault_Handler+0x4>

08002f84 <MemManage_Handler>:
=======
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <HardFault_Handler+0x4>

0800286c <MemManage_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
=======
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <MemManage_Handler+0x4>

08002f8c <BusFault_Handler>:
=======
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <MemManage_Handler+0x4>

08002874 <BusFault_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
=======
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <BusFault_Handler+0x4>

08002f94 <UsageFault_Handler>:
=======
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
=======
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <UsageFault_Handler+0x4>

08002f9c <SVC_Handler>:
=======
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <UsageFault_Handler+0x4>

08002884 <SVC_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
=======
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <DebugMon_Handler>:
=======
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
=======
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <PendSV_Handler>:
=======
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <PendSV_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
=======
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <SysTick_Handler>:
=======
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Handler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
=======
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002fc4:	f000 f9ba 	bl	800333c <HAL_IncTick>
=======
 80028ac:	f000 fa20 	bl	8002cf0 <HAL_IncTick>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DMA1_Channel1_IRQHandler>:
=======
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DMA1_Channel1_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< HEAD
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
=======
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8002fd0:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <DMA1_Channel1_IRQHandler+0x10>)
 8002fd2:	f001 fc21 	bl	8004818 <HAL_DMA_IRQHandler>
=======
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <DMA1_Channel1_IRQHandler+0x10>)
 80028ba:	f001 fccd 	bl	8004258 <HAL_DMA_IRQHandler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
<<<<<<< HEAD
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000188 	.word	0x20000188

08002fe0 <DMA1_Channel2_IRQHandler>:
=======
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000188 	.word	0x20000188

080028c8 <DMA1_Channel2_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
<<<<<<< HEAD
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
=======
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
<<<<<<< HEAD
 8002fe4:	4802      	ldr	r0, [pc, #8]	@ (8002ff0 <DMA1_Channel2_IRQHandler+0x10>)
 8002fe6:	f001 fc17 	bl	8004818 <HAL_DMA_IRQHandler>
=======
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <DMA1_Channel2_IRQHandler+0x10>)
 80028ce:	f001 fcc3 	bl	8004258 <HAL_DMA_IRQHandler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
<<<<<<< HEAD
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000024c 	.word	0x2000024c

08002ff4 <DMA1_Channel3_IRQHandler>:
=======
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000254 	.word	0x20000254

080028dc <DMA1_Channel3_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
<<<<<<< HEAD
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
=======
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
<<<<<<< HEAD
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <DMA1_Channel3_IRQHandler+0x10>)
 8002ffa:	f001 fc0d 	bl	8004818 <HAL_DMA_IRQHandler>
=======
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <DMA1_Channel3_IRQHandler+0x10>)
 80028e2:	f001 fcb9 	bl	8004258 <HAL_DMA_IRQHandler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
<<<<<<< HEAD
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000290 	.word	0x20000290

08003008 <DMA1_Channel4_IRQHandler>:
=======
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000298 	.word	0x20000298

080028f0 <DMA1_Channel4_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
<<<<<<< HEAD
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
=======
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
<<<<<<< HEAD
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <DMA1_Channel4_IRQHandler+0x10>)
 800300e:	f001 fc03 	bl	8004818 <HAL_DMA_IRQHandler>
=======
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <DMA1_Channel4_IRQHandler+0x10>)
 80028f6:	f001 fcaf 	bl	8004258 <HAL_DMA_IRQHandler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
<<<<<<< HEAD
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000364 	.word	0x20000364

0800301c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003020:	4803      	ldr	r0, [pc, #12]	@ (8003030 <ADC1_2_IRQHandler+0x14>)
 8003022:	f000 fc8f 	bl	8003944 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003026:	4803      	ldr	r0, [pc, #12]	@ (8003034 <ADC1_2_IRQHandler+0x18>)
 8003028:	f000 fc8c 	bl	8003944 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000128 	.word	0x20000128
 8003034:	20000158 	.word	0x20000158

08003038 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800303c:	4802      	ldr	r0, [pc, #8]	@ (8003048 <SPI1_IRQHandler+0x10>)
 800303e:	f003 fbf7 	bl	8006830 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200001f4 	.word	0x200001f4

0800304c <USART1_IRQHandler>:
=======
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200003b0 	.word	0x200003b0

08002904 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <DMA1_Channel5_IRQHandler+0x10>)
 800290a:	f001 fca5 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2000036c 	.word	0x2000036c

08002918 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800291c:	4803      	ldr	r0, [pc, #12]	@ (800292c <ADC1_2_IRQHandler+0x14>)
 800291e:	f000 faff 	bl	8002f20 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002922:	4803      	ldr	r0, [pc, #12]	@ (8002930 <ADC1_2_IRQHandler+0x18>)
 8002924:	f000 fafc 	bl	8002f20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000128 	.word	0x20000128
 8002930:	20000158 	.word	0x20000158

08002934 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002938:	4802      	ldr	r0, [pc, #8]	@ (8002944 <CAN1_TX_IRQHandler+0x10>)
 800293a:	f000 ff38 	bl	80037ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200001cc 	.word	0x200001cc

08002948 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800294c:	4802      	ldr	r0, [pc, #8]	@ (8002958 <CAN1_RX0_IRQHandler+0x10>)
 800294e:	f000 ff2e 	bl	80037ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200001cc 	.word	0x200001cc

0800295c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <CAN1_RX1_IRQHandler+0x10>)
 8002962:	f000 ff24 	bl	80037ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200001cc 	.word	0x200001cc

08002970 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002974:	4802      	ldr	r0, [pc, #8]	@ (8002980 <SPI1_IRQHandler+0x10>)
 8002976:	f003 faed 	bl	8005f54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200001fc 	.word	0x200001fc

08002984 <USART1_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
=======
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <USART1_IRQHandler+0x10>)
 8003052:	f003 ff71 	bl	8006f38 <HAL_UART_IRQHandler>
=======
 8002988:	4802      	ldr	r0, [pc, #8]	@ (8002994 <USART1_IRQHandler+0x10>)
 800298a:	f004 f903 	bl	8006b94 <HAL_UART_IRQHandler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000031c 	.word	0x2000031c

08003060 <SystemInit>:
=======
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000324 	.word	0x20000324

08002998 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800299c:	4802      	ldr	r0, [pc, #8]	@ (80029a8 <TIM7_IRQHandler+0x10>)
 800299e:	f003 fe9b 	bl	80066d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200002dc 	.word	0x200002dc

080029ac <SystemInit>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
=======
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <MX_TIM7_Init>:
=======
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <MX_TIM7_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
<<<<<<< HEAD
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
=======
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8003072:	463b      	mov	r3, r7
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
=======
 80029be:	463b      	mov	r3, r7
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
<<<<<<< HEAD
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <MX_TIM7_Init+0x64>)
 800307c:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <MX_TIM7_Init+0x68>)
 800307e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <MX_TIM7_Init+0x64>)
 8003082:	2200      	movs	r2, #0
 8003084:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003086:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <MX_TIM7_Init+0x64>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <MX_TIM7_Init+0x64>)
 800308e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003092:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003094:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <MX_TIM7_Init+0x64>)
 8003096:	2280      	movs	r2, #128	@ 0x80
 8003098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800309a:	480d      	ldr	r0, [pc, #52]	@ (80030d0 <MX_TIM7_Init+0x64>)
 800309c:	f003 fdcf 	bl	8006c3e <HAL_TIM_Base_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80030a6:	f7ff fba5 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80030b2:	463b      	mov	r3, r7
 80030b4:	4619      	mov	r1, r3
 80030b6:	4806      	ldr	r0, [pc, #24]	@ (80030d0 <MX_TIM7_Init+0x64>)
 80030b8:	f003 fe88 	bl	8006dcc <HAL_TIMEx_MasterConfigSynchronization>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80030c2:	f7ff fb97 	bl	80027f4 <Error_Handler>
=======
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <MX_TIM7_Init+0x64>)
 80029c8:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <MX_TIM7_Init+0x68>)
 80029ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80029cc:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <MX_TIM7_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <MX_TIM7_Init+0x64>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80029d8:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <MX_TIM7_Init+0x64>)
 80029da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029e0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <MX_TIM7_Init+0x64>)
 80029e2:	2280      	movs	r2, #128	@ 0x80
 80029e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029e6:	480d      	ldr	r0, [pc, #52]	@ (8002a1c <MX_TIM7_Init+0x64>)
 80029e8:	f003 fe27 	bl	800663a <HAL_TIM_Base_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80029f2:	f7ff fd12 	bl	800241a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029fe:	463b      	mov	r3, r7
 8002a00:	4619      	mov	r1, r3
 8002a02:	4806      	ldr	r0, [pc, #24]	@ (8002a1c <MX_TIM7_Init+0x64>)
 8002a04:	f003 fffe 	bl	8006a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002a0e:	f7ff fd04 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
<<<<<<< HEAD
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200002d4 	.word	0x200002d4
 80030d4:	40001400 	.word	0x40001400

080030d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_TIM_Base_MspInit+0x34>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10b      	bne.n	8003102 <HAL_TIM_Base_MspInit+0x2a>
=======
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200002dc 	.word	0x200002dc
 8002a20:	40001400 	.word	0x40001400

08002a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0d      	ldr	r2, [pc, #52]	@ (8002a68 <HAL_TIM_Base_MspInit+0x44>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d113      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
<<<<<<< HEAD
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_TIM_Base_MspInit+0x38>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4a08      	ldr	r2, [pc, #32]	@ (8003110 <HAL_TIM_Base_MspInit+0x38>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	61d3      	str	r3, [r2, #28]
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_TIM_Base_MspInit+0x38>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
=======
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_TIM_Base_MspInit+0x48>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <HAL_TIM_Base_MspInit+0x48>)
 8002a3c:	f043 0320 	orr.w	r3, r3, #32
 8002a40:	61d3      	str	r3, [r2, #28]
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_TIM_Base_MspInit+0x48>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2037      	movs	r0, #55	@ 0x37
 8002a54:	f001 f9af 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a58:	2037      	movs	r0, #55	@ 0x37
 8002a5a:	f001 f9c8 	bl	8003dee <HAL_NVIC_EnableIRQ>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40001400 	.word	0x40001400
 8003110:	40021000 	.word	0x40021000

08003114 <MX_USART1_UART_Init>:
=======
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40001400 	.word	0x40001400
 8002a6c:	40021000 	.word	0x40021000

08002a70 <MX_USART1_UART_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
=======
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 800311a:	4a12      	ldr	r2, [pc, #72]	@ (8003164 <MX_USART1_UART_Init+0x50>)
 800311c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 8003120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003132:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 800313a:	220c      	movs	r2, #12
 800313c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 8003146:	2200      	movs	r2, #0
 8003148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800314a:	4805      	ldr	r0, [pc, #20]	@ (8003160 <MX_USART1_UART_Init+0x4c>)
 800314c:	f003 fea4 	bl	8006e98 <HAL_UART_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003156:	f7ff fb4d 	bl	80027f4 <Error_Handler>
=======
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <MX_USART1_UART_Init+0x50>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	@ (8002abc <MX_USART1_UART_Init+0x4c>)
 8002aa8:	f004 f824 	bl	8006af4 <HAL_UART_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ab2:	f7ff fcb2 	bl	800241a <Error_Handler>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	2000031c 	.word	0x2000031c
 8003164:	40013800 	.word	0x40013800

08003168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a33      	ldr	r2, [pc, #204]	@ (8003250 <HAL_UART_MspInit+0xe8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d15f      	bne.n	8003248 <HAL_UART_MspInit+0xe0>
=======
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000324 	.word	0x20000324
 8002ac0:	40013800 	.word	0x40013800

08002ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a47      	ldr	r2, [pc, #284]	@ (8002bfc <HAL_UART_MspInit+0x138>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	f040 8086 	bne.w	8002bf2 <HAL_UART_MspInit+0x12e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <HAL_UART_MspInit+0xec>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a31      	ldr	r2, [pc, #196]	@ (8003254 <HAL_UART_MspInit+0xec>)
 800318e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b2f      	ldr	r3, [pc, #188]	@ (8003254 <HAL_UART_MspInit+0xec>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003254 <HAL_UART_MspInit+0xec>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003254 <HAL_UART_MspInit+0xec>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <HAL_UART_MspInit+0xec>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
=======
 8002ae6:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <HAL_UART_MspInit+0x13c>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	4a45      	ldr	r2, [pc, #276]	@ (8002c00 <HAL_UART_MspInit+0x13c>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002af0:	6193      	str	r3, [r2, #24]
 8002af2:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_UART_MspInit+0x13c>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_UART_MspInit+0x13c>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a3f      	ldr	r2, [pc, #252]	@ (8002c00 <HAL_UART_MspInit+0x13c>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_UART_MspInit+0x13c>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 80031b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0310 	add.w	r3, r7, #16
 80031ca:	4619      	mov	r1, r3
 80031cc:	4822      	ldr	r0, [pc, #136]	@ (8003258 <HAL_UART_MspInit+0xf0>)
 80031ce:	f001 fd5f 	bl	8004c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	4619      	mov	r1, r3
 80031e6:	481c      	ldr	r0, [pc, #112]	@ (8003258 <HAL_UART_MspInit+0xf0>)
 80031e8:	f001 fd52 	bl	8004c90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_UART_MspInit+0xf4>)
 80031ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <HAL_UART_MspInit+0xf8>)
 80031f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <HAL_UART_MspInit+0xf4>)
 80031f4:	2210      	movs	r2, #16
 80031f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <HAL_UART_MspInit+0xf4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <HAL_UART_MspInit+0xf4>)
 8003200:	2280      	movs	r2, #128	@ 0x80
 8003202:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_UART_MspInit+0xf4>)
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320a:	4b14      	ldr	r3, [pc, #80]	@ (800325c <HAL_UART_MspInit+0xf4>)
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003210:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_UART_MspInit+0xf4>)
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003216:	4b11      	ldr	r3, [pc, #68]	@ (800325c <HAL_UART_MspInit+0xf4>)
 8003218:	2200      	movs	r2, #0
 800321a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800321c:	480f      	ldr	r0, [pc, #60]	@ (800325c <HAL_UART_MspInit+0xf4>)
 800321e:	f001 f941 	bl	80044a4 <HAL_DMA_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003228:	f7ff fae4 	bl	80027f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0b      	ldr	r2, [pc, #44]	@ (800325c <HAL_UART_MspInit+0xf4>)
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
 8003232:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_UART_MspInit+0xf4>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2101      	movs	r1, #1
 800323c:	2025      	movs	r0, #37	@ 0x25
 800323e:	f001 f8fa 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003242:	2025      	movs	r0, #37	@ 0x25
 8003244:	f001 f913 	bl	800446e <HAL_NVIC_EnableIRQ>
=======
 8002b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4836      	ldr	r0, [pc, #216]	@ (8002c04 <HAL_UART_MspInit+0x140>)
 8002b2c:	f001 fdfe 	bl	800472c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	4619      	mov	r1, r3
 8002b44:	482f      	ldr	r0, [pc, #188]	@ (8002c04 <HAL_UART_MspInit+0x140>)
 8002b46:	f001 fdf1 	bl	800472c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c0c <HAL_UART_MspInit+0x148>)
 8002b4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b62:	4b29      	ldr	r3, [pc, #164]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b68:	4b27      	ldr	r3, [pc, #156]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b7a:	4823      	ldr	r0, [pc, #140]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b7c:	f001 f952 	bl	8003e24 <HAL_DMA_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002b86:	f7ff fc48 	bl	800241a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_UART_MspInit+0x144>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002b98:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <HAL_UART_MspInit+0x150>)
 8002b9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bae:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bc6:	4812      	ldr	r0, [pc, #72]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bc8:	f001 f92c 	bl	8003e24 <HAL_DMA_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002bd2:	f7ff fc22 	bl	800241a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c10 <HAL_UART_MspInit+0x14c>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2101      	movs	r1, #1
 8002be6:	2025      	movs	r0, #37	@ 0x25
 8002be8:	f001 f8e5 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bec:	2025      	movs	r0, #37	@ 0x25
 8002bee:	f001 f8fe 	bl	8003dee <HAL_NVIC_EnableIRQ>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003248:	bf00      	nop
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013800 	.word	0x40013800
 8003254:	40021000 	.word	0x40021000
 8003258:	40010800 	.word	0x40010800
 800325c:	20000364 	.word	0x20000364
 8003260:	40020044 	.word	0x40020044

08003264 <Reset_Handler>:
 8003264:	f7ff fefc 	bl	8003060 <SystemInit>
 8003268:	480b      	ldr	r0, [pc, #44]	@ (8003298 <LoopFillZerobss+0xe>)
 800326a:	490c      	ldr	r1, [pc, #48]	@ (800329c <LoopFillZerobss+0x12>)
 800326c:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <LoopFillZerobss+0x16>)
 800326e:	2300      	movs	r3, #0
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:
 8003272:	58d4      	ldr	r4, [r2, r3]
 8003274:	50c4      	str	r4, [r0, r3]
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:
 8003278:	18c4      	adds	r4, r0, r3
 800327a:	428c      	cmp	r4, r1
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
 800327e:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <LoopFillZerobss+0x1a>)
 8003280:	4c09      	ldr	r4, [pc, #36]	@ (80032a8 <LoopFillZerobss+0x1e>)
 8003282:	2300      	movs	r3, #0
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:
 800328a:	42a2      	cmp	r2, r4
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>
 800328e:	f004 fb43 	bl	8007918 <__libc_init_array>
 8003292:	f7ff f897 	bl	80023c4 <main>
 8003296:	4770      	bx	lr
 8003298:	20000000 	.word	0x20000000
 800329c:	200000c8 	.word	0x200000c8
 80032a0:	080081e4 	.word	0x080081e4
 80032a4:	200000c8 	.word	0x200000c8
 80032a8:	200004e4 	.word	0x200004e4

080032ac <CAN1_RX0_IRQHandler>:
 80032ac:	e7fe      	b.n	80032ac <CAN1_RX0_IRQHandler>
	...

080032b0 <HAL_Init>:
=======
 8002bf2:	bf00      	nop
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010800 	.word	0x40010800
 8002c08:	2000036c 	.word	0x2000036c
 8002c0c:	40020058 	.word	0x40020058
 8002c10:	200003b0 	.word	0x200003b0
 8002c14:	40020044 	.word	0x40020044

08002c18 <Reset_Handler>:
 8002c18:	f7ff fec8 	bl	80029ac <SystemInit>
 8002c1c:	480b      	ldr	r0, [pc, #44]	@ (8002c4c <LoopFillZerobss+0xe>)
 8002c1e:	490c      	ldr	r1, [pc, #48]	@ (8002c50 <LoopFillZerobss+0x12>)
 8002c20:	4a0c      	ldr	r2, [pc, #48]	@ (8002c54 <LoopFillZerobss+0x16>)
 8002c22:	2300      	movs	r3, #0
 8002c24:	e002      	b.n	8002c2c <LoopCopyDataInit>

08002c26 <CopyDataInit>:
 8002c26:	58d4      	ldr	r4, [r2, r3]
 8002c28:	50c4      	str	r4, [r0, r3]
 8002c2a:	3304      	adds	r3, #4

08002c2c <LoopCopyDataInit>:
 8002c2c:	18c4      	adds	r4, r0, r3
 8002c2e:	428c      	cmp	r4, r1
 8002c30:	d3f9      	bcc.n	8002c26 <CopyDataInit>
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <LoopFillZerobss+0x1a>)
 8002c34:	4c09      	ldr	r4, [pc, #36]	@ (8002c5c <LoopFillZerobss+0x1e>)
 8002c36:	2300      	movs	r3, #0
 8002c38:	e001      	b.n	8002c3e <LoopFillZerobss>

08002c3a <FillZerobss>:
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	3204      	adds	r2, #4

08002c3e <LoopFillZerobss>:
 8002c3e:	42a2      	cmp	r2, r4
 8002c40:	d3fb      	bcc.n	8002c3a <FillZerobss>
 8002c42:	f004 fc97 	bl	8007574 <__libc_init_array>
 8002c46:	f7ff fa5d 	bl	8002104 <main>
 8002c4a:	4770      	bx	lr
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	200000c8 	.word	0x200000c8
 8002c54:	08007e1c 	.word	0x08007e1c
 8002c58:	200000c8 	.word	0x200000c8
 8002c5c:	20000530 	.word	0x20000530

08002c60 <CAN1_SCE_IRQHandler>:
 8002c60:	e7fe      	b.n	8002c60 <CAN1_SCE_IRQHandler>
	...

08002c64 <HAL_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
=======
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80032b4:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <HAL_Init+0x28>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <HAL_Init+0x28>)
 80032ba:	f043 0310 	orr.w	r3, r3, #16
 80032be:	6013      	str	r3, [r2, #0]
=======
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_Init+0x28>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_Init+0x28>)
 8002c6e:	f043 0310 	orr.w	r3, r3, #16
 8002c72:	6013      	str	r3, [r2, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80032c0:	2003      	movs	r0, #3
 80032c2:	f001 f8ad 	bl	8004420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c6:	200f      	movs	r0, #15
 80032c8:	f000 f808 	bl	80032dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032cc:	f7ff fe20 	bl	8002f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40022000 	.word	0x40022000

080032dc <HAL_InitTick>:
=======
 8002c74:	2003      	movs	r0, #3
 8002c76:	f001 f893 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	200f      	movs	r0, #15
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fdba 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40022000 	.word	0x40022000

08002c90 <HAL_InitTick>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <HAL_InitTick+0x54>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_InitTick+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f8c5 	bl	800448a <HAL_SYSTICK_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00e      	b.n	8003328 <HAL_InitTick+0x4c>
=======
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f8ab 	bl	8003e0a <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d80a      	bhi.n	8003326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f001 f88d 	bl	8004436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4a06      	ldr	r2, [pc, #24]	@ (8003338 <HAL_InitTick+0x5c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
=======
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f001 f873 	bl	8003db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	@ (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2000006c 	.word	0x2000006c
 8003334:	20000074 	.word	0x20000074
 8003338:	20000070 	.word	0x20000070

0800333c <HAL_IncTick>:
=======
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000006c 	.word	0x2000006c
 8002ce8:	20000074 	.word	0x20000074
 8002cec:	20000070 	.word	0x20000070

08002cf0 <HAL_IncTick>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_IncTick+0x1c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_IncTick+0x20>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a03      	ldr	r2, [pc, #12]	@ (800335c <HAL_IncTick+0x20>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	20000074 	.word	0x20000074
 800335c:	200003a8 	.word	0x200003a8

08003360 <HAL_GetTick>:
=======
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <HAL_IncTick+0x1c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_IncTick+0x20>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a03      	ldr	r2, [pc, #12]	@ (8002d10 <HAL_IncTick+0x20>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000074 	.word	0x20000074
 8002d10:	200003f4 	.word	0x200003f4

08002d14 <HAL_GetTick>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return uwTick;
 8003364:	4b02      	ldr	r3, [pc, #8]	@ (8003370 <HAL_GetTick+0x10>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	200003a8 	.word	0x200003a8

08003374 <HAL_Delay>:
=======
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return uwTick;
 8002d18:	4b02      	ldr	r3, [pc, #8]	@ (8002d24 <HAL_GetTick+0x10>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	200003f4 	.word	0x200003f4

08002d28 <HAL_Delay>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff fff0 	bl	8003360 <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800339a:	bf00      	nop
 800339c:	f7ff ffe0 	bl	8003360 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
  {
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000074 	.word	0x20000074

080033bc <HAL_ADC_Init>:
=======
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff fff0 	bl	8002d14 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d005      	beq.n	8002d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_Delay+0x44>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d4e:	bf00      	nop
 8002d50:	f7ff ffe0 	bl	8002d14 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d8f7      	bhi.n	8002d50 <HAL_Delay+0x28>
  {
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000074 	.word	0x20000074

08002d70 <HAL_ADC_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0be      	b.n	800355c <HAL_ADC_Init+0x1a0>
=======
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0be      	b.n	8002f10 <HAL_ADC_Init+0x1a0>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
=======
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
=======
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fb98 	bl	8001b30 <HAL_ADC_MspInit>
=======
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe febc 	bl	8001b2c <HAL_ADC_MspInit>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fcc3 	bl	8003d8c <ADC_ConversionStop_Disable>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]
=======
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa7d 	bl	80032b4 <ADC_ConversionStop_Disable>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
<<<<<<< HEAD
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8099 	bne.w	800354a <HAL_ADC_Init+0x18e>
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8095 	bne.w	800354a <HAL_ADC_Init+0x18e>
=======
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 8099 	bne.w	8002efe <HAL_ADC_Init+0x18e>
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8095 	bne.w	8002efe <HAL_ADC_Init+0x18e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003428:	f023 0302 	bic.w	r3, r3, #2
 800342c:	f043 0202 	orr.w	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ddc:	f023 0302 	bic.w	r3, r3, #2
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
<<<<<<< HEAD
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800343c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	7b1b      	ldrb	r3, [r3, #12]
 8003442:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003444:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
=======
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002df0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7b1b      	ldrb	r3, [r3, #12]
 8002df6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002df8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
<<<<<<< HEAD
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003454:	d003      	beq.n	800345e <HAL_ADC_Init+0xa2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_ADC_Init+0xa8>
 800345e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003462:	e000      	b.n	8003466 <HAL_ADC_Init+0xaa>
 8003464:	2300      	movs	r3, #0
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
=======
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e08:	d003      	beq.n	8002e12 <HAL_ADC_Init+0xa2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d102      	bne.n	8002e18 <HAL_ADC_Init+0xa8>
 8002e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_Init+0xaa>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
<<<<<<< HEAD
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7d1b      	ldrb	r3, [r3, #20]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d119      	bne.n	80034a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7b1b      	ldrb	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_ADC_Init+0xd4>
=======
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7d1b      	ldrb	r3, [r3, #20]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d119      	bne.n	8002e5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7b1b      	ldrb	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_Init+0xd4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
<<<<<<< HEAD
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	3b01      	subs	r3, #1
 8003482:	035a      	lsls	r2, r3, #13
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e00b      	b.n	80034a8 <HAL_ADC_Init+0xec>
=======
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	035a      	lsls	r2, r3, #13
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e00b      	b.n	8002e5c <HAL_ADC_Init+0xec>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
<<<<<<< HEAD
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
=======
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
<<<<<<< HEAD
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <HAL_ADC_Init+0x1a8>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]
=======
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <HAL_ADC_Init+0x1a8>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6093      	str	r3, [r2, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d8:	d003      	beq.n	80034e2 <HAL_ADC_Init+0x126>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d104      	bne.n	80034ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	051b      	lsls	r3, r3, #20
 80034ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e8c:	d003      	beq.n	8002e96 <HAL_ADC_Init+0x126>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d104      	bne.n	8002ea0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
<<<<<<< HEAD
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <HAL_ADC_Init+0x1ac>)
 8003508:	4013      	ands	r3, r2
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d10b      	bne.n	8003528 <HAL_ADC_Init+0x16c>
=======
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <HAL_ADC_Init+0x1ac>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d10b      	bne.n	8002edc <HAL_ADC_Init+0x16c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003526:	e018      	b.n	800355a <HAL_ADC_Init+0x19e>
=======
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eda:	e018      	b.n	8002f0e <HAL_ADC_Init+0x19e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	f023 0312 	bic.w	r3, r3, #18
 8003530:	f043 0210 	orr.w	r2, r3, #16
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	f023 0312 	bic.w	r3, r3, #18
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003548:	e007      	b.n	800355a <HAL_ADC_Init+0x19e>
=======
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002efc:	e007      	b.n	8002f0e <HAL_ADC_Init+0x19e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
=======
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	f043 0210 	orr.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800355a:	7dfb      	ldrb	r3, [r7, #23]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	ffe1f7fd 	.word	0xffe1f7fd
 8003568:	ff1f0efe 	.word	0xff1f0efe

0800356c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
=======
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	ffe1f7fd 	.word	0xffe1f7fd
 8002f1c:	ff1f0efe 	.word	0xff1f0efe

08002f20 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
=======
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  
  
<<<<<<< HEAD
  /* Process locked */
  __HAL_LOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Start+0x1a>
 8003582:	2302      	movs	r3, #2
 8003584:	e098      	b.n	80036b8 <HAL_ADC_Start+0x14c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fba2 	bl	8003cd8 <ADC_Enable>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8087 	bne.w	80036ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a41      	ldr	r2, [pc, #260]	@ (80036c0 <HAL_ADC_Start+0x154>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d105      	bne.n	80035ca <HAL_ADC_Start+0x5e>
 80035be:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <HAL_ADC_Start+0x158>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d026      	beq.n	8003632 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035f4:	e01d      	b.n	8003632 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2f      	ldr	r2, [pc, #188]	@ (80036c4 <HAL_ADC_Start+0x158>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_ADC_Start+0xaa>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2b      	ldr	r2, [pc, #172]	@ (80036c0 <HAL_ADC_Start+0x154>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <HAL_ADC_Start+0xc6>
 8003616:	4b2b      	ldr	r3, [pc, #172]	@ (80036c4 <HAL_ADC_Start+0x158>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800362a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	f023 0206 	bic.w	r2, r3, #6
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c
 800364a:	e002      	b.n	8003652 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f06f 0202 	mvn.w	r2, #2
 8003662:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800366e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003672:	d113      	bne.n	800369c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003678:	4a11      	ldr	r2, [pc, #68]	@ (80036c0 <HAL_ADC_Start+0x154>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d105      	bne.n	800368a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800367e:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <HAL_ADC_Start+0x158>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d108      	bne.n	800369c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	e00c      	b.n	80036b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	e003      	b.n	80036b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40012800 	.word	0x40012800
 80036c4:	40012400 	.word	0x40012400

080036c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
=======
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03e      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d039      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f72:	d11d      	bne.n	8002fb0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d119      	bne.n	8002fb0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0220 	bic.w	r2, r2, #32
 8002f8a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f874 	bl	800309e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0212 	mvn.w	r2, #18
 8002fbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04d      	beq.n	8003066 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d048      	beq.n	8003066 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002ff6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002ffa:	d012      	beq.n	8003022 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003006:	2b00      	cmp	r3, #0
 8003008:	d125      	bne.n	8003056 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003014:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003018:	d11d      	bne.n	8003056 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	d119      	bne.n	8003056 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003030:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f96d 	bl	8003336 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 020c 	mvn.w	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f812 	bl	80030b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0201 	mvn.w	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_Stop+0x1a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e01a      	b.n	8003718 <HAL_ADC_Stop+0x50>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fb4e 	bl	8003d8c <ADC_ConversionStop_Disable>
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_ADC_PollForConversion>:
=======
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003736:	f7ff fe13 	bl	8003360 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0d3      	b.n	800390a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d131      	bne.n	80037d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800377a:	2b00      	cmp	r3, #0
 800377c:	d12a      	bne.n	80037d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800377e:	e021      	b.n	80037c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d01d      	beq.n	80037c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_ADC_PollForConversion+0x7e>
 800378e:	f7ff fde7 	bl	8003360 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d212      	bcs.n	80037c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	f043 0204 	orr.w	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0a2      	b.n	800390a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0d6      	beq.n	8003780 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80037d2:	e070      	b.n	80038b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003914 <HAL_ADC_PollForConversion+0x1f4>)
 80037d6:	681c      	ldr	r4, [r3, #0]
 80037d8:	2002      	movs	r0, #2
 80037da:	f002 fa4d 	bl	8005c78 <HAL_RCCEx_GetPeriphCLKFreq>
 80037de:	4603      	mov	r3, r0
 80037e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6919      	ldr	r1, [r3, #16]
 80037ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003918 <HAL_ADC_PollForConversion+0x1f8>)
 80037ec:	400b      	ands	r3, r1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_ADC_PollForConversion+0x104>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	4b48      	ldr	r3, [pc, #288]	@ (800391c <HAL_ADC_PollForConversion+0x1fc>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <HAL_ADC_PollForConversion+0x104>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	4b46      	ldr	r3, [pc, #280]	@ (8003920 <HAL_ADC_PollForConversion+0x200>)
 8003808:	400b      	ands	r3, r1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <HAL_ADC_PollForConversion+0x100>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68d9      	ldr	r1, [r3, #12]
 8003814:	4b43      	ldr	r3, [pc, #268]	@ (8003924 <HAL_ADC_PollForConversion+0x204>)
 8003816:	400b      	ands	r3, r1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_PollForConversion+0x100>
 800381c:	2314      	movs	r3, #20
 800381e:	e020      	b.n	8003862 <HAL_ADC_PollForConversion+0x142>
 8003820:	2329      	movs	r3, #41	@ 0x29
 8003822:	e01e      	b.n	8003862 <HAL_ADC_PollForConversion+0x142>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6919      	ldr	r1, [r3, #16]
 800382a:	4b3d      	ldr	r3, [pc, #244]	@ (8003920 <HAL_ADC_PollForConversion+0x200>)
 800382c:	400b      	ands	r3, r1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_ADC_PollForConversion+0x120>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68d9      	ldr	r1, [r3, #12]
 8003838:	4b3a      	ldr	r3, [pc, #232]	@ (8003924 <HAL_ADC_PollForConversion+0x204>)
 800383a:	400b      	ands	r3, r1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_ADC_PollForConversion+0x13c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	4b38      	ldr	r3, [pc, #224]	@ (8003928 <HAL_ADC_PollForConversion+0x208>)
 8003848:	400b      	ands	r3, r1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <HAL_ADC_PollForConversion+0x140>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68d9      	ldr	r1, [r3, #12]
 8003854:	4b34      	ldr	r3, [pc, #208]	@ (8003928 <HAL_ADC_PollForConversion+0x208>)
 8003856:	400b      	ands	r3, r1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_PollForConversion+0x140>
 800385c:	2354      	movs	r3, #84	@ 0x54
 800385e:	e000      	b.n	8003862 <HAL_ADC_PollForConversion+0x142>
 8003860:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003868:	e021      	b.n	80038ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d01a      	beq.n	80038a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_ADC_PollForConversion+0x168>
 8003878:	f7ff fd72 	bl	8003360 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d20f      	bcs.n	80038a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	429a      	cmp	r2, r3
 800388e:	d90b      	bls.n	80038a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e030      	b.n	800390a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d8d9      	bhi.n	800386a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0212 	mvn.w	r2, #18
 80038be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80038d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80038da:	d115      	bne.n	8003908 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d111      	bne.n	8003908 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	bf00      	nop
 8003914:	2000006c 	.word	0x2000006c
 8003918:	24924924 	.word	0x24924924
 800391c:	00924924 	.word	0x00924924
 8003920:	12492492 	.word	0x12492492
 8003924:	00492492 	.word	0x00492492
 8003928:	00249249 	.word	0x00249249

0800392c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d03e      	beq.n	80039e4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d039      	beq.n	80039e4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003992:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003996:	d11d      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800399c:	2b00      	cmp	r3, #0
 800399e:	d119      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0220 	bic.w	r2, r2, #32
 80039ae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f874 	bl	8003ac2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0212 	mvn.w	r2, #18
 80039e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04d      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d048      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003a1a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003a1e:	d012      	beq.n	8003a46 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d125      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003a38:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a3c:	d11d      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d119      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a54:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9c7 	bl	8003e0e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 020c 	mvn.w	r2, #12
 8003a88:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00d      	beq.n	8003aba <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f812 	bl	8003ad4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0201 	mvn.w	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_ADC_ConfigChannel>:
=======
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_ADC_ConfigChannel>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
<<<<<<< HEAD
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
=======
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x20>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0dc      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x1da>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
=======
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x20>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0dc      	b.n	800329e <HAL_ADC_ConfigChannel+0x1da>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b06      	cmp	r3, #6
 8003b16:	d81c      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	3b05      	subs	r3, #5
 8003b2a:	221f      	movs	r2, #31
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	4019      	ands	r1, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	3b05      	subs	r3, #5
 8003b44:	fa00 f203 	lsl.w	r2, r0, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b50:	e03c      	b.n	8003bcc <HAL_ADC_ConfigChannel+0xe4>
=======
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d81c      	bhi.n	800312e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	3b05      	subs	r3, #5
 8003106:	221f      	movs	r2, #31
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	4019      	ands	r1, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b05      	subs	r3, #5
 8003120:	fa00 f203 	lsl.w	r2, r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	635a      	str	r2, [r3, #52]	@ 0x34
 800312c:	e03c      	b.n	80031a8 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d81c      	bhi.n	8003b94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	3b23      	subs	r3, #35	@ 0x23
 8003b6c:	221f      	movs	r2, #31
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	4019      	ands	r1, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	3b23      	subs	r3, #35	@ 0x23
 8003b86:	fa00 f203 	lsl.w	r2, r0, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b92:	e01b      	b.n	8003bcc <HAL_ADC_ConfigChannel+0xe4>
=======
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d81c      	bhi.n	8003170 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	3b23      	subs	r3, #35	@ 0x23
 8003148:	221f      	movs	r2, #31
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	4019      	ands	r1, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	3b23      	subs	r3, #35	@ 0x23
 8003162:	fa00 f203 	lsl.w	r2, r0, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	631a      	str	r2, [r3, #48]	@ 0x30
 800316e:	e01b      	b.n	80031a8 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
<<<<<<< HEAD
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3b41      	subs	r3, #65	@ 0x41
 8003ba6:	221f      	movs	r2, #31
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	4019      	ands	r1, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3b41      	subs	r3, #65	@ 0x41
 8003bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	3b41      	subs	r3, #65	@ 0x41
 8003182:	221f      	movs	r2, #31
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	4019      	ands	r1, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b41      	subs	r3, #65	@ 0x41
 800319c:	fa00 f203 	lsl.w	r2, r0, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
<<<<<<< HEAD
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b09      	cmp	r3, #9
 8003bd2:	d91c      	bls.n	8003c0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68d9      	ldr	r1, [r3, #12]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	3b1e      	subs	r3, #30
 8003be6:	2207      	movs	r2, #7
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	4019      	ands	r1, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6898      	ldr	r0, [r3, #8]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b1e      	subs	r3, #30
 8003c00:	fa00 f203 	lsl.w	r2, r0, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e019      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x15a>
=======
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b09      	cmp	r3, #9
 80031ae:	d91c      	bls.n	80031ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1e      	subs	r3, #30
 80031c2:	2207      	movs	r2, #7
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	4019      	ands	r1, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6898      	ldr	r0, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	3b1e      	subs	r3, #30
 80031dc:	fa00 f203 	lsl.w	r2, r0, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	e019      	b.n	800321e <HAL_ADC_ConfigChannel+0x15a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
<<<<<<< HEAD
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6919      	ldr	r1, [r3, #16]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	2207      	movs	r2, #7
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	4019      	ands	r1, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6898      	ldr	r0, [r3, #8]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	fa00 f203 	lsl.w	r2, r0, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	611a      	str	r2, [r3, #16]
=======
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6919      	ldr	r1, [r3, #16]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	2207      	movs	r2, #7
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	4019      	ands	r1, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6898      	ldr	r0, [r3, #8]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	fa00 f203 	lsl.w	r2, r0, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	611a      	str	r2, [r3, #16]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
<<<<<<< HEAD
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d003      	beq.n	8003c52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c4e:	2b11      	cmp	r3, #17
 8003c50:	d132      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d003      	beq.n	800322e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800322a:	2b11      	cmp	r3, #17
 800322c:	d132      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
<<<<<<< HEAD
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ccc <HAL_ADC_ConfigChannel+0x1e4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d125      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d126      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003c78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d11a      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d125      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d126      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003254:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b10      	cmp	r3, #16
 800325c:	d11a      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8003c82:	4b13      	ldr	r3, [pc, #76]	@ (8003cd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	0c9a      	lsrs	r2, r3, #18
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c98:	e002      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f9      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x1b2>
 8003ca6:	e007      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_ADC_ConfigChannel+0x1e8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	0c9a      	lsrs	r2, r3, #18
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003274:	e002      	b.n	800327c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3b01      	subs	r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f9      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x1b2>
 8003282:	e007      	b.n	8003294 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	f043 0220 	orr.w	r2, r3, #32
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
=======
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40012400 	.word	0x40012400
 8003cd0:	2000006c 	.word	0x2000006c
 8003cd4:	431bde83 	.word	0x431bde83

08003cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d040      	beq.n	8003d78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d06:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <ADC_Enable+0xac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d88 <ADC_Enable+0xb0>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	0c9b      	lsrs	r3, r3, #18
 8003d12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d14:	e002      	b.n	8003d1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f9      	bne.n	8003d16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d22:	f7ff fb1d 	bl	8003360 <HAL_GetTick>
 8003d26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d28:	e01f      	b.n	8003d6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d2a:	f7ff fb19 	bl	8003360 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d918      	bls.n	8003d6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d011      	beq.n	8003d6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d1d8      	bne.n	8003d2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000006c 	.word	0x2000006c
 8003d88:	431bde83 	.word	0x431bde83

08003d8c <ADC_ConversionStop_Disable>:
=======
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40012400 	.word	0x40012400
 80032ac:	2000006c 	.word	0x2000006c
 80032b0:	431bde83 	.word	0x431bde83

080032b4 <ADC_ConversionStop_Disable>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d12e      	bne.n	8003e04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003db6:	f7ff fad3 	bl	8003360 <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003dbc:	e01b      	b.n	8003df6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dbe:	f7ff facf 	bl	8003360 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d914      	bls.n	8003df6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10d      	bne.n	8003df6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d0dc      	beq.n	8003dbe <ADC_ConversionStop_Disable+0x32>
=======
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d12e      	bne.n	800332c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032de:	f7ff fd19 	bl	8002d14 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032e4:	e01b      	b.n	800331e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032e6:	f7ff fd15 	bl	8002d14 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d914      	bls.n	800331e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10d      	bne.n	800331e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d0dc      	beq.n	80032e6 <ADC_ConversionStop_Disable+0x32>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
=======
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
<<<<<<< HEAD
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_CAN_Init>:
=======
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_CAN_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
=======
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0ed      	b.n	800400e <HAL_CAN_Init+0x1ee>
=======
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0ed      	b.n	8003536 <HAL_CAN_Init+0x1ee>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd ff4e 	bl	8001ce0 <HAL_CAN_MspInit>
=======
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe fcba 	bl	8001ce0 <HAL_CAN_MspInit>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e54:	f7ff fa84 	bl	8003360 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e5a:	e012      	b.n	8003e82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e5c:	f7ff fa80 	bl	8003360 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b0a      	cmp	r3, #10
 8003e68:	d90b      	bls.n	8003e82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2205      	movs	r2, #5
 8003e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0c5      	b.n	800400e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0e5      	beq.n	8003e5c <HAL_CAN_Init+0x3c>
=======
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800337c:	f7ff fcca 	bl	8002d14 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003382:	e012      	b.n	80033aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003384:	f7ff fcc6 	bl	8002d14 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b0a      	cmp	r3, #10
 8003390:	d90b      	bls.n	80033aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2205      	movs	r2, #5
 80033a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0c5      	b.n	8003536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0e5      	beq.n	8003384 <HAL_CAN_Init+0x3c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0202 	bic.w	r2, r2, #2
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea0:	f7ff fa5e 	bl	8003360 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ea6:	e012      	b.n	8003ece <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ea8:	f7ff fa5a 	bl	8003360 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b0a      	cmp	r3, #10
 8003eb4:	d90b      	bls.n	8003ece <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e09f      	b.n	800400e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e5      	bne.n	8003ea8 <HAL_CAN_Init+0x88>
=======
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0202 	bic.w	r2, r2, #2
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c8:	f7ff fca4 	bl	8002d14 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ce:	e012      	b.n	80033f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033d0:	f7ff fca0 	bl	8002d14 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d90b      	bls.n	80033f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2205      	movs	r2, #5
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e09f      	b.n	8003536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <HAL_CAN_Init+0x88>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7e1b      	ldrb	r3, [r3, #24]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e007      	b.n	8003f06 <HAL_CAN_Init+0xe6>
=======
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7e1b      	ldrb	r3, [r3, #24]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e007      	b.n	800342e <HAL_CAN_Init+0xe6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f04:	601a      	str	r2, [r3, #0]
=======
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800342c:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7e5b      	ldrb	r3, [r3, #25]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e007      	b.n	8003f30 <HAL_CAN_Init+0x110>
=======
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7e5b      	ldrb	r3, [r3, #25]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d108      	bne.n	8003448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e007      	b.n	8003458 <HAL_CAN_Init+0x110>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
=======
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003456:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7e9b      	ldrb	r3, [r3, #26]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d108      	bne.n	8003f4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0220 	orr.w	r2, r2, #32
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e007      	b.n	8003f5a <HAL_CAN_Init+0x13a>
=======
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e9b      	ldrb	r3, [r3, #26]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d108      	bne.n	8003472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0220 	orr.w	r2, r2, #32
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e007      	b.n	8003482 <HAL_CAN_Init+0x13a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0220 	bic.w	r2, r2, #32
 8003f58:	601a      	str	r2, [r3, #0]
=======
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0220 	bic.w	r2, r2, #32
 8003480:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7edb      	ldrb	r3, [r3, #27]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d108      	bne.n	8003f74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0210 	bic.w	r2, r2, #16
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e007      	b.n	8003f84 <HAL_CAN_Init+0x164>
=======
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7edb      	ldrb	r3, [r3, #27]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0210 	bic.w	r2, r2, #16
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e007      	b.n	80034ac <HAL_CAN_Init+0x164>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0210 	orr.w	r2, r2, #16
 8003f82:	601a      	str	r2, [r3, #0]
=======
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0210 	orr.w	r2, r2, #16
 80034aa:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7f1b      	ldrb	r3, [r3, #28]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d108      	bne.n	8003f9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e007      	b.n	8003fae <HAL_CAN_Init+0x18e>
=======
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7f1b      	ldrb	r3, [r3, #28]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d108      	bne.n	80034c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e007      	b.n	80034d6 <HAL_CAN_Init+0x18e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0208 	bic.w	r2, r2, #8
 8003fac:	601a      	str	r2, [r3, #0]
=======
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7f5b      	ldrb	r3, [r3, #29]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d108      	bne.n	8003fc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0204 	orr.w	r2, r2, #4
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e007      	b.n	8003fd8 <HAL_CAN_Init+0x1b8>
=======
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7f5b      	ldrb	r3, [r3, #29]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d108      	bne.n	80034f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e007      	b.n	8003500 <HAL_CAN_Init+0x1b8>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
=======
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	ea42 0103 	orr.w	r1, r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	61da      	str	r2, [r3, #28]
=======
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	1e5a      	subs	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_CAN_Start>:
=======
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_CAN_Start>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d12e      	bne.n	8004088 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004042:	f7ff f98d 	bl	8003360 <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004048:	e012      	b.n	8004070 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800404a:	f7ff f989 	bl	8003360 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b0a      	cmp	r3, #10
 8004056:	d90b      	bls.n	8004070 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2205      	movs	r2, #5
 8004068:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e012      	b.n	8004096 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <HAL_CAN_Start+0x34>
=======
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d12e      	bne.n	80035b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800356a:	f7ff fbd3 	bl	8002d14 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003570:	e012      	b.n	8003598 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003572:	f7ff fbcf 	bl	8002d14 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b0a      	cmp	r3, #10
 800357e:	d90b      	bls.n	8003598 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2205      	movs	r2, #5
 8003590:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e012      	b.n	80035be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e5      	bne.n	8003572 <HAL_CAN_Start+0x34>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e006      	b.n	8004096 <HAL_CAN_Start+0x80>
=======
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e006      	b.n	80035be <HAL_CAN_Start+0x80>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
  }
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_CAN_AddTxMessage>:
=======
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_CAN_AddTxMessage>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 800409e:	b480      	push	{r7}
 80040a0:	b089      	sub	sp, #36	@ 0x24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
=======
 80035c6:	b480      	push	{r7}
 80035c8:	b089      	sub	sp, #36	@ 0x24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 80040bc:	7ffb      	ldrb	r3, [r7, #31]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d003      	beq.n	80040ca <HAL_CAN_AddTxMessage+0x2c>
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	f040 80ad 	bne.w	8004224 <HAL_CAN_AddTxMessage+0x186>
=======
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d003      	beq.n	80035f2 <HAL_CAN_AddTxMessage+0x2c>
 80035ea:	7ffb      	ldrb	r3, [r7, #31]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f040 80ad 	bne.w	800374c <HAL_CAN_AddTxMessage+0x186>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8095 	beq.w	8004214 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	0e1b      	lsrs	r3, r3, #24
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040f4:	2201      	movs	r2, #1
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	409a      	lsls	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	6809      	ldr	r1, [r1, #0]
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	3318      	adds	r3, #24
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	440b      	add	r3, r1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e00f      	b.n	8004142 <HAL_CAN_AddTxMessage+0xa4>
=======
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8095 	beq.w	800373c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800361c:	2201      	movs	r2, #1
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	409a      	lsls	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	6809      	ldr	r1, [r1, #0]
 800363c:	431a      	orrs	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3318      	adds	r3, #24
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	440b      	add	r3, r1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e00f      	b.n	800366a <HAL_CAN_AddTxMessage+0xa4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800412c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004136:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3318      	adds	r3, #24
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	440b      	add	r3, r1
 8004140:	601a      	str	r2, [r3, #0]
=======
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003654:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800365e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3318      	adds	r3, #24
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	440b      	add	r3, r1
 8003668:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3318      	adds	r3, #24
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	440b      	add	r3, r1
 8004152:	3304      	adds	r3, #4
 8004154:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	7d1b      	ldrb	r3, [r3, #20]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d111      	bne.n	8004182 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3318      	adds	r3, #24
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	6811      	ldr	r1, [r2, #0]
 8004172:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3318      	adds	r3, #24
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	440b      	add	r3, r1
 800417e:	3304      	adds	r3, #4
 8004180:	601a      	str	r2, [r3, #0]
=======
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3318      	adds	r3, #24
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	440b      	add	r3, r1
 800367a:	3304      	adds	r3, #4
 800367c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	7d1b      	ldrb	r3, [r3, #20]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d111      	bne.n	80036aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3318      	adds	r3, #24
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6811      	ldr	r1, [r2, #0]
 800369a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3318      	adds	r3, #24
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	440b      	add	r3, r1
 80036a6:	3304      	adds	r3, #4
 80036a8:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3307      	adds	r3, #7
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	061a      	lsls	r2, r3, #24
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3306      	adds	r3, #6
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3305      	adds	r3, #5
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	4313      	orrs	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	3204      	adds	r2, #4
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	4610      	mov	r0, r2
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	ea43 0200 	orr.w	r2, r3, r0
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	440b      	add	r3, r1
 80041b4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80041b8:	601a      	str	r2, [r3, #0]
=======
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3307      	adds	r3, #7
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	061a      	lsls	r2, r3, #24
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3306      	adds	r3, #6
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3305      	adds	r3, #5
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4313      	orrs	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	3204      	adds	r2, #4
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	4610      	mov	r0, r2
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6811      	ldr	r1, [r2, #0]
 80036d2:	ea43 0200 	orr.w	r2, r3, r0
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	440b      	add	r3, r1
 80036dc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80036e0:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3303      	adds	r3, #3
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	061a      	lsls	r2, r3, #24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3302      	adds	r3, #2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3301      	adds	r3, #1
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	4313      	orrs	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	4610      	mov	r0, r2
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	6811      	ldr	r1, [r2, #0]
 80041e0:	ea43 0200 	orr.w	r2, r3, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	440b      	add	r3, r1
 80041ea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80041ee:	601a      	str	r2, [r3, #0]
=======
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3303      	adds	r3, #3
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	061a      	lsls	r2, r3, #24
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3302      	adds	r3, #2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3301      	adds	r3, #1
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	4313      	orrs	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	4610      	mov	r0, r2
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	6811      	ldr	r1, [r2, #0]
 8003708:	ea43 0200 	orr.w	r2, r3, r0
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	440b      	add	r3, r1
 8003712:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003716:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3318      	adds	r3, #24
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	4413      	add	r3, r2
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6811      	ldr	r1, [r2, #0]
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3318      	adds	r3, #24
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	440b      	add	r3, r1
 800420e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e00e      	b.n	8004232 <HAL_CAN_AddTxMessage+0x194>
=======
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3318      	adds	r3, #24
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4413      	add	r3, r2
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	6811      	ldr	r1, [r2, #0]
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3318      	adds	r3, #24
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	440b      	add	r3, r1
 8003736:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e00e      	b.n	800375a <HAL_CAN_AddTxMessage+0x194>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e006      	b.n	8004232 <HAL_CAN_AddTxMessage+0x194>
=======
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e006      	b.n	800375a <HAL_CAN_AddTxMessage+0x194>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3724      	adds	r7, #36	@ 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_CAN_ActivateNotification>:
=======
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3724      	adds	r7, #36	@ 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_CAN_ActivateNotification>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
<<<<<<< HEAD
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800424c:	73fb      	strb	r3, [r7, #15]
=======
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003774:	73fb      	strb	r3, [r7, #15]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d002      	beq.n	800425a <HAL_CAN_ActivateNotification+0x1e>
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d109      	bne.n	800426e <HAL_CAN_ActivateNotification+0x32>
=======
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d002      	beq.n	8003782 <HAL_CAN_ActivateNotification+0x1e>
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d109      	bne.n	8003796 <HAL_CAN_ActivateNotification+0x32>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
<<<<<<< HEAD
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6959      	ldr	r1, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e006      	b.n	800427c <HAL_CAN_ActivateNotification+0x40>
=======
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6959      	ldr	r1, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e006      	b.n	80037a4 <HAL_CAN_ActivateNotification+0x40>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
	...

08004288 <__NVIC_SetPriorityGrouping>:
=======
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08a      	sub	sp, #40	@ 0x28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07c      	beq.n	80038ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d023      	beq.n	8003846 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f983 	bl	8003b1c <HAL_CAN_TxMailbox0CompleteCallback>
 8003816:	e016      	b.n	8003846 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
 800382a:	e00c      	b.n	8003846 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
 800383e:	e002      	b.n	8003846 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f986 	bl	8003b52 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d024      	beq.n	800389a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f962 	bl	8003b2e <HAL_CAN_TxMailbox1CompleteCallback>
 800386a:	e016      	b.n	800389a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
 800387e:	e00c      	b.n	800389a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
 8003892:	e002      	b.n	800389a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f965 	bl	8003b64 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d024      	beq.n	80038ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f941 	bl	8003b40 <HAL_CAN_TxMailbox2CompleteCallback>
 80038be:	e016      	b.n	80038ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d2:	e00c      	b.n	80038ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e6:	e002      	b.n	80038ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f944 	bl	8003b76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2210      	movs	r2, #16
 8003910:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d006      	beq.n	8003934 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2208      	movs	r2, #8
 800392c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f933 	bl	8003b9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f91b 	bl	8003b88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2208      	movs	r2, #8
 8003990:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f913 	bl	8003bbe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8fb 	bl	8003bac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2210      	movs	r2, #16
 80039d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8fc 	bl	8003bd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8f4 	bl	8003be2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d07b      	beq.n	8003afc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d072      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d043      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03e      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a7c:	2b60      	cmp	r3, #96	@ 0x60
 8003a7e:	d02b      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x32a>
 8003a80:	2b60      	cmp	r3, #96	@ 0x60
 8003a82:	d82e      	bhi.n	8003ae2 <HAL_CAN_IRQHandler+0x334>
 8003a84:	2b50      	cmp	r3, #80	@ 0x50
 8003a86:	d022      	beq.n	8003ace <HAL_CAN_IRQHandler+0x320>
 8003a88:	2b50      	cmp	r3, #80	@ 0x50
 8003a8a:	d82a      	bhi.n	8003ae2 <HAL_CAN_IRQHandler+0x334>
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	d019      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x316>
 8003a90:	2b40      	cmp	r3, #64	@ 0x40
 8003a92:	d826      	bhi.n	8003ae2 <HAL_CAN_IRQHandler+0x334>
 8003a94:	2b30      	cmp	r3, #48	@ 0x30
 8003a96:	d010      	beq.n	8003aba <HAL_CAN_IRQHandler+0x30c>
 8003a98:	2b30      	cmp	r3, #48	@ 0x30
 8003a9a:	d822      	bhi.n	8003ae2 <HAL_CAN_IRQHandler+0x334>
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d002      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x2f8>
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d005      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003aa4:	e01d      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003aae:	e019      	b.n	8003ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	f043 0310 	orr.w	r3, r3, #16
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ab8:	e014      	b.n	8003ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	f043 0320 	orr.w	r3, r3, #32
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ac2:	e00f      	b.n	8003ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003acc:	e00a      	b.n	8003ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ad6:	e005      	b.n	8003ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ae2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003af2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2204      	movs	r2, #4
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f870 	bl	8003bf4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
	...

08003c08 <__NVIC_SetPriorityGrouping>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <__NVIC_SetPriorityGrouping+0x44>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042a4:	4013      	ands	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ba:	4a04      	ldr	r2, [pc, #16]	@ (80042cc <__NVIC_SetPriorityGrouping+0x44>)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	60d3      	str	r3, [r2, #12]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <__NVIC_GetPriorityGrouping>:
=======
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c18:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	@ (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_GetPriorityGrouping>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <__NVIC_GetPriorityGrouping+0x18>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	f003 0307 	and.w	r3, r3, #7
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <__NVIC_EnableIRQ>:
=======
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <__NVIC_GetPriorityGrouping+0x18>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0307 	and.w	r3, r3, #7
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_EnableIRQ>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db0b      	blt.n	8004316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	4906      	ldr	r1, [pc, #24]	@ (8004320 <__NVIC_EnableIRQ+0x34>)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2001      	movs	r0, #1
 800430e:	fa00 f202 	lsl.w	r2, r0, r2
 8004312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100

08004324 <__NVIC_SetPriority>:
=======
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0b      	blt.n	8003c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4906      	ldr	r1, [pc, #24]	@ (8003ca0 <__NVIC_EnableIRQ+0x34>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	@ (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	@ (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	@ (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
=======
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	@ (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
=======
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
         );
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	@ 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <SysTick_Config>:
=======
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	@ 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <SysTick_Config>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ec:	d301      	bcc.n	80043f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00f      	b.n	8004412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f2:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <SysTick_Config+0x40>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fa:	210f      	movs	r1, #15
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f7ff ff90 	bl	8004324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <SysTick_Config+0x40>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440a:	4b04      	ldr	r3, [pc, #16]	@ (800441c <SysTick_Config+0x40>)
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010

08004420 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	@ (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff90 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
=======
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ff2d 	bl	8004288 <__NVIC_SetPriorityGrouping>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_SetPriority>:
=======
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff2d 	bl	8003c08 <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
=======
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8004448:	f7ff ff42 	bl	80042d0 <__NVIC_GetPriorityGrouping>
 800444c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f7ff ff90 	bl	8004378 <NVIC_EncodePriority>
 8004458:	4602      	mov	r2, r0
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff5f 	bl	8004324 <__NVIC_SetPriority>
}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
=======
 8003dc8:	f7ff ff42 	bl	8003c50 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff90 	bl	8003cf8 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5f 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
=======
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff35 	bl	80042ec <__NVIC_EnableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
=======
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff35 	bl	8003c6c <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffa2 	bl	80043dc <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_DMA_Init>:
=======
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffa2 	bl	8003d5c <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_DMA_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e059      	b.n	800456e <HAL_DMA_Init+0xca>
=======
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e059      	b.n	8003eee <HAL_DMA_Init+0xca>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004578 <HAL_DMA_Init+0xd4>)
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d80f      	bhi.n	80044e6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_DMA_Init+0xd8>)
 80044ce:	4413      	add	r3, r2
 80044d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004580 <HAL_DMA_Init+0xdc>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a28      	ldr	r2, [pc, #160]	@ (8004584 <HAL_DMA_Init+0xe0>)
 80044e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044e4:	e00e      	b.n	8004504 <HAL_DMA_Init+0x60>
=======
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_DMA_Init+0xd4>)
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d80f      	bhi.n	8003e66 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <HAL_DMA_Init+0xd8>)
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_DMA_Init+0xdc>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	009a      	lsls	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a28      	ldr	r2, [pc, #160]	@ (8003f04 <HAL_DMA_Init+0xe0>)
 8003e62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e64:	e00e      	b.n	8003e84 <HAL_DMA_Init+0x60>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
<<<<<<< HEAD
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <HAL_DMA_Init+0xe4>)
 80044ee:	4413      	add	r3, r2
 80044f0:	4a23      	ldr	r2, [pc, #140]	@ (8004580 <HAL_DMA_Init+0xdc>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	009a      	lsls	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a22      	ldr	r2, [pc, #136]	@ (800458c <HAL_DMA_Init+0xe8>)
 8004502:	63da      	str	r2, [r3, #60]	@ 0x3c
=======
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b26      	ldr	r3, [pc, #152]	@ (8003f08 <HAL_DMA_Init+0xe4>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a23      	ldr	r2, [pc, #140]	@ (8003f00 <HAL_DMA_Init+0xdc>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	009a      	lsls	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a22      	ldr	r2, [pc, #136]	@ (8003f0c <HAL_DMA_Init+0xe8>)
 8003e82:	63da      	str	r2, [r3, #60]	@ 0x3c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800451a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800451e:	60fb      	str	r3, [r7, #12]
=======
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e9a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e9e:	60fb      	str	r3, [r7, #12]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40020407 	.word	0x40020407
 800457c:	bffdfff8 	.word	0xbffdfff8
 8004580:	cccccccd 	.word	0xcccccccd
 8004584:	40020000 	.word	0x40020000
 8004588:	bffdfbf8 	.word	0xbffdfbf8
 800458c:	40020400 	.word	0x40020400

08004590 <HAL_DMA_Abort>:
=======
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	40020407 	.word	0x40020407
 8003efc:	bffdfff8 	.word	0xbffdfff8
 8003f00:	cccccccd 	.word	0xcccccccd
 8003f04:	40020000 	.word	0x40020000
 8003f08:	bffdfbf8 	.word	0xbffdfbf8
 8003f0c:	40020400 	.word	0x40020400

08003f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_DMA_Start_IT+0x20>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e04b      	b.n	8003fc8 <HAL_DMA_Start_IT+0xb8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d13a      	bne.n	8003fba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fbb1 	bl	80046d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 020e 	orr.w	r2, r2, #14
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e00f      	b.n	8003fa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 020a 	orr.w	r2, r2, #10
 8003fa6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e005      	b.n	8003fc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_DMA_Abort>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d008      	beq.n	80045ba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2204      	movs	r2, #4
 80045ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e020      	b.n	80045fc <HAL_DMA_Abort+0x6c>
=======
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d008      	beq.n	8003ffa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2204      	movs	r2, #4
 8003fec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e020      	b.n	800403c <HAL_DMA_Abort+0x6c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 020e 	bic.w	r2, r2, #14
 80045c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	2101      	movs	r1, #1
 80045e4:	fa01 f202 	lsl.w	r2, r1, r2
 80045e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
	...

08004608 <HAL_DMA_Abort_IT>:
=======
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 020e 	bic.w	r2, r2, #14
 8004008:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <HAL_DMA_Abort_IT>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d005      	beq.n	800462c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2204      	movs	r2, #4
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e0d6      	b.n	80047da <HAL_DMA_Abort_IT+0x1d2>
=======
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d005      	beq.n	800406c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e0d6      	b.n	800421a <HAL_DMA_Abort_IT+0x1d2>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 020e 	bic.w	r2, r2, #14
 800463a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	4b64      	ldr	r3, [pc, #400]	@ (80047e4 <HAL_DMA_Abort_IT+0x1dc>)
 8004654:	429a      	cmp	r2, r3
 8004656:	d958      	bls.n	800470a <HAL_DMA_Abort_IT+0x102>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a62      	ldr	r2, [pc, #392]	@ (80047e8 <HAL_DMA_Abort_IT+0x1e0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04f      	beq.n	8004702 <HAL_DMA_Abort_IT+0xfa>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a61      	ldr	r2, [pc, #388]	@ (80047ec <HAL_DMA_Abort_IT+0x1e4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d048      	beq.n	80046fe <HAL_DMA_Abort_IT+0xf6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5f      	ldr	r2, [pc, #380]	@ (80047f0 <HAL_DMA_Abort_IT+0x1e8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d040      	beq.n	80046f8 <HAL_DMA_Abort_IT+0xf0>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5e      	ldr	r2, [pc, #376]	@ (80047f4 <HAL_DMA_Abort_IT+0x1ec>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d038      	beq.n	80046f2 <HAL_DMA_Abort_IT+0xea>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5c      	ldr	r2, [pc, #368]	@ (80047f8 <HAL_DMA_Abort_IT+0x1f0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d030      	beq.n	80046ec <HAL_DMA_Abort_IT+0xe4>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5b      	ldr	r2, [pc, #364]	@ (80047fc <HAL_DMA_Abort_IT+0x1f4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d028      	beq.n	80046e6 <HAL_DMA_Abort_IT+0xde>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a52      	ldr	r2, [pc, #328]	@ (80047e4 <HAL_DMA_Abort_IT+0x1dc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d020      	beq.n	80046e0 <HAL_DMA_Abort_IT+0xd8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a57      	ldr	r2, [pc, #348]	@ (8004800 <HAL_DMA_Abort_IT+0x1f8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d019      	beq.n	80046dc <HAL_DMA_Abort_IT+0xd4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a55      	ldr	r2, [pc, #340]	@ (8004804 <HAL_DMA_Abort_IT+0x1fc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d012      	beq.n	80046d8 <HAL_DMA_Abort_IT+0xd0>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a54      	ldr	r2, [pc, #336]	@ (8004808 <HAL_DMA_Abort_IT+0x200>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00a      	beq.n	80046d2 <HAL_DMA_Abort_IT+0xca>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a52      	ldr	r2, [pc, #328]	@ (800480c <HAL_DMA_Abort_IT+0x204>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d102      	bne.n	80046cc <HAL_DMA_Abort_IT+0xc4>
 80046c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046ca:	e01b      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046d0:	e018      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046d6:	e015      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046d8:	2310      	movs	r3, #16
 80046da:	e013      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046dc:	2301      	movs	r3, #1
 80046de:	e011      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046e4:	e00e      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80046ea:	e00b      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046f0:	e008      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046f6:	e005      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046fc:	e002      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 80046fe:	2310      	movs	r3, #16
 8004700:	e000      	b.n	8004704 <HAL_DMA_Abort_IT+0xfc>
 8004702:	2301      	movs	r3, #1
 8004704:	4a42      	ldr	r2, [pc, #264]	@ (8004810 <HAL_DMA_Abort_IT+0x208>)
 8004706:	6053      	str	r3, [r2, #4]
 8004708:	e057      	b.n	80047ba <HAL_DMA_Abort_IT+0x1b2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a36      	ldr	r2, [pc, #216]	@ (80047e8 <HAL_DMA_Abort_IT+0x1e0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d04f      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x1ac>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a34      	ldr	r2, [pc, #208]	@ (80047ec <HAL_DMA_Abort_IT+0x1e4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d048      	beq.n	80047b0 <HAL_DMA_Abort_IT+0x1a8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a33      	ldr	r2, [pc, #204]	@ (80047f0 <HAL_DMA_Abort_IT+0x1e8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d040      	beq.n	80047aa <HAL_DMA_Abort_IT+0x1a2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a31      	ldr	r2, [pc, #196]	@ (80047f4 <HAL_DMA_Abort_IT+0x1ec>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d038      	beq.n	80047a4 <HAL_DMA_Abort_IT+0x19c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a30      	ldr	r2, [pc, #192]	@ (80047f8 <HAL_DMA_Abort_IT+0x1f0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d030      	beq.n	800479e <HAL_DMA_Abort_IT+0x196>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2e      	ldr	r2, [pc, #184]	@ (80047fc <HAL_DMA_Abort_IT+0x1f4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d028      	beq.n	8004798 <HAL_DMA_Abort_IT+0x190>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a26      	ldr	r2, [pc, #152]	@ (80047e4 <HAL_DMA_Abort_IT+0x1dc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d020      	beq.n	8004792 <HAL_DMA_Abort_IT+0x18a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <HAL_DMA_Abort_IT+0x1f8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d019      	beq.n	800478e <HAL_DMA_Abort_IT+0x186>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <HAL_DMA_Abort_IT+0x1fc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d012      	beq.n	800478a <HAL_DMA_Abort_IT+0x182>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a27      	ldr	r2, [pc, #156]	@ (8004808 <HAL_DMA_Abort_IT+0x200>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00a      	beq.n	8004784 <HAL_DMA_Abort_IT+0x17c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a26      	ldr	r2, [pc, #152]	@ (800480c <HAL_DMA_Abort_IT+0x204>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d102      	bne.n	800477e <HAL_DMA_Abort_IT+0x176>
 8004778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800477c:	e01b      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 800477e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004782:	e018      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 8004784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004788:	e015      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 800478a:	2310      	movs	r3, #16
 800478c:	e013      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 800478e:	2301      	movs	r3, #1
 8004790:	e011      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 8004792:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004796:	e00e      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 8004798:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800479c:	e00b      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 800479e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047a2:	e008      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 80047a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047a8:	e005      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 80047aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047ae:	e002      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 80047b0:	2310      	movs	r3, #16
 80047b2:	e000      	b.n	80047b6 <HAL_DMA_Abort_IT+0x1ae>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <HAL_DMA_Abort_IT+0x20c>)
 80047b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
    } 
  }
  return status;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40020080 	.word	0x40020080
 80047e8:	40020008 	.word	0x40020008
 80047ec:	4002001c 	.word	0x4002001c
 80047f0:	40020030 	.word	0x40020030
 80047f4:	40020044 	.word	0x40020044
 80047f8:	40020058 	.word	0x40020058
 80047fc:	4002006c 	.word	0x4002006c
 8004800:	40020408 	.word	0x40020408
 8004804:	4002041c 	.word	0x4002041c
 8004808:	40020430 	.word	0x40020430
 800480c:	40020444 	.word	0x40020444
 8004810:	40020400 	.word	0x40020400
 8004814:	40020000 	.word	0x40020000

08004818 <HAL_DMA_IRQHandler>:
=======
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 020e 	bic.w	r2, r2, #14
 800407a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	4b64      	ldr	r3, [pc, #400]	@ (8004224 <HAL_DMA_Abort_IT+0x1dc>)
 8004094:	429a      	cmp	r2, r3
 8004096:	d958      	bls.n	800414a <HAL_DMA_Abort_IT+0x102>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a62      	ldr	r2, [pc, #392]	@ (8004228 <HAL_DMA_Abort_IT+0x1e0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04f      	beq.n	8004142 <HAL_DMA_Abort_IT+0xfa>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a61      	ldr	r2, [pc, #388]	@ (800422c <HAL_DMA_Abort_IT+0x1e4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d048      	beq.n	800413e <HAL_DMA_Abort_IT+0xf6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004230 <HAL_DMA_Abort_IT+0x1e8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d040      	beq.n	8004138 <HAL_DMA_Abort_IT+0xf0>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004234 <HAL_DMA_Abort_IT+0x1ec>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d038      	beq.n	8004132 <HAL_DMA_Abort_IT+0xea>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004238 <HAL_DMA_Abort_IT+0x1f0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d030      	beq.n	800412c <HAL_DMA_Abort_IT+0xe4>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5b      	ldr	r2, [pc, #364]	@ (800423c <HAL_DMA_Abort_IT+0x1f4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d028      	beq.n	8004126 <HAL_DMA_Abort_IT+0xde>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a52      	ldr	r2, [pc, #328]	@ (8004224 <HAL_DMA_Abort_IT+0x1dc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d020      	beq.n	8004120 <HAL_DMA_Abort_IT+0xd8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a57      	ldr	r2, [pc, #348]	@ (8004240 <HAL_DMA_Abort_IT+0x1f8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d019      	beq.n	800411c <HAL_DMA_Abort_IT+0xd4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a55      	ldr	r2, [pc, #340]	@ (8004244 <HAL_DMA_Abort_IT+0x1fc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d012      	beq.n	8004118 <HAL_DMA_Abort_IT+0xd0>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a54      	ldr	r2, [pc, #336]	@ (8004248 <HAL_DMA_Abort_IT+0x200>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00a      	beq.n	8004112 <HAL_DMA_Abort_IT+0xca>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a52      	ldr	r2, [pc, #328]	@ (800424c <HAL_DMA_Abort_IT+0x204>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d102      	bne.n	800410c <HAL_DMA_Abort_IT+0xc4>
 8004106:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800410a:	e01b      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 800410c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004110:	e018      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004112:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004116:	e015      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004118:	2310      	movs	r3, #16
 800411a:	e013      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 800411c:	2301      	movs	r3, #1
 800411e:	e011      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004124:	e00e      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004126:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800412a:	e00b      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 800412c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004130:	e008      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004136:	e005      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800413c:	e002      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 800413e:	2310      	movs	r3, #16
 8004140:	e000      	b.n	8004144 <HAL_DMA_Abort_IT+0xfc>
 8004142:	2301      	movs	r3, #1
 8004144:	4a42      	ldr	r2, [pc, #264]	@ (8004250 <HAL_DMA_Abort_IT+0x208>)
 8004146:	6053      	str	r3, [r2, #4]
 8004148:	e057      	b.n	80041fa <HAL_DMA_Abort_IT+0x1b2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <HAL_DMA_Abort_IT+0x1e0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d04f      	beq.n	80041f4 <HAL_DMA_Abort_IT+0x1ac>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a34      	ldr	r2, [pc, #208]	@ (800422c <HAL_DMA_Abort_IT+0x1e4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d048      	beq.n	80041f0 <HAL_DMA_Abort_IT+0x1a8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <HAL_DMA_Abort_IT+0x1e8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d040      	beq.n	80041ea <HAL_DMA_Abort_IT+0x1a2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a31      	ldr	r2, [pc, #196]	@ (8004234 <HAL_DMA_Abort_IT+0x1ec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d038      	beq.n	80041e4 <HAL_DMA_Abort_IT+0x19c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a30      	ldr	r2, [pc, #192]	@ (8004238 <HAL_DMA_Abort_IT+0x1f0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d030      	beq.n	80041de <HAL_DMA_Abort_IT+0x196>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2e      	ldr	r2, [pc, #184]	@ (800423c <HAL_DMA_Abort_IT+0x1f4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d028      	beq.n	80041d8 <HAL_DMA_Abort_IT+0x190>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_DMA_Abort_IT+0x1dc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d020      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x18a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2a      	ldr	r2, [pc, #168]	@ (8004240 <HAL_DMA_Abort_IT+0x1f8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d019      	beq.n	80041ce <HAL_DMA_Abort_IT+0x186>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a29      	ldr	r2, [pc, #164]	@ (8004244 <HAL_DMA_Abort_IT+0x1fc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d012      	beq.n	80041ca <HAL_DMA_Abort_IT+0x182>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a27      	ldr	r2, [pc, #156]	@ (8004248 <HAL_DMA_Abort_IT+0x200>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00a      	beq.n	80041c4 <HAL_DMA_Abort_IT+0x17c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a26      	ldr	r2, [pc, #152]	@ (800424c <HAL_DMA_Abort_IT+0x204>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d102      	bne.n	80041be <HAL_DMA_Abort_IT+0x176>
 80041b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041bc:	e01b      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041c2:	e018      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041c8:	e015      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041ca:	2310      	movs	r3, #16
 80041cc:	e013      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e011      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041d6:	e00e      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041dc:	e00b      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041e2:	e008      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041e8:	e005      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ee:	e002      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041f0:	2310      	movs	r3, #16
 80041f2:	e000      	b.n	80041f6 <HAL_DMA_Abort_IT+0x1ae>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <HAL_DMA_Abort_IT+0x20c>)
 80041f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
    } 
  }
  return status;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40020080 	.word	0x40020080
 8004228:	40020008 	.word	0x40020008
 800422c:	4002001c 	.word	0x4002001c
 8004230:	40020030 	.word	0x40020030
 8004234:	40020044 	.word	0x40020044
 8004238:	40020058 	.word	0x40020058
 800423c:	4002006c 	.word	0x4002006c
 8004240:	40020408 	.word	0x40020408
 8004244:	4002041c 	.word	0x4002041c
 8004248:	40020430 	.word	0x40020430
 800424c:	40020444 	.word	0x40020444
 8004250:	40020400 	.word	0x40020400
 8004254:	40020000 	.word	0x40020000

08004258 <HAL_DMA_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	2204      	movs	r2, #4
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80f1 	beq.w	8004a24 <HAL_DMA_IRQHandler+0x20c>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80eb 	beq.w	8004a24 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <HAL_DMA_IRQHandler+0x1d8>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d958      	bls.n	800492a <HAL_DMA_IRQHandler+0x112>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5d      	ldr	r2, [pc, #372]	@ (80049f4 <HAL_DMA_IRQHandler+0x1dc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04f      	beq.n	8004922 <HAL_DMA_IRQHandler+0x10a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5c      	ldr	r2, [pc, #368]	@ (80049f8 <HAL_DMA_IRQHandler+0x1e0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d048      	beq.n	800491e <HAL_DMA_IRQHandler+0x106>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5a      	ldr	r2, [pc, #360]	@ (80049fc <HAL_DMA_IRQHandler+0x1e4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <HAL_DMA_IRQHandler+0x100>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a59      	ldr	r2, [pc, #356]	@ (8004a00 <HAL_DMA_IRQHandler+0x1e8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d038      	beq.n	8004912 <HAL_DMA_IRQHandler+0xfa>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a57      	ldr	r2, [pc, #348]	@ (8004a04 <HAL_DMA_IRQHandler+0x1ec>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d030      	beq.n	800490c <HAL_DMA_IRQHandler+0xf4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a56      	ldr	r2, [pc, #344]	@ (8004a08 <HAL_DMA_IRQHandler+0x1f0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d028      	beq.n	8004906 <HAL_DMA_IRQHandler+0xee>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4d      	ldr	r2, [pc, #308]	@ (80049f0 <HAL_DMA_IRQHandler+0x1d8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d020      	beq.n	8004900 <HAL_DMA_IRQHandler+0xe8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a52      	ldr	r2, [pc, #328]	@ (8004a0c <HAL_DMA_IRQHandler+0x1f4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d019      	beq.n	80048fc <HAL_DMA_IRQHandler+0xe4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a50      	ldr	r2, [pc, #320]	@ (8004a10 <HAL_DMA_IRQHandler+0x1f8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d012      	beq.n	80048f8 <HAL_DMA_IRQHandler+0xe0>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4f      	ldr	r2, [pc, #316]	@ (8004a14 <HAL_DMA_IRQHandler+0x1fc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00a      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xda>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004a18 <HAL_DMA_IRQHandler+0x200>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d102      	bne.n	80048ec <HAL_DMA_IRQHandler+0xd4>
 80048e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048ea:	e01b      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 80048ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80048f0:	e018      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 80048f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f6:	e015      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 80048f8:	2340      	movs	r3, #64	@ 0x40
 80048fa:	e013      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 80048fc:	2304      	movs	r3, #4
 80048fe:	e011      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 8004900:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004904:	e00e      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 8004906:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800490a:	e00b      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 800490c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004910:	e008      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 8004912:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004916:	e005      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 8004918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800491c:	e002      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 800491e:	2340      	movs	r3, #64	@ 0x40
 8004920:	e000      	b.n	8004924 <HAL_DMA_IRQHandler+0x10c>
 8004922:	2304      	movs	r3, #4
 8004924:	4a3d      	ldr	r2, [pc, #244]	@ (8004a1c <HAL_DMA_IRQHandler+0x204>)
 8004926:	6053      	str	r3, [r2, #4]
 8004928:	e057      	b.n	80049da <HAL_DMA_IRQHandler+0x1c2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a31      	ldr	r2, [pc, #196]	@ (80049f4 <HAL_DMA_IRQHandler+0x1dc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d04f      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x1bc>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2f      	ldr	r2, [pc, #188]	@ (80049f8 <HAL_DMA_IRQHandler+0x1e0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d048      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x1b8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2e      	ldr	r2, [pc, #184]	@ (80049fc <HAL_DMA_IRQHandler+0x1e4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d040      	beq.n	80049ca <HAL_DMA_IRQHandler+0x1b2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a00 <HAL_DMA_IRQHandler+0x1e8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d038      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x1ac>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <HAL_DMA_IRQHandler+0x1ec>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d030      	beq.n	80049be <HAL_DMA_IRQHandler+0x1a6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	@ (8004a08 <HAL_DMA_IRQHandler+0x1f0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d028      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x1a0>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a21      	ldr	r2, [pc, #132]	@ (80049f0 <HAL_DMA_IRQHandler+0x1d8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d020      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x19a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a25      	ldr	r2, [pc, #148]	@ (8004a0c <HAL_DMA_IRQHandler+0x1f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d019      	beq.n	80049ae <HAL_DMA_IRQHandler+0x196>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a24      	ldr	r2, [pc, #144]	@ (8004a10 <HAL_DMA_IRQHandler+0x1f8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d012      	beq.n	80049aa <HAL_DMA_IRQHandler+0x192>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a22      	ldr	r2, [pc, #136]	@ (8004a14 <HAL_DMA_IRQHandler+0x1fc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00a      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x18c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_DMA_IRQHandler+0x200>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d102      	bne.n	800499e <HAL_DMA_IRQHandler+0x186>
 8004998:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800499c:	e01b      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 800499e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80049a2:	e018      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049a8:	e015      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049aa:	2340      	movs	r3, #64	@ 0x40
 80049ac:	e013      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049ae:	2304      	movs	r3, #4
 80049b0:	e011      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049b6:	e00e      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80049bc:	e00b      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80049c2:	e008      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049c8:	e005      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ce:	e002      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049d0:	2340      	movs	r3, #64	@ 0x40
 80049d2:	e000      	b.n	80049d6 <HAL_DMA_IRQHandler+0x1be>
 80049d4:	2304      	movs	r3, #4
 80049d6:	4a12      	ldr	r2, [pc, #72]	@ (8004a20 <HAL_DMA_IRQHandler+0x208>)
 80049d8:	6053      	str	r3, [r2, #4]
=======
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	2204      	movs	r2, #4
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80f1 	beq.w	8004464 <HAL_DMA_IRQHandler+0x20c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80eb 	beq.w	8004464 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004430 <HAL_DMA_IRQHandler+0x1d8>)
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d958      	bls.n	800436a <HAL_DMA_IRQHandler+0x112>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_DMA_IRQHandler+0x1dc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04f      	beq.n	8004362 <HAL_DMA_IRQHandler+0x10a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004438 <HAL_DMA_IRQHandler+0x1e0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d048      	beq.n	800435e <HAL_DMA_IRQHandler+0x106>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5a      	ldr	r2, [pc, #360]	@ (800443c <HAL_DMA_IRQHandler+0x1e4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d040      	beq.n	8004358 <HAL_DMA_IRQHandler+0x100>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a59      	ldr	r2, [pc, #356]	@ (8004440 <HAL_DMA_IRQHandler+0x1e8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d038      	beq.n	8004352 <HAL_DMA_IRQHandler+0xfa>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a57      	ldr	r2, [pc, #348]	@ (8004444 <HAL_DMA_IRQHandler+0x1ec>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d030      	beq.n	800434c <HAL_DMA_IRQHandler+0xf4>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a56      	ldr	r2, [pc, #344]	@ (8004448 <HAL_DMA_IRQHandler+0x1f0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d028      	beq.n	8004346 <HAL_DMA_IRQHandler+0xee>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <HAL_DMA_IRQHandler+0x1d8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d020      	beq.n	8004340 <HAL_DMA_IRQHandler+0xe8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a52      	ldr	r2, [pc, #328]	@ (800444c <HAL_DMA_IRQHandler+0x1f4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d019      	beq.n	800433c <HAL_DMA_IRQHandler+0xe4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a50      	ldr	r2, [pc, #320]	@ (8004450 <HAL_DMA_IRQHandler+0x1f8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d012      	beq.n	8004338 <HAL_DMA_IRQHandler+0xe0>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4f      	ldr	r2, [pc, #316]	@ (8004454 <HAL_DMA_IRQHandler+0x1fc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00a      	beq.n	8004332 <HAL_DMA_IRQHandler+0xda>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4d      	ldr	r2, [pc, #308]	@ (8004458 <HAL_DMA_IRQHandler+0x200>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d102      	bne.n	800432c <HAL_DMA_IRQHandler+0xd4>
 8004326:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800432a:	e01b      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 800432c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004330:	e018      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004336:	e015      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004338:	2340      	movs	r3, #64	@ 0x40
 800433a:	e013      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 800433c:	2304      	movs	r3, #4
 800433e:	e011      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004340:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004344:	e00e      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004346:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800434a:	e00b      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 800434c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004350:	e008      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004352:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004356:	e005      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800435c:	e002      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 800435e:	2340      	movs	r3, #64	@ 0x40
 8004360:	e000      	b.n	8004364 <HAL_DMA_IRQHandler+0x10c>
 8004362:	2304      	movs	r3, #4
 8004364:	4a3d      	ldr	r2, [pc, #244]	@ (800445c <HAL_DMA_IRQHandler+0x204>)
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	e057      	b.n	800441a <HAL_DMA_IRQHandler+0x1c2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a31      	ldr	r2, [pc, #196]	@ (8004434 <HAL_DMA_IRQHandler+0x1dc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d04f      	beq.n	8004414 <HAL_DMA_IRQHandler+0x1bc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2f      	ldr	r2, [pc, #188]	@ (8004438 <HAL_DMA_IRQHandler+0x1e0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d048      	beq.n	8004410 <HAL_DMA_IRQHandler+0x1b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2e      	ldr	r2, [pc, #184]	@ (800443c <HAL_DMA_IRQHandler+0x1e4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d040      	beq.n	800440a <HAL_DMA_IRQHandler+0x1b2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2c      	ldr	r2, [pc, #176]	@ (8004440 <HAL_DMA_IRQHandler+0x1e8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d038      	beq.n	8004404 <HAL_DMA_IRQHandler+0x1ac>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2b      	ldr	r2, [pc, #172]	@ (8004444 <HAL_DMA_IRQHandler+0x1ec>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d030      	beq.n	80043fe <HAL_DMA_IRQHandler+0x1a6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a29      	ldr	r2, [pc, #164]	@ (8004448 <HAL_DMA_IRQHandler+0x1f0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d028      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x1a0>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	@ (8004430 <HAL_DMA_IRQHandler+0x1d8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d020      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x19a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a25      	ldr	r2, [pc, #148]	@ (800444c <HAL_DMA_IRQHandler+0x1f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d019      	beq.n	80043ee <HAL_DMA_IRQHandler+0x196>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a24      	ldr	r2, [pc, #144]	@ (8004450 <HAL_DMA_IRQHandler+0x1f8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d012      	beq.n	80043ea <HAL_DMA_IRQHandler+0x192>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <HAL_DMA_IRQHandler+0x1fc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00a      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x18c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <HAL_DMA_IRQHandler+0x200>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d102      	bne.n	80043de <HAL_DMA_IRQHandler+0x186>
 80043d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043dc:	e01b      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043e2:	e018      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043e8:	e015      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043ea:	2340      	movs	r3, #64	@ 0x40
 80043ec:	e013      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043ee:	2304      	movs	r3, #4
 80043f0:	e011      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80043f6:	e00e      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043fc:	e00b      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 80043fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004402:	e008      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 8004404:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004408:	e005      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 800440a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800440e:	e002      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 8004410:	2340      	movs	r3, #64	@ 0x40
 8004412:	e000      	b.n	8004416 <HAL_DMA_IRQHandler+0x1be>
 8004414:	2304      	movs	r3, #4
 8004416:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <HAL_DMA_IRQHandler+0x208>)
 8004418:	6053      	str	r3, [r2, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8136 	beq.w	8004c50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80049ec:	e130      	b.n	8004c50 <HAL_DMA_IRQHandler+0x438>
 80049ee:	bf00      	nop
 80049f0:	40020080 	.word	0x40020080
 80049f4:	40020008 	.word	0x40020008
 80049f8:	4002001c 	.word	0x4002001c
 80049fc:	40020030 	.word	0x40020030
 8004a00:	40020044 	.word	0x40020044
 8004a04:	40020058 	.word	0x40020058
 8004a08:	4002006c 	.word	0x4002006c
 8004a0c:	40020408 	.word	0x40020408
 8004a10:	4002041c 	.word	0x4002041c
 8004a14:	40020430 	.word	0x40020430
 8004a18:	40020444 	.word	0x40020444
 8004a1c:	40020400 	.word	0x40020400
 8004a20:	40020000 	.word	0x40020000
=======
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8136 	beq.w	8004690 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800442c:	e130      	b.n	8004690 <HAL_DMA_IRQHandler+0x438>
 800442e:	bf00      	nop
 8004430:	40020080 	.word	0x40020080
 8004434:	40020008 	.word	0x40020008
 8004438:	4002001c 	.word	0x4002001c
 800443c:	40020030 	.word	0x40020030
 8004440:	40020044 	.word	0x40020044
 8004444:	40020058 	.word	0x40020058
 8004448:	4002006c 	.word	0x4002006c
 800444c:	40020408 	.word	0x40020408
 8004450:	4002041c 	.word	0x4002041c
 8004454:	40020430 	.word	0x40020430
 8004458:	40020444 	.word	0x40020444
 800445c:	40020400 	.word	0x40020400
 8004460:	40020000 	.word	0x40020000
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
<<<<<<< HEAD
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	2202      	movs	r2, #2
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80dd 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x3d8>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80d7 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 020a 	bic.w	r2, r2, #10
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c5c <HAL_DMA_IRQHandler+0x444>)
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d958      	bls.n	8004b26 <HAL_DMA_IRQHandler+0x30e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a79      	ldr	r2, [pc, #484]	@ (8004c60 <HAL_DMA_IRQHandler+0x448>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d04f      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x306>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a78      	ldr	r2, [pc, #480]	@ (8004c64 <HAL_DMA_IRQHandler+0x44c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d048      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x302>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a76      	ldr	r2, [pc, #472]	@ (8004c68 <HAL_DMA_IRQHandler+0x450>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d040      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2fc>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a75      	ldr	r2, [pc, #468]	@ (8004c6c <HAL_DMA_IRQHandler+0x454>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d038      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x2f6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a73      	ldr	r2, [pc, #460]	@ (8004c70 <HAL_DMA_IRQHandler+0x458>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d030      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x2f0>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a72      	ldr	r2, [pc, #456]	@ (8004c74 <HAL_DMA_IRQHandler+0x45c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d028      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ea>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a69      	ldr	r2, [pc, #420]	@ (8004c5c <HAL_DMA_IRQHandler+0x444>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d020      	beq.n	8004afc <HAL_DMA_IRQHandler+0x2e4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6e      	ldr	r2, [pc, #440]	@ (8004c78 <HAL_DMA_IRQHandler+0x460>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d019      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x2e0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6c      	ldr	r2, [pc, #432]	@ (8004c7c <HAL_DMA_IRQHandler+0x464>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d012      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x2dc>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8004c80 <HAL_DMA_IRQHandler+0x468>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00a      	beq.n	8004aee <HAL_DMA_IRQHandler+0x2d6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a69      	ldr	r2, [pc, #420]	@ (8004c84 <HAL_DMA_IRQHandler+0x46c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d102      	bne.n	8004ae8 <HAL_DMA_IRQHandler+0x2d0>
 8004ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ae6:	e01b      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004ae8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004aec:	e018      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004af2:	e015      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004af4:	2320      	movs	r3, #32
 8004af6:	e013      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e011      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b00:	e00e      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004b02:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004b06:	e00b      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004b08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b0c:	e008      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004b0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b12:	e005      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b18:	e002      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	e000      	b.n	8004b20 <HAL_DMA_IRQHandler+0x308>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	4a59      	ldr	r2, [pc, #356]	@ (8004c88 <HAL_DMA_IRQHandler+0x470>)
 8004b22:	6053      	str	r3, [r2, #4]
 8004b24:	e057      	b.n	8004bd6 <HAL_DMA_IRQHandler+0x3be>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004c60 <HAL_DMA_IRQHandler+0x448>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d04f      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x3b8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4b      	ldr	r2, [pc, #300]	@ (8004c64 <HAL_DMA_IRQHandler+0x44c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d048      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x3b4>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c68 <HAL_DMA_IRQHandler+0x450>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d040      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x3ae>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a48      	ldr	r2, [pc, #288]	@ (8004c6c <HAL_DMA_IRQHandler+0x454>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d038      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x3a8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a47      	ldr	r2, [pc, #284]	@ (8004c70 <HAL_DMA_IRQHandler+0x458>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d030      	beq.n	8004bba <HAL_DMA_IRQHandler+0x3a2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a45      	ldr	r2, [pc, #276]	@ (8004c74 <HAL_DMA_IRQHandler+0x45c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d028      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x39c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3d      	ldr	r2, [pc, #244]	@ (8004c5c <HAL_DMA_IRQHandler+0x444>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d020      	beq.n	8004bae <HAL_DMA_IRQHandler+0x396>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a41      	ldr	r2, [pc, #260]	@ (8004c78 <HAL_DMA_IRQHandler+0x460>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_DMA_IRQHandler+0x392>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a40      	ldr	r2, [pc, #256]	@ (8004c7c <HAL_DMA_IRQHandler+0x464>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d012      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x38e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3e      	ldr	r2, [pc, #248]	@ (8004c80 <HAL_DMA_IRQHandler+0x468>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00a      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x388>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c84 <HAL_DMA_IRQHandler+0x46c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d102      	bne.n	8004b9a <HAL_DMA_IRQHandler+0x382>
 8004b94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b98:	e01b      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004b9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b9e:	e018      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba4:	e015      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	e013      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e011      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bb2:	e00e      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004bb8:	e00b      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bbe:	e008      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bc4:	e005      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bca:	e002      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bcc:	2320      	movs	r3, #32
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x3ba>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8004c8c <HAL_DMA_IRQHandler+0x474>)
 8004bd4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d034      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bee:	e02f      	b.n	8004c50 <HAL_DMA_IRQHandler+0x438>
=======
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	2202      	movs	r2, #2
 800446a:	409a      	lsls	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80dd 	beq.w	8004630 <HAL_DMA_IRQHandler+0x3d8>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80d7 	beq.w	8004630 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 020a 	bic.w	r2, r2, #10
 800449e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b7b      	ldr	r3, [pc, #492]	@ (800469c <HAL_DMA_IRQHandler+0x444>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d958      	bls.n	8004566 <HAL_DMA_IRQHandler+0x30e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a79      	ldr	r2, [pc, #484]	@ (80046a0 <HAL_DMA_IRQHandler+0x448>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04f      	beq.n	800455e <HAL_DMA_IRQHandler+0x306>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a78      	ldr	r2, [pc, #480]	@ (80046a4 <HAL_DMA_IRQHandler+0x44c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d048      	beq.n	800455a <HAL_DMA_IRQHandler+0x302>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a76      	ldr	r2, [pc, #472]	@ (80046a8 <HAL_DMA_IRQHandler+0x450>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d040      	beq.n	8004554 <HAL_DMA_IRQHandler+0x2fc>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a75      	ldr	r2, [pc, #468]	@ (80046ac <HAL_DMA_IRQHandler+0x454>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d038      	beq.n	800454e <HAL_DMA_IRQHandler+0x2f6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a73      	ldr	r2, [pc, #460]	@ (80046b0 <HAL_DMA_IRQHandler+0x458>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d030      	beq.n	8004548 <HAL_DMA_IRQHandler+0x2f0>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a72      	ldr	r2, [pc, #456]	@ (80046b4 <HAL_DMA_IRQHandler+0x45c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d028      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ea>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a69      	ldr	r2, [pc, #420]	@ (800469c <HAL_DMA_IRQHandler+0x444>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d020      	beq.n	800453c <HAL_DMA_IRQHandler+0x2e4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6e      	ldr	r2, [pc, #440]	@ (80046b8 <HAL_DMA_IRQHandler+0x460>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d019      	beq.n	8004538 <HAL_DMA_IRQHandler+0x2e0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6c      	ldr	r2, [pc, #432]	@ (80046bc <HAL_DMA_IRQHandler+0x464>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d012      	beq.n	8004534 <HAL_DMA_IRQHandler+0x2dc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6b      	ldr	r2, [pc, #428]	@ (80046c0 <HAL_DMA_IRQHandler+0x468>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00a      	beq.n	800452e <HAL_DMA_IRQHandler+0x2d6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a69      	ldr	r2, [pc, #420]	@ (80046c4 <HAL_DMA_IRQHandler+0x46c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d102      	bne.n	8004528 <HAL_DMA_IRQHandler+0x2d0>
 8004522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004526:	e01b      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 8004528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800452c:	e018      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 800452e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004532:	e015      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 8004534:	2320      	movs	r3, #32
 8004536:	e013      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 8004538:	2302      	movs	r3, #2
 800453a:	e011      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 800453c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004540:	e00e      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 8004542:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004546:	e00b      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 8004548:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800454c:	e008      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 800454e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004552:	e005      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 8004554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004558:	e002      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 800455a:	2320      	movs	r3, #32
 800455c:	e000      	b.n	8004560 <HAL_DMA_IRQHandler+0x308>
 800455e:	2302      	movs	r3, #2
 8004560:	4a59      	ldr	r2, [pc, #356]	@ (80046c8 <HAL_DMA_IRQHandler+0x470>)
 8004562:	6053      	str	r3, [r2, #4]
 8004564:	e057      	b.n	8004616 <HAL_DMA_IRQHandler+0x3be>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a4d      	ldr	r2, [pc, #308]	@ (80046a0 <HAL_DMA_IRQHandler+0x448>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04f      	beq.n	8004610 <HAL_DMA_IRQHandler+0x3b8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a4b      	ldr	r2, [pc, #300]	@ (80046a4 <HAL_DMA_IRQHandler+0x44c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d048      	beq.n	800460c <HAL_DMA_IRQHandler+0x3b4>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4a      	ldr	r2, [pc, #296]	@ (80046a8 <HAL_DMA_IRQHandler+0x450>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMA_IRQHandler+0x3ae>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a48      	ldr	r2, [pc, #288]	@ (80046ac <HAL_DMA_IRQHandler+0x454>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d038      	beq.n	8004600 <HAL_DMA_IRQHandler+0x3a8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a47      	ldr	r2, [pc, #284]	@ (80046b0 <HAL_DMA_IRQHandler+0x458>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d030      	beq.n	80045fa <HAL_DMA_IRQHandler+0x3a2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a45      	ldr	r2, [pc, #276]	@ (80046b4 <HAL_DMA_IRQHandler+0x45c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d028      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x39c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	@ (800469c <HAL_DMA_IRQHandler+0x444>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d020      	beq.n	80045ee <HAL_DMA_IRQHandler+0x396>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a41      	ldr	r2, [pc, #260]	@ (80046b8 <HAL_DMA_IRQHandler+0x460>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d019      	beq.n	80045ea <HAL_DMA_IRQHandler+0x392>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a40      	ldr	r2, [pc, #256]	@ (80046bc <HAL_DMA_IRQHandler+0x464>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d012      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x38e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3e      	ldr	r2, [pc, #248]	@ (80046c0 <HAL_DMA_IRQHandler+0x468>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00a      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x388>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3d      	ldr	r2, [pc, #244]	@ (80046c4 <HAL_DMA_IRQHandler+0x46c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d102      	bne.n	80045da <HAL_DMA_IRQHandler+0x382>
 80045d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045d8:	e01b      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045de:	e018      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045e4:	e015      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045e6:	2320      	movs	r3, #32
 80045e8:	e013      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e011      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045f2:	e00e      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045f8:	e00b      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 80045fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045fe:	e008      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 8004600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004604:	e005      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 8004606:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800460a:	e002      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 800460c:	2320      	movs	r3, #32
 800460e:	e000      	b.n	8004612 <HAL_DMA_IRQHandler+0x3ba>
 8004610:	2302      	movs	r3, #2
 8004612:	4a2e      	ldr	r2, [pc, #184]	@ (80046cc <HAL_DMA_IRQHandler+0x474>)
 8004614:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d034      	beq.n	8004690 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800462e:	e02f      	b.n	8004690 <HAL_DMA_IRQHandler+0x438>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
<<<<<<< HEAD
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d028      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x43a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d023      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x43a>
=======
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	2208      	movs	r2, #8
 8004636:	409a      	lsls	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d028      	beq.n	8004692 <HAL_DMA_IRQHandler+0x43a>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d023      	beq.n	8004692 <HAL_DMA_IRQHandler+0x43a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 020e 	bic.w	r2, r2, #14
 8004c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
    }
  }
  return;
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
}
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40020080 	.word	0x40020080
 8004c60:	40020008 	.word	0x40020008
 8004c64:	4002001c 	.word	0x4002001c
 8004c68:	40020030 	.word	0x40020030
 8004c6c:	40020044 	.word	0x40020044
 8004c70:	40020058 	.word	0x40020058
 8004c74:	4002006c 	.word	0x4002006c
 8004c78:	40020408 	.word	0x40020408
 8004c7c:	4002041c 	.word	0x4002041c
 8004c80:	40020430 	.word	0x40020430
 8004c84:	40020444 	.word	0x40020444
 8004c88:	40020400 	.word	0x40020400
 8004c8c:	40020000 	.word	0x40020000

08004c90 <HAL_GPIO_Init>:
=======
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 020e 	bic.w	r2, r2, #14
 8004658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
    }
  }
  return;
 8004690:	bf00      	nop
 8004692:	bf00      	nop
}
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40020080 	.word	0x40020080
 80046a0:	40020008 	.word	0x40020008
 80046a4:	4002001c 	.word	0x4002001c
 80046a8:	40020030 	.word	0x40020030
 80046ac:	40020044 	.word	0x40020044
 80046b0:	40020058 	.word	0x40020058
 80046b4:	4002006c 	.word	0x4002006c
 80046b8:	40020408 	.word	0x40020408
 80046bc:	4002041c 	.word	0x4002041c
 80046c0:	40020430 	.word	0x40020430
 80046c4:	40020444 	.word	0x40020444
 80046c8:	40020400 	.word	0x40020400
 80046cc:	40020000 	.word	0x40020000

080046d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d108      	bne.n	8004710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800470e:	e007      	b.n	8004720 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
	...

0800472c <HAL_GPIO_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8004c90:	b480      	push	{r7}
 8004c92:	b08b      	sub	sp, #44	@ 0x2c
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800472c:	b480      	push	{r7}
 800472e:	b08b      	sub	sp, #44	@ 0x2c
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
=======
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8004ca2:	e169      	b.n	8004f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	f040 8158 	bne.w	8004f72 <HAL_GPIO_Init+0x2e2>
=======
 800473e:	e169      	b.n	8004a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004740:	2201      	movs	r2, #1
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	f040 8158 	bne.w	8004a0e <HAL_GPIO_Init+0x2e2>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4a9a      	ldr	r2, [pc, #616]	@ (8004f30 <HAL_GPIO_Init+0x2a0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d05e      	beq.n	8004d8a <HAL_GPIO_Init+0xfa>
 8004ccc:	4a98      	ldr	r2, [pc, #608]	@ (8004f30 <HAL_GPIO_Init+0x2a0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d875      	bhi.n	8004dbe <HAL_GPIO_Init+0x12e>
 8004cd2:	4a98      	ldr	r2, [pc, #608]	@ (8004f34 <HAL_GPIO_Init+0x2a4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d058      	beq.n	8004d8a <HAL_GPIO_Init+0xfa>
 8004cd8:	4a96      	ldr	r2, [pc, #600]	@ (8004f34 <HAL_GPIO_Init+0x2a4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d86f      	bhi.n	8004dbe <HAL_GPIO_Init+0x12e>
 8004cde:	4a96      	ldr	r2, [pc, #600]	@ (8004f38 <HAL_GPIO_Init+0x2a8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d052      	beq.n	8004d8a <HAL_GPIO_Init+0xfa>
 8004ce4:	4a94      	ldr	r2, [pc, #592]	@ (8004f38 <HAL_GPIO_Init+0x2a8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d869      	bhi.n	8004dbe <HAL_GPIO_Init+0x12e>
 8004cea:	4a94      	ldr	r2, [pc, #592]	@ (8004f3c <HAL_GPIO_Init+0x2ac>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d04c      	beq.n	8004d8a <HAL_GPIO_Init+0xfa>
 8004cf0:	4a92      	ldr	r2, [pc, #584]	@ (8004f3c <HAL_GPIO_Init+0x2ac>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d863      	bhi.n	8004dbe <HAL_GPIO_Init+0x12e>
 8004cf6:	4a92      	ldr	r2, [pc, #584]	@ (8004f40 <HAL_GPIO_Init+0x2b0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d046      	beq.n	8004d8a <HAL_GPIO_Init+0xfa>
 8004cfc:	4a90      	ldr	r2, [pc, #576]	@ (8004f40 <HAL_GPIO_Init+0x2b0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d85d      	bhi.n	8004dbe <HAL_GPIO_Init+0x12e>
 8004d02:	2b12      	cmp	r3, #18
 8004d04:	d82a      	bhi.n	8004d5c <HAL_GPIO_Init+0xcc>
 8004d06:	2b12      	cmp	r3, #18
 8004d08:	d859      	bhi.n	8004dbe <HAL_GPIO_Init+0x12e>
 8004d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <HAL_GPIO_Init+0x80>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d8b 	.word	0x08004d8b
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004d77 	.word	0x08004d77
 8004d1c:	08004db9 	.word	0x08004db9
 8004d20:	08004dbf 	.word	0x08004dbf
 8004d24:	08004dbf 	.word	0x08004dbf
 8004d28:	08004dbf 	.word	0x08004dbf
 8004d2c:	08004dbf 	.word	0x08004dbf
 8004d30:	08004dbf 	.word	0x08004dbf
 8004d34:	08004dbf 	.word	0x08004dbf
 8004d38:	08004dbf 	.word	0x08004dbf
 8004d3c:	08004dbf 	.word	0x08004dbf
 8004d40:	08004dbf 	.word	0x08004dbf
 8004d44:	08004dbf 	.word	0x08004dbf
 8004d48:	08004dbf 	.word	0x08004dbf
 8004d4c:	08004dbf 	.word	0x08004dbf
 8004d50:	08004dbf 	.word	0x08004dbf
 8004d54:	08004d6d 	.word	0x08004d6d
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	4a79      	ldr	r2, [pc, #484]	@ (8004f44 <HAL_GPIO_Init+0x2b4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_GPIO_Init+0xfa>
=======
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a9a      	ldr	r2, [pc, #616]	@ (80049cc <HAL_GPIO_Init+0x2a0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d05e      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004768:	4a98      	ldr	r2, [pc, #608]	@ (80049cc <HAL_GPIO_Init+0x2a0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d875      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 800476e:	4a98      	ldr	r2, [pc, #608]	@ (80049d0 <HAL_GPIO_Init+0x2a4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d058      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004774:	4a96      	ldr	r2, [pc, #600]	@ (80049d0 <HAL_GPIO_Init+0x2a4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d86f      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 800477a:	4a96      	ldr	r2, [pc, #600]	@ (80049d4 <HAL_GPIO_Init+0x2a8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d052      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004780:	4a94      	ldr	r2, [pc, #592]	@ (80049d4 <HAL_GPIO_Init+0x2a8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d869      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 8004786:	4a94      	ldr	r2, [pc, #592]	@ (80049d8 <HAL_GPIO_Init+0x2ac>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d04c      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 800478c:	4a92      	ldr	r2, [pc, #584]	@ (80049d8 <HAL_GPIO_Init+0x2ac>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d863      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 8004792:	4a92      	ldr	r2, [pc, #584]	@ (80049dc <HAL_GPIO_Init+0x2b0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d046      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
 8004798:	4a90      	ldr	r2, [pc, #576]	@ (80049dc <HAL_GPIO_Init+0x2b0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d85d      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 800479e:	2b12      	cmp	r3, #18
 80047a0:	d82a      	bhi.n	80047f8 <HAL_GPIO_Init+0xcc>
 80047a2:	2b12      	cmp	r3, #18
 80047a4:	d859      	bhi.n	800485a <HAL_GPIO_Init+0x12e>
 80047a6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <HAL_GPIO_Init+0x80>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	08004827 	.word	0x08004827
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004813 	.word	0x08004813
 80047b8:	08004855 	.word	0x08004855
 80047bc:	0800485b 	.word	0x0800485b
 80047c0:	0800485b 	.word	0x0800485b
 80047c4:	0800485b 	.word	0x0800485b
 80047c8:	0800485b 	.word	0x0800485b
 80047cc:	0800485b 	.word	0x0800485b
 80047d0:	0800485b 	.word	0x0800485b
 80047d4:	0800485b 	.word	0x0800485b
 80047d8:	0800485b 	.word	0x0800485b
 80047dc:	0800485b 	.word	0x0800485b
 80047e0:	0800485b 	.word	0x0800485b
 80047e4:	0800485b 	.word	0x0800485b
 80047e8:	0800485b 	.word	0x0800485b
 80047ec:	0800485b 	.word	0x0800485b
 80047f0:	08004809 	.word	0x08004809
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	4a79      	ldr	r2, [pc, #484]	@ (80049e0 <HAL_GPIO_Init+0x2b4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_GPIO_Init+0xfa>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8004d62:	e02c      	b.n	8004dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	623b      	str	r3, [r7, #32]
          break;
 8004d6a:	e029      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	3304      	adds	r3, #4
 8004d72:	623b      	str	r3, [r7, #32]
          break;
 8004d74:	e024      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	623b      	str	r3, [r7, #32]
          break;
 8004d7e:	e01f      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	330c      	adds	r3, #12
 8004d86:	623b      	str	r3, [r7, #32]
          break;
 8004d88:	e01a      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d92:	2304      	movs	r3, #4
 8004d94:	623b      	str	r3, [r7, #32]
          break;
 8004d96:	e013      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004da0:	2308      	movs	r3, #8
 8004da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	611a      	str	r2, [r3, #16]
          break;
 8004daa:	e009      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004dac:	2308      	movs	r3, #8
 8004dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	615a      	str	r2, [r3, #20]
          break;
 8004db6:	e003      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
          break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_GPIO_Init+0x130>
          break;
 8004dbe:	bf00      	nop
=======
 80047fe:	e02c      	b.n	800485a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	623b      	str	r3, [r7, #32]
          break;
 8004806:	e029      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	3304      	adds	r3, #4
 800480e:	623b      	str	r3, [r7, #32]
          break;
 8004810:	e024      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	3308      	adds	r3, #8
 8004818:	623b      	str	r3, [r7, #32]
          break;
 800481a:	e01f      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	330c      	adds	r3, #12
 8004822:	623b      	str	r3, [r7, #32]
          break;
 8004824:	e01a      	b.n	800485c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800482e:	2304      	movs	r3, #4
 8004830:	623b      	str	r3, [r7, #32]
          break;
 8004832:	e013      	b.n	800485c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800483c:	2308      	movs	r3, #8
 800483e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	611a      	str	r2, [r3, #16]
          break;
 8004846:	e009      	b.n	800485c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004848:	2308      	movs	r3, #8
 800484a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	615a      	str	r2, [r3, #20]
          break;
 8004852:	e003      	b.n	800485c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
          break;
 8004858:	e000      	b.n	800485c <HAL_GPIO_Init+0x130>
          break;
 800485a:	bf00      	nop
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2bff      	cmp	r3, #255	@ 0xff
 8004dc4:	d801      	bhi.n	8004dca <HAL_GPIO_Init+0x13a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	e001      	b.n	8004dce <HAL_GPIO_Init+0x13e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2bff      	cmp	r3, #255	@ 0xff
 8004dd4:	d802      	bhi.n	8004ddc <HAL_GPIO_Init+0x14c>
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	e002      	b.n	8004de2 <HAL_GPIO_Init+0x152>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	3b08      	subs	r3, #8
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	210f      	movs	r1, #15
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	fa01 f303 	lsl.w	r3, r1, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	401a      	ands	r2, r3
 8004df4:	6a39      	ldr	r1, [r7, #32]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	601a      	str	r2, [r3, #0]
=======
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2bff      	cmp	r3, #255	@ 0xff
 8004860:	d801      	bhi.n	8004866 <HAL_GPIO_Init+0x13a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	e001      	b.n	800486a <HAL_GPIO_Init+0x13e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2bff      	cmp	r3, #255	@ 0xff
 8004870:	d802      	bhi.n	8004878 <HAL_GPIO_Init+0x14c>
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_Init+0x152>
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	3b08      	subs	r3, #8
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	210f      	movs	r1, #15
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	401a      	ands	r2, r3
 8004890:	6a39      	ldr	r1, [r7, #32]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	431a      	orrs	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80b1 	beq.w	8004f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e10:	4b4d      	ldr	r3, [pc, #308]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	4a4c      	ldr	r2, [pc, #304]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	6193      	str	r3, [r2, #24]
 8004e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e28:	4a48      	ldr	r2, [pc, #288]	@ (8004f4c <HAL_GPIO_Init+0x2bc>)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	3302      	adds	r3, #2
 8004e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	220f      	movs	r2, #15
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a40      	ldr	r2, [pc, #256]	@ (8004f50 <HAL_GPIO_Init+0x2c0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_GPIO_Init+0x1ec>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3f      	ldr	r2, [pc, #252]	@ (8004f54 <HAL_GPIO_Init+0x2c4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00d      	beq.n	8004e78 <HAL_GPIO_Init+0x1e8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f58 <HAL_GPIO_Init+0x2c8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <HAL_GPIO_Init+0x1e4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3d      	ldr	r2, [pc, #244]	@ (8004f5c <HAL_GPIO_Init+0x2cc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_GPIO_Init+0x1e0>
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e70:	2304      	movs	r3, #4
 8004e72:	e004      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e002      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e80:	f002 0203 	and.w	r2, r2, #3
 8004e84:	0092      	lsls	r2, r2, #2
 8004e86:	4093      	lsls	r3, r2
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e8e:	492f      	ldr	r1, [pc, #188]	@ (8004f4c <HAL_GPIO_Init+0x2bc>)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	3302      	adds	r3, #2
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80b1 	beq.w	8004a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048ac:	4b4d      	ldr	r3, [pc, #308]	@ (80049e4 <HAL_GPIO_Init+0x2b8>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	4a4c      	ldr	r2, [pc, #304]	@ (80049e4 <HAL_GPIO_Init+0x2b8>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6193      	str	r3, [r2, #24]
 80048b8:	4b4a      	ldr	r3, [pc, #296]	@ (80049e4 <HAL_GPIO_Init+0x2b8>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048c4:	4a48      	ldr	r2, [pc, #288]	@ (80049e8 <HAL_GPIO_Init+0x2bc>)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3302      	adds	r3, #2
 80048cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a40      	ldr	r2, [pc, #256]	@ (80049ec <HAL_GPIO_Init+0x2c0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_GPIO_Init+0x1ec>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3f      	ldr	r2, [pc, #252]	@ (80049f0 <HAL_GPIO_Init+0x2c4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00d      	beq.n	8004914 <HAL_GPIO_Init+0x1e8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a3e      	ldr	r2, [pc, #248]	@ (80049f4 <HAL_GPIO_Init+0x2c8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <HAL_GPIO_Init+0x1e4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3d      	ldr	r2, [pc, #244]	@ (80049f8 <HAL_GPIO_Init+0x2cc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_GPIO_Init+0x1e0>
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 800490c:	2304      	movs	r3, #4
 800490e:	e004      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 8004910:	2302      	movs	r3, #2
 8004912:	e002      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_GPIO_Init+0x1ee>
 8004918:	2300      	movs	r3, #0
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	f002 0203 	and.w	r2, r2, #3
 8004920:	0092      	lsls	r2, r2, #2
 8004922:	4093      	lsls	r3, r2
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800492a:	492f      	ldr	r1, [pc, #188]	@ (80049e8 <HAL_GPIO_Init+0x2bc>)
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	3302      	adds	r3, #2
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	492c      	ldr	r1, [pc, #176]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_Init+0x234>
=======
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004944:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	492c      	ldr	r1, [pc, #176]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]
 8004950:	e006      	b.n	8004960 <HAL_GPIO_Init+0x234>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8004eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	4928      	ldr	r1, [pc, #160]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	608b      	str	r3, [r1, #8]
=======
 8004952:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	43db      	mvns	r3, r3
 800495a:	4928      	ldr	r1, [pc, #160]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 800495c:	4013      	ands	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d006      	beq.n	8004ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ed0:	4b23      	ldr	r3, [pc, #140]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	4922      	ldr	r1, [pc, #136]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60cb      	str	r3, [r1, #12]
 8004edc:	e006      	b.n	8004eec <HAL_GPIO_Init+0x25c>
=======
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d006      	beq.n	800497a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800496c:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	4922      	ldr	r1, [pc, #136]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	60cb      	str	r3, [r1, #12]
 8004978:	e006      	b.n	8004988 <HAL_GPIO_Init+0x25c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8004ede:	4b20      	ldr	r3, [pc, #128]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	491e      	ldr	r1, [pc, #120]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60cb      	str	r3, [r1, #12]
=======
 800497a:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	43db      	mvns	r3, r3
 8004982:	491e      	ldr	r1, [pc, #120]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 8004984:	4013      	ands	r3, r2
 8004986:	60cb      	str	r3, [r1, #12]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d006      	beq.n	8004f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4918      	ldr	r1, [pc, #96]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	e006      	b.n	8004f14 <HAL_GPIO_Init+0x284>
=======
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	4918      	ldr	r1, [pc, #96]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
 80049a0:	e006      	b.n	80049b0 <HAL_GPIO_Init+0x284>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8004f06:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	4914      	ldr	r1, [pc, #80]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
=======
 80049a2:	4b16      	ldr	r3, [pc, #88]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	4914      	ldr	r1, [pc, #80]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d021      	beq.n	8004f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	490e      	ldr	r1, [pc, #56]	@ (8004f60 <HAL_GPIO_Init+0x2d0>)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]
 8004f2c:	e021      	b.n	8004f72 <HAL_GPIO_Init+0x2e2>
 8004f2e:	bf00      	nop
 8004f30:	10320000 	.word	0x10320000
 8004f34:	10310000 	.word	0x10310000
 8004f38:	10220000 	.word	0x10220000
 8004f3c:	10210000 	.word	0x10210000
 8004f40:	10120000 	.word	0x10120000
 8004f44:	10110000 	.word	0x10110000
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010800 	.word	0x40010800
 8004f54:	40010c00 	.word	0x40010c00
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	40010400 	.word	0x40010400
=======
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d021      	beq.n	8004a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049bc:	4b0f      	ldr	r3, [pc, #60]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	490e      	ldr	r1, [pc, #56]	@ (80049fc <HAL_GPIO_Init+0x2d0>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]
 80049c8:	e021      	b.n	8004a0e <HAL_GPIO_Init+0x2e2>
 80049ca:	bf00      	nop
 80049cc:	10320000 	.word	0x10320000
 80049d0:	10310000 	.word	0x10310000
 80049d4:	10220000 	.word	0x10220000
 80049d8:	10210000 	.word	0x10210000
 80049dc:	10120000 	.word	0x10120000
 80049e0:	10110000 	.word	0x10110000
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010800 	.word	0x40010800
 80049f0:	40010c00 	.word	0x40010c00
 80049f4:	40011000 	.word	0x40011000
 80049f8:	40011400 	.word	0x40011400
 80049fc:	40010400 	.word	0x40010400
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <HAL_GPIO_Init+0x304>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	4909      	ldr	r1, [pc, #36]	@ (8004f94 <HAL_GPIO_Init+0x304>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
=======
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <HAL_GPIO_Init+0x304>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	4909      	ldr	r1, [pc, #36]	@ (8004a30 <HAL_GPIO_Init+0x304>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }

	position++;
<<<<<<< HEAD
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	3301      	adds	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f47f ae8e 	bne.w	8004ca4 <HAL_GPIO_Init+0x14>
  }
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	372c      	adds	r7, #44	@ 0x2c
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	40010400 	.word	0x40010400

08004f98 <HAL_GPIO_WritePin>:
=======
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f47f ae8e 	bne.w	8004740 <HAL_GPIO_Init+0x14>
  }
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	372c      	adds	r7, #44	@ 0x2c
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	40010400 	.word	0x40010400

08004a34 <HAL_GPIO_WritePin>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	807b      	strh	r3, [r7, #2]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	707b      	strb	r3, [r7, #1]
=======
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
 8004a40:	4613      	mov	r3, r2
 8004a42:	707b      	strb	r3, [r7, #1]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8004fa8:	787b      	ldrb	r3, [r7, #1]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fae:	887a      	ldrh	r2, [r7, #2]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	611a      	str	r2, [r3, #16]
=======
 8004a44:	787b      	ldrb	r3, [r7, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a4a:	887a      	ldrh	r2, [r7, #2]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	611a      	str	r2, [r3, #16]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8004fb4:	e003      	b.n	8004fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fb6:	887b      	ldrh	r3, [r7, #2]
 8004fb8:	041a      	lsls	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	611a      	str	r2, [r3, #16]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	041a      	lsls	r2, r3, #16
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	43d9      	mvns	r1, r3
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	400b      	ands	r3, r1
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_RCC_OscConfig>:
=======
 8004a50:	e003      	b.n	8004a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a52:	887b      	ldrh	r3, [r7, #2]
 8004a54:	041a      	lsls	r2, r3, #16
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	611a      	str	r2, [r3, #16]
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_RCC_OscConfig>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
=======
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e304      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e304      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8087 	beq.w	800512a <HAL_RCC_OscConfig+0x12e>
=======
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8087 	beq.w	8004b92 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 800501c:	4b92      	ldr	r3, [pc, #584]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b04      	cmp	r3, #4
 8005026:	d00c      	beq.n	8005042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005028:	4b8f      	ldr	r3, [pc, #572]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b08      	cmp	r3, #8
 8005032:	d112      	bne.n	800505a <HAL_RCC_OscConfig+0x5e>
 8005034:	4b8c      	ldr	r3, [pc, #560]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005040:	d10b      	bne.n	800505a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005042:	4b89      	ldr	r3, [pc, #548]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d06c      	beq.n	8005128 <HAL_RCC_OscConfig+0x12c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d168      	bne.n	8005128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e2de      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 8004a84:	4b92      	ldr	r3, [pc, #584]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d00c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a90:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d112      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x5e>
 8004a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aaa:	4b89      	ldr	r3, [pc, #548]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d06c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x12c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d168      	bne.n	8004b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e2de      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x76>
 8005064:	4b80      	ldr	r3, [pc, #512]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7f      	ldr	r2, [pc, #508]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e02e      	b.n	80050d0 <HAL_RCC_OscConfig+0xd4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x98>
 800507a:	4b7b      	ldr	r3, [pc, #492]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7a      	ldr	r2, [pc, #488]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b78      	ldr	r3, [pc, #480]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a77      	ldr	r2, [pc, #476]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800508c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e01d      	b.n	80050d0 <HAL_RCC_OscConfig+0xd4>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0xbc>
 800509e:	4b72      	ldr	r3, [pc, #456]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a71      	ldr	r2, [pc, #452]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a6e      	ldr	r2, [pc, #440]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e00b      	b.n	80050d0 <HAL_RCC_OscConfig+0xd4>
 80050b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6a      	ldr	r2, [pc, #424]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	4b68      	ldr	r3, [pc, #416]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a67      	ldr	r2, [pc, #412]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ce:	6013      	str	r3, [r2, #0]
=======
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x76>
 8004acc:	4b80      	ldr	r3, [pc, #512]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e02e      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x98>
 8004ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b78      	ldr	r3, [pc, #480]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a77      	ldr	r2, [pc, #476]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0xbc>
 8004b06:	4b72      	ldr	r3, [pc, #456]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a71      	ldr	r2, [pc, #452]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6e      	ldr	r2, [pc, #440]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004b20:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b68      	ldr	r3, [pc, #416]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a67      	ldr	r2, [pc, #412]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b36:	6013      	str	r3, [r2, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d013      	beq.n	8005100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fe f942 	bl	8003360 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fe f93e 	bl	8003360 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	@ 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e292      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b5d      	ldr	r3, [pc, #372]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe4>
 80050fe:	e014      	b.n	800512a <HAL_RCC_OscConfig+0x12e>
=======
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fe f8e8 	bl	8002d14 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fe f8e4 	bl	8002d14 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e292      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe4>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005100:	f7fe f92e 	bl	8003360 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fe f92a 	bl	8003360 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	@ 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e27e      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511a:	4b53      	ldr	r3, [pc, #332]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x10c>
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005128:	bf00      	nop
=======
 8004b68:	f7fe f8d4 	bl	8002d14 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fe f8d0 	bl	8002d14 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e27e      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x10c>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d063      	beq.n	80051fe <HAL_RCC_OscConfig+0x202>
=======
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d063      	beq.n	8004c66 <HAL_RCC_OscConfig+0x202>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8005136:	4b4c      	ldr	r3, [pc, #304]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005142:	4b49      	ldr	r3, [pc, #292]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b08      	cmp	r3, #8
 800514c:	d11c      	bne.n	8005188 <HAL_RCC_OscConfig+0x18c>
 800514e:	4b46      	ldr	r3, [pc, #280]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d116      	bne.n	8005188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	4b43      	ldr	r3, [pc, #268]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_RCC_OscConfig+0x176>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e252      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 8004b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004baa:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x18c>
 8004bb6:	4b46      	ldr	r3, [pc, #280]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d116      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc2:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_RCC_OscConfig+0x176>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e252      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005172:	4b3d      	ldr	r3, [pc, #244]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4939      	ldr	r1, [pc, #228]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005186:	e03a      	b.n	80051fe <HAL_RCC_OscConfig+0x202>
=======
 8004bda:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4939      	ldr	r1, [pc, #228]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bee:	e03a      	b.n	8004c66 <HAL_RCC_OscConfig+0x202>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005190:	4b36      	ldr	r3, [pc, #216]	@ (800526c <HAL_RCC_OscConfig+0x270>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fe f8e3 	bl	8003360 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519e:	f7fe f8df 	bl	8003360 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e233      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x1a2>
=======
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf8:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fe f889 	bl	8002d14 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c06:	f7fe f885 	bl	8002d14 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e233      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80051bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4927      	ldr	r1, [pc, #156]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]
 80051d0:	e015      	b.n	80051fe <HAL_RCC_OscConfig+0x202>
=======
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4927      	ldr	r1, [pc, #156]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]
 8004c38:	e015      	b.n	8004c66 <HAL_RCC_OscConfig+0x202>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80051d2:	4b26      	ldr	r3, [pc, #152]	@ (800526c <HAL_RCC_OscConfig+0x270>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fe f8c2 	bl	8003360 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fe f8be 	bl	8003360 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e212      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x1e4>
=======
 8004c3a:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe f868 	bl	8002d14 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fe f864 	bl	8002d14 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e212      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03a      	beq.n	8005280 <HAL_RCC_OscConfig+0x284>
=======
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d03a      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x284>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d019      	beq.n	8005246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005212:	4b17      	ldr	r3, [pc, #92]	@ (8005270 <HAL_RCC_OscConfig+0x274>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005218:	f7fe f8a2 	bl	8003360 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005220:	f7fe f89e 	bl	8003360 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1f2      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005232:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <HAL_RCC_OscConfig+0x26c>)
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x224>
=======
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d019      	beq.n	8004cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7a:	4b17      	ldr	r3, [pc, #92]	@ (8004cd8 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c80:	f7fe f848 	bl	8002d14 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fe f844 	bl	8002d14 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1f2      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x224>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800523e:	2001      	movs	r0, #1
 8005240:	f000 fbca 	bl	80059d8 <RCC_Delay>
 8005244:	e01c      	b.n	8005280 <HAL_RCC_OscConfig+0x284>
=======
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f000 fbca 	bl	8005440 <RCC_Delay>
 8004cac:	e01c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x284>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8005246:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <HAL_RCC_OscConfig+0x274>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800524c:	f7fe f888 	bl	8003360 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005252:	e00f      	b.n	8005274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005254:	f7fe f884 	bl	8003360 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d908      	bls.n	8005274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1d8      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	42420000 	.word	0x42420000
 8005270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005274:	4b9b      	ldr	r3, [pc, #620]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e9      	bne.n	8005254 <HAL_RCC_OscConfig+0x258>
=======
 8004cae:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb4:	f7fe f82e 	bl	8002d14 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cba:	e00f      	b.n	8004cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fe f82a 	bl	8002d14 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d908      	bls.n	8004cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e1d8      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	42420000 	.word	0x42420000
 8004cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	4b9b      	ldr	r3, [pc, #620]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e9      	bne.n	8004cbc <HAL_RCC_OscConfig+0x258>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a6 	beq.w	80053da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
=======
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a6 	beq.w	8004e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005292:	4b94      	ldr	r3, [pc, #592]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	4b91      	ldr	r3, [pc, #580]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4a90      	ldr	r2, [pc, #576]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a8:	61d3      	str	r3, [r2, #28]
 80052aa:	4b8e      	ldr	r3, [pc, #568]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ba:	4b8b      	ldr	r3, [pc, #556]	@ (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d118      	bne.n	80052f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c6:	4b88      	ldr	r3, [pc, #544]	@ (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a87      	ldr	r2, [pc, #540]	@ (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d2:	f7fe f845 	bl	8003360 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052da:	f7fe f841 	bl	8003360 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b64      	cmp	r3, #100	@ 0x64
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e195      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	4b7e      	ldr	r3, [pc, #504]	@ (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x2de>
=======
 8004cfa:	4b94      	ldr	r3, [pc, #592]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	4b91      	ldr	r3, [pc, #580]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4a90      	ldr	r2, [pc, #576]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d10:	61d3      	str	r3, [r2, #28]
 8004d12:	4b8e      	ldr	r3, [pc, #568]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b8b      	ldr	r3, [pc, #556]	@ (8004f50 <HAL_RCC_OscConfig+0x4ec>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d118      	bne.n	8004d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2e:	4b88      	ldr	r3, [pc, #544]	@ (8004f50 <HAL_RCC_OscConfig+0x4ec>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a87      	ldr	r2, [pc, #540]	@ (8004f50 <HAL_RCC_OscConfig+0x4ec>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3a:	f7fd ffeb 	bl	8002d14 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fd ffe7 	bl	8002d14 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	@ 0x64
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e195      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b7e      	ldr	r3, [pc, #504]	@ (8004f50 <HAL_RCC_OscConfig+0x4ec>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x2de>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x312>
 8005300:	4b78      	ldr	r3, [pc, #480]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4a77      	ldr	r2, [pc, #476]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6213      	str	r3, [r2, #32]
 800530c:	e02d      	b.n	800536a <HAL_RCC_OscConfig+0x36e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x334>
 8005316:	4b73      	ldr	r3, [pc, #460]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4a72      	ldr	r2, [pc, #456]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	6213      	str	r3, [r2, #32]
 8005322:	4b70      	ldr	r3, [pc, #448]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a6f      	ldr	r2, [pc, #444]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	e01c      	b.n	800536a <HAL_RCC_OscConfig+0x36e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b05      	cmp	r3, #5
 8005336:	d10c      	bne.n	8005352 <HAL_RCC_OscConfig+0x356>
 8005338:	4b6a      	ldr	r3, [pc, #424]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a69      	ldr	r2, [pc, #420]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	6213      	str	r3, [r2, #32]
 8005344:	4b67      	ldr	r3, [pc, #412]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4a66      	ldr	r2, [pc, #408]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	6213      	str	r3, [r2, #32]
 8005350:	e00b      	b.n	800536a <HAL_RCC_OscConfig+0x36e>
 8005352:	4b64      	ldr	r3, [pc, #400]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4a63      	ldr	r2, [pc, #396]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6213      	str	r3, [r2, #32]
 800535e:	4b61      	ldr	r3, [pc, #388]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a60      	ldr	r2, [pc, #384]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d015      	beq.n	800539e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005372:	f7fd fff5 	bl	8003360 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fd fff1 	bl	8003360 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e143      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005390:	4b54      	ldr	r3, [pc, #336]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ee      	beq.n	800537a <HAL_RCC_OscConfig+0x37e>
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x3cc>
=======
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x312>
 8004d68:	4b78      	ldr	r3, [pc, #480]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a77      	ldr	r2, [pc, #476]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	e02d      	b.n	8004dd2 <HAL_RCC_OscConfig+0x36e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x334>
 8004d7e:	4b73      	ldr	r3, [pc, #460]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	4a72      	ldr	r2, [pc, #456]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6213      	str	r3, [r2, #32]
 8004d8a:	4b70      	ldr	r3, [pc, #448]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4a6f      	ldr	r2, [pc, #444]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	6213      	str	r3, [r2, #32]
 8004d96:	e01c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x36e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d10c      	bne.n	8004dba <HAL_RCC_OscConfig+0x356>
 8004da0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4a69      	ldr	r2, [pc, #420]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6213      	str	r3, [r2, #32]
 8004dac:	4b67      	ldr	r3, [pc, #412]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4a66      	ldr	r2, [pc, #408]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6213      	str	r3, [r2, #32]
 8004db8:	e00b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x36e>
 8004dba:	4b64      	ldr	r3, [pc, #400]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	4a63      	ldr	r2, [pc, #396]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6213      	str	r3, [r2, #32]
 8004dc6:	4b61      	ldr	r3, [pc, #388]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	4a60      	ldr	r2, [pc, #384]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d015      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dda:	f7fd ff9b 	bl	8002d14 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fd ff97 	bl	8002d14 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e143      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	4b54      	ldr	r3, [pc, #336]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ee      	beq.n	8004de2 <HAL_RCC_OscConfig+0x37e>
 8004e04:	e014      	b.n	8004e30 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800539e:	f7fd ffdf 	bl	8003360 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fd ffdb 	bl	8003360 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e12d      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053bc:	4b49      	ldr	r3, [pc, #292]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ee      	bne.n	80053a6 <HAL_RCC_OscConfig+0x3aa>
=======
 8004e06:	f7fd ff85 	bl	8002d14 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fd ff81 	bl	8002d14 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e12d      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	4b49      	ldr	r3, [pc, #292]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ee      	bne.n	8004e0e <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d105      	bne.n	80053da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ce:	4b45      	ldr	r3, [pc, #276]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4a44      	ldr	r2, [pc, #272]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	61d3      	str	r3, [r2, #28]
=======
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d105      	bne.n	8004e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e36:	4b45      	ldr	r3, [pc, #276]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4a44      	ldr	r2, [pc, #272]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	61d3      	str	r3, [r2, #28]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
<<<<<<< HEAD
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808c 	beq.w	80054fc <HAL_RCC_OscConfig+0x500>
=======
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 808c 	beq.w	8004f64 <HAL_RCC_OscConfig+0x500>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
<<<<<<< HEAD
 80053e4:	4b3f      	ldr	r3, [pc, #252]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f0:	d10e      	bne.n	8005410 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80053f2:	4b3c      	ldr	r3, [pc, #240]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d108      	bne.n	8005410 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80053fe:	4b39      	ldr	r3, [pc, #228]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540a:	d101      	bne.n	8005410 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e103      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e58:	d10e      	bne.n	8004e78 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d108      	bne.n	8004e78 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004e66:	4b39      	ldr	r3, [pc, #228]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e103      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
<<<<<<< HEAD
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	2b02      	cmp	r3, #2
 8005416:	d14e      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4ba>
=======
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d14e      	bne.n	8004f1e <HAL_RCC_OscConfig+0x4ba>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
<<<<<<< HEAD
 8005418:	4b32      	ldr	r3, [pc, #200]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005424:	4b2f      	ldr	r3, [pc, #188]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0ef      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 8004e80:	4b32      	ldr	r3, [pc, #200]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0ef      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
<<<<<<< HEAD
 8005438:	4b2c      	ldr	r3, [pc, #176]	@ (80054ec <HAL_RCC_OscConfig+0x4f0>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fd ff8f 	bl	8003360 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005446:	f7fd ff8b 	bl	8003360 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b64      	cmp	r3, #100	@ 0x64
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0df      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005458:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x44a>
=======
 8004ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f54 <HAL_RCC_OscConfig+0x4f0>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fd ff35 	bl	8002d14 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eae:	f7fd ff31 	bl	8002d14 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b64      	cmp	r3, #100	@ 0x64
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e0df      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004ec0:	4b22      	ldr	r3, [pc, #136]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <HAL_RCC_OscConfig+0x44a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
<<<<<<< HEAD
 8005464:	4b1f      	ldr	r3, [pc, #124]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005470:	491c      	ldr	r1, [pc, #112]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005476:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005482:	4918      	ldr	r1, [pc, #96]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005484:	4313      	orrs	r3, r2
 8005486:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005488:	4b18      	ldr	r3, [pc, #96]	@ (80054ec <HAL_RCC_OscConfig+0x4f0>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fd ff67 	bl	8003360 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005496:	f7fd ff63 	bl	8003360 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	@ 0x64
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0b7      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054a8:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x49a>
 80054b4:	e022      	b.n	80054fc <HAL_RCC_OscConfig+0x500>
=======
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	491c      	ldr	r1, [pc, #112]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004ede:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	4918      	ldr	r1, [pc, #96]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004ef0:	4b18      	ldr	r3, [pc, #96]	@ (8004f54 <HAL_RCC_OscConfig+0x4f0>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fd ff0d 	bl	8002d14 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004efe:	f7fd ff09 	bl	8002d14 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b64      	cmp	r3, #100	@ 0x64
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0b7      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004f10:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x49a>
 8004f1c:	e022      	b.n	8004f64 <HAL_RCC_OscConfig+0x500>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
<<<<<<< HEAD
 80054b6:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	4a0a      	ldr	r2, [pc, #40]	@ (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <HAL_RCC_OscConfig+0x4f0>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fd ff4a 	bl	8003360 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80054ce:	e00f      	b.n	80054f0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054d0:	f7fd ff46 	bl	8003360 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	@ 0x64
 80054dc:	d908      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e09a      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40007000 	.word	0x40007000
 80054ec:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80054f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e9      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4d4>
=======
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <HAL_RCC_OscConfig+0x4e8>)
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <HAL_RCC_OscConfig+0x4f0>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd fef0 	bl	8002d14 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004f36:	e00f      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f38:	f7fd feec 	bl	8002d14 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	@ 0x64
 8004f44:	d908      	bls.n	8004f58 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e09a      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004f58:	4b4b      	ldr	r3, [pc, #300]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e9      	bne.n	8004f38 <HAL_RCC_OscConfig+0x4d4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8088 	beq.w	8005616 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005506:	4b46      	ldr	r3, [pc, #280]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b08      	cmp	r3, #8
 8005510:	d068      	beq.n	80055e4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d14d      	bne.n	80055b6 <HAL_RCC_OscConfig+0x5ba>
=======
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8088 	beq.w	800507e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f6e:	4b46      	ldr	r3, [pc, #280]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d068      	beq.n	800504c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d14d      	bne.n	800501e <HAL_RCC_OscConfig+0x5ba>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800551a:	4b42      	ldr	r3, [pc, #264]	@ (8005624 <HAL_RCC_OscConfig+0x628>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fd ff1e 	bl	8003360 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fd ff1a 	bl	8003360 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e06e      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x52c>
=======
 8004f82:	4b42      	ldr	r3, [pc, #264]	@ (800508c <HAL_RCC_OscConfig+0x628>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fd fec4 	bl	8002d14 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fd fec0 	bl	8002d14 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e06e      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa2:	4b39      	ldr	r3, [pc, #228]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554e:	d10f      	bne.n	8005570 <HAL_RCC_OscConfig+0x574>
=======
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb6:	d10f      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x574>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
<<<<<<< HEAD
 8005550:	4b33      	ldr	r3, [pc, #204]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 8005552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4931      	ldr	r1, [pc, #196]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 800555a:	4313      	orrs	r3, r2
 800555c:	62cb      	str	r3, [r1, #44]	@ 0x2c
=======
 8004fb8:	4b33      	ldr	r3, [pc, #204]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4931      	ldr	r1, [pc, #196]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	62cb      	str	r3, [r1, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 800555e:	4b30      	ldr	r3, [pc, #192]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	f023 020f 	bic.w	r2, r3, #15
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	492d      	ldr	r1, [pc, #180]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 800556c:	4313      	orrs	r3, r2
 800556e:	62cb      	str	r3, [r1, #44]	@ 0x2c
=======
 8004fc6:	4b30      	ldr	r3, [pc, #192]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	f023 020f 	bic.w	r2, r3, #15
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	492d      	ldr	r1, [pc, #180]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8005570:	4b2b      	ldr	r3, [pc, #172]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	430b      	orrs	r3, r1
 8005582:	4927      	ldr	r1, [pc, #156]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005588:	4b26      	ldr	r3, [pc, #152]	@ (8005624 <HAL_RCC_OscConfig+0x628>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7fd fee7 	bl	8003360 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005596:	f7fd fee3 	bl	8003360 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e037      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x59a>
 80055b4:	e02f      	b.n	8005616 <HAL_RCC_OscConfig+0x61a>
=======
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	4927      	ldr	r1, [pc, #156]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff0:	4b26      	ldr	r3, [pc, #152]	@ (800508c <HAL_RCC_OscConfig+0x628>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fd fe8d 	bl	8002d14 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fd fe89 	bl	8002d14 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e037      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005010:	4b1d      	ldr	r3, [pc, #116]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x59a>
 800501c:	e02f      	b.n	800507e <HAL_RCC_OscConfig+0x61a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80055b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005624 <HAL_RCC_OscConfig+0x628>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fd fed0 	bl	8003360 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fd fecc 	bl	8003360 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e020      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d6:	4b12      	ldr	r3, [pc, #72]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c8>
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x61a>
=======
 800501e:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x628>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fd fe76 	bl	8002d14 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fd fe72 	bl	8002d14 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e020      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x5c8>
 800504a:	e018      	b.n	800507e <HAL_RCC_OscConfig+0x61a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e013      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e013      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 80055f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <HAL_RCC_OscConfig+0x624>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	429a      	cmp	r2, r3
 8005602:	d106      	bne.n	8005612 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <HAL_RCC_OscConfig+0x61c>
=======
 8005058:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <HAL_RCC_OscConfig+0x624>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	429a      	cmp	r2, r3
 800506a:	d106      	bne.n	800507a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_RCC_OscConfig+0x61c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	42420060 	.word	0x42420060

08005628 <HAL_RCC_ClockConfig>:
=======
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	42420060 	.word	0x42420060

08005090 <HAL_RCC_ClockConfig>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
=======
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0d0      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
=======
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0d0      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800563c:	4b6a      	ldr	r3, [pc, #424]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d910      	bls.n	800566c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b67      	ldr	r3, [pc, #412]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 0207 	bic.w	r2, r3, #7
 8005652:	4965      	ldr	r1, [pc, #404]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
=======
 80050a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d910      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b67      	ldr	r3, [pc, #412]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 0207 	bic.w	r2, r3, #7
 80050ba:	4965      	ldr	r1, [pc, #404]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800565a:	4b63      	ldr	r3, [pc, #396]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0b8      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
=======
 80050c2:	4b63      	ldr	r3, [pc, #396]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0b8      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d020      	beq.n	80056ba <HAL_RCC_ClockConfig+0x92>
=======
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d020      	beq.n	8005122 <HAL_RCC_ClockConfig+0x92>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005684:	4b59      	ldr	r3, [pc, #356]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a58      	ldr	r2, [pc, #352]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 800568a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800568e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800569c:	4b53      	ldr	r3, [pc, #332]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a52      	ldr	r2, [pc, #328]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80056a6:	6053      	str	r3, [r2, #4]
=======
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050ec:	4b59      	ldr	r3, [pc, #356]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4a58      	ldr	r2, [pc, #352]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005104:	4b53      	ldr	r3, [pc, #332]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a52      	ldr	r2, [pc, #328]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800510e:	6053      	str	r3, [r2, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80056a8:	4b50      	ldr	r3, [pc, #320]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	494d      	ldr	r1, [pc, #308]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]
=======
 8005110:	4b50      	ldr	r3, [pc, #320]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	494d      	ldr	r1, [pc, #308]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 800511e:	4313      	orrs	r3, r2
 8005120:	604b      	str	r3, [r1, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d040      	beq.n	8005748 <HAL_RCC_ClockConfig+0x120>
=======
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d040      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ce:	4b47      	ldr	r3, [pc, #284]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d115      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e07f      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
=======
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d107      	bne.n	8005146 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d115      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07f      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e6:	4b41      	ldr	r3, [pc, #260]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e073      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
=======
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b41      	ldr	r3, [pc, #260]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e073      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80056f6:	4b3d      	ldr	r3, [pc, #244]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e06b      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005706:	4b39      	ldr	r3, [pc, #228]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f023 0203 	bic.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4936      	ldr	r1, [pc, #216]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005718:	f7fd fe22 	bl	8003360 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	e00a      	b.n	8005736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005720:	f7fd fe1e 	bl	8003360 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e053      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 020c 	and.w	r2, r3, #12
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	429a      	cmp	r2, r3
 8005746:	d1eb      	bne.n	8005720 <HAL_RCC_ClockConfig+0xf8>
=======
 800515e:	4b3d      	ldr	r3, [pc, #244]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e06b      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516e:	4b39      	ldr	r3, [pc, #228]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4936      	ldr	r1, [pc, #216]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005180:	f7fd fdc8 	bl	8002d14 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fd fdc4 	bl	8002d14 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e053      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b2d      	ldr	r3, [pc, #180]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 020c 	and.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1eb      	bne.n	8005188 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005748:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d210      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 0207 	bic.w	r2, r3, #7
 800575e:	4922      	ldr	r1, [pc, #136]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
=======
 80051b0:	4b27      	ldr	r3, [pc, #156]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d210      	bcs.n	80051e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	4922      	ldr	r1, [pc, #136]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005766:	4b20      	ldr	r3, [pc, #128]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e032      	b.n	80057de <HAL_RCC_ClockConfig+0x1b6>
=======
 80051ce:	4b20      	ldr	r3, [pc, #128]	@ (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e032      	b.n	8005246 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005784:	4b19      	ldr	r3, [pc, #100]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4916      	ldr	r1, [pc, #88]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
=======
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ec:	4b19      	ldr	r3, [pc, #100]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4916      	ldr	r1, [pc, #88]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	604b      	str	r3, [r1, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057a2:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	490e      	ldr	r1, [pc, #56]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
=======
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	490e      	ldr	r1, [pc, #56]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80057b6:	f000 f821 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <HAL_RCC_ClockConfig+0x1c4>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	490a      	ldr	r1, [pc, #40]	@ (80057f0 <HAL_RCC_ClockConfig+0x1c8>)
 80057c8:	5ccb      	ldrb	r3, [r1, r3]
 80057ca:	fa22 f303 	lsr.w	r3, r2, r3
 80057ce:	4a09      	ldr	r2, [pc, #36]	@ (80057f4 <HAL_RCC_ClockConfig+0x1cc>)
 80057d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <HAL_RCC_ClockConfig+0x1d0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd fd80 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40022000 	.word	0x40022000
 80057ec:	40021000 	.word	0x40021000
 80057f0:	08008178 	.word	0x08008178
 80057f4:	2000006c 	.word	0x2000006c
 80057f8:	20000070 	.word	0x20000070

080057fc <HAL_RCC_GetSysClockFreq>:
=======
 800521e:	f000 f821 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 8005222:	4602      	mov	r2, r0
 8005224:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	490a      	ldr	r1, [pc, #40]	@ (8005258 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	5ccb      	ldrb	r3, [r1, r3]
 8005232:	fa22 f303 	lsr.w	r3, r2, r3
 8005236:	4a09      	ldr	r2, [pc, #36]	@ (800525c <HAL_RCC_ClockConfig+0x1cc>)
 8005238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800523a:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCC_ClockConfig+0x1d0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7fd fd26 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40022000 	.word	0x40022000
 8005254:	40021000 	.word	0x40021000
 8005258:	08007dd0 	.word	0x08007dd0
 800525c:	2000006c 	.word	0x2000006c
 8005260:	20000070 	.word	0x20000070

08005264 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80057fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005800:	b08e      	sub	sp, #56	@ 0x38
 8005802:	af00      	add	r7, sp, #0
=======
 8005264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005268:	b08e      	sub	sp, #56	@ 0x38
 800526a:	af00      	add	r7, sp, #0
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005808:	2300      	movs	r3, #0
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800580c:	2300      	movs	r3, #0
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005820:	4b4e      	ldr	r3, [pc, #312]	@ (800595c <HAL_RCC_GetSysClockFreq+0x160>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	2b04      	cmp	r3, #4
 800582e:	d002      	beq.n	8005836 <HAL_RCC_GetSysClockFreq+0x3a>
 8005830:	2b08      	cmp	r3, #8
 8005832:	d003      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x40>
 8005834:	e089      	b.n	800594a <HAL_RCC_GetSysClockFreq+0x14e>
=======
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005270:	2300      	movs	r3, #0
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005274:	2300      	movs	r3, #0
 8005276:	637b      	str	r3, [r7, #52]	@ 0x34
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005288:	4b4e      	ldr	r3, [pc, #312]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	2b04      	cmp	r3, #4
 8005296:	d002      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0x3a>
 8005298:	2b08      	cmp	r3, #8
 800529a:	d003      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x40>
 800529c:	e089      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x14e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8005836:	4b4a      	ldr	r3, [pc, #296]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x164>)
 8005838:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800583a:	e089      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x154>
=======
 800529e:	4b4a      	ldr	r3, [pc, #296]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80052a0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80052a2:	e089      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x154>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	0c9b      	lsrs	r3, r3, #18
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	4b47      	ldr	r3, [pc, #284]	@ (8005964 <HAL_RCC_GetSysClockFreq+0x168>)
 8005846:	5c9b      	ldrb	r3, [r3, r2]
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d072      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005854:	4b41      	ldr	r3, [pc, #260]	@ (800595c <HAL_RCC_GetSysClockFreq+0x160>)
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	4b42      	ldr	r3, [pc, #264]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x16c>)
 800585e:	5c9b      	ldrb	r3, [r3, r2]
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80052a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a6:	0c9b      	lsrs	r3, r3, #18
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	4b47      	ldr	r3, [pc, #284]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x168>)
 80052ae:	5c9b      	ldrb	r3, [r3, r2]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d072      	beq.n	80053a2 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80052bc:	4b41      	ldr	r3, [pc, #260]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	4b42      	ldr	r3, [pc, #264]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80052c6:	5c9b      	ldrb	r3, [r3, r2]
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
<<<<<<< HEAD
 8005862:	4b3e      	ldr	r3, [pc, #248]	@ (800595c <HAL_RCC_GetSysClockFreq+0x160>)
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d053      	beq.n	8005916 <HAL_RCC_GetSysClockFreq+0x11a>
=======
 80052ca:	4b3e      	ldr	r3, [pc, #248]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d053      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x11a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
<<<<<<< HEAD
 800586e:	4b3b      	ldr	r3, [pc, #236]	@ (800595c <HAL_RCC_GetSysClockFreq+0x160>)
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	3301      	adds	r3, #1
 800587a:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800587c:	4b37      	ldr	r3, [pc, #220]	@ (800595c <HAL_RCC_GetSysClockFreq+0x160>)
 800587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	3302      	adds	r3, #2
 8005888:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2200      	movs	r2, #0
 800588e:	469a      	mov	sl, r3
 8005890:	4693      	mov	fp, r2
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	2200      	movs	r2, #0
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	617a      	str	r2, [r7, #20]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	fb03 f20b 	mul.w	r2, r3, fp
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	fb0a f303 	mul.w	r3, sl, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	fbaa 0102 	umull	r0, r1, sl, r2
 80058ae:	440b      	add	r3, r1
 80058b0:	4619      	mov	r1, r3
 80058b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x164>)
 80058b4:	fb03 f201 	mul.w	r2, r3, r1
 80058b8:	2300      	movs	r3, #0
 80058ba:	fb00 f303 	mul.w	r3, r0, r3
 80058be:	4413      	add	r3, r2
 80058c0:	4a27      	ldr	r2, [pc, #156]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x164>)
 80058c2:	fba0 4502 	umull	r4, r5, r0, r2
 80058c6:	442b      	add	r3, r5
 80058c8:	461d      	mov	r5, r3
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2200      	movs	r2, #0
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	60fa      	str	r2, [r7, #12]
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	2200      	movs	r2, #0
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058de:	460b      	mov	r3, r1
 80058e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058e4:	4652      	mov	r2, sl
 80058e6:	fb02 f203 	mul.w	r2, r2, r3
 80058ea:	465b      	mov	r3, fp
 80058ec:	4684      	mov	ip, r0
 80058ee:	fb0c f303 	mul.w	r3, ip, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	4602      	mov	r2, r0
 80058f6:	4651      	mov	r1, sl
 80058f8:	fba2 8901 	umull	r8, r9, r2, r1
 80058fc:	444b      	add	r3, r9
 80058fe:	4699      	mov	r9, r3
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	4620      	mov	r0, r4
 8005906:	4629      	mov	r1, r5
 8005908:	f7fb fbc8 	bl	800109c <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4613      	mov	r3, r2
 8005912:	637b      	str	r3, [r7, #52]	@ 0x34
 8005914:	e007      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x12a>
=======
 80052d6:	4b3b      	ldr	r3, [pc, #236]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	3301      	adds	r3, #1
 80052e2:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80052e4:	4b37      	ldr	r3, [pc, #220]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	0a1b      	lsrs	r3, r3, #8
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	3302      	adds	r3, #2
 80052f0:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2200      	movs	r2, #0
 80052f6:	469a      	mov	sl, r3
 80052f8:	4693      	mov	fp, r2
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	2200      	movs	r2, #0
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	617a      	str	r2, [r7, #20]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	fb03 f20b 	mul.w	r2, r3, fp
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	fb0a f303 	mul.w	r3, sl, r3
 800530e:	4413      	add	r3, r2
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	fbaa 0102 	umull	r0, r1, sl, r2
 8005316:	440b      	add	r3, r1
 8005318:	4619      	mov	r1, r3
 800531a:	4b2b      	ldr	r3, [pc, #172]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x164>)
 800531c:	fb03 f201 	mul.w	r2, r3, r1
 8005320:	2300      	movs	r3, #0
 8005322:	fb00 f303 	mul.w	r3, r0, r3
 8005326:	4413      	add	r3, r2
 8005328:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x164>)
 800532a:	fba0 4502 	umull	r4, r5, r0, r2
 800532e:	442b      	add	r3, r5
 8005330:	461d      	mov	r5, r3
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	2200      	movs	r2, #0
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	60fa      	str	r2, [r7, #12]
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	2200      	movs	r2, #0
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005346:	460b      	mov	r3, r1
 8005348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800534c:	4652      	mov	r2, sl
 800534e:	fb02 f203 	mul.w	r2, r2, r3
 8005352:	465b      	mov	r3, fp
 8005354:	4684      	mov	ip, r0
 8005356:	fb0c f303 	mul.w	r3, ip, r3
 800535a:	4413      	add	r3, r2
 800535c:	4602      	mov	r2, r0
 800535e:	4651      	mov	r1, sl
 8005360:	fba2 8901 	umull	r8, r9, r2, r1
 8005364:	444b      	add	r3, r9
 8005366:	4699      	mov	r9, r3
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	4620      	mov	r0, r4
 800536e:	4629      	mov	r1, r5
 8005370:	f7fb fe94 	bl	800109c <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4613      	mov	r3, r2
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
 800537c:	e007      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x12a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
<<<<<<< HEAD
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	4a11      	ldr	r2, [pc, #68]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x164>)
 800591a:	fb03 f202 	mul.w	r2, r3, r2
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005382:	fb03 f202 	mul.w	r2, r3, r2
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
<<<<<<< HEAD
 8005926:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <HAL_RCC_GetSysClockFreq+0x168>)
 8005928:	7b5b      	ldrb	r3, [r3, #13]
 800592a:	461a      	mov	r2, r3
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	4293      	cmp	r3, r2
 8005930:	d108      	bne.n	8005944 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
 8005938:	e004      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x148>
=======
 800538e:	4b0f      	ldr	r3, [pc, #60]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x168>)
 8005390:	7b5b      	ldrb	r3, [r3, #13]
 8005392:	461a      	mov	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a0:	e004      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x148>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	4a0b      	ldr	r2, [pc, #44]	@ (800596c <HAL_RCC_GetSysClockFreq+0x170>)
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8005944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005946:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005948:	e002      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x154>
=======
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	4a0b      	ldr	r2, [pc, #44]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x170>)
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 80053ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80053b0:	e002      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x154>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800594a:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x174>)
 800594c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800594e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005952:	4618      	mov	r0, r3
 8005954:	3738      	adds	r7, #56	@ 0x38
 8005956:	46bd      	mov	sp, r7
 8005958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800595c:	40021000 	.word	0x40021000
 8005960:	017d7840 	.word	0x017d7840
 8005964:	08008190 	.word	0x08008190
 8005968:	080081a0 	.word	0x080081a0
 800596c:	003d0900 	.word	0x003d0900
 8005970:	007a1200 	.word	0x007a1200

08005974 <HAL_RCC_GetHCLKFreq>:
=======
 80053b2:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x174>)
 80053b4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80053b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3738      	adds	r7, #56	@ 0x38
 80053be:	46bd      	mov	sp, r7
 80053c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	017d7840 	.word	0x017d7840
 80053cc:	08007de8 	.word	0x08007de8
 80053d0:	08007df8 	.word	0x08007df8
 80053d4:	003d0900 	.word	0x003d0900
 80053d8:	007a1200 	.word	0x007a1200

080053dc <HAL_RCC_GetHCLKFreq>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005978:	4b02      	ldr	r3, [pc, #8]	@ (8005984 <HAL_RCC_GetHCLKFreq+0x10>)
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr
 8005984:	2000006c 	.word	0x2000006c

08005988 <HAL_RCC_GetPCLK1Freq>:
=======
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e0:	4b02      	ldr	r3, [pc, #8]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x10>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	2000006c 	.word	0x2000006c

080053f0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800598c:	f7ff fff2 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005990:	4602      	mov	r2, r0
 8005992:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	4903      	ldr	r1, [pc, #12]	@ (80059ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	08008188 	.word	0x08008188

080059b0 <HAL_RCC_GetPCLK2Freq>:
=======
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053f4:	f7ff fff2 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4903      	ldr	r1, [pc, #12]	@ (8005414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	08007de0 	.word	0x08007de0

08005418 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059b4:	f7ff ffde 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	0adb      	lsrs	r3, r3, #11
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4903      	ldr	r1, [pc, #12]	@ (80059d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	08008188 	.word	0x08008188

080059d8 <RCC_Delay>:
=======
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800541c:	f7ff ffde 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	0adb      	lsrs	r3, r3, #11
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	@ (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000
 800543c:	08007de0 	.word	0x08007de0

08005440 <RCC_Delay>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059e0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <RCC_Delay+0x34>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <RCC_Delay+0x38>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	0a5b      	lsrs	r3, r3, #9
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059f4:	bf00      	nop
  }
  while (Delay --);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1e5a      	subs	r2, r3, #1
 80059fa:	60fa      	str	r2, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f9      	bne.n	80059f4 <RCC_Delay+0x1c>
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	2000006c 	.word	0x2000006c
 8005a10:	10624dd3 	.word	0x10624dd3

08005a14 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005448:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <RCC_Delay+0x34>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <RCC_Delay+0x38>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0a5b      	lsrs	r3, r3, #9
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800545c:	bf00      	nop
  }
  while (Delay --);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1e5a      	subs	r2, r3, #1
 8005462:	60fa      	str	r2, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f9      	bne.n	800545c <RCC_Delay+0x1c>
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	2000006c 	.word	0x2000006c
 8005478:	10624dd3 	.word	0x10624dd3

0800547c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
=======
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d07d      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a34:	2300      	movs	r3, #0
 8005a36:	76fb      	strb	r3, [r7, #27]
=======
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d07d      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 800549c:	2300      	movs	r3, #0
 800549e:	76fb      	strb	r3, [r7, #27]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005a38:	4b8b      	ldr	r3, [pc, #556]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10d      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a44:	4b88      	ldr	r3, [pc, #544]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4a87      	ldr	r2, [pc, #540]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a4e:	61d3      	str	r3, [r2, #28]
 8005a50:	4b85      	ldr	r3, [pc, #532]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a60:	4b82      	ldr	r3, [pc, #520]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d118      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7e      	ldr	r2, [pc, #504]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a78:	f7fd fc72 	bl	8003360 <HAL_GetTick>
 8005a7c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7e:	e008      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a80:	f7fd fc6e 	bl	8003360 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	@ 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e0e5      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	4b76      	ldr	r3, [pc, #472]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x6c>
=======
 80054a0:	4b8b      	ldr	r3, [pc, #556]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ac:	4b88      	ldr	r3, [pc, #544]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4a87      	ldr	r2, [pc, #540]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b6:	61d3      	str	r3, [r2, #28]
 80054b8:	4b85      	ldr	r3, [pc, #532]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054c4:	2301      	movs	r3, #1
 80054c6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	4b82      	ldr	r3, [pc, #520]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d118      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d4:	4b7f      	ldr	r3, [pc, #508]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7e      	ldr	r2, [pc, #504]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e0:	f7fd fc18 	bl	8002d14 <HAL_GetTick>
 80054e4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e6:	e008      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e8:	f7fd fc14 	bl	8002d14 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	@ 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e0e5      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fa:	4b76      	ldr	r3, [pc, #472]	@ (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8005a9e:	4b72      	ldr	r3, [pc, #456]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02e      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d027      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005abc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005acc:	4b68      	ldr	r3, [pc, #416]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ad2:	4a65      	ldr	r2, [pc, #404]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d014      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae2:	f7fd fc3d 	bl	8003360 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd fc39 	bl	8003360 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0ae      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	4b59      	ldr	r3, [pc, #356]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ee      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
=======
 8005506:	4b72      	ldr	r3, [pc, #456]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800550e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02e      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d027      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005524:	4b6a      	ldr	r3, [pc, #424]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552e:	4b6a      	ldr	r3, [pc, #424]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005534:	4b68      	ldr	r3, [pc, #416]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800553a:	4a65      	ldr	r2, [pc, #404]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554a:	f7fd fbe3 	bl	8002d14 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fd fbdf 	bl	8002d14 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e0ae      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b59      	ldr	r3, [pc, #356]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd6>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8005b0c:	4b56      	ldr	r3, [pc, #344]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4953      	ldr	r1, [pc, #332]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b1e:	7efb      	ldrb	r3, [r7, #27]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d105      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b24:	4b50      	ldr	r3, [pc, #320]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	4a4f      	ldr	r2, [pc, #316]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b2e:	61d3      	str	r3, [r2, #28]
=======
 8005574:	4b56      	ldr	r3, [pc, #344]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4953      	ldr	r1, [pc, #332]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005582:	4313      	orrs	r3, r2
 8005584:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005586:	7efb      	ldrb	r3, [r7, #27]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b50      	ldr	r3, [pc, #320]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4a4f      	ldr	r2, [pc, #316]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005596:	61d3      	str	r3, [r2, #28]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
=======
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8005b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4947      	ldr	r1, [pc, #284]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	604b      	str	r3, [r1, #4]
=======
 80055a4:	4b4a      	ldr	r3, [pc, #296]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4947      	ldr	r1, [pc, #284]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
<<<<<<< HEAD
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x158>
=======
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
<<<<<<< HEAD
 8005b5a:	4b43      	ldr	r3, [pc, #268]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	4940      	ldr	r1, [pc, #256]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
=======
 80055c2:	4b43      	ldr	r3, [pc, #268]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4940      	ldr	r1, [pc, #256]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
<<<<<<< HEAD
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x176>
=======
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
<<<<<<< HEAD
 8005b78:	4b3b      	ldr	r3, [pc, #236]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	4938      	ldr	r1, [pc, #224]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	62cb      	str	r3, [r1, #44]	@ 0x2c
=======
 80055e0:	4b3b      	ldr	r3, [pc, #236]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4938      	ldr	r1, [pc, #224]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
<<<<<<< HEAD
 8005b8a:	4b37      	ldr	r3, [pc, #220]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005b96:	4b34      	ldr	r3, [pc, #208]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
=======
 80055f2:	4b37      	ldr	r3, [pc, #220]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80055fe:	4b34      	ldr	r3, [pc, #208]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
<<<<<<< HEAD
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d148      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005bac:	4b2e      	ldr	r3, [pc, #184]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d138      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
=======
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d148      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005614:	4b2e      	ldr	r3, [pc, #184]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d138      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x216>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
<<<<<<< HEAD
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005bc4:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e042      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8005620:	4b2b      	ldr	r3, [pc, #172]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800562c:	4b28      	ldr	r3, [pc, #160]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e042      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
<<<<<<< HEAD
 8005bd8:	4b23      	ldr	r3, [pc, #140]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4920      	ldr	r1, [pc, #128]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005bea:	4b1f      	ldr	r3, [pc, #124]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	491c      	ldr	r1, [pc, #112]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fd fbad 	bl	8003360 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c0a:	f7fd fba9 	bl	8003360 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b64      	cmp	r3, #100	@ 0x64
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e020      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1c:	4b12      	ldr	r3, [pc, #72]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005c28:	e009      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
=======
 8005640:	4b23      	ldr	r3, [pc, #140]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	4920      	ldr	r1, [pc, #128]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800564e:	4313      	orrs	r3, r2
 8005650:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005652:	4b1f      	ldr	r3, [pc, #124]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	491c      	ldr	r1, [pc, #112]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005660:	4313      	orrs	r3, r2
 8005662:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005664:	4b1d      	ldr	r3, [pc, #116]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566a:	f7fd fb53 	bl	8002d14 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005672:	f7fd fb4f 	bl	8002d14 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b64      	cmp	r3, #100	@ 0x64
 800567e:	d901      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e020      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005684:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005690:	e009      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
<<<<<<< HEAD
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e00f      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8005692:	4b0f      	ldr	r3, [pc, #60]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005696:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e00f      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x248>
=======
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 8005c4a:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4904      	ldr	r1, [pc, #16]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	604b      	str	r3, [r1, #4]
=======
 80056b2:	4b07      	ldr	r3, [pc, #28]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	4904      	ldr	r1, [pc, #16]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
<<<<<<< HEAD
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40007000 	.word	0x40007000
 8005c70:	42420440 	.word	0x42420440
 8005c74:	42420070 	.word	0x42420070

08005c78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	@ 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	2300      	movs	r3, #0
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	2b0f      	cmp	r3, #15
 8005ca6:	f200 811d 	bhi.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005caa:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005e65 	.word	0x08005e65
 8005cb4:	08005ec9 	.word	0x08005ec9
 8005cb8:	08005ee5 	.word	0x08005ee5
 8005cbc:	08005dc3 	.word	0x08005dc3
 8005cc0:	08005ee5 	.word	0x08005ee5
 8005cc4:	08005ee5 	.word	0x08005ee5
 8005cc8:	08005ee5 	.word	0x08005ee5
 8005ccc:	08005e15 	.word	0x08005e15
 8005cd0:	08005ee5 	.word	0x08005ee5
 8005cd4:	08005ee5 	.word	0x08005ee5
 8005cd8:	08005ee5 	.word	0x08005ee5
 8005cdc:	08005ee5 	.word	0x08005ee5
 8005ce0:	08005ee5 	.word	0x08005ee5
 8005ce4:	08005ee5 	.word	0x08005ee5
 8005ce8:	08005ee5 	.word	0x08005ee5
 8005cec:	08005cf1 	.word	0x08005cf1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005cf0:	4b83      	ldr	r3, [pc, #524]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005cf6:	4b82      	ldr	r3, [pc, #520]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80f2 	beq.w	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	0c9b      	lsrs	r3, r3, #18
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	4a7d      	ldr	r2, [pc, #500]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d03b      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005d1c:	4b78      	ldr	r3, [pc, #480]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	4a78      	ldr	r2, [pc, #480]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d26:	5cd3      	ldrb	r3, [r2, r3]
 8005d28:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005d2a:	4b75      	ldr	r3, [pc, #468]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01c      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005d36:	4b72      	ldr	r3, [pc, #456]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005d44:	4b6e      	ldr	r3, [pc, #440]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	3302      	adds	r3, #2
 8005d50:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005d52:	4a6e      	ldr	r2, [pc, #440]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	fb03 f202 	mul.w	r2, r3, r2
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6e:	e007      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005d70:	4a66      	ldr	r2, [pc, #408]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005d80:	4b60      	ldr	r3, [pc, #384]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005d82:	7b5b      	ldrb	r3, [r3, #13]
 8005d84:	461a      	mov	r2, r3
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d92:	e004      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	4a5e      	ldr	r2, [pc, #376]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8005d9e:	4b58      	ldr	r3, [pc, #352]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005daa:	d102      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005db0:	e09a      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4a57      	ldr	r2, [pc, #348]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	623b      	str	r3, [r7, #32]
      break;
 8005dc0:	e092      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8005dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005dce:	f7ff fd15 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8005dd2:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005dd4:	e08a      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8084 	beq.w	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005de4:	4b46      	ldr	r3, [pc, #280]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005df2:	4b43      	ldr	r3, [pc, #268]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	0b1b      	lsrs	r3, r3, #12
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005e00:	4a42      	ldr	r2, [pc, #264]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	623b      	str	r3, [r7, #32]
      break;
 8005e12:	e06b      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8005e14:	4b3a      	ldr	r3, [pc, #232]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005e20:	f7ff fcec 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8005e24:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005e26:	e063      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005e28:	4b35      	ldr	r3, [pc, #212]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d05d      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005e34:	4b32      	ldr	r3, [pc, #200]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005e42:	4b2f      	ldr	r3, [pc, #188]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e46:	0b1b      	lsrs	r3, r3, #12
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005e50:	4a2e      	ldr	r2, [pc, #184]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	623b      	str	r3, [r7, #32]
      break;
 8005e62:	e045      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005e64:	4b26      	ldr	r3, [pc, #152]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e74:	d108      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8005e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	e01e      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e92:	d109      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005e94:	4b1a      	ldr	r3, [pc, #104]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8005ea0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e00e      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb2:	d11f      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005eb4:	4b12      	ldr	r3, [pc, #72]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d019      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 8005ec0:	4b15      	ldr	r3, [pc, #84]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005ec2:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005ec4:	e016      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005ec6:	e015      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ec8:	f7ff fd72 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0b9b      	lsrs	r3, r3, #14
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	3301      	adds	r3, #1
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	623b      	str	r3, [r7, #32]
      break;
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 8005ee4:	bf00      	nop
 8005ee6:	e006      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005ee8:	bf00      	nop
 8005eea:	e004      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005eec:	bf00      	nop
 8005eee:	e002      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8005ef4:	bf00      	nop
    }
  }
  return (frequency);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	@ 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	080081b0 	.word	0x080081b0
 8005f08:	080081c0 	.word	0x080081c0
 8005f0c:	017d7840 	.word	0x017d7840
 8005f10:	003d0900 	.word	0x003d0900
 8005f14:	aaaaaaab 	.word	0xaaaaaaab
 8005f18:	0002faf0 	.word	0x0002faf0

08005f1c <HAL_SPI_Init>:
=======
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40007000 	.word	0x40007000
 80056d8:	42420440 	.word	0x42420440
 80056dc:	42420070 	.word	0x42420070

080056e0 <HAL_SPI_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e076      	b.n	800601c <HAL_SPI_Init+0x100>
=======
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e076      	b.n	80057e0 <HAL_SPI_Init+0x100>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d108      	bne.n	8005f48 <HAL_SPI_Init+0x2c>
=======
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d108      	bne.n	800570c <HAL_SPI_Init+0x2c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3e:	d009      	beq.n	8005f54 <HAL_SPI_Init+0x38>
=======
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005702:	d009      	beq.n	8005718 <HAL_SPI_Init+0x38>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	61da      	str	r2, [r3, #28]
 8005f46:	e005      	b.n	8005f54 <HAL_SPI_Init+0x38>
=======
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	61da      	str	r2, [r3, #28]
 800570a:	e005      	b.n	8005718 <HAL_SPI_Init+0x38>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	615a      	str	r2, [r3, #20]
=======
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	615a      	str	r2, [r3, #20]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
=======
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fc ff0c 	bl	8002d8c <HAL_SPI_MspInit>
=======
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc ff9c 	bl	8002670 <HAL_SPI_MspInit>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f8a:	601a      	str	r2, [r3, #0]
=======
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800574e:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd8:	ea42 0103 	orr.w	r1, r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
=======
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	ea42 0103 	orr.w	r1, r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
<<<<<<< HEAD
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	0c1a      	lsrs	r2, r3, #16
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f002 0204 	and.w	r2, r2, #4
 8005ffa:	605a      	str	r2, [r3, #4]
=======
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	0c1a      	lsrs	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f002 0204 	and.w	r2, r2, #4
 80057be:	605a      	str	r2, [r3, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800600a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_SPI_Transmit>:
=======
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_SPI_Transmit>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
=======
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80fb      	strh	r3, [r7, #6]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 8006034:	f7fd f994 	bl	8003360 <HAL_GetTick>
 8006038:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d001      	beq.n	800604e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800604a:	2302      	movs	r3, #2
 800604c:	e12a      	b.n	80062a4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_SPI_Transmit+0x36>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e122      	b.n	80062a4 <HAL_SPI_Transmit+0x280>
=======
 80057f8:	f7fd fa8c 	bl	8002d14 <HAL_GetTick>
 80057fc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
 8005810:	e12a      	b.n	8005a68 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x36>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e122      	b.n	8005a68 <HAL_SPI_Transmit+0x280>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_SPI_Transmit+0x48>
 8006068:	2302      	movs	r3, #2
 800606a:	e11b      	b.n	80062a4 <HAL_SPI_Transmit+0x280>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2203      	movs	r2, #3
 8006078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d10f      	bne.n	80060dc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060da:	601a      	str	r2, [r3, #0]
=======
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_SPI_Transmit+0x48>
 800582c:	2302      	movs	r3, #2
 800582e:	e11b      	b.n	8005a68 <HAL_SPI_Transmit+0x280>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2203      	movs	r2, #3
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800587e:	d10f      	bne.n	80058a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800588e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800589e:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e6:	2b40      	cmp	r3, #64	@ 0x40
 80060e8:	d007      	beq.n	80060fa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060f8:	601a      	str	r2, [r3, #0]
=======
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058aa:	2b40      	cmp	r3, #64	@ 0x40
 80058ac:	d007      	beq.n	80058be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058bc:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006102:	d152      	bne.n	80061aa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_Transmit+0xee>
 800610c:	8b7b      	ldrh	r3, [r7, #26]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d145      	bne.n	800619e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006136:	e032      	b.n	800619e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d112      	bne.n	800616c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	881a      	ldrh	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	1c9a      	adds	r2, r3, #2
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	86da      	strh	r2, [r3, #54]	@ 0x36
 800616a:	e018      	b.n	800619e <HAL_SPI_Transmit+0x17a>
=======
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c6:	d152      	bne.n	800596e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_SPI_Transmit+0xee>
 80058d0:	8b7b      	ldrh	r3, [r7, #26]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d145      	bne.n	8005962 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	1c9a      	adds	r2, r3, #2
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058fa:	e032      	b.n	8005962 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d112      	bne.n	8005930 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	881a      	ldrh	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800592e:	e018      	b.n	8005962 <HAL_SPI_Transmit+0x17a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 800616c:	f7fd f8f8 	bl	8003360 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d803      	bhi.n	8006184 <HAL_SPI_Transmit+0x160>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <HAL_SPI_Transmit+0x166>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e082      	b.n	80062a4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1c7      	bne.n	8006138 <HAL_SPI_Transmit+0x114>
 80061a8:	e053      	b.n	8006252 <HAL_SPI_Transmit+0x22e>
=======
 8005930:	f7fd f9f0 	bl	8002d14 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d803      	bhi.n	8005948 <HAL_SPI_Transmit+0x160>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d102      	bne.n	800594e <HAL_SPI_Transmit+0x166>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e082      	b.n	8005a68 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1c7      	bne.n	80058fc <HAL_SPI_Transmit+0x114>
 800596c:	e053      	b.n	8005a16 <HAL_SPI_Transmit+0x22e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_SPI_Transmit+0x194>
 80061b2:	8b7b      	ldrh	r3, [r7, #26]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d147      	bne.n	8006248 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061de:	e033      	b.n	8006248 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d113      	bne.n	8006216 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006214:	e018      	b.n	8006248 <HAL_SPI_Transmit+0x224>
=======
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_SPI_Transmit+0x194>
 8005976:	8b7b      	ldrh	r3, [r7, #26]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d147      	bne.n	8005a0c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059a2:	e033      	b.n	8005a0c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d113      	bne.n	80059da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059d8:	e018      	b.n	8005a0c <HAL_SPI_Transmit+0x224>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8006216:	f7fd f8a3 	bl	8003360 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d803      	bhi.n	800622e <HAL_SPI_Transmit+0x20a>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d102      	bne.n	8006234 <HAL_SPI_Transmit+0x210>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e02d      	b.n	80062a4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1c6      	bne.n	80061e0 <HAL_SPI_Transmit+0x1bc>
=======
 80059da:	f7fd f99b 	bl	8002d14 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d803      	bhi.n	80059f2 <HAL_SPI_Transmit+0x20a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_Transmit+0x210>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e02d      	b.n	8005a68 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1c6      	bne.n	80059a4 <HAL_SPI_Transmit+0x1bc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fcc0 	bl	8006bdc <SPI_EndRxTxTransaction>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fddc 	bl	80065d8 <SPI_EndRxTxTransaction>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <HAL_SPI_Transmit+0x280>
=======
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <HAL_SPI_Transmit+0x280>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    return HAL_OK;
<<<<<<< HEAD
 80062a2:	2300      	movs	r3, #0
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
=======
 8005a66:	2300      	movs	r3, #0
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d001      	beq.n	80062cc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
 80062ca:	e104      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062d4:	d112      	bne.n	80062fc <HAL_SPI_Receive+0x50>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10e      	bne.n	80062fc <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2204      	movs	r2, #4
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f8f3 	bl	80064de <HAL_SPI_TransmitReceive>
 80062f8:	4603      	mov	r3, r0
 80062fa:	e0ec      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062fc:	f7fd f830 	bl	8003360 <HAL_GetTick>
 8006300:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_SPI_Receive+0x62>
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e0e1      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
=======
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d001      	beq.n	8005a8e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e097      	b.n	8005bbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit_DMA+0x2a>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e08f      	b.n	8005bbe <HAL_SPI_Transmit_DMA+0x14e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_SPI_Receive+0x74>
 800631c:	2302      	movs	r3, #2
 800631e:	e0da      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2204      	movs	r2, #4
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */
=======
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_SPI_Transmit_DMA+0x3c>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e088      	b.n	8005bbe <HAL_SPI_Transmit_DMA+0x14e>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	88fa      	ldrh	r2, [r7, #6]
 8005ad2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636e:	d10f      	bne.n	8006390 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800637e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800638e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d007      	beq.n	80063ae <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d170      	bne.n	8006498 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063b6:	e035      	b.n	8006424 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d115      	bne.n	80063f2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f103 020c 	add.w	r2, r3, #12
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	7812      	ldrb	r2, [r2, #0]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063f0:	e018      	b.n	8006424 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f2:	f7fc ffb5 	bl	8003360 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d803      	bhi.n	800640a <HAL_SPI_Receive+0x15e>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Receive+0x164>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e058      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1c4      	bne.n	80063b8 <HAL_SPI_Receive+0x10c>
 800642e:	e038      	b.n	80064a2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b01      	cmp	r3, #1
 800643c:	d113      	bne.n	8006466 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	b292      	uxth	r2, r2
 800644a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006464:	e018      	b.n	8006498 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006466:	f7fc ff7b 	bl	8003360 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d803      	bhi.n	800647e <HAL_SPI_Receive+0x1d2>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d102      	bne.n	8006484 <HAL_SPI_Receive+0x1d8>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e01e      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1c6      	bne.n	8006430 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fb46 	bl	8006b38 <SPI_EndRxTransaction>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80064d4:	2300      	movs	r3, #0
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b08a      	sub	sp, #40	@ 0x28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f0:	f7fc ff36 	bl	8003360 <HAL_GetTick>
 80064f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006508:	7ffb      	ldrb	r3, [r7, #31]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d00c      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x4a>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006514:	d106      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x46>
 800651e:	7ffb      	ldrb	r3, [r7, #31]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d001      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
 8006526:	e17f      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_SPI_TransmitReceive+0x5c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_SPI_TransmitReceive+0x5c>
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e174      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_SPI_TransmitReceive+0x6e>
 8006548:	2302      	movs	r3, #2
 800654a:	e16d      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b04      	cmp	r3, #4
 800655e:	d003      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2205      	movs	r2, #5
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	887a      	ldrh	r2, [r7, #2]
 8006578:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	887a      	ldrh	r2, [r7, #2]
 800657e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	887a      	ldrh	r2, [r7, #2]
 800658a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afa:	d10f      	bne.n	8005b1c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b1a:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b20:	4a29      	ldr	r2, [pc, #164]	@ (8005bc8 <HAL_SPI_Transmit_DMA+0x158>)
 8005b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b28:	4a28      	ldr	r2, [pc, #160]	@ (8005bcc <HAL_SPI_Transmit_DMA+0x15c>)
 8005b2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b30:	4a27      	ldr	r2, [pc, #156]	@ (8005bd0 <HAL_SPI_Transmit_DMA+0x160>)
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b38:	2200      	movs	r2, #0
 8005b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	4619      	mov	r1, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b52:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b54:	f7fe f9dc 	bl	8003f10 <HAL_DMA_Start_IT>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	f043 0210 	orr.w	r2, r3, #16
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e023      	b.n	8005bbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d007      	beq.n	80065bc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c4:	d17e      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_SPI_TransmitReceive+0xf6>
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d16c      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d8:	881a      	ldrh	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065f8:	e059      	b.n	80066ae <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b02      	cmp	r3, #2
 8006606:	d11b      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x162>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x162>
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2b01      	cmp	r3, #1
 8006616:	d113      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	881a      	ldrh	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b01      	cmp	r3, #1
 800664c:	d119      	bne.n	8006682 <HAL_SPI_TransmitReceive+0x1a4>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d014      	beq.n	8006682 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006662:	b292      	uxth	r2, r2
 8006664:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800667e:	2301      	movs	r3, #1
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006682:	f7fc fe6d 	bl	8003360 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668e:	429a      	cmp	r2, r3
 8006690:	d80d      	bhi.n	80066ae <HAL_SPI_TransmitReceive+0x1d0>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d009      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e0bc      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1a0      	bne.n	80065fa <HAL_SPI_TransmitReceive+0x11c>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d19b      	bne.n	80065fa <HAL_SPI_TransmitReceive+0x11c>
 80066c2:	e082      	b.n	80067ca <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x1f4>
 80066cc:	8afb      	ldrh	r3, [r7, #22]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d171      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f8:	e05d      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d11c      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x264>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d017      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x264>
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	2b01      	cmp	r3, #1
 8006716:	d114      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x2a6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006780:	2301      	movs	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006784:	f7fc fdec 	bl	8003360 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006790:	429a      	cmp	r2, r3
 8006792:	d803      	bhi.n	800679c <HAL_SPI_TransmitReceive+0x2be>
 8006794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x2c4>
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e038      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d19c      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x21c>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d197      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fa04 	bl	8006bdc <SPI_EndRxTxTransaction>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e01d      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006826:	2300      	movs	r3, #0
  }
}
 8006828:	4618      	mov	r0, r3
 800682a:	3728      	adds	r7, #40	@ 0x28
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10e      	bne.n	8006870 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
    return;
 800686e:	e0b7      	b.n	80069e0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_SPI_IRQHandler+0x5e>
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
    return;
 800688c:	e0a8      	b.n	80069e0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d105      	bne.n	80068a4 <HAL_SPI_IRQHandler+0x74>
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 809e 	beq.w	80069e0 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8098 	beq.w	80069e0 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d023      	beq.n	8006902 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d011      	beq.n	80068ea <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ca:	f043 0204 	orr.w	r2, r3, #4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	e00b      	b.n	8006902 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]
        return;
 8006900:	e06e      	b.n	80069e0 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d014      	beq.n	8006936 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006910:	f043 0201 	orr.w	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04f      	beq.n	80069de <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800694c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <HAL_SPI_IRQHandler+0x13a>
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d034      	beq.n	80069d4 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0203 	bic.w	r2, r2, #3
 8006978:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d011      	beq.n	80069a6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006986:	4a18      	ldr	r2, [pc, #96]	@ (80069e8 <HAL_SPI_IRQHandler+0x1b8>)
 8006988:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800698e:	4618      	mov	r0, r3
 8006990:	f7fd fe3a 	bl	8004608 <HAL_DMA_Abort_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d016      	beq.n	80069dc <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b2:	4a0d      	ldr	r2, [pc, #52]	@ (80069e8 <HAL_SPI_IRQHandler+0x1b8>)
 80069b4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fd fe24 	bl	8004608 <HAL_DMA_Abort_IT>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80069d2:	e003      	b.n	80069dc <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f809 	bl	80069ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069da:	e000      	b.n	80069de <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80069dc:	bf00      	nop
    return;
 80069de:	bf00      	nop
  }
}
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	080069ff 	.word	0x080069ff

080069ec <HAL_SPI_ErrorCallback>:
=======
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b40      	cmp	r3, #64	@ 0x40
 8005b82:	d007      	beq.n	8005b94 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0220 	orr.w	r2, r2, #32
 8005baa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0202 	orr.w	r2, r2, #2
 8005bba:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08006369 	.word	0x08006369
 8005bcc:	0800618f 	.word	0x0800618f
 8005bd0:	080063bd 	.word	0x080063bd

08005bd4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d001      	beq.n	8005bf2 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0a9      	b.n	8005d46 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d110      	bne.n	8005c1c <HAL_SPI_Receive_DMA+0x48>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c02:	d10b      	bne.n	8005c1c <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2204      	movs	r2, #4
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8a2 	bl	8005d5c <HAL_SPI_TransmitReceive_DMA>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	e094      	b.n	8005d46 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_SPI_Receive_DMA+0x54>
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e08c      	b.n	8005d46 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_SPI_Receive_DMA+0x66>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e085      	b.n	8005d46 <HAL_SPI_Receive_DMA+0x172>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2204      	movs	r2, #4
 8005c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c82:	d10f      	bne.n	8005ca4 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ca2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca8:	4a29      	ldr	r2, [pc, #164]	@ (8005d50 <HAL_SPI_Receive_DMA+0x17c>)
 8005caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb0:	4a28      	ldr	r2, [pc, #160]	@ (8005d54 <HAL_SPI_Receive_DMA+0x180>)
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb8:	4a27      	ldr	r2, [pc, #156]	@ (8005d58 <HAL_SPI_Receive_DMA+0x184>)
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cda:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005cdc:	f7fe f918 	bl	8003f10 <HAL_DMA_Start_IT>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	f043 0210 	orr.w	r2, r3, #16
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e023      	b.n	8005d46 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0220 	orr.w	r2, r2, #32
 8005d32:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	08006385 	.word	0x08006385
 8005d54:	08006235 	.word	0x08006235
 8005d58:	080063bd 	.word	0x080063bd

08005d5c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d70:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d00c      	beq.n	8005d98 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d84:	d106      	bne.n	8005d94 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d001      	beq.n	8005d98 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0cf      	b.n	8005f38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005da4:	887b      	ldrh	r3, [r7, #2]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e0c4      	b.n	8005f38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_SPI_TransmitReceive_DMA+0x60>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0bd      	b.n	8005f38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d003      	beq.n	8005dd8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2205      	movs	r2, #5
 8005dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	887a      	ldrh	r2, [r7, #2]
 8005de8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	887a      	ldrh	r2, [r7, #2]
 8005dee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	887a      	ldrh	r2, [r7, #2]
 8005dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	887a      	ldrh	r2, [r7, #2]
 8005e00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d108      	bne.n	8005e2c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1e:	4a48      	ldr	r2, [pc, #288]	@ (8005f40 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005e20:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	4a47      	ldr	r2, [pc, #284]	@ (8005f44 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005e28:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e2a:	e007      	b.n	8005e3c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e30:	4a45      	ldr	r2, [pc, #276]	@ (8005f48 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005e32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e38:	4a44      	ldr	r2, [pc, #272]	@ (8005f4c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e40:	4a43      	ldr	r2, [pc, #268]	@ (8005f50 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005e42:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e48:	2200      	movs	r2, #0
 8005e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	4619      	mov	r1, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005e64:	f7fe f854 	bl	8003f10 <HAL_DMA_Start_IT>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	f043 0210 	orr.w	r2, r3, #16
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e058      	b.n	8005f38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eaa:	2200      	movs	r2, #0
 8005eac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ecc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ece:	f7fe f81f 	bl	8003f10 <HAL_DMA_Start_IT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	f043 0210 	orr.w	r2, r3, #16
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e023      	b.n	8005f38 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d007      	beq.n	8005f0e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f0c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0220 	orr.w	r2, r2, #32
 8005f24:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0202 	orr.w	r2, r2, #2
 8005f34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	08006385 	.word	0x08006385
 8005f44:	08006235 	.word	0x08006235
 8005f48:	080063a1 	.word	0x080063a1
 8005f4c:	080062db 	.word	0x080062db
 8005f50:	080063bd 	.word	0x080063bd

08005f54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10e      	bne.n	8005f94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
    return;
 8005f92:	e0b7      	b.n	8006104 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <HAL_SPI_IRQHandler+0x5e>
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
    return;
 8005fb0:	e0a8      	b.n	8006104 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d105      	bne.n	8005fc8 <HAL_SPI_IRQHandler+0x74>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 809e 	beq.w	8006104 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8098 	beq.w	8006104 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d023      	beq.n	8006026 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d011      	beq.n	800600e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	f043 0204 	orr.w	r2, r3, #4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	e00b      	b.n	8006026 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	693b      	ldr	r3, [r7, #16]
        return;
 8006024:	e06e      	b.n	8006104 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d014      	beq.n	800605a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	f043 0201 	orr.w	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04f      	beq.n	8006102 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006070:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <HAL_SPI_IRQHandler+0x13a>
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d034      	beq.n	80060f8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0203 	bic.w	r2, r2, #3
 800609c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d011      	beq.n	80060ca <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060aa:	4a18      	ldr	r2, [pc, #96]	@ (800610c <HAL_SPI_IRQHandler+0x1b8>)
 80060ac:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fd ffc8 	bl	8004048 <HAL_DMA_Abort_IT>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d016      	beq.n	8006100 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d6:	4a0d      	ldr	r2, [pc, #52]	@ (800610c <HAL_SPI_IRQHandler+0x1b8>)
 80060d8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fd ffb2 	bl	8004048 <HAL_DMA_Abort_IT>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80060f6:	e003      	b.n	8006100 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f83f 	bl	800617c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060fe:	e000      	b.n	8006102 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8006100:	bf00      	nop
    return;
 8006102:	bf00      	nop
  }
}
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	080063fd 	.word	0x080063fd

08006110 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr

08006146 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr

0800616a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr

0800617c <HAL_SPI_ErrorCallback>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
=======
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <SPI_DMAAbortOnError>:
=======
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800619c:	f7fc fdba 	bl	8002d14 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d03b      	beq.n	8006228 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0220 	bic.w	r2, r2, #32
 80061be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0202 	bic.w	r2, r2, #2
 80061ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	2164      	movs	r1, #100	@ 0x64
 80061d4:	6978      	ldr	r0, [r7, #20]
 80061d6:	f000 f9ff 	bl	80065d8 <SPI_EndRxTxTransaction>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006220:	6978      	ldr	r0, [r7, #20]
 8006222:	f7ff ffab 	bl	800617c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006226:	e002      	b.n	800622e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f7ff ff71 	bl	8006110 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006242:	f7fc fd67 	bl	8002d14 <HAL_GetTick>
 8006246:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d03b      	beq.n	80062ce <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0220 	bic.w	r2, r2, #32
 8006264:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10d      	bne.n	800628a <SPI_DMAReceiveCplt+0x56>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006276:	d108      	bne.n	800628a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0203 	bic.w	r2, r2, #3
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	e007      	b.n	800629a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0201 	bic.w	r2, r2, #1
 8006298:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	2164      	movs	r1, #100	@ 0x64
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f948 	bl	8006534 <SPI_EndRxTransaction>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff58 	bl	800617c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80062cc:	e002      	b.n	80062d4 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff27 	bl	8006122 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062e8:	f7fc fd14 	bl	8002d14 <HAL_GetTick>
 80062ec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d02f      	beq.n	800635c <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0220 	bic.w	r2, r2, #32
 800630a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	2164      	movs	r1, #100	@ 0x64
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f961 	bl	80065d8 <SPI_EndRxTxTransaction>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0203 	bic.w	r2, r2, #3
 8006336:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7ff ff11 	bl	800617c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800635a:	e002      	b.n	8006362 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fee9 	bl	8006134 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fee5 	bl	8006146 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fee0 	bl	8006158 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fedb 	bl	800616a <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0203 	bic.w	r2, r2, #3
 80063d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063de:	f043 0210 	orr.w	r2, r3, #16
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff fec4 	bl	800617c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <SPI_DMAAbortOnError>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	86da      	strh	r2, [r3, #54]	@ 0x36
=======
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	86da      	strh	r2, [r3, #54]	@ 0x36
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff ffe7 	bl	80069ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <SPI_WaitFlagStateUntilTimeout>:
=======
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff feb0 	bl	800617c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	4613      	mov	r3, r2
 8006a36:	71fb      	strb	r3, [r7, #7]
=======
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8006a38:	f7fc fc92 	bl	8003360 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a40:	1a9b      	subs	r3, r3, r2
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	4413      	add	r3, r2
 8006a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a48:	f7fc fc8a 	bl	8003360 <HAL_GetTick>
 8006a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a4e:	4b39      	ldr	r3, [pc, #228]	@ (8006b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	015b      	lsls	r3, r3, #5
 8006a54:	0d1b      	lsrs	r3, r3, #20
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5e:	e054      	b.n	8006b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a66:	d050      	beq.n	8006b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a68:	f7fc fc7a 	bl	8003360 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d902      	bls.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d13d      	bne.n	8006afa <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8006434:	f7fc fc6e 	bl	8002d14 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4413      	add	r3, r2
 8006442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006444:	f7fc fc66 	bl	8002d14 <HAL_GetTick>
 8006448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800644a:	4b39      	ldr	r3, [pc, #228]	@ (8006530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	015b      	lsls	r3, r3, #5
 8006450:	0d1b      	lsrs	r3, r3, #20
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800645a:	e054      	b.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d050      	beq.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006464:	f7fc fc56 	bl	8002d14 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	429a      	cmp	r2, r3
 8006472:	d902      	bls.n	800647a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d13d      	bne.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a96:	d111      	bne.n	8006abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aa0:	d004      	beq.n	8006aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aaa:	d107      	bne.n	8006abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aba:	601a      	str	r2, [r3, #0]
=======
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006492:	d111      	bne.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800649c:	d004      	beq.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a6:	d107      	bne.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b6:	601a      	str	r2, [r3, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac4:	d10f      	bne.n	8006ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e017      	b.n	8006b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4013      	ands	r3, r2
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d19b      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c0:	d10f      	bne.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e017      	b.n	8006526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3b01      	subs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	429a      	cmp	r2, r3
 8006522:	d19b      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	2000006c 	.word	0x2000006c

08006b38 <SPI_EndRxTransaction>:
=======
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000006c 	.word	0x2000006c

08006534 <SPI_EndRxTransaction>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b4c:	d111      	bne.n	8006b72 <SPI_EndRxTransaction+0x3a>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b56:	d004      	beq.n	8006b62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b60:	d107      	bne.n	8006b72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b7a:	d117      	bne.n	8006bac <SPI_EndRxTransaction+0x74>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b84:	d112      	bne.n	8006bac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2101      	movs	r1, #1
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff ff49 	bl	8006a28 <SPI_WaitFlagStateUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01a      	beq.n	8006bd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba0:	f043 0220 	orr.w	r2, r3, #32
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e013      	b.n	8006bd4 <SPI_EndRxTransaction+0x9c>
=======
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006548:	d111      	bne.n	800656e <SPI_EndRxTransaction+0x3a>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006552:	d004      	beq.n	800655e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655c:	d107      	bne.n	800656e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800656c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006576:	d117      	bne.n	80065a8 <SPI_EndRxTransaction+0x74>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006580:	d112      	bne.n	80065a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	2101      	movs	r1, #1
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff ff49 	bl	8006424 <SPI_WaitFlagStateUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01a      	beq.n	80065ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e013      	b.n	80065d0 <SPI_EndRxTransaction+0x9c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2180      	movs	r1, #128	@ 0x80
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff ff36 	bl	8006a28 <SPI_WaitFlagStateUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	f043 0220 	orr.w	r2, r3, #32
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e000      	b.n	8006bd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <SPI_EndRxTxTransaction>:
=======
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2200      	movs	r2, #0
 80065b0:	2180      	movs	r1, #128	@ 0x80
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff ff36 	bl	8006424 <SPI_WaitFlagStateUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e000      	b.n	80065d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <SPI_EndRxTxTransaction>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff ff18 	bl	8006a28 <SPI_WaitFlagStateUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e013      	b.n	8006c36 <SPI_EndRxTxTransaction+0x5a>
=======
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2201      	movs	r2, #1
 80065ec:	2102      	movs	r1, #2
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7ff ff18 	bl	8006424 <SPI_WaitFlagStateUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e013      	b.n	8006632 <SPI_EndRxTxTransaction+0x5a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2200      	movs	r2, #0
 8006c16:	2180      	movs	r1, #128	@ 0x80
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff ff05 	bl	8006a28 <SPI_WaitFlagStateUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c28:	f043 0220 	orr.w	r2, r3, #32
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e000      	b.n	8006c36 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_TIM_Base_Init>:
=======
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2200      	movs	r2, #0
 8006612:	2180      	movs	r1, #128	@ 0x80
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff ff05 	bl	8006424 <SPI_WaitFlagStateUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e000      	b.n	8006632 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_Base_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e041      	b.n	8006cd4 <HAL_TIM_Base_Init+0x96>
=======
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e041      	b.n	80066d0 <HAL_TIM_Base_Init+0x96>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fc fa37 	bl	80030d8 <HAL_TIM_Base_MspInit>
=======
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fc f9df 	bl	8002a24 <HAL_TIM_Base_MspInit>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f000 f82d 	bl	8006cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <TIM_Base_SetConfig>:
=======
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 f94b 	bl	8006914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d020      	beq.n	800673c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01b      	beq.n	800673c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0202 	mvn.w	r2, #2
 800670c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8da 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8cd 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8dc 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d020      	beq.n	8006788 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01b      	beq.n	8006788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0204 	mvn.w	r2, #4
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8b4 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8a7 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8b6 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d020      	beq.n	80067d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01b      	beq.n	80067d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0208 	mvn.w	r2, #8
 80067a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2204      	movs	r2, #4
 80067aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f88e 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f881 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f890 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d020      	beq.n	8006820 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0210 	mvn.w	r2, #16
 80067f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2208      	movs	r2, #8
 80067f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f868 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f85b 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f86a 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00c      	beq.n	8006844 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0201 	mvn.w	r2, #1
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f83a 	bl	80068b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f93d 	bl	8006ae2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f83a 	bl	8006900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0220 	mvn.w	r2, #32
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f910 	bl	8006ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068b0:	bf00      	nop
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr

080068ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
	...

08006914 <TIM_Base_SetConfig>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a33      	ldr	r2, [pc, #204]	@ (8006dbc <TIM_Base_SetConfig+0xe0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00f      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfa:	d00b      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a30      	ldr	r2, [pc, #192]	@ (8006dc0 <TIM_Base_SetConfig+0xe4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d007      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc4 <TIM_Base_SetConfig+0xe8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_Base_SetConfig+0x38>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8006dc8 <TIM_Base_SetConfig+0xec>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a24      	ldr	r2, [pc, #144]	@ (8006dbc <TIM_Base_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00f      	beq.n	8006d4e <TIM_Base_SetConfig+0x72>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d34:	d00b      	beq.n	8006d4e <TIM_Base_SetConfig+0x72>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a21      	ldr	r2, [pc, #132]	@ (8006dc0 <TIM_Base_SetConfig+0xe4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_Base_SetConfig+0x72>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a20      	ldr	r2, [pc, #128]	@ (8006dc4 <TIM_Base_SetConfig+0xe8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_Base_SetConfig+0x72>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc8 <TIM_Base_SetConfig+0xec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d108      	bne.n	8006d60 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
=======
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a33      	ldr	r2, [pc, #204]	@ (80069f4 <TIM_Base_SetConfig+0xe0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00f      	beq.n	800694c <TIM_Base_SetConfig+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006932:	d00b      	beq.n	800694c <TIM_Base_SetConfig+0x38>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a30      	ldr	r2, [pc, #192]	@ (80069f8 <TIM_Base_SetConfig+0xe4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_Base_SetConfig+0x38>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2f      	ldr	r2, [pc, #188]	@ (80069fc <TIM_Base_SetConfig+0xe8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_Base_SetConfig+0x38>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2e      	ldr	r2, [pc, #184]	@ (8006a00 <TIM_Base_SetConfig+0xec>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d108      	bne.n	800695e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a24      	ldr	r2, [pc, #144]	@ (80069f4 <TIM_Base_SetConfig+0xe0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0x72>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0x72>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a21      	ldr	r2, [pc, #132]	@ (80069f8 <TIM_Base_SetConfig+0xe4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0x72>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a20      	ldr	r2, [pc, #128]	@ (80069fc <TIM_Base_SetConfig+0xe8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0x72>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1f      	ldr	r2, [pc, #124]	@ (8006a00 <TIM_Base_SetConfig+0xec>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a0d      	ldr	r2, [pc, #52]	@ (8006dbc <TIM_Base_SetConfig+0xe0>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d103      	bne.n	8006d94 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0d      	ldr	r2, [pc, #52]	@ (80069f4 <TIM_Base_SetConfig+0xe0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f023 0201 	bic.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]
  }
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00

08006dcc <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	611a      	str	r2, [r3, #16]
  }
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00

08006a04 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
=======
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e04b      	b.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a19      	ldr	r2, [pc, #100]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e30:	d00e      	beq.n	8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a15      	ldr	r2, [pc, #84]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a13      	ldr	r2, [pc, #76]	@ (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a12      	ldr	r2, [pc, #72]	@ (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10c      	bne.n	8006e6a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	609a      	str	r2, [r3, #8]
=======
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e04b      	b.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a19      	ldr	r2, [pc, #100]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a15      	ldr	r2, [pc, #84]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a13      	ldr	r2, [pc, #76]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a12      	ldr	r2, [pc, #72]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10c      	bne.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40012c00 	.word	0x40012c00
 8006e8c:	40000400 	.word	0x40000400
 8006e90:	40000800 	.word	0x40000800
 8006e94:	40000c00 	.word	0x40000c00

08006e98 <HAL_UART_Init>:
=======
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00

08006ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_Init>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e042      	b.n	8006f30 <HAL_UART_Init+0x98>
=======
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e042      	b.n	8006b8c <HAL_UART_Init+0x98>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fc f952 	bl	8003168 <HAL_UART_MspInit>
=======
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fb ffd2 	bl	8002ac4 <HAL_UART_MspInit>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2224      	movs	r2, #36	@ 0x24
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc7f 	bl	80077e0 <UART_SetConfig>
=======
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	@ 0x24
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fc7f 	bl	800743c <UART_SetConfig>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_UART_IRQHandler>:
=======
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_UART_IRQHandler>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10f      	bne.n	8006f9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <HAL_UART_IRQHandler+0x66>
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb63 	bl	8007662 <UART_Receive_IT>
      return;
 8006f9c:	e25b      	b.n	8007456 <HAL_UART_IRQHandler+0x51e>
=======
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b0ba      	sub	sp, #232	@ 0xe8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10f      	bne.n	8006bfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <HAL_UART_IRQHandler+0x66>
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb63 	bl	80072be <UART_Receive_IT>
      return;
 8006bf8:	e25b      	b.n	80070b2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 8006f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 80de 	beq.w	8007164 <HAL_UART_IRQHandler+0x22c>
 8006fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80d1 	beq.w	8007164 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <HAL_UART_IRQHandler+0xae>
 8006fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fde:	f043 0201 	orr.w	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80de 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x22c>
 8006c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80d1 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <HAL_UART_IRQHandler+0xae>
 8006c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3a:	f043 0201 	orr.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_UART_IRQHandler+0xd2>
 8006ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007002:	f043 0202 	orr.w	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <HAL_UART_IRQHandler+0xd2>
 8006c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5e:	f043 0202 	orr.w	r2, r3, #2
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HAL_UART_IRQHandler+0xf6>
 8007016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <HAL_UART_IRQHandler+0xf6>
 8006c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d011      	beq.n	800705e <HAL_UART_IRQHandler+0x126>
 800703a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007056:	f043 0208 	orr.w	r2, r3, #8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d011      	beq.n	8006cba <HAL_UART_IRQHandler+0x126>
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb2:	f043 0208 	orr.w	r2, r3, #8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 81f2 	beq.w	800744c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <HAL_UART_IRQHandler+0x14e>
 8007074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 faee 	bl	8007662 <UART_Receive_IT>
=======
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 81f2 	beq.w	80070a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x14e>
 8006cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 faee 	bl	80072be <UART_Receive_IT>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	bf14      	ite	ne
 8007094:	2301      	movne	r3, #1
 8007096:	2300      	moveq	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <HAL_UART_IRQHandler+0x17a>
 80070aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d04f      	beq.n	8007152 <HAL_UART_IRQHandler+0x21a>
=======
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <HAL_UART_IRQHandler+0x17a>
 8006d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d04f      	beq.n	8006dae <HAL_UART_IRQHandler+0x21a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9f8 	bl	80074a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d041      	beq.n	800714a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
=======
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9f8 	bl	8007104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d041      	beq.n	8006da6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3314      	adds	r3, #20
 8006d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80070d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3314      	adds	r3, #20
 80070ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
=======
 8006d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3314      	adds	r3, #20
 8006d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80070fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800710a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1d9      	bne.n	80070c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d013      	beq.n	8007142 <HAL_UART_IRQHandler+0x20a>
=======
 8006d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d9      	bne.n	8006d22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d013      	beq.n	8006d9e <HAL_UART_IRQHandler+0x20a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711e:	4a7e      	ldr	r2, [pc, #504]	@ (8007318 <HAL_UART_IRQHandler+0x3e0>)
 8007120:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd fa6e 	bl	8004608 <HAL_DMA_Abort_IT>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d016      	beq.n	8007160 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	e00e      	b.n	8007160 <HAL_UART_IRQHandler+0x228>
=======
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f74 <HAL_UART_IRQHandler+0x3e0>)
 8006d7c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fd f960 	bl	8004048 <HAL_DMA_Abort_IT>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d016      	beq.n	8006dbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9c:	e00e      	b.n	8006dbc <HAL_UART_IRQHandler+0x228>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f99c 	bl	8007480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007148:	e00a      	b.n	8007160 <HAL_UART_IRQHandler+0x228>
=======
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f99c 	bl	80070dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	e00a      	b.n	8006dbc <HAL_UART_IRQHandler+0x228>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f998 	bl	8007480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007150:	e006      	b.n	8007160 <HAL_UART_IRQHandler+0x228>
=======
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f998 	bl	80070dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	e006      	b.n	8006dbc <HAL_UART_IRQHandler+0x228>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f994 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800715e:	e175      	b.n	800744c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007160:	bf00      	nop
    return;
 8007162:	e173      	b.n	800744c <HAL_UART_IRQHandler+0x514>
=======
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f994 	bl	80070dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006dba:	e175      	b.n	80070a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	bf00      	nop
    return;
 8006dbe:	e173      	b.n	80070a8 <HAL_UART_IRQHandler+0x514>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007168:	2b01      	cmp	r3, #1
 800716a:	f040 814f 	bne.w	800740c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8148 	beq.w	800740c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8141 	beq.w	800740c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800718a:	2300      	movs	r3, #0
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80b6 	beq.w	800731c <HAL_UART_IRQHandler+0x3e4>
=======
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	f040 814f 	bne.w	8007068 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8148 	beq.w	8007068 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8141 	beq.w	8007068 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 80b6 	beq.w	8006f78 <HAL_UART_IRQHandler+0x3e4>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8145 	beq.w	8007450 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ce:	429a      	cmp	r2, r3
 80071d0:	f080 813e 	bcs.w	8007450 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	f000 8088 	beq.w	80072f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007206:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007214:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007220:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800722c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1d9      	bne.n	80071e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007258:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800725c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007260:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800726a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e1      	bne.n	8007234 <HAL_UART_IRQHandler+0x2fc>
=======
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8145 	beq.w	80070ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	f080 813e 	bcs.w	80070ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	f000 8088 	beq.w	8006f54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e70:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1d9      	bne.n	8006e44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ea0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006eb4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ebc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e1      	bne.n	8006e90 <HAL_UART_IRQHandler+0x2fc>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3314      	adds	r3, #20
 8007276:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007294:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007296:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800729a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e3      	bne.n	8007270 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c8:	f023 0310 	bic.w	r3, r3, #16
 80072cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	330c      	adds	r3, #12
 80072d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e3      	bne.n	80072b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd f94c 	bl	8004590 <HAL_DMA_Abort>
=======
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3314      	adds	r3, #20
 8006ed2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ef0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ef6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e3      	bne.n	8006ecc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	330c      	adds	r3, #12
 8006f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f24:	f023 0310 	bic.w	r3, r3, #16
 8006f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e3      	bne.n	8006f12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fd f83e 	bl	8003fd0 <HAL_DMA_Abort>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007306:	b29b      	uxth	r3, r3
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	b29b      	uxth	r3, r3
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8bf 	bl	8007492 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007314:	e09c      	b.n	8007450 <HAL_UART_IRQHandler+0x518>
 8007316:	bf00      	nop
 8007318:	0800756d 	.word	0x0800756d
=======
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f8bf 	bl	80070ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f70:	e09c      	b.n	80070ac <HAL_UART_IRQHandler+0x518>
 8006f72:	bf00      	nop
 8006f74:	080071c9 	.word	0x080071c9
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007324:	b29b      	uxth	r3, r3
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 808e 	beq.w	8007454 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8089 	beq.w	8007454 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007358:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007366:	647a      	str	r2, [r7, #68]	@ 0x44
 8007368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800736c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e3      	bne.n	8007342 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3314      	adds	r3, #20
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	623b      	str	r3, [r7, #32]
   return(result);
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800739e:	633a      	str	r2, [r7, #48]	@ 0x30
 80073a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e3      	bne.n	800737a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0310 	bic.w	r3, r3, #16
 80073d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80073e4:	61fa      	str	r2, [r7, #28]
 80073e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	69b9      	ldr	r1, [r7, #24]
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	617b      	str	r3, [r7, #20]
   return(result);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e3      	bne.n	80073c0 <HAL_UART_IRQHandler+0x488>
=======
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 808e 	beq.w	80070b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8089 	beq.w	80070b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006fc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e3      	bne.n	8006f9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3314      	adds	r3, #20
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ffa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e3      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60fb      	str	r3, [r7, #12]
   return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	69b9      	ldr	r1, [r7, #24]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	617b      	str	r3, [r7, #20]
   return(result);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e3      	bne.n	800701c <HAL_UART_IRQHandler+0x488>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 80073fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f844 	bl	8007492 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800740a:	e023      	b.n	8007454 <HAL_UART_IRQHandler+0x51c>
=======
 800705a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f844 	bl	80070ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007066:	e023      	b.n	80070b0 <HAL_UART_IRQHandler+0x51c>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007414:	2b00      	cmp	r3, #0
 8007416:	d009      	beq.n	800742c <HAL_UART_IRQHandler+0x4f4>
 8007418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800741c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8b5 	bl	8007594 <UART_Transmit_IT>
    return;
 800742a:	e014      	b.n	8007456 <HAL_UART_IRQHandler+0x51e>
=======
 8007068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d009      	beq.n	8007088 <HAL_UART_IRQHandler+0x4f4>
 8007074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8b5 	bl	80071f0 <UART_Transmit_IT>
    return;
 8007086:	e014      	b.n	80070b2 <HAL_UART_IRQHandler+0x51e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 800742c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <HAL_UART_IRQHandler+0x51e>
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8f4 	bl	8007632 <UART_EndTransmit_IT>
    return;
 800744a:	e004      	b.n	8007456 <HAL_UART_IRQHandler+0x51e>
    return;
 800744c:	bf00      	nop
 800744e:	e002      	b.n	8007456 <HAL_UART_IRQHandler+0x51e>
      return;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <HAL_UART_IRQHandler+0x51e>
      return;
 8007454:	bf00      	nop
  }
}
 8007456:	37e8      	adds	r7, #232	@ 0xe8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UART_TxCpltCallback>:
=======
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <HAL_UART_IRQHandler+0x51e>
 8007094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f8f4 	bl	800728e <UART_EndTransmit_IT>
    return;
 80070a6:	e004      	b.n	80070b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80070b0:	bf00      	nop
  }
}
 80070b2:	37e8      	adds	r7, #232	@ 0xe8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_UART_TxCpltCallback>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
=======
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <HAL_UART_RxCpltCallback>:
=======
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <HAL_UART_RxCpltCallback>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
=======
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <HAL_UART_ErrorCallback>:
=======
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <HAL_UART_ErrorCallback>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
=======
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <HAL_UARTEx_RxEventCallback>:
=======
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <HAL_UARTEx_RxEventCallback>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	807b      	strh	r3, [r7, #2]
=======
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	807b      	strh	r3, [r7, #2]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <UART_EndRxTransfer>:
=======
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr

08007104 <UART_EndRxTransfer>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80074a8:	b480      	push	{r7}
 80074aa:	b095      	sub	sp, #84	@ 0x54
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e5      	bne.n	80074b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3314      	adds	r3, #20
 80074ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3314      	adds	r3, #20
 8007502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007504:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800750a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	2b01      	cmp	r3, #1
 800751e:	d119      	bne.n	8007554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f023 0310 	bic.w	r3, r3, #16
 8007536:	647b      	str	r3, [r7, #68]	@ 0x44
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007540:	61ba      	str	r2, [r7, #24]
 8007542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6979      	ldr	r1, [r7, #20]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	613b      	str	r3, [r7, #16]
   return(result);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e5      	bne.n	8007520 <UART_EndRxTransfer+0x78>
=======
 8007104:	b480      	push	{r7}
 8007106:	b095      	sub	sp, #84	@ 0x54
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330c      	adds	r3, #12
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800712c:	643a      	str	r2, [r7, #64]	@ 0x40
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e5      	bne.n	800710c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3314      	adds	r3, #20
 8007146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007160:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e5      	bne.n	8007140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007178:	2b01      	cmp	r3, #1
 800717a:	d119      	bne.n	80071b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60bb      	str	r3, [r7, #8]
   return(result);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f023 0310 	bic.w	r3, r3, #16
 8007192:	647b      	str	r3, [r7, #68]	@ 0x44
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800719c:	61ba      	str	r2, [r7, #24]
 800719e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6979      	ldr	r1, [r7, #20]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	613b      	str	r3, [r7, #16]
   return(result);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndRxTransfer+0x78>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007562:	bf00      	nop
 8007564:	3754      	adds	r7, #84	@ 0x54
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <UART_DMAAbortOnError>:
=======
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071be:	bf00      	nop
 80071c0:	3754      	adds	r7, #84	@ 0x54
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr

080071c8 <UART_DMAAbortOnError>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff ff7a 	bl	8007480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_Transmit_IT>:
=======
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff ff7a 	bl	80070dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <UART_Transmit_IT>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
=======
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b21      	cmp	r3, #33	@ 0x21
 80075a6:	d13e      	bne.n	8007626 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b0:	d114      	bne.n	80075dc <UART_Transmit_IT+0x48>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d110      	bne.n	80075dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]
 80075da:	e008      	b.n	80075ee <UART_Transmit_IT+0x5a>
=======
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b21      	cmp	r3, #33	@ 0x21
 8007202:	d13e      	bne.n	8007282 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800720c:	d114      	bne.n	8007238 <UART_Transmit_IT+0x48>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d110      	bne.n	8007238 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800722a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	1c9a      	adds	r2, r3, #2
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]
 8007236:	e008      	b.n	800724a <UART_Transmit_IT+0x5a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	1c59      	adds	r1, r3, #1
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6211      	str	r1, [r2, #32]
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	4619      	mov	r1, r3
 80075fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10f      	bne.n	8007622 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <UART_Transmit_IT+0x94>
=======
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	1c59      	adds	r1, r3, #1
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6211      	str	r1, [r2, #32]
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	4619      	mov	r1, r3
 8007258:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10f      	bne.n	800727e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800726c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800727c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e000      	b.n	8007284 <UART_Transmit_IT+0x94>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <UART_EndTransmit_IT>:
=======
 8007282:	2302      	movs	r3, #2
  }
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <UART_EndTransmit_IT>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007648:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ff02 	bl	800745c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_Receive_IT>:
=======
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff ff02 	bl	80070b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <UART_Receive_IT>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007662:	b580      	push	{r7, lr}
 8007664:	b08c      	sub	sp, #48	@ 0x30
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
=======
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08c      	sub	sp, #48	@ 0x30
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b22      	cmp	r3, #34	@ 0x22
 8007674:	f040 80ae 	bne.w	80077d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007680:	d117      	bne.n	80076b2 <UART_Receive_IT+0x50>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d113      	bne.n	80076b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	1c9a      	adds	r2, r3, #2
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80076b0:	e026      	b.n	8007700 <UART_Receive_IT+0x9e>
=======
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b22      	cmp	r3, #34	@ 0x22
 80072d0:	f040 80ae 	bne.w	8007430 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d117      	bne.n	800730e <UART_Receive_IT+0x50>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d113      	bne.n	800730e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	1c9a      	adds	r2, r3, #2
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	@ 0x28
 800730c:	e026      	b.n	800735c <UART_Receive_IT+0x9e>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076b8:	2300      	movs	r3, #0
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076c4:	d007      	beq.n	80076d6 <UART_Receive_IT+0x74>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <UART_Receive_IT+0x82>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	e008      	b.n	80076f6 <UART_Receive_IT+0x94>
=======
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007320:	d007      	beq.n	8007332 <UART_Receive_IT+0x74>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <UART_Receive_IT+0x82>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e008      	b.n	8007352 <UART_Receive_IT+0x94>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29b      	uxth	r3, r3
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4619      	mov	r1, r3
 800770e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007710:	2b00      	cmp	r3, #0
 8007712:	d15d      	bne.n	80077d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0220 	bic.w	r2, r2, #32
 8007722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	b2da      	uxtb	r2, r3
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29b      	uxth	r3, r3
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4619      	mov	r1, r3
 800736a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800736c:	2b00      	cmp	r3, #0
 800736e:	d15d      	bne.n	800742c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0220 	bic.w	r2, r2, #32
 800737e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800738e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007756:	2b01      	cmp	r3, #1
 8007758:	d135      	bne.n	80077c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	613b      	str	r3, [r7, #16]
   return(result);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 0310 	bic.w	r3, r3, #16
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007780:	623a      	str	r2, [r7, #32]
 8007782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	61bb      	str	r3, [r7, #24]
   return(result);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d10a      	bne.n	80077b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
=======
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d135      	bne.n	8007422 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	613b      	str	r3, [r7, #16]
   return(result);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 0310 	bic.w	r3, r3, #16
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073dc:	623a      	str	r2, [r7, #32]
 80073de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b10      	cmp	r3, #16
 80073fc:	d10a      	bne.n	8007414 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fe67 	bl	8007492 <HAL_UARTEx_RxEventCallback>
 80077c4:	e002      	b.n	80077cc <UART_Receive_IT+0x16a>
=======
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fe67 	bl	80070ee <HAL_UARTEx_RxEventCallback>
 8007420:	e002      	b.n	8007428 <UART_Receive_IT+0x16a>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fe51 	bl	800746e <HAL_UART_RxCpltCallback>
=======
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fe51 	bl	80070ca <HAL_UART_RxCpltCallback>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 80077cc:	2300      	movs	r3, #0
 80077ce:	e002      	b.n	80077d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <UART_Receive_IT+0x174>
=======
 8007428:	2300      	movs	r3, #0
 800742a:	e002      	b.n	8007432 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <UART_Receive_IT+0x174>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80077d4:	2302      	movs	r3, #2
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3730      	adds	r7, #48	@ 0x30
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UART_SetConfig>:
=======
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3730      	adds	r7, #48	@ 0x30
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <UART_SetConfig>:
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
=======
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	611a      	str	r2, [r3, #16]
=======
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	611a      	str	r2, [r3, #16]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800781a:	f023 030c 	bic.w	r3, r3, #12
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	430b      	orrs	r3, r1
 8007826:	60d3      	str	r3, [r2, #12]
=======
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007476:	f023 030c 	bic.w	r3, r3, #12
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	430b      	orrs	r3, r1
 8007482:	60d3      	str	r3, [r2, #12]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2c      	ldr	r2, [pc, #176]	@ (80078f4 <UART_SetConfig+0x114>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d103      	bne.n	8007850 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007848:	f7fe f8b2 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	e002      	b.n	8007856 <UART_SetConfig+0x76>
=======
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2c      	ldr	r2, [pc, #176]	@ (8007550 <UART_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d103      	bne.n	80074ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7fd ffb8 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	e002      	b.n	80074b2 <UART_SetConfig+0x76>
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8007850:	f7fe f89a 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 8007854:	60f8      	str	r0, [r7, #12]
=======
 80074ac:	f7fd ffa0 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 80074b0:	60f8      	str	r0, [r7, #12]
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009a      	lsls	r2, r3, #2
 8007860:	441a      	add	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	fbb2 f3f3 	udiv	r3, r2, r3
 800786c:	4a22      	ldr	r2, [pc, #136]	@ (80078f8 <UART_SetConfig+0x118>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	0119      	lsls	r1, r3, #4
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009a      	lsls	r2, r3, #2
 8007880:	441a      	add	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	fbb2 f2f3 	udiv	r2, r2, r3
 800788c:	4b1a      	ldr	r3, [pc, #104]	@ (80078f8 <UART_SetConfig+0x118>)
 800788e:	fba3 0302 	umull	r0, r3, r3, r2
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	2064      	movs	r0, #100	@ 0x64
 8007896:	fb00 f303 	mul.w	r3, r0, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	3332      	adds	r3, #50	@ 0x32
 80078a0:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <UART_SetConfig+0x118>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078ac:	4419      	add	r1, r3
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009a      	lsls	r2, r3, #2
 80078b8:	441a      	add	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078c4:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <UART_SetConfig+0x118>)
 80078c6:	fba3 0302 	umull	r0, r3, r3, r2
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	2064      	movs	r0, #100	@ 0x64
 80078ce:	fb00 f303 	mul.w	r3, r0, r3
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	3332      	adds	r3, #50	@ 0x32
 80078d8:	4a07      	ldr	r2, [pc, #28]	@ (80078f8 <UART_SetConfig+0x118>)
 80078da:	fba2 2303 	umull	r2, r3, r2, r3
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	440a      	add	r2, r1
 80078ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	40013800 	.word	0x40013800
 80078f8:	51eb851f 	.word	0x51eb851f

080078fc <memset>:
 80078fc:	4603      	mov	r3, r0
 80078fe:	4402      	add	r2, r0
 8007900:	4293      	cmp	r3, r2
 8007902:	d100      	bne.n	8007906 <memset+0xa>
 8007904:	4770      	bx	lr
 8007906:	f803 1b01 	strb.w	r1, [r3], #1
 800790a:	e7f9      	b.n	8007900 <memset+0x4>

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	@ (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000078 	.word	0x20000078

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	2600      	movs	r6, #0
 800791c:	4d0c      	ldr	r5, [pc, #48]	@ (8007950 <__libc_init_array+0x38>)
 800791e:	4c0d      	ldr	r4, [pc, #52]	@ (8007954 <__libc_init_array+0x3c>)
 8007920:	1b64      	subs	r4, r4, r5
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	f000 fa14 	bl	8007d54 <_init>
 800792c:	2600      	movs	r6, #0
 800792e:	4d0a      	ldr	r5, [pc, #40]	@ (8007958 <__libc_init_array+0x40>)
 8007930:	4c0a      	ldr	r4, [pc, #40]	@ (800795c <__libc_init_array+0x44>)
 8007932:	1b64      	subs	r4, r4, r5
 8007934:	10a4      	asrs	r4, r4, #2
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	080081dc 	.word	0x080081dc
 8007954:	080081dc 	.word	0x080081dc
 8007958:	080081dc 	.word	0x080081dc
 800795c:	080081e0 	.word	0x080081e0

08007960 <memcpy>:
 8007960:	440a      	add	r2, r1
 8007962:	4291      	cmp	r1, r2
 8007964:	f100 33ff 	add.w	r3, r0, #4294967295
 8007968:	d100      	bne.n	800796c <memcpy+0xc>
 800796a:	4770      	bx	lr
 800796c:	b510      	push	{r4, lr}
 800796e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007972:	4291      	cmp	r1, r2
 8007974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007978:	d1f9      	bne.n	800796e <memcpy+0xe>
 800797a:	bd10      	pop	{r4, pc}

0800797c <log>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	f000 f835 	bl	80079f0 <__ieee754_log>
 8007986:	4622      	mov	r2, r4
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	462b      	mov	r3, r5
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f9 f89f 	bl	8000ad4 <__aeabi_dcmpun>
 8007996:	b998      	cbnz	r0, 80079c0 <log+0x44>
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	4620      	mov	r0, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	f7f9 f88e 	bl	8000ac0 <__aeabi_dcmpgt>
 80079a4:	b960      	cbnz	r0, 80079c0 <log+0x44>
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	4620      	mov	r0, r4
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7f9 f85f 	bl	8000a70 <__aeabi_dcmpeq>
 80079b2:	b140      	cbz	r0, 80079c6 <log+0x4a>
 80079b4:	f7ff ffaa 	bl	800790c <__errno>
 80079b8:	2322      	movs	r3, #34	@ 0x22
 80079ba:	2600      	movs	r6, #0
 80079bc:	4f06      	ldr	r7, [pc, #24]	@ (80079d8 <log+0x5c>)
 80079be:	6003      	str	r3, [r0, #0]
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c6:	f7ff ffa1 	bl	800790c <__errno>
 80079ca:	2321      	movs	r3, #33	@ 0x21
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	4803      	ldr	r0, [pc, #12]	@ (80079dc <log+0x60>)
 80079d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079d4:	f000 b804 	b.w	80079e0 <nan>
 80079d8:	fff00000 	.word	0xfff00000
 80079dc:	080081d0 	.word	0x080081d0

080079e0 <nan>:
 80079e0:	2000      	movs	r0, #0
 80079e2:	4901      	ldr	r1, [pc, #4]	@ (80079e8 <nan+0x8>)
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	7ff80000 	.word	0x7ff80000
 80079ec:	00000000 	.word	0x00000000

080079f0 <__ieee754_log>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	460d      	mov	r5, r1
 80079fe:	b087      	sub	sp, #28
 8007a00:	da24      	bge.n	8007a4c <__ieee754_log+0x5c>
 8007a02:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007a06:	4304      	orrs	r4, r0
 8007a08:	d108      	bne.n	8007a1c <__ieee754_log+0x2c>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2000      	movs	r0, #0
 8007a10:	49cb      	ldr	r1, [pc, #812]	@ (8007d40 <__ieee754_log+0x350>)
 8007a12:	f7f8 feef 	bl	80007f4 <__aeabi_ddiv>
 8007a16:	b007      	add	sp, #28
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	da04      	bge.n	8007a2a <__ieee754_log+0x3a>
 8007a20:	f7f8 fc06 	bl	8000230 <__aeabi_dsub>
 8007a24:	2200      	movs	r2, #0
 8007a26:	2300      	movs	r3, #0
 8007a28:	e7f3      	b.n	8007a12 <__ieee754_log+0x22>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4bc5      	ldr	r3, [pc, #788]	@ (8007d44 <__ieee754_log+0x354>)
 8007a2e:	f7f8 fdb7 	bl	80005a0 <__aeabi_dmul>
 8007a32:	460b      	mov	r3, r1
 8007a34:	460d      	mov	r5, r1
 8007a36:	4602      	mov	r2, r0
 8007a38:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8007a3c:	48c2      	ldr	r0, [pc, #776]	@ (8007d48 <__ieee754_log+0x358>)
 8007a3e:	4285      	cmp	r5, r0
 8007a40:	dd06      	ble.n	8007a50 <__ieee754_log+0x60>
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	f7f8 fbf5 	bl	8000234 <__adddf3>
 8007a4a:	e7e4      	b.n	8007a16 <__ieee754_log+0x26>
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	e7f5      	b.n	8007a3c <__ieee754_log+0x4c>
 8007a50:	152c      	asrs	r4, r5, #20
 8007a52:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007a56:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007a5a:	440c      	add	r4, r1
 8007a5c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8007a60:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8007a64:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8007a68:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8007a6c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8007a70:	ea41 0305 	orr.w	r3, r1, r5
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4bb4      	ldr	r3, [pc, #720]	@ (8007d4c <__ieee754_log+0x35c>)
 8007a7c:	f7f8 fbd8 	bl	8000230 <__aeabi_dsub>
 8007a80:	1cab      	adds	r3, r5, #2
 8007a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	4682      	mov	sl, r0
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8007a94:	dc53      	bgt.n	8007b3e <__ieee754_log+0x14e>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f7f8 ffea 	bl	8000a70 <__aeabi_dcmpeq>
 8007a9c:	b1d0      	cbz	r0, 8007ad4 <__ieee754_log+0xe4>
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	f000 8120 	beq.w	8007ce4 <__ieee754_log+0x2f4>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f7f8 fd11 	bl	80004cc <__aeabi_i2d>
 8007aaa:	a391      	add	r3, pc, #580	@ (adr r3, 8007cf0 <__ieee754_log+0x300>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	460f      	mov	r7, r1
 8007ab4:	f7f8 fd74 	bl	80005a0 <__aeabi_dmul>
 8007ab8:	a38f      	add	r3, pc, #572	@ (adr r3, 8007cf8 <__ieee754_log+0x308>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	f7f8 fd6b 	bl	80005a0 <__aeabi_dmul>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	e7b8      	b.n	8007a46 <__ieee754_log+0x56>
 8007ad4:	a38a      	add	r3, pc, #552	@ (adr r3, 8007d00 <__ieee754_log+0x310>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	4650      	mov	r0, sl
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7f8 fd5f 	bl	80005a0 <__aeabi_dmul>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	4999      	ldr	r1, [pc, #612]	@ (8007d50 <__ieee754_log+0x360>)
 8007aea:	f7f8 fba1 	bl	8000230 <__aeabi_dsub>
 8007aee:	4652      	mov	r2, sl
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	465b      	mov	r3, fp
 8007af6:	4650      	mov	r0, sl
 8007af8:	4659      	mov	r1, fp
 8007afa:	f7f8 fd51 	bl	80005a0 <__aeabi_dmul>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4630      	mov	r0, r6
 8007b04:	4639      	mov	r1, r7
 8007b06:	f7f8 fd4b 	bl	80005a0 <__aeabi_dmul>
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	b914      	cbnz	r4, 8007b16 <__ieee754_log+0x126>
 8007b10:	4632      	mov	r2, r6
 8007b12:	463b      	mov	r3, r7
 8007b14:	e0a0      	b.n	8007c58 <__ieee754_log+0x268>
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7f8 fcd8 	bl	80004cc <__aeabi_i2d>
 8007b1c:	a374      	add	r3, pc, #464	@ (adr r3, 8007cf0 <__ieee754_log+0x300>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	4680      	mov	r8, r0
 8007b24:	4689      	mov	r9, r1
 8007b26:	f7f8 fd3b 	bl	80005a0 <__aeabi_dmul>
 8007b2a:	a373      	add	r3, pc, #460	@ (adr r3, 8007cf8 <__ieee754_log+0x308>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	4604      	mov	r4, r0
 8007b32:	460d      	mov	r5, r1
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f7f8 fd32 	bl	80005a0 <__aeabi_dmul>
 8007b3c:	e0a5      	b.n	8007c8a <__ieee754_log+0x29a>
 8007b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b42:	f7f8 fb77 	bl	8000234 <__adddf3>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	f7f8 fe51 	bl	80007f4 <__aeabi_ddiv>
 8007b52:	e9cd 0100 	strd	r0, r1, [sp]
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7f8 fcb8 	bl	80004cc <__aeabi_i2d>
 8007b5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b64:	4610      	mov	r0, r2
 8007b66:	4619      	mov	r1, r3
 8007b68:	f7f8 fd1a 	bl	80005a0 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b74:	f7f8 fd14 	bl	80005a0 <__aeabi_dmul>
 8007b78:	a363      	add	r3, pc, #396	@ (adr r3, 8007d08 <__ieee754_log+0x318>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	4680      	mov	r8, r0
 8007b80:	4689      	mov	r9, r1
 8007b82:	f7f8 fd0d 	bl	80005a0 <__aeabi_dmul>
 8007b86:	a362      	add	r3, pc, #392	@ (adr r3, 8007d10 <__ieee754_log+0x320>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 fb52 	bl	8000234 <__adddf3>
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	f7f8 fd04 	bl	80005a0 <__aeabi_dmul>
 8007b98:	a35f      	add	r3, pc, #380	@ (adr r3, 8007d18 <__ieee754_log+0x328>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fb49 	bl	8000234 <__adddf3>
 8007ba2:	4642      	mov	r2, r8
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	f7f8 fcfb 	bl	80005a0 <__aeabi_dmul>
 8007baa:	a35d      	add	r3, pc, #372	@ (adr r3, 8007d20 <__ieee754_log+0x330>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fb40 	bl	8000234 <__adddf3>
 8007bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb8:	f7f8 fcf2 	bl	80005a0 <__aeabi_dmul>
 8007bbc:	a35a      	add	r3, pc, #360	@ (adr r3, 8007d28 <__ieee754_log+0x338>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	4649      	mov	r1, r9
 8007bca:	f7f8 fce9 	bl	80005a0 <__aeabi_dmul>
 8007bce:	a358      	add	r3, pc, #352	@ (adr r3, 8007d30 <__ieee754_log+0x340>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fb2e 	bl	8000234 <__adddf3>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	f7f8 fce0 	bl	80005a0 <__aeabi_dmul>
 8007be0:	a355      	add	r3, pc, #340	@ (adr r3, 8007d38 <__ieee754_log+0x348>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f7f8 fb25 	bl	8000234 <__adddf3>
 8007bea:	4642      	mov	r2, r8
 8007bec:	464b      	mov	r3, r9
 8007bee:	f7f8 fcd7 	bl	80005a0 <__aeabi_dmul>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bfa:	f7f8 fb1b 	bl	8000234 <__adddf3>
 8007bfe:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8007c02:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8007c06:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007c0a:	3551      	adds	r5, #81	@ 0x51
 8007c0c:	4335      	orrs	r5, r6
 8007c0e:	2d00      	cmp	r5, #0
 8007c10:	4680      	mov	r8, r0
 8007c12:	4689      	mov	r9, r1
 8007c14:	dd48      	ble.n	8007ca8 <__ieee754_log+0x2b8>
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b4d      	ldr	r3, [pc, #308]	@ (8007d50 <__ieee754_log+0x360>)
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fcbf 	bl	80005a0 <__aeabi_dmul>
 8007c22:	4652      	mov	r2, sl
 8007c24:	465b      	mov	r3, fp
 8007c26:	f7f8 fcbb 	bl	80005a0 <__aeabi_dmul>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fafd 	bl	8000234 <__adddf3>
 8007c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c3e:	f7f8 fcaf 	bl	80005a0 <__aeabi_dmul>
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	b964      	cbnz	r4, 8007c62 <__ieee754_log+0x272>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 faee 	bl	8000230 <__aeabi_dsub>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4650      	mov	r0, sl
 8007c5a:	4659      	mov	r1, fp
 8007c5c:	f7f8 fae8 	bl	8000230 <__aeabi_dsub>
 8007c60:	e6d9      	b.n	8007a16 <__ieee754_log+0x26>
 8007c62:	a323      	add	r3, pc, #140	@ (adr r3, 8007cf0 <__ieee754_log+0x300>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6c:	f7f8 fc98 	bl	80005a0 <__aeabi_dmul>
 8007c70:	a321      	add	r3, pc, #132	@ (adr r3, 8007cf8 <__ieee754_log+0x308>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	4604      	mov	r4, r0
 8007c78:	460d      	mov	r5, r1
 8007c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c7e:	f7f8 fc8f 	bl	80005a0 <__aeabi_dmul>
 8007c82:	4642      	mov	r2, r8
 8007c84:	464b      	mov	r3, r9
 8007c86:	f7f8 fad5 	bl	8000234 <__adddf3>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4630      	mov	r0, r6
 8007c90:	4639      	mov	r1, r7
 8007c92:	f7f8 facd 	bl	8000230 <__aeabi_dsub>
 8007c96:	4652      	mov	r2, sl
 8007c98:	465b      	mov	r3, fp
 8007c9a:	f7f8 fac9 	bl	8000230 <__aeabi_dsub>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	e7d9      	b.n	8007c5c <__ieee754_log+0x26c>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	f7f8 fabe 	bl	8000230 <__aeabi_dsub>
 8007cb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb8:	f7f8 fc72 	bl	80005a0 <__aeabi_dmul>
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	f43f af25 	beq.w	8007b10 <__ieee754_log+0x120>
 8007cc6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007cf0 <__ieee754_log+0x300>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd0:	f7f8 fc66 	bl	80005a0 <__aeabi_dmul>
 8007cd4:	a308      	add	r3, pc, #32	@ (adr r3, 8007cf8 <__ieee754_log+0x308>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	4604      	mov	r4, r0
 8007cdc:	460d      	mov	r5, r1
 8007cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce2:	e729      	b.n	8007b38 <__ieee754_log+0x148>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	e695      	b.n	8007a16 <__ieee754_log+0x26>
 8007cea:	bf00      	nop
 8007cec:	f3af 8000 	nop.w
 8007cf0:	fee00000 	.word	0xfee00000
 8007cf4:	3fe62e42 	.word	0x3fe62e42
 8007cf8:	35793c76 	.word	0x35793c76
 8007cfc:	3dea39ef 	.word	0x3dea39ef
 8007d00:	55555555 	.word	0x55555555
 8007d04:	3fd55555 	.word	0x3fd55555
 8007d08:	df3e5244 	.word	0xdf3e5244
 8007d0c:	3fc2f112 	.word	0x3fc2f112
 8007d10:	96cb03de 	.word	0x96cb03de
 8007d14:	3fc74664 	.word	0x3fc74664
 8007d18:	94229359 	.word	0x94229359
 8007d1c:	3fd24924 	.word	0x3fd24924
 8007d20:	55555593 	.word	0x55555593
 8007d24:	3fe55555 	.word	0x3fe55555
 8007d28:	d078c69f 	.word	0xd078c69f
 8007d2c:	3fc39a09 	.word	0x3fc39a09
 8007d30:	1d8e78af 	.word	0x1d8e78af
 8007d34:	3fcc71c5 	.word	0x3fcc71c5
 8007d38:	9997fa04 	.word	0x9997fa04
 8007d3c:	3fd99999 	.word	0x3fd99999
 8007d40:	c3500000 	.word	0xc3500000
 8007d44:	43500000 	.word	0x43500000
 8007d48:	7fefffff 	.word	0x7fefffff
 8007d4c:	3ff00000 	.word	0x3ff00000
 8007d50:	3fe00000 	.word	0x3fe00000

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
=======
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	4a22      	ldr	r2, [pc, #136]	@ (8007554 <UART_SetConfig+0x118>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	0119      	lsls	r1, r3, #4
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009a      	lsls	r2, r3, #2
 80074dc:	441a      	add	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80074e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007554 <UART_SetConfig+0x118>)
 80074ea:	fba3 0302 	umull	r0, r3, r3, r2
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	2064      	movs	r0, #100	@ 0x64
 80074f2:	fb00 f303 	mul.w	r3, r0, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	3332      	adds	r3, #50	@ 0x32
 80074fc:	4a15      	ldr	r2, [pc, #84]	@ (8007554 <UART_SetConfig+0x118>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007508:	4419      	add	r1, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009a      	lsls	r2, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007520:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <UART_SetConfig+0x118>)
 8007522:	fba3 0302 	umull	r0, r3, r3, r2
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	2064      	movs	r0, #100	@ 0x64
 800752a:	fb00 f303 	mul.w	r3, r0, r3
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	3332      	adds	r3, #50	@ 0x32
 8007534:	4a07      	ldr	r2, [pc, #28]	@ (8007554 <UART_SetConfig+0x118>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	440a      	add	r2, r1
 8007546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40013800 	.word	0x40013800
 8007554:	51eb851f 	.word	0x51eb851f

08007558 <memset>:
 8007558:	4603      	mov	r3, r0
 800755a:	4402      	add	r2, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <__errno>:
 8007568:	4b01      	ldr	r3, [pc, #4]	@ (8007570 <__errno+0x8>)
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000078 	.word	0x20000078

08007574 <__libc_init_array>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	2600      	movs	r6, #0
 8007578:	4d0c      	ldr	r5, [pc, #48]	@ (80075ac <__libc_init_array+0x38>)
 800757a:	4c0d      	ldr	r4, [pc, #52]	@ (80075b0 <__libc_init_array+0x3c>)
 800757c:	1b64      	subs	r4, r4, r5
 800757e:	10a4      	asrs	r4, r4, #2
 8007580:	42a6      	cmp	r6, r4
 8007582:	d109      	bne.n	8007598 <__libc_init_array+0x24>
 8007584:	f000 fa12 	bl	80079ac <_init>
 8007588:	2600      	movs	r6, #0
 800758a:	4d0a      	ldr	r5, [pc, #40]	@ (80075b4 <__libc_init_array+0x40>)
 800758c:	4c0a      	ldr	r4, [pc, #40]	@ (80075b8 <__libc_init_array+0x44>)
 800758e:	1b64      	subs	r4, r4, r5
 8007590:	10a4      	asrs	r4, r4, #2
 8007592:	42a6      	cmp	r6, r4
 8007594:	d105      	bne.n	80075a2 <__libc_init_array+0x2e>
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	f855 3b04 	ldr.w	r3, [r5], #4
 800759c:	4798      	blx	r3
 800759e:	3601      	adds	r6, #1
 80075a0:	e7ee      	b.n	8007580 <__libc_init_array+0xc>
 80075a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a6:	4798      	blx	r3
 80075a8:	3601      	adds	r6, #1
 80075aa:	e7f2      	b.n	8007592 <__libc_init_array+0x1e>
 80075ac:	08007e14 	.word	0x08007e14
 80075b0:	08007e14 	.word	0x08007e14
 80075b4:	08007e14 	.word	0x08007e14
 80075b8:	08007e18 	.word	0x08007e18

080075bc <memcpy>:
 80075bc:	440a      	add	r2, r1
 80075be:	4291      	cmp	r1, r2
 80075c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075c4:	d100      	bne.n	80075c8 <memcpy+0xc>
 80075c6:	4770      	bx	lr
 80075c8:	b510      	push	{r4, lr}
 80075ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ce:	4291      	cmp	r1, r2
 80075d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075d4:	d1f9      	bne.n	80075ca <memcpy+0xe>
 80075d6:	bd10      	pop	{r4, pc}

080075d8 <log>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	4604      	mov	r4, r0
 80075dc:	460d      	mov	r5, r1
 80075de:	f000 f833 	bl	8007648 <__ieee754_log>
 80075e2:	4622      	mov	r2, r4
 80075e4:	4606      	mov	r6, r0
 80075e6:	460f      	mov	r7, r1
 80075e8:	462b      	mov	r3, r5
 80075ea:	4620      	mov	r0, r4
 80075ec:	4629      	mov	r1, r5
 80075ee:	f7f9 fa71 	bl	8000ad4 <__aeabi_dcmpun>
 80075f2:	b998      	cbnz	r0, 800761c <log+0x44>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4620      	mov	r0, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7f9 fa60 	bl	8000ac0 <__aeabi_dcmpgt>
 8007600:	b960      	cbnz	r0, 800761c <log+0x44>
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	f7f9 fa31 	bl	8000a70 <__aeabi_dcmpeq>
 800760e:	b140      	cbz	r0, 8007622 <log+0x4a>
 8007610:	f7ff ffaa 	bl	8007568 <__errno>
 8007614:	2322      	movs	r3, #34	@ 0x22
 8007616:	2600      	movs	r6, #0
 8007618:	4f06      	ldr	r7, [pc, #24]	@ (8007634 <log+0x5c>)
 800761a:	6003      	str	r3, [r0, #0]
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007622:	f7ff ffa1 	bl	8007568 <__errno>
 8007626:	2321      	movs	r3, #33	@ 0x21
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	4803      	ldr	r0, [pc, #12]	@ (8007638 <log+0x60>)
 800762c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007630:	f000 b804 	b.w	800763c <nan>
 8007634:	fff00000 	.word	0xfff00000
 8007638:	08007e08 	.word	0x08007e08

0800763c <nan>:
 800763c:	2000      	movs	r0, #0
 800763e:	4901      	ldr	r1, [pc, #4]	@ (8007644 <nan+0x8>)
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	7ff80000 	.word	0x7ff80000

08007648 <__ieee754_log>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	460d      	mov	r5, r1
 8007656:	b087      	sub	sp, #28
 8007658:	da24      	bge.n	80076a4 <__ieee754_log+0x5c>
 800765a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800765e:	4304      	orrs	r4, r0
 8007660:	d108      	bne.n	8007674 <__ieee754_log+0x2c>
 8007662:	2200      	movs	r2, #0
 8007664:	2300      	movs	r3, #0
 8007666:	2000      	movs	r0, #0
 8007668:	49cb      	ldr	r1, [pc, #812]	@ (8007998 <__ieee754_log+0x350>)
 800766a:	f7f9 f8c3 	bl	80007f4 <__aeabi_ddiv>
 800766e:	b007      	add	sp, #28
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	2900      	cmp	r1, #0
 8007676:	da04      	bge.n	8007682 <__ieee754_log+0x3a>
 8007678:	f7f8 fdda 	bl	8000230 <__aeabi_dsub>
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	e7f3      	b.n	800766a <__ieee754_log+0x22>
 8007682:	2200      	movs	r2, #0
 8007684:	4bc5      	ldr	r3, [pc, #788]	@ (800799c <__ieee754_log+0x354>)
 8007686:	f7f8 ff8b 	bl	80005a0 <__aeabi_dmul>
 800768a:	460b      	mov	r3, r1
 800768c:	460d      	mov	r5, r1
 800768e:	4602      	mov	r2, r0
 8007690:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8007694:	48c2      	ldr	r0, [pc, #776]	@ (80079a0 <__ieee754_log+0x358>)
 8007696:	4285      	cmp	r5, r0
 8007698:	dd06      	ble.n	80076a8 <__ieee754_log+0x60>
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	f7f8 fdc9 	bl	8000234 <__adddf3>
 80076a2:	e7e4      	b.n	800766e <__ieee754_log+0x26>
 80076a4:	2100      	movs	r1, #0
 80076a6:	e7f5      	b.n	8007694 <__ieee754_log+0x4c>
 80076a8:	152c      	asrs	r4, r5, #20
 80076aa:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80076ae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80076b2:	440c      	add	r4, r1
 80076b4:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 80076b8:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 80076bc:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 80076c0:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 80076c4:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 80076c8:	ea41 0305 	orr.w	r3, r1, r5
 80076cc:	4610      	mov	r0, r2
 80076ce:	4619      	mov	r1, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	4bb4      	ldr	r3, [pc, #720]	@ (80079a4 <__ieee754_log+0x35c>)
 80076d4:	f7f8 fdac 	bl	8000230 <__aeabi_dsub>
 80076d8:	1cab      	adds	r3, r5, #2
 80076da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076de:	2b02      	cmp	r3, #2
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 80076ec:	dc53      	bgt.n	8007796 <__ieee754_log+0x14e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f7f9 f9be 	bl	8000a70 <__aeabi_dcmpeq>
 80076f4:	b1d0      	cbz	r0, 800772c <__ieee754_log+0xe4>
 80076f6:	2c00      	cmp	r4, #0
 80076f8:	f000 8120 	beq.w	800793c <__ieee754_log+0x2f4>
 80076fc:	4620      	mov	r0, r4
 80076fe:	f7f8 fee5 	bl	80004cc <__aeabi_i2d>
 8007702:	a391      	add	r3, pc, #580	@ (adr r3, 8007948 <__ieee754_log+0x300>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	4606      	mov	r6, r0
 800770a:	460f      	mov	r7, r1
 800770c:	f7f8 ff48 	bl	80005a0 <__aeabi_dmul>
 8007710:	a38f      	add	r3, pc, #572	@ (adr r3, 8007950 <__ieee754_log+0x308>)
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	4604      	mov	r4, r0
 8007718:	460d      	mov	r5, r1
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 ff3f 	bl	80005a0 <__aeabi_dmul>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	e7b8      	b.n	800769e <__ieee754_log+0x56>
 800772c:	a38a      	add	r3, pc, #552	@ (adr r3, 8007958 <__ieee754_log+0x310>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	4650      	mov	r0, sl
 8007734:	4659      	mov	r1, fp
 8007736:	f7f8 ff33 	bl	80005a0 <__aeabi_dmul>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	2000      	movs	r0, #0
 8007740:	4999      	ldr	r1, [pc, #612]	@ (80079a8 <__ieee754_log+0x360>)
 8007742:	f7f8 fd75 	bl	8000230 <__aeabi_dsub>
 8007746:	4652      	mov	r2, sl
 8007748:	4606      	mov	r6, r0
 800774a:	460f      	mov	r7, r1
 800774c:	465b      	mov	r3, fp
 800774e:	4650      	mov	r0, sl
 8007750:	4659      	mov	r1, fp
 8007752:	f7f8 ff25 	bl	80005a0 <__aeabi_dmul>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f8 ff1f 	bl	80005a0 <__aeabi_dmul>
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	b914      	cbnz	r4, 800776e <__ieee754_log+0x126>
 8007768:	4632      	mov	r2, r6
 800776a:	463b      	mov	r3, r7
 800776c:	e0a0      	b.n	80078b0 <__ieee754_log+0x268>
 800776e:	4620      	mov	r0, r4
 8007770:	f7f8 feac 	bl	80004cc <__aeabi_i2d>
 8007774:	a374      	add	r3, pc, #464	@ (adr r3, 8007948 <__ieee754_log+0x300>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	4680      	mov	r8, r0
 800777c:	4689      	mov	r9, r1
 800777e:	f7f8 ff0f 	bl	80005a0 <__aeabi_dmul>
 8007782:	a373      	add	r3, pc, #460	@ (adr r3, 8007950 <__ieee754_log+0x308>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f8 ff06 	bl	80005a0 <__aeabi_dmul>
 8007794:	e0a5      	b.n	80078e2 <__ieee754_log+0x29a>
 8007796:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800779a:	f7f8 fd4b 	bl	8000234 <__adddf3>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4650      	mov	r0, sl
 80077a4:	4659      	mov	r1, fp
 80077a6:	f7f9 f825 	bl	80007f4 <__aeabi_ddiv>
 80077aa:	e9cd 0100 	strd	r0, r1, [sp]
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7f8 fe8c 	bl	80004cc <__aeabi_i2d>
 80077b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077bc:	4610      	mov	r0, r2
 80077be:	4619      	mov	r1, r3
 80077c0:	f7f8 feee 	bl	80005a0 <__aeabi_dmul>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077cc:	f7f8 fee8 	bl	80005a0 <__aeabi_dmul>
 80077d0:	a363      	add	r3, pc, #396	@ (adr r3, 8007960 <__ieee754_log+0x318>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	4680      	mov	r8, r0
 80077d8:	4689      	mov	r9, r1
 80077da:	f7f8 fee1 	bl	80005a0 <__aeabi_dmul>
 80077de:	a362      	add	r3, pc, #392	@ (adr r3, 8007968 <__ieee754_log+0x320>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fd26 	bl	8000234 <__adddf3>
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	f7f8 fed8 	bl	80005a0 <__aeabi_dmul>
 80077f0:	a35f      	add	r3, pc, #380	@ (adr r3, 8007970 <__ieee754_log+0x328>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fd1d 	bl	8000234 <__adddf3>
 80077fa:	4642      	mov	r2, r8
 80077fc:	464b      	mov	r3, r9
 80077fe:	f7f8 fecf 	bl	80005a0 <__aeabi_dmul>
 8007802:	a35d      	add	r3, pc, #372	@ (adr r3, 8007978 <__ieee754_log+0x330>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fd14 	bl	8000234 <__adddf3>
 800780c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007810:	f7f8 fec6 	bl	80005a0 <__aeabi_dmul>
 8007814:	a35a      	add	r3, pc, #360	@ (adr r3, 8007980 <__ieee754_log+0x338>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800781e:	4640      	mov	r0, r8
 8007820:	4649      	mov	r1, r9
 8007822:	f7f8 febd 	bl	80005a0 <__aeabi_dmul>
 8007826:	a358      	add	r3, pc, #352	@ (adr r3, 8007988 <__ieee754_log+0x340>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fd02 	bl	8000234 <__adddf3>
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	f7f8 feb4 	bl	80005a0 <__aeabi_dmul>
 8007838:	a355      	add	r3, pc, #340	@ (adr r3, 8007990 <__ieee754_log+0x348>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fcf9 	bl	8000234 <__adddf3>
 8007842:	4642      	mov	r2, r8
 8007844:	464b      	mov	r3, r9
 8007846:	f7f8 feab 	bl	80005a0 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007852:	f7f8 fcef 	bl	8000234 <__adddf3>
 8007856:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800785a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800785e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007862:	3551      	adds	r5, #81	@ 0x51
 8007864:	4335      	orrs	r5, r6
 8007866:	2d00      	cmp	r5, #0
 8007868:	4680      	mov	r8, r0
 800786a:	4689      	mov	r9, r1
 800786c:	dd48      	ble.n	8007900 <__ieee754_log+0x2b8>
 800786e:	2200      	movs	r2, #0
 8007870:	4b4d      	ldr	r3, [pc, #308]	@ (80079a8 <__ieee754_log+0x360>)
 8007872:	4650      	mov	r0, sl
 8007874:	4659      	mov	r1, fp
 8007876:	f7f8 fe93 	bl	80005a0 <__aeabi_dmul>
 800787a:	4652      	mov	r2, sl
 800787c:	465b      	mov	r3, fp
 800787e:	f7f8 fe8f 	bl	80005a0 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4606      	mov	r6, r0
 8007888:	460f      	mov	r7, r1
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	f7f8 fcd1 	bl	8000234 <__adddf3>
 8007892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007896:	f7f8 fe83 	bl	80005a0 <__aeabi_dmul>
 800789a:	4680      	mov	r8, r0
 800789c:	4689      	mov	r9, r1
 800789e:	b964      	cbnz	r4, 80078ba <__ieee754_log+0x272>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 fcc2 	bl	8000230 <__aeabi_dsub>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4650      	mov	r0, sl
 80078b2:	4659      	mov	r1, fp
 80078b4:	f7f8 fcbc 	bl	8000230 <__aeabi_dsub>
 80078b8:	e6d9      	b.n	800766e <__ieee754_log+0x26>
 80078ba:	a323      	add	r3, pc, #140	@ (adr r3, 8007948 <__ieee754_log+0x300>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c4:	f7f8 fe6c 	bl	80005a0 <__aeabi_dmul>
 80078c8:	a321      	add	r3, pc, #132	@ (adr r3, 8007950 <__ieee754_log+0x308>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	4604      	mov	r4, r0
 80078d0:	460d      	mov	r5, r1
 80078d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d6:	f7f8 fe63 	bl	80005a0 <__aeabi_dmul>
 80078da:	4642      	mov	r2, r8
 80078dc:	464b      	mov	r3, r9
 80078de:	f7f8 fca9 	bl	8000234 <__adddf3>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4630      	mov	r0, r6
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f8 fca1 	bl	8000230 <__aeabi_dsub>
 80078ee:	4652      	mov	r2, sl
 80078f0:	465b      	mov	r3, fp
 80078f2:	f7f8 fc9d 	bl	8000230 <__aeabi_dsub>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	e7d9      	b.n	80078b4 <__ieee754_log+0x26c>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4650      	mov	r0, sl
 8007906:	4659      	mov	r1, fp
 8007908:	f7f8 fc92 	bl	8000230 <__aeabi_dsub>
 800790c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007910:	f7f8 fe46 	bl	80005a0 <__aeabi_dmul>
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	2c00      	cmp	r4, #0
 800791a:	f43f af25 	beq.w	8007768 <__ieee754_log+0x120>
 800791e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007948 <__ieee754_log+0x300>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007928:	f7f8 fe3a 	bl	80005a0 <__aeabi_dmul>
 800792c:	a308      	add	r3, pc, #32	@ (adr r3, 8007950 <__ieee754_log+0x308>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	4604      	mov	r4, r0
 8007934:	460d      	mov	r5, r1
 8007936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793a:	e729      	b.n	8007790 <__ieee754_log+0x148>
 800793c:	2000      	movs	r0, #0
 800793e:	2100      	movs	r1, #0
 8007940:	e695      	b.n	800766e <__ieee754_log+0x26>
 8007942:	bf00      	nop
 8007944:	f3af 8000 	nop.w
 8007948:	fee00000 	.word	0xfee00000
 800794c:	3fe62e42 	.word	0x3fe62e42
 8007950:	35793c76 	.word	0x35793c76
 8007954:	3dea39ef 	.word	0x3dea39ef
 8007958:	55555555 	.word	0x55555555
 800795c:	3fd55555 	.word	0x3fd55555
 8007960:	df3e5244 	.word	0xdf3e5244
 8007964:	3fc2f112 	.word	0x3fc2f112
 8007968:	96cb03de 	.word	0x96cb03de
 800796c:	3fc74664 	.word	0x3fc74664
 8007970:	94229359 	.word	0x94229359
 8007974:	3fd24924 	.word	0x3fd24924
 8007978:	55555593 	.word	0x55555593
 800797c:	3fe55555 	.word	0x3fe55555
 8007980:	d078c69f 	.word	0xd078c69f
 8007984:	3fc39a09 	.word	0x3fc39a09
 8007988:	1d8e78af 	.word	0x1d8e78af
 800798c:	3fcc71c5 	.word	0x3fcc71c5
 8007990:	9997fa04 	.word	0x9997fa04
 8007994:	3fd99999 	.word	0x3fd99999
 8007998:	c3500000 	.word	0xc3500000
 800799c:	43500000 	.word	0x43500000
 80079a0:	7fefffff 	.word	0x7fefffff
 80079a4:	3ff00000 	.word	0x3ff00000
 80079a8:	3fe00000 	.word	0x3fe00000

080079ac <_init>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr

080079b8 <_fini>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr
>>>>>>> 724b400 (converted spi to dma, deleted duplecated header)
