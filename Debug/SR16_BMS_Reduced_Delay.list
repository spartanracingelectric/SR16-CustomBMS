
SR16_BMS_Reduced_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007e8c  08007e8c  00008e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f4  080082f4  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000008  080082f4  080082f4  000092f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082fc  080082fc  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082fc  080082fc  000092fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008304  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200000c8  080083cc  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080083cc  0000a464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014471  00000000  00000000  0000a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f1  00000000  00000000  0001e562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00021e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed4  00000000  00000000  00023180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218b3  00000000  00000000  00024054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019531  00000000  00000000  00045907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be2e8  00000000  00000000  0005ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005374  00000000  00000000  0011d164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001224d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c8 	.word	0x200000c8
 8000204:	00000000 	.word	0x00000000
 8000208:	08007e74 	.word	0x08007e74

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000cc 	.word	0x200000cc
 8000224:	08007e74 	.word	0x08007e74

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	@ 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	@ 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	@ 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b968 	b.w	8001384 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9d08      	ldr	r5, [sp, #32]
 80010d2:	460c      	mov	r4, r1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d14e      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010d8:	4694      	mov	ip, r2
 80010da:	458c      	cmp	ip, r1
 80010dc:	4686      	mov	lr, r0
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	d962      	bls.n	80011aa <__udivmoddi4+0xde>
 80010e4:	b14a      	cbz	r2, 80010fa <__udivmoddi4+0x2e>
 80010e6:	f1c2 0320 	rsb	r3, r2, #32
 80010ea:	4091      	lsls	r1, r2
 80010ec:	fa20 f303 	lsr.w	r3, r0, r3
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	4319      	orrs	r1, r3
 80010f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8001102:	fb07 1114 	mls	r1, r7, r4, r1
 8001106:	fa1f f68c 	uxth.w	r6, ip
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001112:	fb04 f106 	mul.w	r1, r4, r6
 8001116:	4299      	cmp	r1, r3
 8001118:	d90a      	bls.n	8001130 <__udivmoddi4+0x64>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001122:	f080 8110 	bcs.w	8001346 <__udivmoddi4+0x27a>
 8001126:	4299      	cmp	r1, r3
 8001128:	f240 810d 	bls.w	8001346 <__udivmoddi4+0x27a>
 800112c:	3c02      	subs	r4, #2
 800112e:	4463      	add	r3, ip
 8001130:	1a59      	subs	r1, r3, r1
 8001132:	fbb1 f0f7 	udiv	r0, r1, r7
 8001136:	fb07 1110 	mls	r1, r7, r0, r1
 800113a:	fb00 f606 	mul.w	r6, r0, r6
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	429e      	cmp	r6, r3
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001152:	f080 80fa 	bcs.w	800134a <__udivmoddi4+0x27e>
 8001156:	429e      	cmp	r6, r3
 8001158:	f240 80f7 	bls.w	800134a <__udivmoddi4+0x27e>
 800115c:	4463      	add	r3, ip
 800115e:	3802      	subs	r0, #2
 8001160:	2100      	movs	r1, #0
 8001162:	1b9b      	subs	r3, r3, r6
 8001164:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001168:	b11d      	cbz	r5, 8001172 <__udivmoddi4+0xa6>
 800116a:	40d3      	lsrs	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	e9c5 3200 	strd	r3, r2, [r5]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d905      	bls.n	8001186 <__udivmoddi4+0xba>
 800117a:	b10d      	cbz	r5, 8001180 <__udivmoddi4+0xb4>
 800117c:	e9c5 0100 	strd	r0, r1, [r5]
 8001180:	2100      	movs	r1, #0
 8001182:	4608      	mov	r0, r1
 8001184:	e7f5      	b.n	8001172 <__udivmoddi4+0xa6>
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d146      	bne.n	800121c <__udivmoddi4+0x150>
 800118e:	42a3      	cmp	r3, r4
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xcc>
 8001192:	4290      	cmp	r0, r2
 8001194:	f0c0 80ee 	bcc.w	8001374 <__udivmoddi4+0x2a8>
 8001198:	1a86      	subs	r6, r0, r2
 800119a:	eb64 0303 	sbc.w	r3, r4, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d0e6      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011a4:	e9c5 6300 	strd	r6, r3, [r5]
 80011a8:	e7e3      	b.n	8001172 <__udivmoddi4+0xa6>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	f040 808f 	bne.w	80012ce <__udivmoddi4+0x202>
 80011b0:	eba1 040c 	sub.w	r4, r1, ip
 80011b4:	2101      	movs	r1, #1
 80011b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ba:	fa1f f78c 	uxth.w	r7, ip
 80011be:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c2:	fb08 4416 	mls	r4, r8, r6, r4
 80011c6:	fb07 f006 	mul.w	r0, r7, r6
 80011ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	4298      	cmp	r0, r3
 80011d4:	d908      	bls.n	80011e8 <__udivmoddi4+0x11c>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f106 34ff 	add.w	r4, r6, #4294967295
 80011de:	d202      	bcs.n	80011e6 <__udivmoddi4+0x11a>
 80011e0:	4298      	cmp	r0, r3
 80011e2:	f200 80cb 	bhi.w	800137c <__udivmoddi4+0x2b0>
 80011e6:	4626      	mov	r6, r4
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80011ee:	fb08 4410 	mls	r4, r8, r0, r4
 80011f2:	fb00 f707 	mul.w	r7, r0, r7
 80011f6:	fa1f f38e 	uxth.w	r3, lr
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	429f      	cmp	r7, r3
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x148>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 34ff 	add.w	r4, r0, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x146>
 800120c:	429f      	cmp	r7, r3
 800120e:	f200 80ae 	bhi.w	800136e <__udivmoddi4+0x2a2>
 8001212:	4620      	mov	r0, r4
 8001214:	1bdb      	subs	r3, r3, r7
 8001216:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121a:	e7a5      	b.n	8001168 <__udivmoddi4+0x9c>
 800121c:	f1c1 0720 	rsb	r7, r1, #32
 8001220:	408b      	lsls	r3, r1
 8001222:	fa22 fc07 	lsr.w	ip, r2, r7
 8001226:	ea4c 0c03 	orr.w	ip, ip, r3
 800122a:	fa24 f607 	lsr.w	r6, r4, r7
 800122e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001232:	fbb6 f8f9 	udiv	r8, r6, r9
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	fb09 6618 	mls	r6, r9, r8, r6
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	408c      	lsls	r4, r1
 8001244:	fa00 fa01 	lsl.w	sl, r0, r1
 8001248:	fb08 f00e 	mul.w	r0, r8, lr
 800124c:	431c      	orrs	r4, r3
 800124e:	0c23      	lsrs	r3, r4, #16
 8001250:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001254:	4298      	cmp	r0, r3
 8001256:	fa02 f201 	lsl.w	r2, r2, r1
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x1a6>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f108 36ff 	add.w	r6, r8, #4294967295
 8001264:	f080 8081 	bcs.w	800136a <__udivmoddi4+0x29e>
 8001268:	4298      	cmp	r0, r3
 800126a:	d97e      	bls.n	800136a <__udivmoddi4+0x29e>
 800126c:	f1a8 0802 	sub.w	r8, r8, #2
 8001270:	4463      	add	r3, ip
 8001272:	1a1e      	subs	r6, r3, r0
 8001274:	fbb6 f3f9 	udiv	r3, r6, r9
 8001278:	fb09 6613 	mls	r6, r9, r3, r6
 800127c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001286:	45a6      	cmp	lr, r4
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x1d0>
 800128a:	eb1c 0404 	adds.w	r4, ip, r4
 800128e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001292:	d266      	bcs.n	8001362 <__udivmoddi4+0x296>
 8001294:	45a6      	cmp	lr, r4
 8001296:	d964      	bls.n	8001362 <__udivmoddi4+0x296>
 8001298:	3b02      	subs	r3, #2
 800129a:	4464      	add	r4, ip
 800129c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012a0:	fba0 8302 	umull	r8, r3, r0, r2
 80012a4:	eba4 040e 	sub.w	r4, r4, lr
 80012a8:	429c      	cmp	r4, r3
 80012aa:	46c6      	mov	lr, r8
 80012ac:	461e      	mov	r6, r3
 80012ae:	d350      	bcc.n	8001352 <__udivmoddi4+0x286>
 80012b0:	d04d      	beq.n	800134e <__udivmoddi4+0x282>
 80012b2:	b155      	cbz	r5, 80012ca <__udivmoddi4+0x1fe>
 80012b4:	ebba 030e 	subs.w	r3, sl, lr
 80012b8:	eb64 0406 	sbc.w	r4, r4, r6
 80012bc:	fa04 f707 	lsl.w	r7, r4, r7
 80012c0:	40cb      	lsrs	r3, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	40cc      	lsrs	r4, r1
 80012c6:	e9c5 7400 	strd	r7, r4, [r5]
 80012ca:	2100      	movs	r1, #0
 80012cc:	e751      	b.n	8001172 <__udivmoddi4+0xa6>
 80012ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d2:	f1c2 0320 	rsb	r3, r2, #32
 80012d6:	40d9      	lsrs	r1, r3
 80012d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012dc:	fa20 f303 	lsr.w	r3, r0, r3
 80012e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80012e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e8:	fb08 1110 	mls	r1, r8, r0, r1
 80012ec:	4094      	lsls	r4, r2
 80012ee:	431c      	orrs	r4, r3
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	0c23      	lsrs	r3, r4, #16
 80012f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012fa:	fb00 f107 	mul.w	r1, r0, r7
 80012fe:	4299      	cmp	r1, r3
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x248>
 8001302:	eb1c 0303 	adds.w	r3, ip, r3
 8001306:	f100 36ff 	add.w	r6, r0, #4294967295
 800130a:	d22c      	bcs.n	8001366 <__udivmoddi4+0x29a>
 800130c:	4299      	cmp	r1, r3
 800130e:	d92a      	bls.n	8001366 <__udivmoddi4+0x29a>
 8001310:	3802      	subs	r0, #2
 8001312:	4463      	add	r3, ip
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	fbb3 f1f8 	udiv	r1, r3, r8
 800131a:	fb08 3311 	mls	r3, r8, r1, r3
 800131e:	b2a4      	uxth	r4, r4
 8001320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001324:	fb01 f307 	mul.w	r3, r1, r7
 8001328:	42a3      	cmp	r3, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x272>
 800132c:	eb1c 0404 	adds.w	r4, ip, r4
 8001330:	f101 36ff 	add.w	r6, r1, #4294967295
 8001334:	d213      	bcs.n	800135e <__udivmoddi4+0x292>
 8001336:	42a3      	cmp	r3, r4
 8001338:	d911      	bls.n	800135e <__udivmoddi4+0x292>
 800133a:	3902      	subs	r1, #2
 800133c:	4464      	add	r4, ip
 800133e:	1ae4      	subs	r4, r4, r3
 8001340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001344:	e73b      	b.n	80011be <__udivmoddi4+0xf2>
 8001346:	4604      	mov	r4, r0
 8001348:	e6f2      	b.n	8001130 <__udivmoddi4+0x64>
 800134a:	4608      	mov	r0, r1
 800134c:	e708      	b.n	8001160 <__udivmoddi4+0x94>
 800134e:	45c2      	cmp	sl, r8
 8001350:	d2af      	bcs.n	80012b2 <__udivmoddi4+0x1e6>
 8001352:	ebb8 0e02 	subs.w	lr, r8, r2
 8001356:	eb63 060c 	sbc.w	r6, r3, ip
 800135a:	3801      	subs	r0, #1
 800135c:	e7a9      	b.n	80012b2 <__udivmoddi4+0x1e6>
 800135e:	4631      	mov	r1, r6
 8001360:	e7ed      	b.n	800133e <__udivmoddi4+0x272>
 8001362:	4603      	mov	r3, r0
 8001364:	e79a      	b.n	800129c <__udivmoddi4+0x1d0>
 8001366:	4630      	mov	r0, r6
 8001368:	e7d4      	b.n	8001314 <__udivmoddi4+0x248>
 800136a:	46b0      	mov	r8, r6
 800136c:	e781      	b.n	8001272 <__udivmoddi4+0x1a6>
 800136e:	4463      	add	r3, ip
 8001370:	3802      	subs	r0, #2
 8001372:	e74f      	b.n	8001214 <__udivmoddi4+0x148>
 8001374:	4606      	mov	r6, r0
 8001376:	4623      	mov	r3, r4
 8001378:	4608      	mov	r0, r1
 800137a:	e711      	b.n	80011a0 <__udivmoddi4+0xd4>
 800137c:	3e02      	subs	r6, #2
 800137e:	4463      	add	r3, ip
 8001380:	e732      	b.n	80011e8 <__udivmoddi4+0x11c>
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <Wakeup_Idle>:
LTC_CMD_RDCVC, LTC_CMD_RDCVD };

static const uint16_t LTC_CMD_AUXREG[2] = { LTC_CMD_RDAUXA, LTC_CMD_RDAUXB };

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800138e:	23ff      	movs	r3, #255	@ 0xff
 8001390:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e00c      	b.n	80013b2 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 8001398:	f001 fe24 	bl	8002fe4 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 800139c:	1cf9      	adds	r1, r7, #3
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	2201      	movs	r2, #1
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Wakeup_Idle+0x3c>)
 80013a4:	f004 fed0 	bl	8006148 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013a8:	f001 fe10 	bl	8002fcc <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	ddef      	ble.n	8001398 <Wakeup_Idle+0x10>
	}
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001b8 	.word	0x200001b8

080013c8 <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e00c      	b.n	80013ee <Wakeup_Sleep+0x26>
		LTC_nCS_Low();
 80013d4:	f001 fe06 	bl	8002fe4 <LTC_nCS_Low>
		HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f002 f86d 	bl	80034b8 <HAL_Delay>
		LTC_nCS_High();
 80013de:	f001 fdf5 	bl	8002fcc <LTC_nCS_High>
		HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f002 f868 	bl	80034b8 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	ddef      	ble.n	80013d4 <Wakeup_Sleep+0xc>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b089      	sub	sp, #36	@ 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	466b      	mov	r3, sp
 800140c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001416:	7f3b      	ldrb	r3, [r7, #28]
 8001418:	3b01      	subs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	7f3b      	ldrb	r3, [r7, #28]
 800141e:	2200      	movs	r2, #0
 8001420:	4698      	mov	r8, r3
 8001422:	4691      	mov	r9, r2
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001438:	7f3b      	ldrb	r3, [r7, #28]
 800143a:	2200      	movs	r2, #0
 800143c:	461c      	mov	r4, r3
 800143e:	4615      	mov	r5, r2
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	00eb      	lsls	r3, r5, #3
 800144a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144e:	00e2      	lsls	r2, r4, #3
 8001450:	7f3b      	ldrb	r3, [r7, #28]
 8001452:	3307      	adds	r3, #7
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	ebad 0d03 	sub.w	sp, sp, r3
 800145c:	466b      	mov	r3, sp
 800145e:	3300      	adds	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001462:	2300      	movs	r3, #0
 8001464:	77bb      	strb	r3, [r7, #30]
 8001466:	e074      	b.n	8001552 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001468:	7fbb      	ldrb	r3, [r7, #30]
 800146a:	4a3f      	ldr	r2, [pc, #252]	@ (8001568 <Read_Cell_Volt+0x168>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001478:	7fbb      	ldrb	r3, [r7, #30]
 800147a:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <Read_Cell_Volt+0x168>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	2002      	movs	r0, #2
 800148c:	f000 faa2 	bl	80019d4 <LTC_Pec15_Calc>
 8001490:	4603      	mov	r3, r0
 8001492:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014a4:	f7ff ff70 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014a8:	f001 fd9c 	bl	8002fe4 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	2364      	movs	r3, #100	@ 0x64
 80014b2:	2204      	movs	r2, #4
 80014b4:	482d      	ldr	r0, [pc, #180]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014b6:	f004 fe47 	bl	8006148 <HAL_SPI_Transmit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014be:	7c7b      	ldrb	r3, [r7, #17]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014c4:	7c7b      	ldrb	r3, [r7, #17]
 80014c6:	2201      	movs	r2, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2364      	movs	r3, #100	@ 0x64
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	4822      	ldr	r0, [pc, #136]	@ (800156c <Read_Cell_Volt+0x16c>)
 80014e2:	f004 ff75 	bl	80063d0 <HAL_SPI_Receive>
 80014e6:	4603      	mov	r3, r0
 80014e8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014ea:	7c7b      	ldrb	r3, [r7, #17]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80014f0:	7c7b      	ldrb	r3, [r7, #17]
 80014f2:	3304      	adds	r3, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	77fb      	strb	r3, [r7, #31]
		}
		LTC_nCS_High(); // Pull CS high
 8001506:	f001 fd61 	bl	8002fcc <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800150a:	2300      	movs	r3, #0
 800150c:	777b      	strb	r3, [r7, #29]
 800150e:	e01a      	b.n	8001546 <Read_Cell_Volt+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800151a:	7f7a      	ldrb	r2, [r7, #29]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001526:	7fba      	ldrb	r2, [r7, #30]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
			memcpy(
 8001536:	2206      	movs	r2, #6
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f006 faa2 	bl	8007a84 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001540:	7f7b      	ldrb	r3, [r7, #29]
 8001542:	3301      	adds	r3, #1
 8001544:	777b      	strb	r3, [r7, #29]
 8001546:	7f7b      	ldrb	r3, [r7, #29]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d9e1      	bls.n	8001510 <Read_Cell_Volt+0x110>
			i++) {
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	3301      	adds	r3, #1
 8001550:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001552:	7fbb      	ldrb	r3, [r7, #30]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d987      	bls.n	8001468 <Read_Cell_Volt+0x68>
					REG_LEN - 2);
		}
	}

	return ret;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	46b5      	mov	sp, r6
}
 800155c:	4618      	mov	r0, r3
 800155e:	3724      	adds	r7, #36	@ 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001566:	bf00      	nop
 8001568:	08007e8c 	.word	0x08007e8c
 800156c:	200001b8 	.word	0x200001b8

08001570 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800157c:	2306      	movs	r3, #6
 800157e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3304      	adds	r3, #4
 8001588:	74fb      	strb	r3, [r7, #19]
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	wrcomm_buffer[0] = 0x07;
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800158c:	2207      	movs	r2, #7
 800158e:	701a      	strb	r2, [r3, #0]
	wrcomm_buffer[1] = 0x21;
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001592:	2221      	movs	r2, #33	@ 0x21
 8001594:	705a      	strb	r2, [r3, #1]
	cmd_pec = LTC_Pec15_Calc(2, wrcomm_buffer);
 8001596:	492b      	ldr	r1, [pc, #172]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001598:	2002      	movs	r0, #2
 800159a:	f000 fa1b 	bl	80019d4 <LTC_Pec15_Calc>
 800159e:	4603      	mov	r3, r0
 80015a0:	823b      	strh	r3, [r7, #16]
	wrcomm_buffer[2] = (uint8_t) (cmd_pec >> 8);
 80015a2:	8a3b      	ldrh	r3, [r7, #16]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015ac:	709a      	strb	r2, [r3, #2]
	wrcomm_buffer[3] = (uint8_t) (cmd_pec);
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015b4:	70da      	strb	r2, [r3, #3]

	cmd_index = 4;
 80015b6:	2304      	movs	r3, #4
 80015b8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	75bb      	strb	r3, [r7, #22]
 80015be:	e02d      	b.n	800161c <LTC_WRCOMM+0xac>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	757b      	strb	r3, [r7, #21]
 80015c4:	e00c      	b.n	80015e0 <LTC_WRCOMM+0x70>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			wrcomm_buffer[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	441a      	add	r2, r3
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <LTC_WRCOMM+0xd4>)
 80015d2:	54d1      	strb	r1, [r2, r3]
			cmd_index = cmd_index + 1;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	3301      	adds	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80015da:	7d7b      	ldrb	r3, [r7, #21]
 80015dc:	3301      	adds	r3, #1
 80015de:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015e0:	7d7a      	ldrb	r2, [r7, #21]
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3ee      	bcc.n	80015c6 <LTC_WRCOMM+0x56>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80015e8:	7d3b      	ldrb	r3, [r7, #20]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f9f1 	bl	80019d4 <LTC_Pec15_Calc>
 80015f2:	4603      	mov	r3, r0
 80015f4:	81fb      	strh	r3, [r7, #14]
		wrcomm_buffer[cmd_index] = (uint8_t) (comm_pec >> 8);
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001602:	54d1      	strb	r1, [r2, r3]
		wrcomm_buffer[cmd_index + 1] = (uint8_t) comm_pec;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	3301      	adds	r3, #1
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	b2d1      	uxtb	r1, r2
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LTC_WRCOMM+0xd4>)
 800160e:	54d1      	strb	r1, [r2, r3]
		cmd_index = cmd_index + 2;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3302      	adds	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	3b01      	subs	r3, #1
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ce      	bne.n	80015c0 <LTC_WRCOMM+0x50>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001622:	f7ff feb1 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001626:	f001 fcdd 	bl	8002fe4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) wrcomm_buffer, CMD_LEN, 100);
 800162a:	7cfb      	ldrb	r3, [r7, #19]
 800162c:	b29a      	uxth	r2, r3
 800162e:	2364      	movs	r3, #100	@ 0x64
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LTC_WRCOMM+0xd4>)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <LTC_WRCOMM+0xd8>)
 8001634:	f004 fd88 	bl	8006148 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001638:	f001 fcc8 	bl	8002fcc <LTC_nCS_High>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000e4 	.word	0x200000e4
 8001648:	200001b8 	.word	0x200001b8

0800164c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001656:	2307      	movs	r3, #7
 8001658:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800165a:	2323      	movs	r3, #35	@ 0x23
 800165c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	2002      	movs	r0, #2
 8001666:	f000 f9b5 	bl	80019d4 <LTC_Pec15_Calc>
 800166a:	4603      	mov	r3, r0
 800166c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800166e:	8a7b      	ldrh	r3, [r7, #18]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800167e:	f7ff fe83 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001682:	f001 fcaf 	bl	8002fe4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001686:	f107 010c 	add.w	r1, r7, #12
 800168a:	2364      	movs	r3, #100	@ 0x64
 800168c:	2204      	movs	r2, #4
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <LTC_STCOMM+0x7c>)
 8001690:	f004 fd5a 	bl	8006148 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e008      	b.n	80016ac <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	21ff      	movs	r1, #255	@ 0xff
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <LTC_STCOMM+0x7c>)
 80016a2:	f004 fd51 	bl	8006148 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbef      	blt.n	800169a <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ba:	f001 fc87 	bl	8002fcc <LTC_nCS_High>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001b8 	.word	0x200001b8

080016cc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d0:	b089      	sub	sp, #36	@ 0x24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	466b      	mov	r3, sp
 80016d8:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80016de:	2340      	movs	r3, #64	@ 0x40
 80016e0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80016e2:	7f3b      	ldrb	r3, [r7, #28]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	7f3b      	ldrb	r3, [r7, #28]
 80016ea:	2200      	movs	r2, #0
 80016ec:	4698      	mov	r8, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001700:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	2200      	movs	r2, #0
 8001708:	461c      	mov	r4, r3
 800170a:	4615      	mov	r5, r2
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	00eb      	lsls	r3, r5, #3
 8001716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171a:	00e2      	lsls	r2, r4, #3
 800171c:	7f3b      	ldrb	r3, [r7, #28]
 800171e:	3307      	adds	r3, #7
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	ebad 0d03 	sub.w	sp, sp, r3
 8001728:	466b      	mov	r3, sp
 800172a:	3300      	adds	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	77bb      	strb	r3, [r7, #30]
 8001732:	e074      	b.n	800181e <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <Read_Cell_Temps+0x168>)
 8001748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	2002      	movs	r0, #2
 8001758:	f000 f93c 	bl	80019d4 <LTC_Pec15_Calc>
 800175c:	4603      	mov	r3, r0
 800175e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001760:	8a7b      	ldrh	r3, [r7, #18]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 8001770:	f7ff fe0a 	bl	8001388 <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 8001774:	f001 fc36 	bl	8002fe4 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001778:	f107 0108 	add.w	r1, r7, #8
 800177c:	2364      	movs	r3, #100	@ 0x64
 800177e:	2204      	movs	r2, #4
 8001780:	482d      	ldr	r0, [pc, #180]	@ (8001838 <Read_Cell_Temps+0x16c>)
 8001782:	f004 fce1 	bl	8006148 <HAL_SPI_Transmit>
 8001786:	4603      	mov	r3, r0
 8001788:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800178a:	7c7b      	ldrb	r3, [r7, #17]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001790:	7c7b      	ldrb	r3, [r7, #17]
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	b25a      	sxtb	r2, r3
 800179a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017a4:	7f3b      	ldrb	r3, [r7, #28]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2364      	movs	r3, #100	@ 0x64
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	4822      	ldr	r0, [pc, #136]	@ (8001838 <Read_Cell_Temps+0x16c>)
 80017ae:	f004 fe0f 	bl	80063d0 <HAL_SPI_Receive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017b6:	7c7b      	ldrb	r3, [r7, #17]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017bc:	7c7b      	ldrb	r3, [r7, #17]
 80017be:	3304      	adds	r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	b25a      	sxtb	r2, r3
 80017c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	77fb      	strb	r3, [r7, #31]
		}

		LTC_nCS_High(); // Pull CS high
 80017d2:	f001 fbfb 	bl	8002fcc <LTC_nCS_High>

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	777b      	strb	r3, [r7, #29]
 80017da:	e01a      	b.n	8001812 <Read_Cell_Temps+0x146>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80017dc:	7f7b      	ldrb	r3, [r7, #29]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017e6:	7f7a      	ldrb	r2, [r7, #29]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80017f2:	7fba      	ldrb	r2, [r7, #30]
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
			memcpy(
 8001802:	2206      	movs	r2, #6
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f006 f93c 	bl	8007a84 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	3301      	adds	r3, #1
 8001810:	777b      	strb	r3, [r7, #29]
 8001812:	7f7b      	ldrb	r3, [r7, #29]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d9e1      	bls.n	80017dc <Read_Cell_Temps+0x110>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001818:	7fbb      	ldrb	r3, [r7, #30]
 800181a:	3301      	adds	r3, #1
 800181c:	77bb      	strb	r3, [r7, #30]
 800181e:	7fbb      	ldrb	r3, [r7, #30]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d987      	bls.n	8001734 <Read_Cell_Temps+0x68>
					REG_LEN - 2);
		}

	}

	return ret;
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	46b5      	mov	sp, r6
}
 8001828:	4618      	mov	r0, r3
 800182a:	3724      	adds	r7, #36	@ 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001832:	bf00      	nop
 8001834:	08007e94 	.word	0x08007e94
 8001838:	200001b8 	.word	0x200001b8

0800183c <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	105b      	asrs	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	3302      	adds	r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	b2da      	uxtb	r2, r3
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4413      	add	r3, r2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	797b      	ldrb	r3, [r7, #5]
 8001876:	4413      	add	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3360      	adds	r3, #96	@ 0x60
 800187c:	b2db      	uxtb	r3, r3
 800187e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	2002      	movs	r0, #2
 8001888:	f000 f8a4 	bl	80019d4 <LTC_Pec15_Calc>
 800188c:	4603      	mov	r3, r0
 800188e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001890:	89bb      	ldrh	r3, [r7, #12]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b29b      	uxth	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800189a:	89bb      	ldrh	r3, [r7, #12]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018a0:	f7ff fd72 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 80018a4:	f001 fb9e 	bl	8002fe4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018a8:	f107 0108 	add.w	r1, r7, #8
 80018ac:	2364      	movs	r3, #100	@ 0x64
 80018ae:	2204      	movs	r2, #4
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <LTC_ADCV+0x88>)
 80018b2:	f004 fc49 	bl	8006148 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018b6:	f001 fb89 	bl	8002fcc <LTC_nCS_High>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001b8 	.word	0x200001b8

080018c8 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	105b      	asrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3304      	adds	r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3360      	adds	r3, #96	@ 0x60
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	2002      	movs	r0, #2
 8001908:	f000 f864 	bl	80019d4 <LTC_Pec15_Calc>
 800190c:	4603      	mov	r3, r0
 800190e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001920:	f7ff fd32 	bl	8001388 <Wakeup_Idle>
	LTC_nCS_Low();
 8001924:	f001 fb5e 	bl	8002fe4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001928:	f107 0108 	add.w	r1, r7, #8
 800192c:	2364      	movs	r3, #100	@ 0x64
 800192e:	2204      	movs	r2, #4
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <LTC_ADAX+0x7c>)
 8001932:	f004 fc09 	bl	8006148 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001936:	f001 fb49 	bl	8002fcc <LTC_nCS_High>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001b8 	.word	0x200001b8

08001948 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800195a:	2307      	movs	r3, #7
 800195c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800195e:	2314      	movs	r3, #20
 8001960:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	2002      	movs	r0, #2
 8001968:	f000 f834 	bl	80019d4 <LTC_Pec15_Calc>
 800196c:	4603      	mov	r3, r0
 800196e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001980:	f7ff fd02 	bl	8001388 <Wakeup_Idle>

	LTC_nCS_Low();
 8001984:	f001 fb2e 	bl	8002fe4 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	2364      	movs	r3, #100	@ 0x64
 800198c:	2204      	movs	r2, #4
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <LTC_POLLADC+0x84>)
 8001990:	f004 fbda 	bl	8006148 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001994:	e00c      	b.n	80019b0 <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 8001996:	f001 fd85 	bl	80034a4 <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
 800199c:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800199e:	7abb      	ldrb	r3, [r7, #10]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <LTC_POLLADC+0x62>
			finished = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	72fb      	strb	r3, [r7, #11]
 80019a8:	e002      	b.n	80019b0 <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	330a      	adds	r3, #10
 80019ae:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <LTC_POLLADC+0x88>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d802      	bhi.n	80019be <LTC_POLLADC+0x76>
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0eb      	beq.n	8001996 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019be:	f001 fb05 	bl	8002fcc <LTC_nCS_High>
	return (counter);
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001b8 	.word	0x200001b8
 80019d0:	00030d3f 	.word	0x00030d3f

080019d4 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 80019e0:	2310      	movs	r3, #16
 80019e2:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80019e4:	2300      	movs	r3, #0
 80019e6:	737b      	strb	r3, [r7, #13]
 80019e8:	e017      	b.n	8001a1a <LTC_Pec15_Calc+0x46>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	09db      	lsrs	r3, r3, #7
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	7b7a      	ldrb	r2, [r7, #13]
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	4053      	eors	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <LTC_Pec15_Calc+0x60>)
 8001a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4053      	eors	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a14:	7b7b      	ldrb	r3, [r7, #13]
 8001a16:	3301      	adds	r3, #1
 8001a18:	737b      	strb	r3, [r7, #13]
 8001a1a:	7b7a      	ldrb	r2, [r7, #13]
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e3      	bcc.n	80019ea <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b29b      	uxth	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	08007e98 	.word	0x08007e98

08001a38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_ADC1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a76:	f001 fd43 	bl	8003500 <HAL_ADC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 ff76 	bl	8002970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a84:	230f      	movs	r3, #15
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_ADC1_Init+0x74>)
 8001a96:	f002 f8c9 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 ff66 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000128 	.word	0x20000128
 8001ab0:	40012400 	.word	0x40012400

08001ab4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ac6:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <MX_ADC2_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ade:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ae2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001af2:	f001 fd05 	bl	8003500 <HAL_ADC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001afc:	f000 ff38 	bl	8002970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b00:	230d      	movs	r3, #13
 8001b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_ADC2_Init+0x74>)
 8001b12:	f002 f88b 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001b1c:	f000 ff28 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000158 	.word	0x20000158
 8001b2c:	40012800 	.word	0x40012800

08001b30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a30      	ldr	r2, [pc, #192]	@ (8001c0c <HAL_ADC_MspInit+0xdc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d12a      	bne.n	8001ba6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b50:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a2e      	ldr	r2, [pc, #184]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a28      	ldr	r2, [pc, #160]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = MCU_ADC_VSENSE_Pin;
 8001b80:	2320      	movs	r3, #32
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b84:	2303      	movs	r3, #3
 8001b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_ADC_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4821      	ldr	r0, [pc, #132]	@ (8001c14 <HAL_ADC_MspInit+0xe4>)
 8001b90:	f003 f910 	bl	8004db4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2101      	movs	r1, #1
 8001b98:	2012      	movs	r0, #18
 8001b9a:	f002 ff1a 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b9e:	2012      	movs	r0, #18
 8001ba0:	f002 ff33 	bl	8004a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001ba4:	e02e      	b.n	8001c04 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <HAL_ADC_MspInit+0xe8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d129      	bne.n	8001c04 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a16      	ldr	r2, [pc, #88]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a10      	ldr	r2, [pc, #64]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_ADC_MspInit+0xe0>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|SHUNT_SIGNAL_Pin;
 8001be0:	230f      	movs	r3, #15
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be4:	2303      	movs	r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0318 	add.w	r3, r7, #24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	@ (8001c14 <HAL_ADC_MspInit+0xe4>)
 8001bf0:	f003 f8e0 	bl	8004db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f002 feea 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bfe:	2012      	movs	r0, #18
 8001c00:	f002 ff03 	bl	8004a0a <HAL_NVIC_EnableIRQ>
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	@ 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40012400 	.word	0x40012400
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40012800 	.word	0x40012800

08001c1c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <MX_CAN1_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001c26:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c28:	2209      	movs	r2, #9
 8001c2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c3e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c42:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001c46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_CAN1_Init+0x64>)
 8001c6e:	f002 f979 	bl	8003f64 <HAL_CAN_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c78:	f000 fe7a 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000188 	.word	0x20000188
 8001c84:	40006400 	.word	0x40006400

08001c88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a35      	ldr	r2, [pc, #212]	@ (8001d78 <HAL_CAN_MspInit+0xf0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d163      	bne.n	8001d70 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ca8:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <HAL_CAN_MspInit+0xf4>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a33      	ldr	r2, [pc, #204]	@ (8001d7c <HAL_CAN_MspInit+0xf4>)
 8001cae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	61d3      	str	r3, [r2, #28]
 8001cb4:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <HAL_CAN_MspInit+0xf4>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <HAL_CAN_MspInit+0xf4>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d7c <HAL_CAN_MspInit+0xf4>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <HAL_CAN_MspInit+0xf4>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4824      	ldr	r0, [pc, #144]	@ (8001d80 <HAL_CAN_MspInit+0xf8>)
 8001cee:	f003 f861 	bl	8004db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	481e      	ldr	r0, [pc, #120]	@ (8001d80 <HAL_CAN_MspInit+0xf8>)
 8001d08:	f003 f854 	bl	8004db4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_CAN_MspInit+0xfc>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2a:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_CAN_MspInit+0xfc>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2102      	movs	r1, #2
 8001d34:	2013      	movs	r0, #19
 8001d36:	f002 fe4c 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d3a:	2013      	movs	r0, #19
 8001d3c:	f002 fe65 	bl	8004a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2102      	movs	r1, #2
 8001d44:	2014      	movs	r0, #20
 8001d46:	f002 fe44 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d4a:	2014      	movs	r0, #20
 8001d4c:	f002 fe5d 	bl	8004a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2102      	movs	r1, #2
 8001d54:	2015      	movs	r0, #21
 8001d56:	f002 fe3c 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d5a:	2015      	movs	r0, #21
 8001d5c:	f002 fe55 	bl	8004a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2102      	movs	r1, #2
 8001d64:	2016      	movs	r0, #22
 8001d66:	f002 fe34 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001d6a:	2016      	movs	r0, #22
 8001d6c:	f002 fe4d 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	@ 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40006400 	.word	0x40006400
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	40010000 	.word	0x40010000

08001d88 <CAN_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <CAN_Start+0x10>)
 8001d8e:	f002 f9e4 	bl	800415a <HAL_CAN_Start>
 8001d92:	4603      	mov	r3, r0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000188 	.word	0x20000188

08001d9c <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001da0:	2102      	movs	r1, #2
 8001da2:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <CAN_Activate+0x14>)
 8001da4:	f002 faec 	bl	8004380 <HAL_CAN_ActivateNotification>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000188 	.word	0x20000188

08001db4 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f103 021c 	add.w	r2, r3, #28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <CAN_Send+0x24>)
 8001dca:	f002 fa0a 	bl	80041e2 <HAL_CAN_AddTxMessage>
 8001dce:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000188 	.word	0x20000188

08001ddc <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001de4:	f7ff ffd0 	bl	8001d88 <CAN_Start>
	CAN_Activate();
 8001de8:	f7ff ffd8 	bl	8001d9c <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2208      	movs	r2, #8
 8001e02:	611a      	str	r2, [r3, #16]
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	601a      	str	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001e30:	f44f 63c6 	mov.w	r3, #1584	@ 0x630
 8001e34:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001e36:	8afb      	ldrh	r3, [r7, #22]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffe6 	bl	8001e0c <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e074      	b.n	8001f30 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d156      	bne.n	8001efe <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	dd0c      	ble.n	8001f1e <CAN_Send_Voltage+0xf8>
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	3301      	adds	r3, #1
 8001f12:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff77 	bl	8001e0c <Set_CAN_Id>
		}
		HAL_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f001 faca 	bl	80034b8 <HAL_Delay>
		CAN_Send(ptr);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff45 	bl	8001db4 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b5f      	cmp	r3, #95	@ 0x5f
 8001f34:	dd87      	ble.n	8001e46 <CAN_Send_Voltage+0x20>
	}

}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001f4a:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 8001f4e:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff59 	bl	8001e0c <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	737b      	strb	r3, [r7, #13]
 8001f5e:	e076      	b.n	800204e <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8001f60:	7b7b      	ldrb	r3, [r7, #13]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d156      	bne.n	800201a <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8001f70:	7b3b      	ldrb	r3, [r7, #12]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001f94:	7b3b      	ldrb	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8001f9a:	7b3b      	ldrb	r3, [r7, #12]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001faa:	7b3b      	ldrb	r3, [r7, #12]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001fbe:	7b3b      	ldrb	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001fd6:	7b3b      	ldrb	r3, [r7, #12]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			temp_volt += 1;
 8001fec:	7b3b      	ldrb	r3, [r7, #12]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 8001ff2:	7b3b      	ldrb	r3, [r7, #12]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8002004:	7b3b      	ldrb	r3, [r7, #12]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4413      	add	r3, r2
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}
		if (i > 0 && i % 4 == 0) {
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <CAN_Send_Temperature+0xfc>
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 800202c:	89fb      	ldrh	r3, [r7, #14]
 800202e:	3301      	adds	r3, #1
 8002030:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fee8 	bl	8001e0c <Set_CAN_Id>
		}
		HAL_Delay(1);
 800203c:	2001      	movs	r0, #1
 800203e:	f001 fa3b 	bl	80034b8 <HAL_Delay>
		CAN_Send(ptr);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff feb6 	bl	8001db4 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8002048:	7b7b      	ldrb	r3, [r7, #13]
 800204a:	3301      	adds	r3, #1
 800204c:	737b      	strb	r3, [r7, #13]
 800204e:	7b7b      	ldrb	r3, [r7, #13]
 8002050:	2b5f      	cmp	r3, #95	@ 0x5f
 8002052:	d985      	bls.n	8001f60 <CAN_Send_Temperature+0x20>
	}

}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr, struct batteryModule *batt) {
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8002068:	f240 6322 	movw	r3, #1570	@ 0x622
 800206c:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff feca 	bl	8001e0c <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800207e:	b2da      	uxtb	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	b29b      	uxth	r3, r3
 800208e:	b2da      	uxtb	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800209a:	b2da      	uxtb	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	HAL_Delay(1);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f001 f9e1 	bl	80034b8 <HAL_Delay>
	CAN_Send(ptr);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fe5c 	bl	8001db4 <CAN_Send>
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 8002112:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002116:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8002118:	8afb      	ldrh	r3, [r7, #22]
 800211a:	4619      	mov	r1, r3
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fe75 	bl	8001e0c <Set_CAN_Id>
	ptr->data[0] = *faults;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800216c:	0e1b      	lsrs	r3, r3, #24
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	HAL_Delay(1);
 8002176:	2001      	movs	r0, #1
 8002178:	f001 f99e 	bl	80034b8 <HAL_Delay>
	CAN_Send(ptr);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fe19 	bl	8001db4 <CAN_Send>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <CAN_Send_SOC>:


void CAN_Send_SOC(struct CANMessage *ptr, batteryModule *batt, uint16_t max_capacity) {
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	4613      	mov	r3, r2
 8002196:	80fb      	strh	r3, [r7, #6]
    uint16_t CAN_ID = 0x601;
 8002198:	f240 6301 	movw	r3, #1537	@ 0x601
 800219c:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 800219e:	8afb      	ldrh	r3, [r7, #22]
 80021a0:	4619      	mov	r1, r3
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff fe32 	bl	8001e0c <Set_CAN_Id>

	ptr->data[0] = batt->soc;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	@ 0x1fc
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = batt->soc >> 8;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	@ 0x1fc
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	775a      	strb	r2, [r3, #29]

    uint8_t percent = (uint8_t)(batt->soc * 100 / max_capacity);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	@ 0x1fc
 80021ca:	461a      	mov	r2, r3
 80021cc:	2364      	movs	r3, #100	@ 0x64
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021d8:	757b      	strb	r3, [r7, #21]
	ptr->data[2] = percent;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	7d7a      	ldrb	r2, [r7, #21]
 80021de:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->current;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->current >> 8;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = batt->current >> 16;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ptr->data[6] = batt->current >> 24;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002212:	0e1b      	lsrs	r3, r3, #24
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	HAL_Delay(1);
 800221c:	2001      	movs	r0, #1
 800221e:	f001 f94b 	bl	80034b8 <HAL_Delay>
	CAN_Send(ptr);
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff fdc6 	bl	8001db4 <CAN_Send>
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	4b3c      	ldr	r3, [pc, #240]	@ (8002338 <MX_GPIO_Init+0x108>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a3b      	ldr	r2, [pc, #236]	@ (8002338 <MX_GPIO_Init+0x108>)
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <MX_GPIO_Init+0x108>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225c:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <MX_GPIO_Init+0x108>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <MX_GPIO_Init+0x108>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <MX_GPIO_Init+0x108>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <MX_GPIO_Init+0x108>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <MX_GPIO_Init+0x108>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <MX_GPIO_Init+0x108>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <MX_GPIO_Init+0x108>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a29      	ldr	r2, [pc, #164]	@ (8002338 <MX_GPIO_Init+0x108>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <MX_GPIO_Init+0x108>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2110      	movs	r1, #16
 80022a8:	4824      	ldr	r0, [pc, #144]	@ (800233c <MX_GPIO_Init+0x10c>)
 80022aa:	f002 ff07 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2102      	movs	r1, #2
 80022b2:	4823      	ldr	r0, [pc, #140]	@ (8002340 <MX_GPIO_Init+0x110>)
 80022b4:	f002 ff02 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2140      	movs	r1, #64	@ 0x40
 80022bc:	4821      	ldr	r0, [pc, #132]	@ (8002344 <MX_GPIO_Init+0x114>)
 80022be:	f002 fefd 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC_nCS_Pin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80022c2:	2310      	movs	r3, #16
 80022c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	4619      	mov	r1, r3
 80022d8:	4818      	ldr	r0, [pc, #96]	@ (800233c <MX_GPIO_Init+0x10c>)
 80022da:	f002 fd6b 	bl	8004db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_SHUTDOWN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = MCU_SHUTDOWN_SIGNAL_Pin;
 80022de:	2302      	movs	r3, #2
 80022e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_SHUTDOWN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4619      	mov	r1, r3
 80022f4:	4812      	ldr	r0, [pc, #72]	@ (8002340 <MX_GPIO_Init+0x110>)
 80022f6:	f002 fd5d 	bl	8004db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HEARTBEAT_LED_Pin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80022fa:	2340      	movs	r3, #64	@ 0x40
 80022fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	2301      	movs	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2302      	movs	r3, #2
 8002308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4619      	mov	r1, r3
 8002310:	480c      	ldr	r0, [pc, #48]	@ (8002344 <MX_GPIO_Init+0x114>)
 8002312:	f002 fd4f 	bl	8004db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_HV_SENSE_ENABLE_Pin */
  GPIO_InitStruct.Pin = MCU_HV_SENSE_ENABLE_Pin;
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_HV_SENSE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	@ (8002340 <MX_GPIO_Init+0x110>)
 800232a:	f002 fd43 	bl	8004db4 <HAL_GPIO_Init>

}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40010800 	.word	0x40010800
 8002340:	40010c00 	.word	0x40010c00
 8002344:	40011000 	.word	0x40011000

08002348 <ReadHVInput>:
	#include "hv.h"
	#include "adc.h"
	#include "main.h"

	void ReadHVInput(uint32_t *read_volt_HV) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
		uint32_t adcValue = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

		HAL_ADC_Start(&hadc1);//start adc with adc1
 8002354:	481b      	ldr	r0, [pc, #108]	@ (80023c4 <ReadHVInput+0x7c>)
 8002356:	f001 f9ab 	bl	80036b0 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800235a:	f04f 31ff 	mov.w	r1, #4294967295
 800235e:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <ReadHVInput+0x7c>)
 8002360:	f001 fa80 	bl	8003864 <HAL_ADC_PollForConversion>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <ReadHVInput+0x2a>
			adcValue = HAL_ADC_GetValue(&hadc1);//get adc value and store it in adcValue
 800236a:	4816      	ldr	r0, [pc, #88]	@ (80023c4 <ReadHVInput+0x7c>)
 800236c:	f001 fb80 	bl	8003a70 <HAL_ADC_GetValue>
 8002370:	6178      	str	r0, [r7, #20]
		}
		HAL_ADC_Stop(&hadc1);//stop adc
 8002372:	4814      	ldr	r0, [pc, #80]	@ (80023c4 <ReadHVInput+0x7c>)
 8002374:	f001 fa4a 	bl	800380c <HAL_ADC_Stop>

		//calculate voltage based on  resolution and gain on opamp, voltage divider ratio
		float adcVoltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 8002378:	6978      	ldr	r0, [r7, #20]
 800237a:	f7fe fcc7 	bl	8000d0c <__aeabi_ui2f>
 800237e:	4603      	mov	r3, r0
 8002380:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fdcd 	bl	8000f24 <__aeabi_fdiv>
 800238a:	4603      	mov	r3, r0
 800238c:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <ReadHVInput+0x80>)
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fd14 	bl	8000dbc <__aeabi_fmul>
 8002394:	4603      	mov	r3, r0
 8002396:	613b      	str	r3, [r7, #16]
		float amcOutput = adcVoltage / GAIN_TLV9001;
 8002398:	490c      	ldr	r1, [pc, #48]	@ (80023cc <ReadHVInput+0x84>)
 800239a:	6938      	ldr	r0, [r7, #16]
 800239c:	f7fe fdc2 	bl	8000f24 <__aeabi_fdiv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
		float hvInput = amcOutput * DIVIDER_RATIO;
 80023a4:	490a      	ldr	r1, [pc, #40]	@ (80023d0 <ReadHVInput+0x88>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7fe fd08 	bl	8000dbc <__aeabi_fmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	60bb      	str	r3, [r7, #8]

		*read_volt_HV = (uint32_t)(hvInput);
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f7fe fe53 	bl	800105c <__aeabi_f2uiz>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]
	}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000128 	.word	0x20000128
 80023c8:	40533333 	.word	0x40533333
 80023cc:	3ff47ae1 	.word	0x3ff47ae1
 80023d0:	44fee666 	.word	0x44fee666

080023d4 <State_of_Charge>:

void State_of_Charge(batteryModule *batt, uint32_t elapsed_time) {
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    uint32_t adcValue = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc2);//start adc with adc1
 80023e2:	482c      	ldr	r0, [pc, #176]	@ (8002494 <State_of_Charge+0xc0>)
 80023e4:	f001 f964 	bl	80036b0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	4829      	ldr	r0, [pc, #164]	@ (8002494 <State_of_Charge+0xc0>)
 80023ee:	f001 fa39 	bl	8003864 <HAL_ADC_PollForConversion>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <State_of_Charge+0x2c>
		adcValue = HAL_ADC_GetValue(&hadc2);//get adc value and store it in adcValue
 80023f8:	4826      	ldr	r0, [pc, #152]	@ (8002494 <State_of_Charge+0xc0>)
 80023fa:	f001 fb39 	bl	8003a70 <HAL_ADC_GetValue>
 80023fe:	60f8      	str	r0, [r7, #12]
	}
	HAL_ADC_Stop(&hadc2);//stop adc
 8002400:	4824      	ldr	r0, [pc, #144]	@ (8002494 <State_of_Charge+0xc0>)
 8002402:	f001 fa03 	bl	800380c <HAL_ADC_Stop>
    float voltage = ((float)adcValue / ADC_RESOLUTION) * V_REF;
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7fe fc80 	bl	8000d0c <__aeabi_ui2f>
 800240c:	4603      	mov	r3, r0
 800240e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fd86 	bl	8000f24 <__aeabi_fdiv>
 8002418:	4603      	mov	r3, r0
 800241a:	491f      	ldr	r1, [pc, #124]	@ (8002498 <State_of_Charge+0xc4>)
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fccd 	bl	8000dbc <__aeabi_fmul>
 8002422:	4603      	mov	r3, r0
 8002424:	60bb      	str	r3, [r7, #8]
    batt->current = (voltage / MAX_SHUNT_VOLTAGE) * MAX_SHUNT_AMPAGE;
 8002426:	491c      	ldr	r1, [pc, #112]	@ (8002498 <State_of_Charge+0xc4>)
 8002428:	68b8      	ldr	r0, [r7, #8]
 800242a:	f7fe fd7b 	bl	8000f24 <__aeabi_fdiv>
 800242e:	4603      	mov	r3, r0
 8002430:	491a      	ldr	r1, [pc, #104]	@ (800249c <State_of_Charge+0xc8>)
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fcc2 	bl	8000dbc <__aeabi_fmul>
 8002438:	4603      	mov	r3, r0
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fe0e 	bl	800105c <__aeabi_f2uiz>
 8002440:	4602      	mov	r2, r0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    batt->soc -= (uint16_t)(batt->current * (float)(elapsed_time / 3600000.0f));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8b3 41fc 	ldrh.w	r4, [r3, #508]	@ 0x1fc
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc59 	bl	8000d0c <__aeabi_ui2f>
 800245a:	4605      	mov	r5, r0
 800245c:	6838      	ldr	r0, [r7, #0]
 800245e:	f7fe fc55 	bl	8000d0c <__aeabi_ui2f>
 8002462:	4603      	mov	r3, r0
 8002464:	490e      	ldr	r1, [pc, #56]	@ (80024a0 <State_of_Charge+0xcc>)
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fd5c 	bl	8000f24 <__aeabi_fdiv>
 800246c:	4603      	mov	r3, r0
 800246e:	4619      	mov	r1, r3
 8002470:	4628      	mov	r0, r5
 8002472:	f7fe fca3 	bl	8000dbc <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fdef 	bl	800105c <__aeabi_f2uiz>
 800247e:	4603      	mov	r3, r0
 8002480:	b29b      	uxth	r3, r3
 8002482:	1ae3      	subs	r3, r4, r3
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8a3 21fc 	strh.w	r2, [r3, #508]	@ 0x1fc
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bdb0      	pop	{r4, r5, r7, pc}
 8002494:	20000158 	.word	0x20000158
 8002498:	40533333 	.word	0x40533333
 800249c:	48f42400 	.word	0x48f42400
 80024a0:	4a5bba00 	.word	0x4a5bba00

080024a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 80024aa:	af04      	add	r7, sp, #16
    GpioTimePacket tp_led_heartbeat;
    TimerPacket timerpacket_ltc;

    batteryModule modPackInfo;
    struct CANMessage msg;
    uint8_t safetyFaults = 0;
 80024ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80024b0:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    uint8_t safetyWarnings = 0;
 80024b8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80024bc:	f2a3 2352 	subw	r3, r3, #594	@ 0x252
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    uint8_t safetyStates = 0;
 80024c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80024c8:	f2a3 2353 	subw	r3, r3, #595	@ 0x253
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

    modPackInfo.soc = MAX_BATTERY_CAPACITY;
 80024d0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80024d4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80024d8:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 80024dc:	f8a3 21fc 	strh.w	r2, [r3, #508]	@ 0x1fc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024e0:	f000 ff88 	bl	80033f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024e4:	f000 f96a 	bl	80027bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e8:	f7ff fea2 	bl	8002230 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024ec:	f7ff faa4 	bl	8001a38 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024f0:	f7ff fae0 	bl	8001ab4 <MX_ADC2_Init>
  MX_TIM7_Init();
 80024f4:	f000 fe30 	bl	8003158 <MX_TIM7_Init>
  MX_SPI1_Init();
 80024f8:	f000 fce0 	bl	8002ebc <MX_SPI1_Init>
  MX_CAN1_Init();
 80024fc:	f7ff fb8e 	bl	8001c1c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8002500:	f000 fe7e 	bl	8003200 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_SettingsInit(&msg);  // Start CAN at 0x00
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fc67 	bl	8001ddc <CAN_SettingsInit>
    // Start timer
    GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 800250e:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8002512:	2240      	movs	r2, #64	@ 0x40
 8002514:	49a5      	ldr	r1, [pc, #660]	@ (80027ac <main+0x308>)
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f9ba 	bl	8002890 <GpioTimePacket_Init>
                        MCU_HEARTBEAT_LED_Pin);
    TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 800251c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002520:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f9f3 	bl	8002910 <TimerPacket_Init>
    // Pull SPI1 nCS HIGH (deselect)
    LTC_nCS_High();
 800252a:	f000 fd4f 	bl	8002fcc <LTC_nCS_High>

    //	//Sending a fault signal and reseting it
    HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin,
 800252e:	2201      	movs	r2, #1
 8002530:	2102      	movs	r1, #2
 8002532:	489f      	ldr	r0, [pc, #636]	@ (80027b0 <main+0x30c>)
 8002534:	f002 fdc2 	bl	80050bc <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
    HAL_Delay(500);
 8002538:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800253c:	f000 ffbc 	bl	80034b8 <HAL_Delay>
    HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin,
 8002540:	2200      	movs	r2, #0
 8002542:	2102      	movs	r1, #2
 8002544:	489a      	ldr	r0, [pc, #616]	@ (80027b0 <main+0x30c>)
 8002546:	f002 fdb9 	bl	80050bc <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);

    // initializing variables
    uint8_t tempindex = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
    uint8_t indexpause = 8;
 8002550:	2308      	movs	r3, #8
 8002552:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
    uint8_t low_volt_hysteresis = 0;
 8002556:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800255a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
    uint8_t high_volt_hysteresis = 0;
 8002562:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002566:	f2a3 2355 	subw	r3, r3, #597	@ 0x255
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
    uint8_t cell_imbalance_hysteresis = 0;
 800256e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002572:	f2a3 2356 	subw	r3, r3, #598	@ 0x256
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]

    // reading cell voltages
    Wakeup_Sleep();
 800257a:	f7fe ff25 	bl	80013c8 <Wakeup_Sleep>
    Read_Volt(modPackInfo.cell_volt);
 800257e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fa8e 	bl	8002aa4 <Read_Volt>

    // reading cell temperatures
    Wakeup_Sleep();
 8002588:	f7fe ff1e 	bl	80013c8 <Wakeup_Sleep>
    for (uint8_t i = tempindex; i < indexpause; i++) {
 800258c:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002590:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 8002594:	e016      	b.n	80025c4 <main+0x120>
        Wakeup_Idle();
 8002596:	f7fe fef7 	bl	8001388 <Wakeup_Idle>
        Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 800259a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800259e:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80025a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a6:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80025aa:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fa8c 	bl	8002acc <Read_Temp>
        HAL_Delay(3);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 ff7f 	bl	80034b8 <HAL_Delay>
    for (uint8_t i = tempindex; i < indexpause; i++) {
 80025ba:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 80025c4:	f897 2255 	ldrb.w	r2, [r7, #597]	@ 0x255
 80025c8:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d3e2      	bcc.n	8002596 <main+0xf2>
    }
    Wakeup_Idle();
 80025d0:	f7fe feda 	bl	8001388 <Wakeup_Idle>
    LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 80025d4:	4977      	ldr	r1, [pc, #476]	@ (80027b4 <main+0x310>)
 80025d6:	2008      	movs	r0, #8
 80025d8:	f7fe ffca 	bl	8001570 <LTC_WRCOMM>
    Wakeup_Idle();
 80025dc:	f7fe fed4 	bl	8001388 <Wakeup_Idle>
    LTC_STCOMM(2);
 80025e0:	2002      	movs	r0, #2
 80025e2:	f7ff f833 	bl	800164c <LTC_STCOMM>

    Wakeup_Sleep();
 80025e6:	f7fe feef 	bl	80013c8 <Wakeup_Sleep>
    for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 80025ea:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 80025ee:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 80025f2:	e016      	b.n	8002622 <main+0x17e>
        Wakeup_Idle();
 80025f4:	f7fe fec8 	bl	8001388 <Wakeup_Idle>
        Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80025f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025fc:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 8002600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002604:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002608:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fa5d 	bl	8002acc <Read_Temp>
        HAL_Delay(3);
 8002612:	2003      	movs	r0, #3
 8002614:	f000 ff50 	bl	80034b8 <HAL_Delay>
    for (uint8_t i = indexpause; i < NUM_THERM_PER_MOD; i++) {
 8002618:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 800261c:	3301      	adds	r3, #1
 800261e:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 8002622:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 8002626:	2b0b      	cmp	r3, #11
 8002628:	d9e4      	bls.n	80025f4 <main+0x150>
    }
    Wakeup_Idle();
 800262a:	f7fe fead 	bl	8001388 <Wakeup_Idle>
    LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 800262e:	4962      	ldr	r1, [pc, #392]	@ (80027b8 <main+0x314>)
 8002630:	2008      	movs	r0, #8
 8002632:	f7fe ff9d 	bl	8001570 <LTC_WRCOMM>
    Wakeup_Idle();
 8002636:	f7fe fea7 	bl	8001388 <Wakeup_Idle>
    LTC_STCOMM(2);
 800263a:	2002      	movs	r0, #2
 800263c:	f7ff f806 	bl	800164c <LTC_STCOMM>

    uint32_t prev_soc_time = HAL_GetTick();
 8002640:	f000 ff30 	bl	80034a4 <HAL_GetTick>
 8002644:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
  /* USER CODE BEGIN WHILE */
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002648:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 800264c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002650:	4618      	mov	r0, r3
 8002652:	f000 f93a 	bl	80028ca <GpioFixedToggle>
        if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8002656:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f96b 	bl	8002936 <TimerPacket_FixedPulse>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <main+0x1a4>
            // calling all CAN realated methods
            CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 8002666:	1dbc      	adds	r4, r7, #6
 8002668:	1dfa      	adds	r2, r7, #7
 800266a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800266e:	f107 0008 	add.w	r0, r7, #8
 8002672:	1d7b      	adds	r3, r7, #5
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4623      	mov	r3, r4
 8002678:	f7ff fd44 	bl	8002104 <CAN_Send_Safety_Checker>
                                    &safetyWarnings, &safetyStates);
            CAN_Send_Cell_Summary(&msg, &modPackInfo);
 800267c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fce9 	bl	800205e <CAN_Send_Cell_Summary>
            CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 800268c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fbc5 	bl	8001e26 <CAN_Send_Voltage>
            CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 800269c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026a0:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fc48 	bl	8001f40 <CAN_Send_Temperature>
            CAN_Send_SOC(&msg, &modPackInfo, MAX_BATTERY_CAPACITY);
 80026b0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fd64 	bl	800218a <CAN_Send_SOC>
            // reading cell voltages
            Wakeup_Sleep();
 80026c2:	f7fe fe81 	bl	80013c8 <Wakeup_Sleep>
            Read_Volt(modPackInfo.cell_volt);
 80026c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9ea 	bl	8002aa4 <Read_Volt>
            // print(NUM_CELLS, (uint16_t*) modPackInfo.cell_volt);

            // reading cell temperatures
            //			Wakeup_Sleep();
            for (uint8_t i = tempindex; i < indexpause; i++) {
 80026d0:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 80026d4:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80026d8:	e011      	b.n	80026fe <main+0x25a>
                //				Wakeup_Idle();
                Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80026da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026de:	f503 72ce 	add.w	r2, r3, #412	@ 0x19c
 80026e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026e6:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80026ea:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f9ec 	bl	8002acc <Read_Temp>
            for (uint8_t i = tempindex; i < indexpause; i++) {
 80026f4:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80026f8:	3301      	adds	r3, #1
 80026fa:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80026fe:	f897 224f 	ldrb.w	r2, [r7, #591]	@ 0x24f
 8002702:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8002706:	429a      	cmp	r2, r3
 8002708:	d3e7      	bcc.n	80026da <main+0x236>
                //				HAL_Delay(5);
            }
            if (indexpause == 8) {
 800270a:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 800270e:	2b08      	cmp	r3, #8
 8002710:	d10d      	bne.n	800272e <main+0x28a>
                //				Wakeup_Idle();
                LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8002712:	4928      	ldr	r1, [pc, #160]	@ (80027b4 <main+0x310>)
 8002714:	2008      	movs	r0, #8
 8002716:	f7fe ff2b 	bl	8001570 <LTC_WRCOMM>
                //				Wakeup_Idle();
                LTC_STCOMM(2);
 800271a:	2002      	movs	r0, #2
 800271c:	f7fe ff96 	bl	800164c <LTC_STCOMM>
                tempindex = 8;
 8002720:	2308      	movs	r3, #8
 8002722:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
                indexpause = NUM_THERM_PER_MOD;
 8002726:	230c      	movs	r3, #12
 8002728:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
 800272c:	e010      	b.n	8002750 <main+0x2ac>
            } else if (indexpause == NUM_THERM_PER_MOD) {
 800272e:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d10c      	bne.n	8002750 <main+0x2ac>
                //				Wakeup_Idle();
                LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8002736:	4920      	ldr	r1, [pc, #128]	@ (80027b8 <main+0x314>)
 8002738:	2008      	movs	r0, #8
 800273a:	f7fe ff19 	bl	8001570 <LTC_WRCOMM>
                //				Wakeup_Idle();
                LTC_STCOMM(2);
 800273e:	2002      	movs	r0, #2
 8002740:	f7fe ff84 	bl	800164c <LTC_STCOMM>
                indexpause = 8;
 8002744:	2308      	movs	r3, #8
 8002746:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
                tempindex = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
            }

            ReadHVInput(&modPackInfo.pack_voltage);
 8002750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002754:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fdf5 	bl	8002348 <ReadHVInput>
            // print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

            State_of_Charge(&modPackInfo,
                            (HAL_GetTick() - prev_soc_time));
 800275e:	f000 fea1 	bl	80034a4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
            State_of_Charge(&modPackInfo,
 8002764:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe2f 	bl	80023d4 <State_of_Charge>

            prev_soc_time = HAL_GetTick();
 8002776:	f000 fe95 	bl	80034a4 <HAL_GetTick>
 800277a:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
            // getting the summary of all cells in the pack
            Cell_Summary_Voltage(&modPackInfo, &safetyFaults, &safetyWarnings,
 800277e:	1d7c      	adds	r4, r7, #5
 8002780:	1dba      	adds	r2, r7, #6
 8002782:	1df9      	adds	r1, r7, #7
 8002784:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002788:	1cbb      	adds	r3, r7, #2
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	1cfb      	adds	r3, r7, #3
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4623      	mov	r3, r4
 8002796:	f000 f9df 	bl	8002b58 <Cell_Summary_Voltage>
                                 &safetyStates, &low_volt_hysteresis,
                                 &high_volt_hysteresis,
                                 &cell_imbalance_hysteresis);

            Cell_Summary_Temperature(&modPackInfo, &safetyFaults,
 800279a:	1dba      	adds	r2, r7, #6
 800279c:	1df9      	adds	r1, r7, #7
 800279e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fb1a 	bl	8002ddc <Cell_Summary_Temperature>
        GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80027a8:	e74e      	b.n	8002648 <main+0x1a4>
 80027aa:	bf00      	nop
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40010c00 	.word	0x40010c00
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000006 	.word	0x20000006

080027bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b09c      	sub	sp, #112	@ 0x70
 80027c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027c6:	2238      	movs	r2, #56	@ 0x38
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 f928 	bl	8007a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2220      	movs	r2, #32
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 f91a 	bl	8007a20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80027f6:	2304      	movs	r3, #4
 80027f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027fa:	2301      	movs	r3, #1
 80027fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80027fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002804:	2302      	movs	r3, #2
 8002806:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800280c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800280e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002812:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002814:	2302      	movs	r3, #2
 8002816:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002818:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800281c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800281e:	2340      	movs	r3, #64	@ 0x40
 8002820:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002822:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fc7a 	bl	8005120 <HAL_RCC_OscConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002832:	f000 f89d 	bl	8002970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002836:	230f      	movs	r3, #15
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800283a:	2302      	movs	r3, #2
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800284c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002850:	2102      	movs	r1, #2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 ff7a 	bl	800574c <HAL_RCC_ClockConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800285e:	f000 f887 	bl	8002970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002862:	2302      	movs	r3, #2
 8002864:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800286a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f003 f962 	bl	8005b38 <HAL_RCCEx_PeriphCLKConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800287a:	f000 f879 	bl	8002970 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800287e:	4b03      	ldr	r3, [pc, #12]	@ (800288c <SystemClock_Config+0xd0>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
}
 8002884:	bf00      	nop
 8002886:	3770      	adds	r7, #112	@ 0x70
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	42420070 	.word	0x42420070

08002890 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
// Initialize struct values
// Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port,
                         uint16_t pin) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);  // Set GPIO LOW
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	2200      	movs	r2, #0
 80028a2:	4619      	mov	r1, r3
 80028a4:	68b8      	ldr	r0, [r7, #8]
 80028a6:	f002 fc09 	bl	80050bc <HAL_GPIO_WritePin>
    gtp->gpio_port = port;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	601a      	str	r2, [r3, #0]
    gtp->gpio_pin = pin;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	809a      	strh	r2, [r3, #4]
    gtp->ts_prev = 0;  // Init to 0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
    gtp->ts_curr = 0;  // Init to 0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <GpioFixedToggle>:
// update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	807b      	strh	r3, [r7, #2]
    gtp->ts_curr = HAL_GetTick();  // Record current timestamp
 80028d6:	f000 fde5 	bl	80034a4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]
    if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	1ad2      	subs	r2, r2, r3
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d90b      	bls.n	8002908 <GpioFixedToggle+0x3e>
        HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin);  // Toggle GPIO
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	889b      	ldrh	r3, [r3, #4]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f002 fbf6 	bl	80050ec <HAL_GPIO_TogglePin>
        gtp->ts_prev = gtp->ts_curr;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
    }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <TimerPacket_Init>:
// Initialize struct values
// Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
    tp->ts_prev = 0;    // Init to 0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    tp->ts_curr = 0;    // Init to 0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	605a      	str	r2, [r3, #4]
    tp->delay = delay;  // Init to user value
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <TimerPacket_FixedPulse>:
// update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
    tp->ts_curr = HAL_GetTick();  // Record current timestamp
 800293e:	f000 fdb1 	bl	80034a4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]
    if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d905      	bls.n	8002966 <TimerPacket_FixedPulse+0x30>
        tp->ts_prev = tp->ts_curr;  // Update prev timestamp to current
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
        return 1;                   // Enact event (time interval is a go)
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <TimerPacket_FixedPulse+0x32>
    }
    return 0;  // Do not enact event
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002974:	b672      	cpsid	i
}
 8002976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <Error_Handler+0x8>

0800297c <Get_Actual_Temps>:
		{ 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F,
				0xF9 }, { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08,
				0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	603a      	str	r2, [r7, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	460b      	mov	r3, r1
 800298c:	71bb      	strb	r3, [r7, #6]
 800298e:	4613      	mov	r3, r2
 8002990:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f9b9 	bl	8000d0c <__aeabi_ui2f>
 800299a:	4603      	mov	r3, r0
 800299c:	4619      	mov	r1, r3
 800299e:	483a      	ldr	r0, [pc, #232]	@ (8002a88 <Get_Actual_Temps+0x10c>)
 80029a0:	f7fe fac0 	bl	8000f24 <__aeabi_fdiv>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f8fc 	bl	8000ba8 <__aeabi_fsub>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b35      	ldr	r3, [pc, #212]	@ (8002a8c <Get_Actual_Temps+0x110>)
 80029b6:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <Get_Actual_Temps+0x110>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	4834      	ldr	r0, [pc, #208]	@ (8002a90 <Get_Actual_Temps+0x114>)
 80029c0:	f7fe fab0 	bl	8000f24 <__aeabi_fdiv>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <Get_Actual_Temps+0x110>)
 80029ca:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 80029cc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <Get_Actual_Temps+0x110>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	492f      	ldr	r1, [pc, #188]	@ (8002a90 <Get_Actual_Temps+0x114>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe faa6 	bl	8000f24 <__aeabi_fdiv>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a94 <Get_Actual_Temps+0x118>)
 80029de:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 80029e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <Get_Actual_Temps+0x118>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd83 	bl	80004f0 <__aeabi_f2d>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f005 f855 	bl	8007aa0 <log>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7fe f87f 	bl	8000b00 <__aeabi_d2f>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a06:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8002a08:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4922      	ldr	r1, [pc, #136]	@ (8002a98 <Get_Actual_Temps+0x11c>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fa88 	bl	8000f24 <__aeabi_fdiv>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a1a:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	491e      	ldr	r1, [pc, #120]	@ (8002a9c <Get_Actual_Temps+0x120>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f8c2 	bl	8000bac <__addsf3>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a2e:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 8002a30:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002a3a:	f7fe fa73 	bl	8000f24 <__aeabi_fdiv>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a44:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 8002a46:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4915      	ldr	r1, [pc, #84]	@ (8002aa0 <Get_Actual_Temps+0x124>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe f8ab 	bl	8000ba8 <__aeabi_fsub>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a58:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <Get_Actual_Temps+0x118>)
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	79fa      	ldrb	r2, [r7, #7]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	79bb      	ldrb	r3, [r7, #6]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	18d4      	adds	r4, r2, r3
 8002a74:	4608      	mov	r0, r1
 8002a76:	f7fe faf1 	bl	800105c <__aeabi_f2uiz>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8023      	strh	r3, [r4, #0]

}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd90      	pop	{r4, r7, pc}
 8002a88:	46ea6000 	.word	0x46ea6000
 8002a8c:	200001b0 	.word	0x200001b0
 8002a90:	461c4000 	.word	0x461c4000
 8002a94:	200001b4 	.word	0x200001b4
 8002a98:	4556b000 	.word	0x4556b000
 8002a9c:	3b5bcf0f 	.word	0x3b5bcf0f
 8002aa0:	43889333 	.word	0x43889333

08002aa4 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2100      	movs	r1, #0
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f7fe fec3 	bl	800183c <LTC_ADCV>
	LTC_POLLADC();
 8002ab6:	f7fe ff47 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 8002aba:	f7fe fc65 	bl	8001388 <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fc9e 	bl	8001400 <Read_Cell_Volt>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <Read_Temp+0x88>)
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2008      	movs	r0, #8
 8002aec:	f7fe fd40 	bl	8001570 <LTC_WRCOMM>
	Wakeup_Idle();
 8002af0:	f7fe fc4a 	bl	8001388 <Wakeup_Idle>
	LTC_STCOMM(2);
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7fe fda9 	bl	800164c <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 8002afa:	f7fe fc45 	bl	8001388 <Wakeup_Idle>
	LTC_ADAX(MD_FAST, 1); //doing GPIO all conversion
 8002afe:	2101      	movs	r1, #1
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7fe fee1 	bl	80018c8 <LTC_ADAX>
	LTC_POLLADC();
 8002b06:	f7fe ff1f 	bl	8001948 <LTC_POLLADC>
	Wakeup_Idle();
 8002b0a:	f7fe fc3d 	bl	8001388 <Wakeup_Idle>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fddc 	bl	80016cc <Read_Cell_Temps>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	75fb      	strb	r3, [r7, #23]
 8002b1e:	e012      	b.n	8002b46 <Read_Temp+0x7a>
			//Wakeup_Idle();
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8002b20:	7dfa      	ldrb	r2, [r7, #23]
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002b34:	8abb      	ldrh	r3, [r7, #20]
 8002b36:	7bf9      	ldrb	r1, [r7, #15]
 8002b38:	7df8      	ldrb	r0, [r7, #23]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f7ff ff1e 	bl	800297c <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	3301      	adds	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b07      	cmp	r3, #7
 8002b4a:	d9e9      	bls.n	8002b20 <Read_Temp+0x54>

		}
	}
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000000c 	.word	0x2000000c

08002b58 <Cell_Summary_Voltage>:
#define CELL_VOLT_IMBALANCE_FAULT   2000 //0.1 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.05 V

void Cell_Summary_Voltage(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states, uint8_t *low_volt_hysteresis,
		uint8_t *high_volt_hysteresis, uint8_t *cell_imbalance_hysteresis) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
	batt->cell_volt_highest = batt->cell_volt[0];
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	881a      	ldrh	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

	for (int i = 1; i < NUM_CELLS; i++) {
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e11a      	b.n	8002db6 <Cell_Summary_Voltage+0x25e>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d93a      	bls.n	8002c08 <Cell_Summary_Voltage+0xb0>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

			if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002ba6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d906      	bls.n	8002bbc <Cell_Summary_Voltage+0x64>
					*warnings |= 0b00010000;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	701a      	strb	r2, [r3, #0]
				}

			//high cell volt fault
				if ((batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002bc2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d910      	bls.n	8002bec <Cell_Summary_Voltage+0x94>
						&& ((*high_volt_hysteresis) > 0)) {
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <Cell_Summary_Voltage+0x94>
					*fault |= 0b00010000;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f043 0310 	orr.w	r3, r3, #16
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	2102      	movs	r1, #2
 8002be4:	4878      	ldr	r0, [pc, #480]	@ (8002dc8 <Cell_Summary_Voltage+0x270>)
 8002be6:	f002 fa69 	bl	80050bc <HAL_GPIO_WritePin>
 8002bea:	e00d      	b.n	8002c08 <Cell_Summary_Voltage+0xb0>
				} else if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002bf2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d903      	bls.n	8002c02 <Cell_Summary_Voltage+0xaa>
					*high_volt_hysteresis = 1;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e002      	b.n	8002c08 <Cell_Summary_Voltage+0xb0>
				} else {
					*high_volt_hysteresis = 0;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
				}
				//end of high cell volt fault
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d23a      	bcs.n	8002c90 <Cell_Summary_Voltage+0x138>
			batt->cell_volt_lowest = batt->cell_volt[i];
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

			if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002c2e:	f646 1278 	movw	r2, #27000	@ 0x6978
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d806      	bhi.n	8002c44 <Cell_Summary_Voltage+0xec>
								*warnings |= 0b00100000;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	701a      	strb	r2, [r3, #0]
							}

			//low cell volt fault
			if ((batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002c4a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d810      	bhi.n	8002c74 <Cell_Summary_Voltage+0x11c>
					&& ((*low_volt_hysteresis) > 0)) {
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <Cell_Summary_Voltage+0x11c>
				*fault |= 0b00100000;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4856      	ldr	r0, [pc, #344]	@ (8002dc8 <Cell_Summary_Voltage+0x270>)
 8002c6e:	f002 fa25 	bl	80050bc <HAL_GPIO_WritePin>
 8002c72:	e00d      	b.n	8002c90 <Cell_Summary_Voltage+0x138>
			} else if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002c7a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d803      	bhi.n	8002c8a <Cell_Summary_Voltage+0x132>
				*low_volt_hysteresis = 1;
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e002      	b.n	8002c90 <Cell_Summary_Voltage+0x138>
			} else {
				*low_volt_hysteresis = 0;
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
			//end of low cell volt fault

		}

		//cell volt imbalance fault
		if (((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ca4:	db10      	blt.n	8002cc8 <Cell_Summary_Voltage+0x170>
				>= CELL_VOLT_IMBALANCE_FAULT) && ((*cell_imbalance_hysteresis) > 0)) {
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <Cell_Summary_Voltage+0x170>
				*fault |= 0b00000100;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4841      	ldr	r0, [pc, #260]	@ (8002dc8 <Cell_Summary_Voltage+0x270>)
 8002cc2:	f002 f9fb 	bl	80050bc <HAL_GPIO_WritePin>
 8002cc6:	e011      	b.n	8002cec <Cell_Summary_Voltage+0x194>
			} else if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002cdc:	db03      	blt.n	8002ce6 <Cell_Summary_Voltage+0x18e>
					>= CELL_VOLT_IMBALANCE_FAULT) {
				*cell_imbalance_hysteresis = 1;
 8002cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e002      	b.n	8002cec <Cell_Summary_Voltage+0x194>
			} else {
				*cell_imbalance_hysteresis = 0;
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
			}
			//end of cell volt imbalance fault

			if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d00:	db06      	blt.n	8002d10 <Cell_Summary_Voltage+0x1b8>
					>= CELL_VOLT_IMBALANCE_WARNING) {
				*warnings |= 0b00000010;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	701a      	strb	r2, [r3, #0]
//		}
//
//		if (sum_voltage - batt->pack_voltage ){

//		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_WARNING) {
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002d16:	4a2d      	ldr	r2, [pc, #180]	@ (8002dcc <Cell_Summary_Voltage+0x274>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d906      	bls.n	8002d2a <Cell_Summary_Voltage+0x1d2>
			*warnings |= 0b10000000;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002d30:	4a27      	ldr	r2, [pc, #156]	@ (8002dd0 <Cell_Summary_Voltage+0x278>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d806      	bhi.n	8002d44 <Cell_Summary_Voltage+0x1ec>
			*warnings |= 0b01000000;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	701a      	strb	r2, [r3, #0]
		}
		if (batt->pack_voltage >= PACK_HIGH_VOLT_FAULT) {
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002d4a:	4a22      	ldr	r2, [pc, #136]	@ (8002dd4 <Cell_Summary_Voltage+0x27c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d90b      	bls.n	8002d68 <Cell_Summary_Voltage+0x210>
			*fault |= 0b10000000;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2102      	movs	r1, #2
 8002d62:	4819      	ldr	r0, [pc, #100]	@ (8002dc8 <Cell_Summary_Voltage+0x270>)
 8002d64:	f002 f9aa 	bl	80050bc <HAL_GPIO_WritePin>
		}
		if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd8 <Cell_Summary_Voltage+0x280>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d80b      	bhi.n	8002d8c <Cell_Summary_Voltage+0x234>
			*fault |= 0b01000000;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	2102      	movs	r1, #2
 8002d86:	4810      	ldr	r0, [pc, #64]	@ (8002dc8 <Cell_Summary_Voltage+0x270>)
 8002d88:	f002 f998 	bl	80050bc <HAL_GPIO_WritePin>
		}


		if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002da0:	db06      	blt.n	8002db0 <Cell_Summary_Voltage+0x258>
				>= CELL_VOLT_IMBALANCE_WARNING) {
			*warnings |= 0b00000010;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < NUM_CELLS; i++) {
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b5f      	cmp	r3, #95	@ 0x5f
 8002dba:	f77f aee1 	ble.w	8002b80 <Cell_Summary_Voltage+0x28>
		}
		if (BALANCE) {
			*states |= 0b10000000;
		}
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40010c00 	.word	0x40010c00
 8002dcc:	003e5507 	.word	0x003e5507
 8002dd0:	002dc6c0 	.word	0x002dc6c0
 8002dd4:	003e8f9f 	.word	0x003e8f9f
 8002dd8:	002bf200 	.word	0x002bf200

08002ddc <Cell_Summary_Temperature>:

void Cell_Summary_Temperature(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e04f      	b.n	8002ea6 <Cell_Summary_Temperature+0xca>

		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8b3 2196 	ldrh.w	r2, [r3, #406]	@ 0x196
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	3160      	adds	r1, #96	@ 0x60
 8002e12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d224      	bcs.n	8002e64 <Cell_Summary_Temperature+0x88>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	3260      	adds	r2, #96	@ 0x60
 8002e20:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
			//highest cell temp warning
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002e30:	2b36      	cmp	r3, #54	@ 0x36
 8002e32:	d906      	bls.n	8002e42 <Cell_Summary_Temperature+0x66>
					*warnings |= 0b00001000;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	701a      	strb	r2, [r3, #0]
				}
			//highest cell temp fault
			if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8002e48:	2b3b      	cmp	r3, #59	@ 0x3b
 8002e4a:	d90b      	bls.n	8002e64 <Cell_Summary_Temperature+0x88>
					*fault |= 0b00001000;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MCU_SHUTDOWN_SIGNAL_GPIO_Port, MCU_SHUTDOWN_SIGNAL_Pin, GPIO_PIN_SET);
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	4816      	ldr	r0, [pc, #88]	@ (8002eb8 <Cell_Summary_Temperature+0xdc>)
 8002e60:	f002 f92c 	bl	80050bc <HAL_GPIO_WritePin>
				}
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8b3 2194 	ldrh.w	r2, [r3, #404]	@ 0x194
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	3160      	adds	r1, #96	@ 0x60
 8002e70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d913      	bls.n	8002ea0 <Cell_Summary_Temperature+0xc4>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	3260      	adds	r2, #96	@ 0x60
 8002e7e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

			if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <Cell_Summary_Temperature+0xc4>
					*warnings |= 0b00000100;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b5f      	cmp	r3, #95	@ 0x5f
 8002eaa:	ddac      	ble.n	8002e06 <Cell_Summary_Temperature+0x2a>
				}
		}
	}
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40010c00 	.word	0x40010c00

08002ebc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ec2:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <MX_SPI1_Init+0x68>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ec8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002eee:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ef0:	2228      	movs	r2, #40	@ 0x28
 8002ef2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002f08:	220a      	movs	r2, #10
 8002f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f0c:	4804      	ldr	r0, [pc, #16]	@ (8002f20 <MX_SPI1_Init+0x64>)
 8002f0e:	f003 f897 	bl	8006040 <HAL_SPI_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f18:	f7ff fd2a 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200001b8 	.word	0x200001b8
 8002f24:	40013000 	.word	0x40013000

08002f28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <HAL_SPI_MspInit+0x98>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d137      	bne.n	8002fb8 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f48:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_SPI_MspInit+0x9c>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc4 <HAL_SPI_MspInit+0x9c>)
 8002f4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f52:	6193      	str	r3, [r2, #24]
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_SPI_MspInit+0x9c>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <HAL_SPI_MspInit+0x9c>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a17      	ldr	r2, [pc, #92]	@ (8002fc4 <HAL_SPI_MspInit+0x9c>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_SPI_MspInit+0x9c>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f78:	23a0      	movs	r3, #160	@ 0xa0
 8002f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480f      	ldr	r0, [pc, #60]	@ (8002fc8 <HAL_SPI_MspInit+0xa0>)
 8002f8c:	f001 ff12 	bl	8004db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f90:	2340      	movs	r3, #64	@ 0x40
 8002f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4809      	ldr	r0, [pc, #36]	@ (8002fc8 <HAL_SPI_MspInit+0xa0>)
 8002fa4:	f001 ff06 	bl	8004db4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2023      	movs	r0, #35	@ 0x23
 8002fae:	f001 fd10 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002fb2:	2023      	movs	r0, #35	@ 0x23
 8002fb4:	f001 fd29 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40013000 	.word	0x40013000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010800 	.word	0x40010800

08002fcc <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2110      	movs	r1, #16
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <LTC_nCS_High+0x14>)
 8002fd6:	f002 f871 	bl	80050bc <HAL_GPIO_WritePin>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40010800 	.word	0x40010800

08002fe4 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2110      	movs	r1, #16
 8002fec:	4802      	ldr	r0, [pc, #8]	@ (8002ff8 <LTC_nCS_Low+0x14>)
 8002fee:	f002 f865 	bl	80050bc <HAL_GPIO_WritePin>
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40010800 	.word	0x40010800

08002ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003002:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <HAL_MspInit+0x5c>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <HAL_MspInit+0x5c>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6193      	str	r3, [r2, #24]
 800300e:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <HAL_MspInit+0x5c>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <HAL_MspInit+0x5c>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a0e      	ldr	r2, [pc, #56]	@ (8003058 <HAL_MspInit+0x5c>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003024:	61d3      	str	r3, [r2, #28]
 8003026:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <HAL_MspInit+0x5c>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_MspInit+0x60>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	4a04      	ldr	r2, [pc, #16]	@ (800305c <HAL_MspInit+0x60>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40021000 	.word	0x40021000
 800305c:	40010000 	.word	0x40010000

08003060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <NMI_Handler+0x4>

08003068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <MemManage_Handler+0x4>

08003078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <BusFault_Handler+0x4>

08003080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <UsageFault_Handler+0x4>

08003088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b0:	f000 f9e6 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030bc:	4803      	ldr	r0, [pc, #12]	@ (80030cc <ADC1_2_IRQHandler+0x14>)
 80030be:	f000 fce3 	bl	8003a88 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80030c2:	4803      	ldr	r0, [pc, #12]	@ (80030d0 <ADC1_2_IRQHandler+0x18>)
 80030c4:	f000 fce0 	bl	8003a88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000128 	.word	0x20000128
 80030d0:	20000158 	.word	0x20000158

080030d4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80030d8:	4802      	ldr	r0, [pc, #8]	@ (80030e4 <CAN1_TX_IRQHandler+0x10>)
 80030da:	f001 f976 	bl	80043ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000188 	.word	0x20000188

080030e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80030ec:	4802      	ldr	r0, [pc, #8]	@ (80030f8 <CAN1_RX0_IRQHandler+0x10>)
 80030ee:	f001 f96c 	bl	80043ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000188 	.word	0x20000188

080030fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003100:	4802      	ldr	r0, [pc, #8]	@ (800310c <CAN1_RX1_IRQHandler+0x10>)
 8003102:	f001 f962 	bl	80043ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000188 	.word	0x20000188

08003110 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <CAN1_SCE_IRQHandler+0x10>)
 8003116:	f001 f958 	bl	80043ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000188 	.word	0x20000188

08003124 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <SPI1_IRQHandler+0x10>)
 800312a:	f003 fc13 	bl	8006954 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200001b8 	.word	0x200001b8

08003138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <USART1_IRQHandler+0x10>)
 800313e:	f003 ff8d 	bl	800705c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000258 	.word	0x20000258

0800314c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800315e:	463b      	mov	r3, r7
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003166:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <MX_TIM7_Init+0x64>)
 8003168:	4a15      	ldr	r2, [pc, #84]	@ (80031c0 <MX_TIM7_Init+0x68>)
 800316a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <MX_TIM7_Init+0x64>)
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <MX_TIM7_Init+0x64>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003178:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <MX_TIM7_Init+0x64>)
 800317a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800317e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <MX_TIM7_Init+0x64>)
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003186:	480d      	ldr	r0, [pc, #52]	@ (80031bc <MX_TIM7_Init+0x64>)
 8003188:	f003 fdeb 	bl	8006d62 <HAL_TIM_Base_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003192:	f7ff fbed 	bl	8002970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800319e:	463b      	mov	r3, r7
 80031a0:	4619      	mov	r1, r3
 80031a2:	4806      	ldr	r0, [pc, #24]	@ (80031bc <MX_TIM7_Init+0x64>)
 80031a4:	f003 fea4 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80031ae:	f7ff fbdf 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000210 	.word	0x20000210
 80031c0:	40001400 	.word	0x40001400

080031c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a09      	ldr	r2, [pc, #36]	@ (80031f8 <HAL_TIM_Base_MspInit+0x34>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10b      	bne.n	80031ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_TIM_Base_MspInit+0x38>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4a08      	ldr	r2, [pc, #32]	@ (80031fc <HAL_TIM_Base_MspInit+0x38>)
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	61d3      	str	r3, [r2, #28]
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_TIM_Base_MspInit+0x38>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	40001400 	.word	0x40001400
 80031fc:	40021000 	.word	0x40021000

08003200 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003204:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 8003206:	4a11      	ldr	r2, [pc, #68]	@ (800324c <MX_USART1_UART_Init+0x4c>)
 8003208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 800320c:	4a10      	ldr	r2, [pc, #64]	@ (8003250 <MX_USART1_UART_Init+0x50>)
 800320e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 8003218:	2200      	movs	r2, #0
 800321a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 8003224:	220c      	movs	r2, #12
 8003226:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 8003230:	2200      	movs	r2, #0
 8003232:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_USART1_UART_Init+0x48>)
 8003236:	f003 fec1 	bl	8006fbc <HAL_UART_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003240:	f7ff fb96 	bl	8002970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000258 	.word	0x20000258
 800324c:	40013800 	.word	0x40013800
 8003250:	0003d090 	.word	0x0003d090

08003254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0310 	add.w	r3, r7, #16
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a47      	ldr	r2, [pc, #284]	@ (800338c <HAL_UART_MspInit+0x138>)
 8003270:	4293      	cmp	r3, r2
 8003272:	f040 8086 	bne.w	8003382 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003276:	4b46      	ldr	r3, [pc, #280]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	4a45      	ldr	r2, [pc, #276]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003280:	6193      	str	r3, [r2, #24]
 8003282:	4b43      	ldr	r3, [pc, #268]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	4b40      	ldr	r3, [pc, #256]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4a3f      	ldr	r2, [pc, #252]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	6193      	str	r3, [r2, #24]
 800329a:	4b3d      	ldr	r3, [pc, #244]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	4619      	mov	r1, r3
 80032ba:	4836      	ldr	r0, [pc, #216]	@ (8003394 <HAL_UART_MspInit+0x140>)
 80032bc:	f001 fd7a 	bl	8004db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4619      	mov	r1, r3
 80032d4:	482f      	ldr	r0, [pc, #188]	@ (8003394 <HAL_UART_MspInit+0x140>)
 80032d6:	f001 fd6d 	bl	8004db4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80032da:	4b2f      	ldr	r3, [pc, #188]	@ (8003398 <HAL_UART_MspInit+0x144>)
 80032dc:	4a2f      	ldr	r2, [pc, #188]	@ (800339c <HAL_UART_MspInit+0x148>)
 80032de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <HAL_UART_MspInit+0x144>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003398 <HAL_UART_MspInit+0x144>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003398 <HAL_UART_MspInit+0x144>)
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f2:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <HAL_UART_MspInit+0x144>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f8:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <HAL_UART_MspInit+0x144>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80032fe:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <HAL_UART_MspInit+0x144>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003304:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <HAL_UART_MspInit+0x144>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800330a:	4823      	ldr	r0, [pc, #140]	@ (8003398 <HAL_UART_MspInit+0x144>)
 800330c:	f001 fb98 	bl	8004a40 <HAL_DMA_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003316:	f7ff fb2b 	bl	8002970 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <HAL_UART_MspInit+0x144>)
 800331e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_UART_MspInit+0x144>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003326:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 8003328:	4a1e      	ldr	r2, [pc, #120]	@ (80033a4 <HAL_UART_MspInit+0x150>)
 800332a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800332c:	4b1c      	ldr	r3, [pc, #112]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 800332e:	2210      	movs	r2, #16
 8003330:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003332:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 800333a:	2280      	movs	r2, #128	@ 0x80
 800333c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800333e:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003344:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003350:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003356:	4812      	ldr	r0, [pc, #72]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 8003358:	f001 fb72 	bl	8004a40 <HAL_DMA_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003362:	f7ff fb05 	bl	8002970 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a0d      	ldr	r2, [pc, #52]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
 800336c:	4a0c      	ldr	r2, [pc, #48]	@ (80033a0 <HAL_UART_MspInit+0x14c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2103      	movs	r1, #3
 8003376:	2025      	movs	r0, #37	@ 0x25
 8003378:	f001 fb2b 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800337c:	2025      	movs	r0, #37	@ 0x25
 800337e:	f001 fb44 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003382:	bf00      	nop
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40013800 	.word	0x40013800
 8003390:	40021000 	.word	0x40021000
 8003394:	40010800 	.word	0x40010800
 8003398:	200002a0 	.word	0x200002a0
 800339c:	40020058 	.word	0x40020058
 80033a0:	200002e4 	.word	0x200002e4
 80033a4:	40020044 	.word	0x40020044

080033a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033a8:	f7ff fed0 	bl	800314c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033ac:	480b      	ldr	r0, [pc, #44]	@ (80033dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033ae:	490c      	ldr	r1, [pc, #48]	@ (80033e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033b0:	4a0c      	ldr	r2, [pc, #48]	@ (80033e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033c4:	4c09      	ldr	r4, [pc, #36]	@ (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033d2:	f004 fb33 	bl	8007a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033d6:	f7ff f865 	bl	80024a4 <main>
  bx lr
 80033da:	4770      	bx	lr
  ldr r0, =_sdata
 80033dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80033e4:	08008304 	.word	0x08008304
  ldr r2, =_sbss
 80033e8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80033ec:	20000464 	.word	0x20000464

080033f0 <CAN2_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033f0:	e7fe      	b.n	80033f0 <CAN2_RX0_IRQHandler>
	...

080033f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	@ (800341c <HAL_Init+0x28>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	@ (800341c <HAL_Init+0x28>)
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f001 fad9 	bl	80049bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	200f      	movs	r0, #15
 800340c:	f000 f808 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7ff fdf4 	bl	8002ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40022000 	.word	0x40022000

08003420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003428:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <HAL_InitTick+0x54>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	@ (8003478 <HAL_InitTick+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f001 faf1 	bl	8004a26 <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d80a      	bhi.n	800346a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f001 fab9 	bl	80049d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4a06      	ldr	r2, [pc, #24]	@ (800347c <HAL_InitTick+0x5c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000006c 	.word	0x2000006c
 8003478:	20000074 	.word	0x20000074
 800347c:	20000070 	.word	0x20000070

08003480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b05      	ldr	r3, [pc, #20]	@ (800349c <HAL_IncTick+0x1c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_IncTick+0x20>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <HAL_IncTick+0x20>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	20000074 	.word	0x20000074
 80034a0:	20000328 	.word	0x20000328

080034a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return uwTick;
 80034a8:	4b02      	ldr	r3, [pc, #8]	@ (80034b4 <HAL_GetTick+0x10>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	20000328 	.word	0x20000328

080034b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d005      	beq.n	80034de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034d2:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <HAL_Delay+0x44>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034de:	bf00      	nop
 80034e0:	f7ff ffe0 	bl	80034a4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d8f7      	bhi.n	80034e0 <HAL_Delay+0x28>
  {
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000074 	.word	0x20000074

08003500 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0be      	b.n	80036a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe faf6 	bl	8001b30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fcc3 	bl	8003ed0 <ADC_ConversionStop_Disable>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8099 	bne.w	800368e <HAL_ADC_Init+0x18e>
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 8095 	bne.w	800368e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800356c:	f023 0302 	bic.w	r3, r3, #2
 8003570:	f043 0202 	orr.w	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003580:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7b1b      	ldrb	r3, [r3, #12]
 8003586:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003588:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4313      	orrs	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d003      	beq.n	80035a2 <HAL_ADC_Init+0xa2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <HAL_ADC_Init+0xa8>
 80035a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a6:	e000      	b.n	80035aa <HAL_ADC_Init+0xaa>
 80035a8:	2300      	movs	r3, #0
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7d1b      	ldrb	r3, [r3, #20]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d119      	bne.n	80035ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7b1b      	ldrb	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	035a      	lsls	r2, r3, #13
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	e00b      	b.n	80035ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <HAL_ADC_Init+0x1a8>)
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	430b      	orrs	r3, r1
 8003612:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800361c:	d003      	beq.n	8003626 <HAL_ADC_Init+0x126>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d104      	bne.n	8003630 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	3b01      	subs	r3, #1
 800362c:	051b      	lsls	r3, r3, #20
 800362e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	430a      	orrs	r2, r1
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <HAL_ADC_Init+0x1ac>)
 800364c:	4013      	ands	r3, r2
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d10b      	bne.n	800366c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800366a:	e018      	b.n	800369e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f023 0312 	bic.w	r3, r3, #18
 8003674:	f043 0210 	orr.w	r2, r3, #16
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800368c:	e007      	b.n	800369e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	ffe1f7fd 	.word	0xffe1f7fd
 80036ac:	ff1f0efe 	.word	0xff1f0efe

080036b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_Start+0x1a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e098      	b.n	80037fc <HAL_ADC_Start+0x14c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fba2 	bl	8003e1c <ADC_Enable>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 8087 	bne.w	80037f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a41      	ldr	r2, [pc, #260]	@ (8003804 <HAL_ADC_Start+0x154>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d105      	bne.n	800370e <HAL_ADC_Start+0x5e>
 8003702:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <HAL_ADC_Start+0x158>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d115      	bne.n	800373a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d026      	beq.n	8003776 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003730:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003738:	e01d      	b.n	8003776 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2f      	ldr	r2, [pc, #188]	@ (8003808 <HAL_ADC_Start+0x158>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_ADC_Start+0xaa>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2b      	ldr	r2, [pc, #172]	@ (8003804 <HAL_ADC_Start+0x154>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10d      	bne.n	8003776 <HAL_ADC_Start+0xc6>
 800375a:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <HAL_ADC_Start+0x158>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800376e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	f023 0206 	bic.w	r2, r3, #6
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800378e:	e002      	b.n	8003796 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f06f 0202 	mvn.w	r2, #2
 80037a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80037b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80037b6:	d113      	bne.n	80037e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037bc:	4a11      	ldr	r2, [pc, #68]	@ (8003804 <HAL_ADC_Start+0x154>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d105      	bne.n	80037ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037c2:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <HAL_ADC_Start+0x158>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	e00c      	b.n	80037fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	e003      	b.n	80037fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40012800 	.word	0x40012800
 8003808:	40012400 	.word	0x40012400

0800380c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_ADC_Stop+0x1a>
 8003822:	2302      	movs	r3, #2
 8003824:	e01a      	b.n	800385c <HAL_ADC_Stop+0x50>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb4e 	bl	8003ed0 <ADC_ConversionStop_Disable>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800387a:	f7ff fe13 	bl	80034a4 <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0d3      	b.n	8003a4e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d131      	bne.n	8003918 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12a      	bne.n	8003918 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80038c2:	e021      	b.n	8003908 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d01d      	beq.n	8003908 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_ADC_PollForConversion+0x7e>
 80038d2:	f7ff fde7 	bl	80034a4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d212      	bcs.n	8003908 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e0a2      	b.n	8003a4e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0d6      	beq.n	80038c4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003916:	e070      	b.n	80039fa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003918:	4b4f      	ldr	r3, [pc, #316]	@ (8003a58 <HAL_ADC_PollForConversion+0x1f4>)
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	2002      	movs	r0, #2
 800391e:	f002 fa3d 	bl	8005d9c <HAL_RCCEx_GetPeriphCLKFreq>
 8003922:	4603      	mov	r3, r0
 8003924:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6919      	ldr	r1, [r3, #16]
 800392e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a5c <HAL_ADC_PollForConversion+0x1f8>)
 8003930:	400b      	ands	r3, r1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_ADC_PollForConversion+0x104>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68d9      	ldr	r1, [r3, #12]
 800393c:	4b48      	ldr	r3, [pc, #288]	@ (8003a60 <HAL_ADC_PollForConversion+0x1fc>)
 800393e:	400b      	ands	r3, r1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <HAL_ADC_PollForConversion+0x104>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6919      	ldr	r1, [r3, #16]
 800394a:	4b46      	ldr	r3, [pc, #280]	@ (8003a64 <HAL_ADC_PollForConversion+0x200>)
 800394c:	400b      	ands	r3, r1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_ADC_PollForConversion+0x100>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68d9      	ldr	r1, [r3, #12]
 8003958:	4b43      	ldr	r3, [pc, #268]	@ (8003a68 <HAL_ADC_PollForConversion+0x204>)
 800395a:	400b      	ands	r3, r1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_ADC_PollForConversion+0x100>
 8003960:	2314      	movs	r3, #20
 8003962:	e020      	b.n	80039a6 <HAL_ADC_PollForConversion+0x142>
 8003964:	2329      	movs	r3, #41	@ 0x29
 8003966:	e01e      	b.n	80039a6 <HAL_ADC_PollForConversion+0x142>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6919      	ldr	r1, [r3, #16]
 800396e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a64 <HAL_ADC_PollForConversion+0x200>)
 8003970:	400b      	ands	r3, r1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_ADC_PollForConversion+0x120>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68d9      	ldr	r1, [r3, #12]
 800397c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a68 <HAL_ADC_PollForConversion+0x204>)
 800397e:	400b      	ands	r3, r1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_ADC_PollForConversion+0x13c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6919      	ldr	r1, [r3, #16]
 800398a:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <HAL_ADC_PollForConversion+0x208>)
 800398c:	400b      	ands	r3, r1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d108      	bne.n	80039a4 <HAL_ADC_PollForConversion+0x140>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68d9      	ldr	r1, [r3, #12]
 8003998:	4b34      	ldr	r3, [pc, #208]	@ (8003a6c <HAL_ADC_PollForConversion+0x208>)
 800399a:	400b      	ands	r3, r1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_PollForConversion+0x140>
 80039a0:	2354      	movs	r3, #84	@ 0x54
 80039a2:	e000      	b.n	80039a6 <HAL_ADC_PollForConversion+0x142>
 80039a4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80039ac:	e021      	b.n	80039f2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d01a      	beq.n	80039ec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_ADC_PollForConversion+0x168>
 80039bc:	f7ff fd72 	bl	80034a4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d20f      	bcs.n	80039ec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d90b      	bls.n	80039ec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e030      	b.n	8003a4e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d8d9      	bhi.n	80039ae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0212 	mvn.w	r2, #18
 8003a02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003a1a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a1e:	d115      	bne.n	8003a4c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	2000006c 	.word	0x2000006c
 8003a5c:	24924924 	.word	0x24924924
 8003a60:	00924924 	.word	0x00924924
 8003a64:	12492492 	.word	0x12492492
 8003a68:	00492492 	.word	0x00492492
 8003a6c:	00249249 	.word	0x00249249

08003a70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d03e      	beq.n	8003b28 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d039      	beq.n	8003b28 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003ad6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ada:	d11d      	bne.n	8003b18 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d119      	bne.n	8003b18 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0220 	bic.w	r2, r2, #32
 8003af2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f874 	bl	8003c06 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0212 	mvn.w	r2, #18
 8003b26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04d      	beq.n	8003bce <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d048      	beq.n	8003bce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003b5e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003b62:	d012      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d125      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003b7c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003b80:	d11d      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d119      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b98:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9c7 	bl	8003f52 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 020c 	mvn.w	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d012      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f812 	bl	8003c18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x20>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0dc      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x1da>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d81c      	bhi.n	8003c96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3b05      	subs	r3, #5
 8003c6e:	221f      	movs	r2, #31
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	4019      	ands	r1, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	3b05      	subs	r3, #5
 8003c88:	fa00 f203 	lsl.w	r2, r0, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c94:	e03c      	b.n	8003d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	3b23      	subs	r3, #35	@ 0x23
 8003cb0:	221f      	movs	r2, #31
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	4019      	ands	r1, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b23      	subs	r3, #35	@ 0x23
 8003cca:	fa00 f203 	lsl.w	r2, r0, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cd6:	e01b      	b.n	8003d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3b41      	subs	r3, #65	@ 0x41
 8003cea:	221f      	movs	r2, #31
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	4019      	ands	r1, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	3b41      	subs	r3, #65	@ 0x41
 8003d04:	fa00 f203 	lsl.w	r2, r0, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	d91c      	bls.n	8003d52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68d9      	ldr	r1, [r3, #12]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	3b1e      	subs	r3, #30
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	4019      	ands	r1, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6898      	ldr	r0, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	3b1e      	subs	r3, #30
 8003d44:	fa00 f203 	lsl.w	r2, r0, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e019      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6919      	ldr	r1, [r3, #16]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	2207      	movs	r2, #7
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	4019      	ands	r1, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6898      	ldr	r0, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d003      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d92:	2b11      	cmp	r3, #17
 8003d94:	d132      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <HAL_ADC_ConfigChannel+0x1e4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d126      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003dbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d11a      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc6:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <HAL_ADC_ConfigChannel+0x1e8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a13      	ldr	r2, [pc, #76]	@ (8003e18 <HAL_ADC_ConfigChannel+0x1ec>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	0c9a      	lsrs	r2, r3, #18
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ddc:	e002      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f9      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x1b2>
 8003dea:	e007      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012400 	.word	0x40012400
 8003e14:	2000006c 	.word	0x2000006c
 8003e18:	431bde83 	.word	0x431bde83

08003e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d040      	beq.n	8003ebc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec8 <ADC_Enable+0xac>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <ADC_Enable+0xb0>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	0c9b      	lsrs	r3, r3, #18
 8003e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e58:	e002      	b.n	8003e60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f9      	bne.n	8003e5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e66:	f7ff fb1d 	bl	80034a4 <HAL_GetTick>
 8003e6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e6c:	e01f      	b.n	8003eae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e6e:	f7ff fb19 	bl	80034a4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d918      	bls.n	8003eae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d011      	beq.n	8003eae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	f043 0210 	orr.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e007      	b.n	8003ebe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d1d8      	bne.n	8003e6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000006c 	.word	0x2000006c
 8003ecc:	431bde83 	.word	0x431bde83

08003ed0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12e      	bne.n	8003f48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003efa:	f7ff fad3 	bl	80034a4 <HAL_GetTick>
 8003efe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f00:	e01b      	b.n	8003f3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f02:	f7ff facf 	bl	80034a4 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d914      	bls.n	8003f3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10d      	bne.n	8003f3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e007      	b.n	8003f4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d0dc      	beq.n	8003f02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0ed      	b.n	8004152 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd fe80 	bl	8001c88 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f98:	f7ff fa84 	bl	80034a4 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f9e:	e012      	b.n	8003fc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fa0:	f7ff fa80 	bl	80034a4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b0a      	cmp	r3, #10
 8003fac:	d90b      	bls.n	8003fc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0c5      	b.n	8004152 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0e5      	beq.n	8003fa0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0202 	bic.w	r2, r2, #2
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe4:	f7ff fa5e 	bl	80034a4 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fea:	e012      	b.n	8004012 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fec:	f7ff fa5a 	bl	80034a4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b0a      	cmp	r3, #10
 8003ff8:	d90b      	bls.n	8004012 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2205      	movs	r2, #5
 800400a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e09f      	b.n	8004152 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7e1b      	ldrb	r3, [r3, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d108      	bne.n	800403a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e007      	b.n	800404a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7e5b      	ldrb	r3, [r3, #25]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d108      	bne.n	8004064 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e007      	b.n	8004074 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004072:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7e9b      	ldrb	r3, [r3, #26]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0220 	orr.w	r2, r2, #32
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e007      	b.n	800409e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0220 	bic.w	r2, r2, #32
 800409c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7edb      	ldrb	r3, [r3, #27]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d108      	bne.n	80040b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0210 	bic.w	r2, r2, #16
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e007      	b.n	80040c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0210 	orr.w	r2, r2, #16
 80040c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7f1b      	ldrb	r3, [r3, #28]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d108      	bne.n	80040e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0208 	orr.w	r2, r2, #8
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e007      	b.n	80040f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0208 	bic.w	r2, r2, #8
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	7f5b      	ldrb	r3, [r3, #29]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0204 	orr.w	r2, r2, #4
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e007      	b.n	800411c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	1e5a      	subs	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d12e      	bne.n	80041cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004186:	f7ff f98d 	bl	80034a4 <HAL_GetTick>
 800418a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800418c:	e012      	b.n	80041b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800418e:	f7ff f989 	bl	80034a4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b0a      	cmp	r3, #10
 800419a:	d90b      	bls.n	80041b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2205      	movs	r2, #5
 80041ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e012      	b.n	80041da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e5      	bne.n	800418e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e006      	b.n	80041da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b089      	sub	sp, #36	@ 0x24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004200:	7ffb      	ldrb	r3, [r7, #31]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d003      	beq.n	800420e <HAL_CAN_AddTxMessage+0x2c>
 8004206:	7ffb      	ldrb	r3, [r7, #31]
 8004208:	2b02      	cmp	r3, #2
 800420a:	f040 80ad 	bne.w	8004368 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8095 	beq.w	8004358 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004238:	2201      	movs	r2, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	409a      	lsls	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	6809      	ldr	r1, [r1, #0]
 8004258:	431a      	orrs	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3318      	adds	r3, #24
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	440b      	add	r3, r1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e00f      	b.n	8004286 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004270:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800427a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3318      	adds	r3, #24
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	440b      	add	r3, r1
 8004284:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3318      	adds	r3, #24
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	440b      	add	r3, r1
 8004296:	3304      	adds	r3, #4
 8004298:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	7d1b      	ldrb	r3, [r3, #20]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d111      	bne.n	80042c6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	3318      	adds	r3, #24
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3318      	adds	r3, #24
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	440b      	add	r3, r1
 80042c2:	3304      	adds	r3, #4
 80042c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3307      	adds	r3, #7
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	061a      	lsls	r2, r3, #24
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3306      	adds	r3, #6
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3305      	adds	r3, #5
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	4313      	orrs	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	3204      	adds	r2, #4
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	4610      	mov	r0, r2
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	6811      	ldr	r1, [r2, #0]
 80042ee:	ea43 0200 	orr.w	r2, r3, r0
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	440b      	add	r3, r1
 80042f8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80042fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3303      	adds	r3, #3
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	061a      	lsls	r2, r3, #24
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3302      	adds	r3, #2
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3301      	adds	r3, #1
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	4313      	orrs	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	4610      	mov	r0, r2
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	6811      	ldr	r1, [r2, #0]
 8004324:	ea43 0200 	orr.w	r2, r3, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	440b      	add	r3, r1
 800432e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004332:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3318      	adds	r3, #24
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	4413      	add	r3, r2
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	f043 0201 	orr.w	r2, r3, #1
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3318      	adds	r3, #24
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	440b      	add	r3, r1
 8004352:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e00e      	b.n	8004376 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e006      	b.n	8004376 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	@ 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004390:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d002      	beq.n	800439e <HAL_CAN_ActivateNotification+0x1e>
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d109      	bne.n	80043b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6959      	ldr	r1, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e006      	b.n	80043c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b08a      	sub	sp, #40	@ 0x28
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d07c      	beq.n	800450a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d023      	beq.n	8004462 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2201      	movs	r2, #1
 8004420:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f983 	bl	8004738 <HAL_CAN_TxMailbox0CompleteCallback>
 8004432:	e016      	b.n	8004462 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
 8004446:	e00c      	b.n	8004462 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
 800445a:	e002      	b.n	8004462 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f986 	bl	800476e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d024      	beq.n	80044b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004474:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f962 	bl	800474a <HAL_CAN_TxMailbox1CompleteCallback>
 8004486:	e016      	b.n	80044b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
 800449a:	e00c      	b.n	80044b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ae:	e002      	b.n	80044b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f965 	bl	8004780 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d024      	beq.n	800450a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f941 	bl	800475c <HAL_CAN_TxMailbox2CompleteCallback>
 80044da:	e016      	b.n	800450a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ee:	e00c      	b.n	800450a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
 8004502:	e002      	b.n	800450a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f944 	bl	8004792 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00c      	beq.n	800452e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2210      	movs	r2, #16
 800452c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2208      	movs	r2, #8
 8004548:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f933 	bl	80047b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f91b 	bl	80047a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00c      	beq.n	8004592 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2208      	movs	r2, #8
 80045ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f913 	bl	80047da <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f8fb 	bl	80047c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8fc 	bl	80047ec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8f4 	bl	80047fe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d07b      	beq.n	8004718 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d072      	beq.n	8004710 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004684:	2b00      	cmp	r3, #0
 8004686:	d043      	beq.n	8004710 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03e      	beq.n	8004710 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004698:	2b60      	cmp	r3, #96	@ 0x60
 800469a:	d02b      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x32a>
 800469c:	2b60      	cmp	r3, #96	@ 0x60
 800469e:	d82e      	bhi.n	80046fe <HAL_CAN_IRQHandler+0x334>
 80046a0:	2b50      	cmp	r3, #80	@ 0x50
 80046a2:	d022      	beq.n	80046ea <HAL_CAN_IRQHandler+0x320>
 80046a4:	2b50      	cmp	r3, #80	@ 0x50
 80046a6:	d82a      	bhi.n	80046fe <HAL_CAN_IRQHandler+0x334>
 80046a8:	2b40      	cmp	r3, #64	@ 0x40
 80046aa:	d019      	beq.n	80046e0 <HAL_CAN_IRQHandler+0x316>
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d826      	bhi.n	80046fe <HAL_CAN_IRQHandler+0x334>
 80046b0:	2b30      	cmp	r3, #48	@ 0x30
 80046b2:	d010      	beq.n	80046d6 <HAL_CAN_IRQHandler+0x30c>
 80046b4:	2b30      	cmp	r3, #48	@ 0x30
 80046b6:	d822      	bhi.n	80046fe <HAL_CAN_IRQHandler+0x334>
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d002      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x2f8>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d005      	beq.n	80046cc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80046c0:	e01d      	b.n	80046fe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	f043 0308 	orr.w	r3, r3, #8
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046ca:	e019      	b.n	8004700 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	f043 0310 	orr.w	r3, r3, #16
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046d4:	e014      	b.n	8004700 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	f043 0320 	orr.w	r3, r3, #32
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046de:	e00f      	b.n	8004700 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046e8:	e00a      	b.n	8004700 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046f2:	e005      	b.n	8004700 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80046fc:	e000      	b.n	8004700 <HAL_CAN_IRQHandler+0x336>
            break;
 80046fe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800470e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2204      	movs	r2, #4
 8004716:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f870 	bl	8004810 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004730:	bf00      	nop
 8004732:	3728      	adds	r7, #40	@ 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
	...

08004824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800484c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004856:	4a04      	ldr	r2, [pc, #16]	@ (8004868 <__NVIC_SetPriorityGrouping+0x44>)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	60d3      	str	r3, [r2, #12]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004870:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <__NVIC_GetPriorityGrouping+0x18>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	f003 0307 	and.w	r3, r3, #7
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	db0b      	blt.n	80048b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4906      	ldr	r1, [pc, #24]	@ (80048bc <__NVIC_EnableIRQ+0x34>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2001      	movs	r0, #1
 80048aa:	fa00 f202 	lsl.w	r2, r0, r2
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	e000e100 	.word	0xe000e100

080048c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	6039      	str	r1, [r7, #0]
 80048ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db0a      	blt.n	80048ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	490c      	ldr	r1, [pc, #48]	@ (800490c <__NVIC_SetPriority+0x4c>)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	0112      	lsls	r2, r2, #4
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	440b      	add	r3, r1
 80048e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048e8:	e00a      	b.n	8004900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	4908      	ldr	r1, [pc, #32]	@ (8004910 <__NVIC_SetPriority+0x50>)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	3b04      	subs	r3, #4
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	761a      	strb	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e100 	.word	0xe000e100
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	@ 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f1c3 0307 	rsb	r3, r3, #7
 800492e:	2b04      	cmp	r3, #4
 8004930:	bf28      	it	cs
 8004932:	2304      	movcs	r3, #4
 8004934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3304      	adds	r3, #4
 800493a:	2b06      	cmp	r3, #6
 800493c:	d902      	bls.n	8004944 <NVIC_EncodePriority+0x30>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3b03      	subs	r3, #3
 8004942:	e000      	b.n	8004946 <NVIC_EncodePriority+0x32>
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	401a      	ands	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800495c:	f04f 31ff 	mov.w	r1, #4294967295
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa01 f303 	lsl.w	r3, r1, r3
 8004966:	43d9      	mvns	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	4313      	orrs	r3, r2
         );
}
 800496e:	4618      	mov	r0, r3
 8004970:	3724      	adds	r7, #36	@ 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004988:	d301      	bcc.n	800498e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800498a:	2301      	movs	r3, #1
 800498c:	e00f      	b.n	80049ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800498e:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <SysTick_Config+0x40>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3b01      	subs	r3, #1
 8004994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004996:	210f      	movs	r1, #15
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	f7ff ff90 	bl	80048c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <SysTick_Config+0x40>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049a6:	4b04      	ldr	r3, [pc, #16]	@ (80049b8 <SysTick_Config+0x40>)
 80049a8:	2207      	movs	r2, #7
 80049aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000e010 	.word	0xe000e010

080049bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff ff2d 	bl	8004824 <__NVIC_SetPriorityGrouping>
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049e4:	f7ff ff42 	bl	800486c <__NVIC_GetPriorityGrouping>
 80049e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7ff ff90 	bl	8004914 <NVIC_EncodePriority>
 80049f4:	4602      	mov	r2, r0
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff5f 	bl	80048c0 <__NVIC_SetPriority>
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	4603      	mov	r3, r0
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff35 	bl	8004888 <__NVIC_EnableIRQ>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ffa2 	bl	8004978 <SysTick_Config>
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e059      	b.n	8004b0a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <HAL_DMA_Init+0xd4>)
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d80f      	bhi.n	8004a82 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <HAL_DMA_Init+0xd8>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <HAL_DMA_Init+0xdc>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	009a      	lsls	r2, r3, #2
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a28      	ldr	r2, [pc, #160]	@ (8004b20 <HAL_DMA_Init+0xe0>)
 8004a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a80:	e00e      	b.n	8004aa0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b26      	ldr	r3, [pc, #152]	@ (8004b24 <HAL_DMA_Init+0xe4>)
 8004a8a:	4413      	add	r3, r2
 8004a8c:	4a23      	ldr	r2, [pc, #140]	@ (8004b1c <HAL_DMA_Init+0xdc>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	009a      	lsls	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a22      	ldr	r2, [pc, #136]	@ (8004b28 <HAL_DMA_Init+0xe8>)
 8004a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ab6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004aba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40020407 	.word	0x40020407
 8004b18:	bffdfff8 	.word	0xbffdfff8
 8004b1c:	cccccccd 	.word	0xcccccccd
 8004b20:	40020000 	.word	0x40020000
 8004b24:	bffdfbf8 	.word	0xbffdfbf8
 8004b28:	40020400 	.word	0x40020400

08004b2c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d008      	beq.n	8004b56 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e020      	b.n	8004b98 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 020e 	bic.w	r2, r2, #14
 8004b64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d005      	beq.n	8004bc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e0d6      	b.n	8004d76 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 020e 	bic.w	r2, r2, #14
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b64      	ldr	r3, [pc, #400]	@ (8004d80 <HAL_DMA_Abort_IT+0x1dc>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d958      	bls.n	8004ca6 <HAL_DMA_Abort_IT+0x102>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a62      	ldr	r2, [pc, #392]	@ (8004d84 <HAL_DMA_Abort_IT+0x1e0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d04f      	beq.n	8004c9e <HAL_DMA_Abort_IT+0xfa>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a61      	ldr	r2, [pc, #388]	@ (8004d88 <HAL_DMA_Abort_IT+0x1e4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d048      	beq.n	8004c9a <HAL_DMA_Abort_IT+0xf6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004d8c <HAL_DMA_Abort_IT+0x1e8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d040      	beq.n	8004c94 <HAL_DMA_Abort_IT+0xf0>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5e      	ldr	r2, [pc, #376]	@ (8004d90 <HAL_DMA_Abort_IT+0x1ec>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d038      	beq.n	8004c8e <HAL_DMA_Abort_IT+0xea>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a5c      	ldr	r2, [pc, #368]	@ (8004d94 <HAL_DMA_Abort_IT+0x1f0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d030      	beq.n	8004c88 <HAL_DMA_Abort_IT+0xe4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d98 <HAL_DMA_Abort_IT+0x1f4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d028      	beq.n	8004c82 <HAL_DMA_Abort_IT+0xde>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a52      	ldr	r2, [pc, #328]	@ (8004d80 <HAL_DMA_Abort_IT+0x1dc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d020      	beq.n	8004c7c <HAL_DMA_Abort_IT+0xd8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a57      	ldr	r2, [pc, #348]	@ (8004d9c <HAL_DMA_Abort_IT+0x1f8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d019      	beq.n	8004c78 <HAL_DMA_Abort_IT+0xd4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a55      	ldr	r2, [pc, #340]	@ (8004da0 <HAL_DMA_Abort_IT+0x1fc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d012      	beq.n	8004c74 <HAL_DMA_Abort_IT+0xd0>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a54      	ldr	r2, [pc, #336]	@ (8004da4 <HAL_DMA_Abort_IT+0x200>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00a      	beq.n	8004c6e <HAL_DMA_Abort_IT+0xca>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a52      	ldr	r2, [pc, #328]	@ (8004da8 <HAL_DMA_Abort_IT+0x204>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d102      	bne.n	8004c68 <HAL_DMA_Abort_IT+0xc4>
 8004c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c66:	e01b      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c6c:	e018      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c72:	e015      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c74:	2310      	movs	r3, #16
 8004c76:	e013      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e011      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c80:	e00e      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c86:	e00b      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c8c:	e008      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c92:	e005      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c98:	e002      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	e000      	b.n	8004ca0 <HAL_DMA_Abort_IT+0xfc>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4a42      	ldr	r2, [pc, #264]	@ (8004dac <HAL_DMA_Abort_IT+0x208>)
 8004ca2:	6053      	str	r3, [r2, #4]
 8004ca4:	e057      	b.n	8004d56 <HAL_DMA_Abort_IT+0x1b2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <HAL_DMA_Abort_IT+0x1e0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d04f      	beq.n	8004d50 <HAL_DMA_Abort_IT+0x1ac>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a34      	ldr	r2, [pc, #208]	@ (8004d88 <HAL_DMA_Abort_IT+0x1e4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d048      	beq.n	8004d4c <HAL_DMA_Abort_IT+0x1a8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a33      	ldr	r2, [pc, #204]	@ (8004d8c <HAL_DMA_Abort_IT+0x1e8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d040      	beq.n	8004d46 <HAL_DMA_Abort_IT+0x1a2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a31      	ldr	r2, [pc, #196]	@ (8004d90 <HAL_DMA_Abort_IT+0x1ec>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d038      	beq.n	8004d40 <HAL_DMA_Abort_IT+0x19c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a30      	ldr	r2, [pc, #192]	@ (8004d94 <HAL_DMA_Abort_IT+0x1f0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d030      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x196>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d98 <HAL_DMA_Abort_IT+0x1f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d028      	beq.n	8004d34 <HAL_DMA_Abort_IT+0x190>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a26      	ldr	r2, [pc, #152]	@ (8004d80 <HAL_DMA_Abort_IT+0x1dc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d020      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x18a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <HAL_DMA_Abort_IT+0x1f8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d019      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x186>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <HAL_DMA_Abort_IT+0x1fc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d012      	beq.n	8004d26 <HAL_DMA_Abort_IT+0x182>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <HAL_DMA_Abort_IT+0x200>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00a      	beq.n	8004d20 <HAL_DMA_Abort_IT+0x17c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a26      	ldr	r2, [pc, #152]	@ (8004da8 <HAL_DMA_Abort_IT+0x204>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d102      	bne.n	8004d1a <HAL_DMA_Abort_IT+0x176>
 8004d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d18:	e01b      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d1e:	e018      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d24:	e015      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d26:	2310      	movs	r3, #16
 8004d28:	e013      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e011      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d32:	e00e      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004d38:	e00b      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d3e:	e008      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d44:	e005      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d4a:	e002      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	e000      	b.n	8004d52 <HAL_DMA_Abort_IT+0x1ae>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <HAL_DMA_Abort_IT+0x20c>)
 8004d54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
    } 
  }
  return status;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40020080 	.word	0x40020080
 8004d84:	40020008 	.word	0x40020008
 8004d88:	4002001c 	.word	0x4002001c
 8004d8c:	40020030 	.word	0x40020030
 8004d90:	40020044 	.word	0x40020044
 8004d94:	40020058 	.word	0x40020058
 8004d98:	4002006c 	.word	0x4002006c
 8004d9c:	40020408 	.word	0x40020408
 8004da0:	4002041c 	.word	0x4002041c
 8004da4:	40020430 	.word	0x40020430
 8004da8:	40020444 	.word	0x40020444
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020000 	.word	0x40020000

08004db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b08b      	sub	sp, #44	@ 0x2c
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dc6:	e169      	b.n	800509c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004dc8:	2201      	movs	r2, #1
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	f040 8158 	bne.w	8005096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4a9a      	ldr	r2, [pc, #616]	@ (8005054 <HAL_GPIO_Init+0x2a0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d05e      	beq.n	8004eae <HAL_GPIO_Init+0xfa>
 8004df0:	4a98      	ldr	r2, [pc, #608]	@ (8005054 <HAL_GPIO_Init+0x2a0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d875      	bhi.n	8004ee2 <HAL_GPIO_Init+0x12e>
 8004df6:	4a98      	ldr	r2, [pc, #608]	@ (8005058 <HAL_GPIO_Init+0x2a4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d058      	beq.n	8004eae <HAL_GPIO_Init+0xfa>
 8004dfc:	4a96      	ldr	r2, [pc, #600]	@ (8005058 <HAL_GPIO_Init+0x2a4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d86f      	bhi.n	8004ee2 <HAL_GPIO_Init+0x12e>
 8004e02:	4a96      	ldr	r2, [pc, #600]	@ (800505c <HAL_GPIO_Init+0x2a8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d052      	beq.n	8004eae <HAL_GPIO_Init+0xfa>
 8004e08:	4a94      	ldr	r2, [pc, #592]	@ (800505c <HAL_GPIO_Init+0x2a8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d869      	bhi.n	8004ee2 <HAL_GPIO_Init+0x12e>
 8004e0e:	4a94      	ldr	r2, [pc, #592]	@ (8005060 <HAL_GPIO_Init+0x2ac>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d04c      	beq.n	8004eae <HAL_GPIO_Init+0xfa>
 8004e14:	4a92      	ldr	r2, [pc, #584]	@ (8005060 <HAL_GPIO_Init+0x2ac>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d863      	bhi.n	8004ee2 <HAL_GPIO_Init+0x12e>
 8004e1a:	4a92      	ldr	r2, [pc, #584]	@ (8005064 <HAL_GPIO_Init+0x2b0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d046      	beq.n	8004eae <HAL_GPIO_Init+0xfa>
 8004e20:	4a90      	ldr	r2, [pc, #576]	@ (8005064 <HAL_GPIO_Init+0x2b0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d85d      	bhi.n	8004ee2 <HAL_GPIO_Init+0x12e>
 8004e26:	2b12      	cmp	r3, #18
 8004e28:	d82a      	bhi.n	8004e80 <HAL_GPIO_Init+0xcc>
 8004e2a:	2b12      	cmp	r3, #18
 8004e2c:	d859      	bhi.n	8004ee2 <HAL_GPIO_Init+0x12e>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <HAL_GPIO_Init+0x80>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004eaf 	.word	0x08004eaf
 8004e38:	08004e89 	.word	0x08004e89
 8004e3c:	08004e9b 	.word	0x08004e9b
 8004e40:	08004edd 	.word	0x08004edd
 8004e44:	08004ee3 	.word	0x08004ee3
 8004e48:	08004ee3 	.word	0x08004ee3
 8004e4c:	08004ee3 	.word	0x08004ee3
 8004e50:	08004ee3 	.word	0x08004ee3
 8004e54:	08004ee3 	.word	0x08004ee3
 8004e58:	08004ee3 	.word	0x08004ee3
 8004e5c:	08004ee3 	.word	0x08004ee3
 8004e60:	08004ee3 	.word	0x08004ee3
 8004e64:	08004ee3 	.word	0x08004ee3
 8004e68:	08004ee3 	.word	0x08004ee3
 8004e6c:	08004ee3 	.word	0x08004ee3
 8004e70:	08004ee3 	.word	0x08004ee3
 8004e74:	08004ee3 	.word	0x08004ee3
 8004e78:	08004e91 	.word	0x08004e91
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	4a79      	ldr	r2, [pc, #484]	@ (8005068 <HAL_GPIO_Init+0x2b4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e86:	e02c      	b.n	8004ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	623b      	str	r3, [r7, #32]
          break;
 8004e8e:	e029      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	3304      	adds	r3, #4
 8004e96:	623b      	str	r3, [r7, #32]
          break;
 8004e98:	e024      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	623b      	str	r3, [r7, #32]
          break;
 8004ea2:	e01f      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	623b      	str	r3, [r7, #32]
          break;
 8004eac:	e01a      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	623b      	str	r3, [r7, #32]
          break;
 8004eba:	e013      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	611a      	str	r2, [r3, #16]
          break;
 8004ece:	e009      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	615a      	str	r2, [r3, #20]
          break;
 8004eda:	e003      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004edc:	2300      	movs	r3, #0
 8004ede:	623b      	str	r3, [r7, #32]
          break;
 8004ee0:	e000      	b.n	8004ee4 <HAL_GPIO_Init+0x130>
          break;
 8004ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2bff      	cmp	r3, #255	@ 0xff
 8004ee8:	d801      	bhi.n	8004eee <HAL_GPIO_Init+0x13a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	e001      	b.n	8004ef2 <HAL_GPIO_Init+0x13e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2bff      	cmp	r3, #255	@ 0xff
 8004ef8:	d802      	bhi.n	8004f00 <HAL_GPIO_Init+0x14c>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	e002      	b.n	8004f06 <HAL_GPIO_Init+0x152>
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	3b08      	subs	r3, #8
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	210f      	movs	r1, #15
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	401a      	ands	r2, r3
 8004f18:	6a39      	ldr	r1, [r7, #32]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	431a      	orrs	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 80b1 	beq.w	8005096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f34:	4b4d      	ldr	r3, [pc, #308]	@ (800506c <HAL_GPIO_Init+0x2b8>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	4a4c      	ldr	r2, [pc, #304]	@ (800506c <HAL_GPIO_Init+0x2b8>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6193      	str	r3, [r2, #24]
 8004f40:	4b4a      	ldr	r3, [pc, #296]	@ (800506c <HAL_GPIO_Init+0x2b8>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f4c:	4a48      	ldr	r2, [pc, #288]	@ (8005070 <HAL_GPIO_Init+0x2bc>)
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	3302      	adds	r3, #2
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	220f      	movs	r2, #15
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a40      	ldr	r2, [pc, #256]	@ (8005074 <HAL_GPIO_Init+0x2c0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_GPIO_Init+0x1ec>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005078 <HAL_GPIO_Init+0x2c4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00d      	beq.n	8004f9c <HAL_GPIO_Init+0x1e8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a3e      	ldr	r2, [pc, #248]	@ (800507c <HAL_GPIO_Init+0x2c8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <HAL_GPIO_Init+0x1e4>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8005080 <HAL_GPIO_Init+0x2cc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <HAL_GPIO_Init+0x1e0>
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <HAL_GPIO_Init+0x1ee>
 8004f94:	2304      	movs	r3, #4
 8004f96:	e004      	b.n	8004fa2 <HAL_GPIO_Init+0x1ee>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e002      	b.n	8004fa2 <HAL_GPIO_Init+0x1ee>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <HAL_GPIO_Init+0x1ee>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	f002 0203 	and.w	r2, r2, #3
 8004fa8:	0092      	lsls	r2, r2, #2
 8004faa:	4093      	lsls	r3, r2
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004fb2:	492f      	ldr	r1, [pc, #188]	@ (8005070 <HAL_GPIO_Init+0x2bc>)
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	3302      	adds	r3, #2
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d006      	beq.n	8004fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	492c      	ldr	r1, [pc, #176]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004fda:	4b2a      	ldr	r3, [pc, #168]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	4928      	ldr	r1, [pc, #160]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ff4:	4b23      	ldr	r3, [pc, #140]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	4922      	ldr	r1, [pc, #136]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60cb      	str	r3, [r1, #12]
 8005000:	e006      	b.n	8005010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005002:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	43db      	mvns	r3, r3
 800500a:	491e      	ldr	r1, [pc, #120]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 800500c:	4013      	ands	r3, r2
 800500e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d006      	beq.n	800502a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800501c:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	4918      	ldr	r1, [pc, #96]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
 8005028:	e006      	b.n	8005038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800502a:	4b16      	ldr	r3, [pc, #88]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	43db      	mvns	r3, r3
 8005032:	4914      	ldr	r1, [pc, #80]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8005034:	4013      	ands	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d021      	beq.n	8005088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005044:	4b0f      	ldr	r3, [pc, #60]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	490e      	ldr	r1, [pc, #56]	@ (8005084 <HAL_GPIO_Init+0x2d0>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]
 8005050:	e021      	b.n	8005096 <HAL_GPIO_Init+0x2e2>
 8005052:	bf00      	nop
 8005054:	10320000 	.word	0x10320000
 8005058:	10310000 	.word	0x10310000
 800505c:	10220000 	.word	0x10220000
 8005060:	10210000 	.word	0x10210000
 8005064:	10120000 	.word	0x10120000
 8005068:	10110000 	.word	0x10110000
 800506c:	40021000 	.word	0x40021000
 8005070:	40010000 	.word	0x40010000
 8005074:	40010800 	.word	0x40010800
 8005078:	40010c00 	.word	0x40010c00
 800507c:	40011000 	.word	0x40011000
 8005080:	40011400 	.word	0x40011400
 8005084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_GPIO_Init+0x304>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	43db      	mvns	r3, r3
 8005090:	4909      	ldr	r1, [pc, #36]	@ (80050b8 <HAL_GPIO_Init+0x304>)
 8005092:	4013      	ands	r3, r2
 8005094:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	3301      	adds	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f47f ae8e 	bne.w	8004dc8 <HAL_GPIO_Init+0x14>
  }
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	372c      	adds	r7, #44	@ 0x2c
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	40010400 	.word	0x40010400

080050bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	807b      	strh	r3, [r7, #2]
 80050c8:	4613      	mov	r3, r2
 80050ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050cc:	787b      	ldrb	r3, [r7, #1]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050d8:	e003      	b.n	80050e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050da:	887b      	ldrh	r3, [r7, #2]
 80050dc:	041a      	lsls	r2, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	611a      	str	r2, [r3, #16]
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4013      	ands	r3, r2
 8005104:	041a      	lsls	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	43d9      	mvns	r1, r3
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	400b      	ands	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	611a      	str	r2, [r3, #16]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
	...

08005120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e304      	b.n	800573c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8087 	beq.w	800524e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005140:	4b92      	ldr	r3, [pc, #584]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b04      	cmp	r3, #4
 800514a:	d00c      	beq.n	8005166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800514c:	4b8f      	ldr	r3, [pc, #572]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b08      	cmp	r3, #8
 8005156:	d112      	bne.n	800517e <HAL_RCC_OscConfig+0x5e>
 8005158:	4b8c      	ldr	r3, [pc, #560]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005164:	d10b      	bne.n	800517e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005166:	4b89      	ldr	r3, [pc, #548]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d06c      	beq.n	800524c <HAL_RCC_OscConfig+0x12c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d168      	bne.n	800524c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e2de      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x76>
 8005188:	4b80      	ldr	r3, [pc, #512]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a7f      	ldr	r2, [pc, #508]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 800518e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e02e      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x98>
 800519e:	4b7b      	ldr	r3, [pc, #492]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a7a      	ldr	r2, [pc, #488]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b78      	ldr	r3, [pc, #480]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a77      	ldr	r2, [pc, #476]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e01d      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0xbc>
 80051c2:	4b72      	ldr	r3, [pc, #456]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a71      	ldr	r2, [pc, #452]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b6f      	ldr	r3, [pc, #444]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a6e      	ldr	r2, [pc, #440]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e00b      	b.n	80051f4 <HAL_RCC_OscConfig+0xd4>
 80051dc:	4b6b      	ldr	r3, [pc, #428]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6a      	ldr	r2, [pc, #424]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b68      	ldr	r3, [pc, #416]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a67      	ldr	r2, [pc, #412]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80051ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fe f952 	bl	80034a4 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005204:	f7fe f94e 	bl	80034a4 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	@ 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e292      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b5d      	ldr	r3, [pc, #372]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0xe4>
 8005222:	e014      	b.n	800524e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fe f93e 	bl	80034a4 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800522c:	f7fe f93a 	bl	80034a4 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	@ 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e27e      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523e:	4b53      	ldr	r3, [pc, #332]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x10c>
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d063      	beq.n	8005322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800525a:	4b4c      	ldr	r3, [pc, #304]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005266:	4b49      	ldr	r3, [pc, #292]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b08      	cmp	r3, #8
 8005270:	d11c      	bne.n	80052ac <HAL_RCC_OscConfig+0x18c>
 8005272:	4b46      	ldr	r3, [pc, #280]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d116      	bne.n	80052ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527e:	4b43      	ldr	r3, [pc, #268]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_RCC_OscConfig+0x176>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e252      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005296:	4b3d      	ldr	r3, [pc, #244]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4939      	ldr	r1, [pc, #228]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	e03a      	b.n	8005322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b4:	4b36      	ldr	r3, [pc, #216]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fe f8f3 	bl	80034a4 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c2:	f7fe f8ef 	bl	80034a4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e233      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d4:	4b2d      	ldr	r3, [pc, #180]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e0:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4927      	ldr	r1, [pc, #156]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]
 80052f4:	e015      	b.n	8005322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f6:	4b26      	ldr	r3, [pc, #152]	@ (8005390 <HAL_RCC_OscConfig+0x270>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fe f8d2 	bl	80034a4 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005304:	f7fe f8ce 	bl	80034a4 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e212      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005316:	4b1d      	ldr	r3, [pc, #116]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03a      	beq.n	80053a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d019      	beq.n	800536a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005336:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <HAL_RCC_OscConfig+0x274>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533c:	f7fe f8b2 	bl	80034a4 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005344:	f7fe f8ae 	bl	80034a4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e1f2      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <HAL_RCC_OscConfig+0x26c>)
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005362:	2001      	movs	r0, #1
 8005364:	f000 fbca 	bl	8005afc <RCC_Delay>
 8005368:	e01c      	b.n	80053a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <HAL_RCC_OscConfig+0x274>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005370:	f7fe f898 	bl	80034a4 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005376:	e00f      	b.n	8005398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005378:	f7fe f894 	bl	80034a4 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d908      	bls.n	8005398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e1d8      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
 8005390:	42420000 	.word	0x42420000
 8005394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005398:	4b9b      	ldr	r3, [pc, #620]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e9      	bne.n	8005378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a6 	beq.w	80054fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b6:	4b94      	ldr	r3, [pc, #592]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c2:	4b91      	ldr	r3, [pc, #580]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4a90      	ldr	r2, [pc, #576]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	61d3      	str	r3, [r2, #28]
 80053ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	4b8b      	ldr	r3, [pc, #556]	@ (800560c <HAL_RCC_OscConfig+0x4ec>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d118      	bne.n	800541c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ea:	4b88      	ldr	r3, [pc, #544]	@ (800560c <HAL_RCC_OscConfig+0x4ec>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a87      	ldr	r2, [pc, #540]	@ (800560c <HAL_RCC_OscConfig+0x4ec>)
 80053f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f6:	f7fe f855 	bl	80034a4 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fe:	f7fe f851 	bl	80034a4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	@ 0x64
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e195      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005410:	4b7e      	ldr	r3, [pc, #504]	@ (800560c <HAL_RCC_OscConfig+0x4ec>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x312>
 8005424:	4b78      	ldr	r3, [pc, #480]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	4a77      	ldr	r2, [pc, #476]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6213      	str	r3, [r2, #32]
 8005430:	e02d      	b.n	800548e <HAL_RCC_OscConfig+0x36e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x334>
 800543a:	4b73      	ldr	r3, [pc, #460]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a72      	ldr	r2, [pc, #456]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	6213      	str	r3, [r2, #32]
 8005446:	4b70      	ldr	r3, [pc, #448]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	4a6f      	ldr	r2, [pc, #444]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800544c:	f023 0304 	bic.w	r3, r3, #4
 8005450:	6213      	str	r3, [r2, #32]
 8005452:	e01c      	b.n	800548e <HAL_RCC_OscConfig+0x36e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d10c      	bne.n	8005476 <HAL_RCC_OscConfig+0x356>
 800545c:	4b6a      	ldr	r3, [pc, #424]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	4a69      	ldr	r2, [pc, #420]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6213      	str	r3, [r2, #32]
 8005468:	4b67      	ldr	r3, [pc, #412]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	4a66      	ldr	r2, [pc, #408]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6213      	str	r3, [r2, #32]
 8005474:	e00b      	b.n	800548e <HAL_RCC_OscConfig+0x36e>
 8005476:	4b64      	ldr	r3, [pc, #400]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	4a63      	ldr	r2, [pc, #396]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	6213      	str	r3, [r2, #32]
 8005482:	4b61      	ldr	r3, [pc, #388]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4a60      	ldr	r2, [pc, #384]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d015      	beq.n	80054c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fe f805 	bl	80034a4 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fe f801 	bl	80034a4 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e143      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b4:	4b54      	ldr	r3, [pc, #336]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ee      	beq.n	800549e <HAL_RCC_OscConfig+0x37e>
 80054c0:	e014      	b.n	80054ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c2:	f7fd ffef 	bl	80034a4 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fd ffeb 	bl	80034a4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e12d      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e0:	4b49      	ldr	r3, [pc, #292]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ee      	bne.n	80054ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f2:	4b45      	ldr	r3, [pc, #276]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	4a44      	ldr	r2, [pc, #272]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80054f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 808c 	beq.w	8005620 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005508:	4b3f      	ldr	r3, [pc, #252]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005514:	d10e      	bne.n	8005534 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005516:	4b3c      	ldr	r3, [pc, #240]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800551e:	2b08      	cmp	r3, #8
 8005520:	d108      	bne.n	8005534 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005522:	4b39      	ldr	r3, [pc, #228]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800552a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552e:	d101      	bne.n	8005534 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e103      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	2b02      	cmp	r3, #2
 800553a:	d14e      	bne.n	80055da <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800553c:	4b32      	ldr	r3, [pc, #200]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005548:	4b2f      	ldr	r3, [pc, #188]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0ef      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800555c:	4b2c      	ldr	r3, [pc, #176]	@ (8005610 <HAL_RCC_OscConfig+0x4f0>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fd ff9f 	bl	80034a4 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800556a:	f7fd ff9b 	bl	80034a4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b64      	cmp	r3, #100	@ 0x64
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0df      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800557c:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005588:	4b1f      	ldr	r3, [pc, #124]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005594:	491c      	ldr	r1, [pc, #112]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800559a:	4b1b      	ldr	r3, [pc, #108]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	4918      	ldr	r1, [pc, #96]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80055ac:	4b18      	ldr	r3, [pc, #96]	@ (8005610 <HAL_RCC_OscConfig+0x4f0>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fd ff77 	bl	80034a4 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055ba:	f7fd ff73 	bl	80034a4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b64      	cmp	r3, #100	@ 0x64
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e0b7      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80055cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x49a>
 80055d8:	e022      	b.n	8005620 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80055da:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	4a0a      	ldr	r2, [pc, #40]	@ (8005608 <HAL_RCC_OscConfig+0x4e8>)
 80055e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80055e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005610 <HAL_RCC_OscConfig+0x4f0>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fd ff5a 	bl	80034a4 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80055f2:	e00f      	b.n	8005614 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055f4:	f7fd ff56 	bl	80034a4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	@ 0x64
 8005600:	d908      	bls.n	8005614 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e09a      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
 8005610:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005614:	4b4b      	ldr	r3, [pc, #300]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e9      	bne.n	80055f4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8088 	beq.w	800573a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800562a:	4b46      	ldr	r3, [pc, #280]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b08      	cmp	r3, #8
 8005634:	d068      	beq.n	8005708 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d14d      	bne.n	80056da <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	4b42      	ldr	r3, [pc, #264]	@ (8005748 <HAL_RCC_OscConfig+0x628>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fd ff2e 	bl	80034a4 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fd ff2a 	bl	80034a4 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e06e      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800565e:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005672:	d10f      	bne.n	8005694 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005674:	4b33      	ldr	r3, [pc, #204]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4931      	ldr	r1, [pc, #196]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 800567e:	4313      	orrs	r3, r2
 8005680:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005682:	4b30      	ldr	r3, [pc, #192]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	f023 020f 	bic.w	r2, r3, #15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	492d      	ldr	r1, [pc, #180]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005690:	4313      	orrs	r3, r2
 8005692:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005694:	4b2b      	ldr	r3, [pc, #172]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	430b      	orrs	r3, r1
 80056a6:	4927      	ldr	r1, [pc, #156]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ac:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <HAL_RCC_OscConfig+0x628>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fd fef7 	bl	80034a4 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ba:	f7fd fef3 	bl	80034a4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e037      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x59a>
 80056d8:	e02f      	b.n	800573a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056da:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x628>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fd fee0 	bl	80034a4 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fd fedc 	bl	80034a4 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e020      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056fa:	4b12      	ldr	r3, [pc, #72]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x5c8>
 8005706:	e018      	b.n	800573a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e013      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_RCC_OscConfig+0x624>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	429a      	cmp	r2, r3
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	42420060 	.word	0x42420060

0800574c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0d0      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b6a      	ldr	r3, [pc, #424]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d910      	bls.n	8005790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b67      	ldr	r3, [pc, #412]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 0207 	bic.w	r2, r3, #7
 8005776:	4965      	ldr	r1, [pc, #404]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b63      	ldr	r3, [pc, #396]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0b8      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b59      	ldr	r3, [pc, #356]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a58      	ldr	r2, [pc, #352]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c0:	4b53      	ldr	r3, [pc, #332]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a52      	ldr	r2, [pc, #328]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80057ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057cc:	4b50      	ldr	r3, [pc, #320]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	494d      	ldr	r1, [pc, #308]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d040      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b47      	ldr	r3, [pc, #284]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d115      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e073      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3d      	ldr	r3, [pc, #244]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e06b      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b39      	ldr	r3, [pc, #228]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4936      	ldr	r1, [pc, #216]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fd fe32 	bl	80034a4 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fd fe2e 	bl	80034a4 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e053      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2d      	ldr	r3, [pc, #180]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d210      	bcs.n	800589c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b24      	ldr	r3, [pc, #144]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	4922      	ldr	r1, [pc, #136]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b20      	ldr	r3, [pc, #128]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e032      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a8:	4b19      	ldr	r3, [pc, #100]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4916      	ldr	r1, [pc, #88]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058c6:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	490e      	ldr	r1, [pc, #56]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058da:	f000 f821 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	490a      	ldr	r1, [pc, #40]	@ (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058ec:	5ccb      	ldrb	r3, [r1, r3]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a09      	ldr	r2, [pc, #36]	@ (8005918 <HAL_RCC_ClockConfig+0x1cc>)
 80058f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058f6:	4b09      	ldr	r3, [pc, #36]	@ (800591c <HAL_RCC_ClockConfig+0x1d0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fd90 	bl	8003420 <HAL_InitTick>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40022000 	.word	0x40022000
 8005910:	40021000 	.word	0x40021000
 8005914:	08008298 	.word	0x08008298
 8005918:	2000006c 	.word	0x2000006c
 800591c:	20000070 	.word	0x20000070

08005920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005924:	b08e      	sub	sp, #56	@ 0x38
 8005926:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592c:	2300      	movs	r3, #0
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005930:	2300      	movs	r3, #0
 8005932:	637b      	str	r3, [r7, #52]	@ 0x34
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005944:	4b4e      	ldr	r3, [pc, #312]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594c:	f003 030c 	and.w	r3, r3, #12
 8005950:	2b04      	cmp	r3, #4
 8005952:	d002      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x3a>
 8005954:	2b08      	cmp	r3, #8
 8005956:	d003      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x40>
 8005958:	e089      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800595a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x164>)
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800595e:	e089      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	0c9b      	lsrs	r3, r3, #18
 8005964:	f003 020f 	and.w	r2, r3, #15
 8005968:	4b47      	ldr	r3, [pc, #284]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x168>)
 800596a:	5c9b      	ldrb	r3, [r3, r2]
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d072      	beq.n	8005a5e <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005978:	4b41      	ldr	r3, [pc, #260]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x160>)
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	4b42      	ldr	r3, [pc, #264]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x16c>)
 8005982:	5c9b      	ldrb	r3, [r3, r2]
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005986:	4b3e      	ldr	r3, [pc, #248]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d053      	beq.n	8005a3a <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005992:	4b3b      	ldr	r3, [pc, #236]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	3301      	adds	r3, #1
 800599e:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80059a0:	4b37      	ldr	r3, [pc, #220]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x160>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3302      	adds	r3, #2
 80059ac:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2200      	movs	r2, #0
 80059b2:	469a      	mov	sl, r3
 80059b4:	4693      	mov	fp, r2
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	2200      	movs	r2, #0
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	617a      	str	r2, [r7, #20]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	fb03 f20b 	mul.w	r2, r3, fp
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	fb0a f303 	mul.w	r3, sl, r3
 80059ca:	4413      	add	r3, r2
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	fbaa 0102 	umull	r0, r1, sl, r2
 80059d2:	440b      	add	r3, r1
 80059d4:	4619      	mov	r1, r3
 80059d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x164>)
 80059d8:	fb03 f201 	mul.w	r2, r3, r1
 80059dc:	2300      	movs	r3, #0
 80059de:	fb00 f303 	mul.w	r3, r0, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	4a27      	ldr	r2, [pc, #156]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x164>)
 80059e6:	fba0 4502 	umull	r4, r5, r0, r2
 80059ea:	442b      	add	r3, r5
 80059ec:	461d      	mov	r5, r3
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	2200      	movs	r2, #0
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	60fa      	str	r2, [r7, #12]
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	2200      	movs	r2, #0
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a02:	460b      	mov	r3, r1
 8005a04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a08:	4652      	mov	r2, sl
 8005a0a:	fb02 f203 	mul.w	r2, r2, r3
 8005a0e:	465b      	mov	r3, fp
 8005a10:	4684      	mov	ip, r0
 8005a12:	fb0c f303 	mul.w	r3, ip, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	fba2 8901 	umull	r8, r9, r2, r1
 8005a20:	444b      	add	r3, r9
 8005a22:	4699      	mov	r9, r3
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	4620      	mov	r0, r4
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7fb fb36 	bl	800109c <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4613      	mov	r3, r2
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a38:	e007      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	4a11      	ldr	r2, [pc, #68]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a3e:	fb03 f202 	mul.w	r2, r3, r2
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a4c:	7b5b      	ldrb	r3, [r3, #13]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a5c:	e004      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	4a0b      	ldr	r2, [pc, #44]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0x170>)
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005a6c:	e002      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a6e:	4b09      	ldr	r3, [pc, #36]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x174>)
 8005a70:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3738      	adds	r7, #56	@ 0x38
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a80:	40021000 	.word	0x40021000
 8005a84:	017d7840 	.word	0x017d7840
 8005a88:	080082b0 	.word	0x080082b0
 8005a8c:	080082c0 	.word	0x080082c0
 8005a90:	003d0900 	.word	0x003d0900
 8005a94:	007a1200 	.word	0x007a1200

08005a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a9c:	4b02      	ldr	r3, [pc, #8]	@ (8005aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	2000006c 	.word	0x2000006c

08005aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ab0:	f7ff fff2 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4903      	ldr	r1, [pc, #12]	@ (8005ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	080082a8 	.word	0x080082a8

08005ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ad8:	f7ff ffde 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b05      	ldr	r3, [pc, #20]	@ (8005af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	0adb      	lsrs	r3, r3, #11
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4903      	ldr	r1, [pc, #12]	@ (8005af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40021000 	.word	0x40021000
 8005af8:	080082a8 	.word	0x080082a8

08005afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b04:	4b0a      	ldr	r3, [pc, #40]	@ (8005b30 <RCC_Delay+0x34>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <RCC_Delay+0x38>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	0a5b      	lsrs	r3, r3, #9
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b18:	bf00      	nop
  }
  while (Delay --);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1e5a      	subs	r2, r3, #1
 8005b1e:	60fa      	str	r2, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f9      	bne.n	8005b18 <RCC_Delay+0x1c>
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr
 8005b30:	2000006c 	.word	0x2000006c
 8005b34:	10624dd3 	.word	0x10624dd3

08005b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d07d      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5c:	4b8b      	ldr	r3, [pc, #556]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b68:	4b88      	ldr	r3, [pc, #544]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	4a87      	ldr	r2, [pc, #540]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	61d3      	str	r3, [r2, #28]
 8005b74:	4b85      	ldr	r3, [pc, #532]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b80:	2301      	movs	r3, #1
 8005b82:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b84:	4b82      	ldr	r3, [pc, #520]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d118      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b90:	4b7f      	ldr	r3, [pc, #508]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7e      	ldr	r2, [pc, #504]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9c:	f7fd fc82 	bl	80034a4 <HAL_GetTick>
 8005ba0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba4:	f7fd fc7e 	bl	80034a4 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	@ 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e0e5      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb6:	4b76      	ldr	r3, [pc, #472]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bc2:	4b72      	ldr	r3, [pc, #456]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bca:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d02e      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d027      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005be0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bea:	4b6a      	ldr	r3, [pc, #424]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf0:	4b68      	ldr	r3, [pc, #416]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005bf6:	4a65      	ldr	r2, [pc, #404]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d014      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c06:	f7fd fc4d 	bl	80034a4 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c0c:	e00a      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0e:	f7fd fc49 	bl	80034a4 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e0ae      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c24:	4b59      	ldr	r3, [pc, #356]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ee      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c30:	4b56      	ldr	r3, [pc, #344]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4953      	ldr	r1, [pc, #332]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c42:	7efb      	ldrb	r3, [r7, #27]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c48:	4b50      	ldr	r3, [pc, #320]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c60:	4b4a      	ldr	r3, [pc, #296]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4947      	ldr	r1, [pc, #284]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005c7e:	4b43      	ldr	r3, [pc, #268]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4940      	ldr	r1, [pc, #256]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	4938      	ldr	r1, [pc, #224]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005cae:	4b37      	ldr	r3, [pc, #220]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005cba:	4b34      	ldr	r3, [pc, #208]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d148      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d138      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005ce8:	4b28      	ldr	r3, [pc, #160]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e042      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005cfc:	4b23      	ldr	r3, [pc, #140]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	4920      	ldr	r1, [pc, #128]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	491c      	ldr	r1, [pc, #112]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005d20:	4b1d      	ldr	r3, [pc, #116]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fd fbbd 	bl	80034a4 <HAL_GetTick>
 8005d2a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d2e:	f7fd fbb9 	bl	80034a4 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b64      	cmp	r3, #100	@ 0x64
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e020      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d40:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005d4c:	e009      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e00f      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6e:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4904      	ldr	r1, [pc, #16]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40007000 	.word	0x40007000
 8005d94:	42420440 	.word	0x42420440
 8005d98:	42420070 	.word	0x42420070

08005d9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	@ 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	2300      	movs	r3, #0
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dac:	2300      	movs	r3, #0
 8005dae:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	f200 811d 	bhi.w	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005f89 	.word	0x08005f89
 8005dd8:	08005fed 	.word	0x08005fed
 8005ddc:	08006009 	.word	0x08006009
 8005de0:	08005ee7 	.word	0x08005ee7
 8005de4:	08006009 	.word	0x08006009
 8005de8:	08006009 	.word	0x08006009
 8005dec:	08006009 	.word	0x08006009
 8005df0:	08005f39 	.word	0x08005f39
 8005df4:	08006009 	.word	0x08006009
 8005df8:	08006009 	.word	0x08006009
 8005dfc:	08006009 	.word	0x08006009
 8005e00:	08006009 	.word	0x08006009
 8005e04:	08006009 	.word	0x08006009
 8005e08:	08006009 	.word	0x08006009
 8005e0c:	08006009 	.word	0x08006009
 8005e10:	08005e15 	.word	0x08005e15
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005e14:	4b83      	ldr	r3, [pc, #524]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e1a:	4b82      	ldr	r3, [pc, #520]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80f2 	beq.w	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	0c9b      	lsrs	r3, r3, #18
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	4a7d      	ldr	r2, [pc, #500]	@ (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005e32:	5cd3      	ldrb	r3, [r2, r3]
 8005e34:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d03b      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005e40:	4b78      	ldr	r3, [pc, #480]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	4a78      	ldr	r2, [pc, #480]	@ (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005e4e:	4b75      	ldr	r3, [pc, #468]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01c      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005e5a:	4b72      	ldr	r3, [pc, #456]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	091b      	lsrs	r3, r3, #4
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005e68:	4b6e      	ldr	r3, [pc, #440]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	3302      	adds	r3, #2
 8005e74:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005e76:	4a6e      	ldr	r2, [pc, #440]	@ (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	fb03 f202 	mul.w	r2, r3, r2
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e92:	e007      	b.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e94:	4a66      	ldr	r2, [pc, #408]	@ (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005ea4:	4b60      	ldr	r3, [pc, #384]	@ (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005ea6:	7b5b      	ldrb	r3, [r3, #13]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb6:	e004      	b.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	4a5e      	ldr	r2, [pc, #376]	@ (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8005ec2:	4b58      	ldr	r3, [pc, #352]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ece:	d102      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005ed4:	e09a      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4a57      	ldr	r2, [pc, #348]	@ (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	623b      	str	r3, [r7, #32]
      break;
 8005ee4:	e092      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8005ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005ef2:	f7ff fd15 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8005ef6:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005ef8:	e08a      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005efa:	4b4a      	ldr	r3, [pc, #296]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8084 	beq.w	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005f08:	4b46      	ldr	r3, [pc, #280]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005f16:	4b43      	ldr	r3, [pc, #268]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	0b1b      	lsrs	r3, r3, #12
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	3302      	adds	r3, #2
 8005f22:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005f24:	4a42      	ldr	r2, [pc, #264]	@ (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	623b      	str	r3, [r7, #32]
      break;
 8005f36:	e06b      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8005f38:	4b3a      	ldr	r3, [pc, #232]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005f44:	f7ff fcec 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8005f48:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005f4a:	e063      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005f4c:	4b35      	ldr	r3, [pc, #212]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d05d      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005f58:	4b32      	ldr	r3, [pc, #200]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	0b1b      	lsrs	r3, r3, #12
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	3302      	adds	r3, #2
 8005f72:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005f74:	4a2e      	ldr	r2, [pc, #184]	@ (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	623b      	str	r3, [r7, #32]
      break;
 8005f86:	e045      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005f88:	4b26      	ldr	r3, [pc, #152]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f98:	d108      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8005fa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fa8:	623b      	str	r3, [r7, #32]
 8005faa:	e01e      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8005fc4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	e00e      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd6:	d11f      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005fd8:	4b12      	ldr	r3, [pc, #72]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d019      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 8005fe4:	4b15      	ldr	r3, [pc, #84]	@ (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005fe6:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005fe8:	e016      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005fea:	e015      	b.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005fec:	f7ff fd72 	bl	8005ad4 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	0b9b      	lsrs	r3, r3, #14
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	623b      	str	r3, [r7, #32]
      break;
 8006006:	e008      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 8006008:	bf00      	nop
 800600a:	e006      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 800600c:	bf00      	nop
 800600e:	e004      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8006010:	bf00      	nop
 8006012:	e002      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8006018:	bf00      	nop
    }
  }
  return (frequency);
 800601a:	6a3b      	ldr	r3, [r7, #32]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3728      	adds	r7, #40	@ 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40021000 	.word	0x40021000
 8006028:	080082d0 	.word	0x080082d0
 800602c:	080082e0 	.word	0x080082e0
 8006030:	017d7840 	.word	0x017d7840
 8006034:	003d0900 	.word	0x003d0900
 8006038:	aaaaaaab 	.word	0xaaaaaaab
 800603c:	0002faf0 	.word	0x0002faf0

08006040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e076      	b.n	8006140 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006062:	d009      	beq.n	8006078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
 800606a:	e005      	b.n	8006078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc ff48 	bl	8002f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	0c1a      	lsrs	r2, r3, #16
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f002 0204 	and.w	r2, r2, #4
 800611e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800612e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006158:	f7fd f9a4 	bl	80034a4 <HAL_GetTick>
 800615c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d001      	beq.n	8006172 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
 8006170:	e12a      	b.n	80063c8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_SPI_Transmit+0x36>
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e122      	b.n	80063c8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_SPI_Transmit+0x48>
 800618c:	2302      	movs	r3, #2
 800618e:	e11b      	b.n	80063c8 <HAL_SPI_Transmit+0x280>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2203      	movs	r2, #3
 800619c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	88fa      	ldrh	r2, [r7, #6]
 80061b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061de:	d10f      	bne.n	8006200 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b40      	cmp	r3, #64	@ 0x40
 800620c:	d007      	beq.n	800621e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800621c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006226:	d152      	bne.n	80062ce <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_SPI_Transmit+0xee>
 8006230:	8b7b      	ldrh	r3, [r7, #26]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d145      	bne.n	80062c2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800625a:	e032      	b.n	80062c2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d112      	bne.n	8006290 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626e:	881a      	ldrh	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	1c9a      	adds	r2, r3, #2
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800628e:	e018      	b.n	80062c2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006290:	f7fd f908 	bl	80034a4 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d803      	bhi.n	80062a8 <HAL_SPI_Transmit+0x160>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d102      	bne.n	80062ae <HAL_SPI_Transmit+0x166>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e082      	b.n	80063c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1c7      	bne.n	800625c <HAL_SPI_Transmit+0x114>
 80062cc:	e053      	b.n	8006376 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Transmit+0x194>
 80062d6:	8b7b      	ldrh	r3, [r7, #26]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d147      	bne.n	800636c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006302:	e033      	b.n	800636c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d113      	bne.n	800633a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006338:	e018      	b.n	800636c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633a:	f7fd f8b3 	bl	80034a4 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d803      	bhi.n	8006352 <HAL_SPI_Transmit+0x20a>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d102      	bne.n	8006358 <HAL_SPI_Transmit+0x210>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e02d      	b.n	80063c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1c6      	bne.n	8006304 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fcc0 	bl	8006d00 <SPI_EndRxTxTransaction>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d001      	beq.n	80063f0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
 80063ee:	e104      	b.n	80065fa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f8:	d112      	bne.n	8006420 <HAL_SPI_Receive+0x50>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10e      	bne.n	8006420 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2204      	movs	r2, #4
 8006406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f8f3 	bl	8006602 <HAL_SPI_TransmitReceive>
 800641c:	4603      	mov	r3, r0
 800641e:	e0ec      	b.n	80065fa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006420:	f7fd f840 	bl	80034a4 <HAL_GetTick>
 8006424:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_SPI_Receive+0x62>
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e0e1      	b.n	80065fa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_SPI_Receive+0x74>
 8006440:	2302      	movs	r3, #2
 8006442:	e0da      	b.n	80065fa <HAL_SPI_Receive+0x22a>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2204      	movs	r2, #4
 8006450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006492:	d10f      	bne.n	80064b4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b40      	cmp	r3, #64	@ 0x40
 80064c0:	d007      	beq.n	80064d2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d170      	bne.n	80065bc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064da:	e035      	b.n	8006548 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d115      	bne.n	8006516 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f103 020c 	add.w	r2, r3, #12
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006514:	e018      	b.n	8006548 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006516:	f7fc ffc5 	bl	80034a4 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d803      	bhi.n	800652e <HAL_SPI_Receive+0x15e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Receive+0x164>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d109      	bne.n	8006548 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e058      	b.n	80065fa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1c4      	bne.n	80064dc <HAL_SPI_Receive+0x10c>
 8006552:	e038      	b.n	80065c6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b01      	cmp	r3, #1
 8006560:	d113      	bne.n	800658a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	b292      	uxth	r2, r2
 800656e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	1c9a      	adds	r2, r3, #2
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006588:	e018      	b.n	80065bc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800658a:	f7fc ff8b 	bl	80034a4 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d803      	bhi.n	80065a2 <HAL_SPI_Receive+0x1d2>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d102      	bne.n	80065a8 <HAL_SPI_Receive+0x1d8>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e01e      	b.n	80065fa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1c6      	bne.n	8006554 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fb46 	bl	8006c5c <SPI_EndRxTransaction>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80065f8:	2300      	movs	r3, #0
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b08a      	sub	sp, #40	@ 0x28
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006610:	2301      	movs	r3, #1
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006614:	f7fc ff46 	bl	80034a4 <HAL_GetTick>
 8006618:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006620:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006628:	887b      	ldrh	r3, [r7, #2]
 800662a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800662c:	7ffb      	ldrb	r3, [r7, #31]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d00c      	beq.n	800664c <HAL_SPI_TransmitReceive+0x4a>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006638:	d106      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x46>
 8006642:	7ffb      	ldrb	r3, [r7, #31]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d001      	beq.n	800664c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
 800664a:	e17f      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_SPI_TransmitReceive+0x5c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <HAL_SPI_TransmitReceive+0x5c>
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e174      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x6e>
 800666c:	2302      	movs	r3, #2
 800666e:	e16d      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b04      	cmp	r3, #4
 8006682:	d003      	beq.n	800668c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2205      	movs	r2, #5
 8006688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	887a      	ldrh	r2, [r7, #2]
 800669c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	887a      	ldrh	r2, [r7, #2]
 80066a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	887a      	ldrh	r2, [r7, #2]
 80066ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	887a      	ldrh	r2, [r7, #2]
 80066b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b40      	cmp	r3, #64	@ 0x40
 80066ce:	d007      	beq.n	80066e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e8:	d17e      	bne.n	80067e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0xf6>
 80066f2:	8afb      	ldrh	r3, [r7, #22]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d16c      	bne.n	80067d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	881a      	ldrh	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006708:	1c9a      	adds	r2, r3, #2
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671c:	e059      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d11b      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x162>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x162>
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	2b01      	cmp	r3, #1
 800673a:	d113      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	881a      	ldrh	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	1c9a      	adds	r2, r3, #2
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d119      	bne.n	80067a6 <HAL_SPI_TransmitReceive+0x1a4>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d014      	beq.n	80067a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	b292      	uxth	r2, r2
 8006788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	1c9a      	adds	r2, r3, #2
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067a6:	f7fc fe7d 	bl	80034a4 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d80d      	bhi.n	80067d2 <HAL_SPI_TransmitReceive+0x1d0>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d009      	beq.n	80067d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e0bc      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1a0      	bne.n	800671e <HAL_SPI_TransmitReceive+0x11c>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d19b      	bne.n	800671e <HAL_SPI_TransmitReceive+0x11c>
 80067e6:	e082      	b.n	80068ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x1f4>
 80067f0:	8afb      	ldrh	r3, [r7, #22]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d171      	bne.n	80068da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800681c:	e05d      	b.n	80068da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b02      	cmp	r3, #2
 800682a:	d11c      	bne.n	8006866 <HAL_SPI_TransmitReceive+0x264>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d017      	beq.n	8006866 <HAL_SPI_TransmitReceive+0x264>
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	2b01      	cmp	r3, #1
 800683a:	d114      	bne.n	8006866 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	330c      	adds	r3, #12
 8006846:	7812      	ldrb	r2, [r2, #0]
 8006848:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d119      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x2a6>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d014      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068a4:	2301      	movs	r3, #1
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068a8:	f7fc fdfc 	bl	80034a4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d803      	bhi.n	80068c0 <HAL_SPI_TransmitReceive+0x2be>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x2c4>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e038      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d19c      	bne.n	800681e <HAL_SPI_TransmitReceive+0x21c>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d197      	bne.n	800681e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fa04 	bl	8006d00 <SPI_EndRxTxTransaction>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e01d      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800694a:	2300      	movs	r3, #0
  }
}
 800694c:	4618      	mov	r0, r3
 800694e:	3728      	adds	r7, #40	@ 0x28
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10e      	bne.n	8006994 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
    return;
 8006992:	e0b7      	b.n	8006b04 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_SPI_IRQHandler+0x5e>
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	4798      	blx	r3
    return;
 80069b0:	e0a8      	b.n	8006b04 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <HAL_SPI_IRQHandler+0x74>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 809e 	beq.w	8006b04 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 8098 	beq.w	8006b04 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d023      	beq.n	8006a26 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d011      	beq.n	8006a0e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ee:	f043 0204 	orr.w	r2, r3, #4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	e00b      	b.n	8006a26 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	693b      	ldr	r3, [r7, #16]
        return;
 8006a24:	e06e      	b.n	8006b04 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d014      	beq.n	8006a5a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	f043 0201 	orr.w	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d04f      	beq.n	8006b02 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <HAL_SPI_IRQHandler+0x13a>
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d034      	beq.n	8006af8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0203 	bic.w	r2, r2, #3
 8006a9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d011      	beq.n	8006aca <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aaa:	4a18      	ldr	r2, [pc, #96]	@ (8006b0c <HAL_SPI_IRQHandler+0x1b8>)
 8006aac:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe f876 	bl	8004ba4 <HAL_DMA_Abort_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8006b0c <HAL_SPI_IRQHandler+0x1b8>)
 8006ad8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe f860 	bl	8004ba4 <HAL_DMA_Abort_IT>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006af6:	e003      	b.n	8006b00 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f809 	bl	8006b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006afe:	e000      	b.n	8006b02 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8006b00:	bf00      	nop
    return;
 8006b02:	bf00      	nop
  }
}
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08006b23 	.word	0x08006b23

08006b10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff ffe7 	bl	8006b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b5c:	f7fc fca2 	bl	80034a4 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	4413      	add	r3, r2
 8006b6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b6c:	f7fc fc9a 	bl	80034a4 <HAL_GetTick>
 8006b70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b72:	4b39      	ldr	r3, [pc, #228]	@ (8006c58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	015b      	lsls	r3, r3, #5
 8006b78:	0d1b      	lsrs	r3, r3, #20
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	fb02 f303 	mul.w	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b82:	e054      	b.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d050      	beq.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b8c:	f7fc fc8a 	bl	80034a4 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d902      	bls.n	8006ba2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d13d      	bne.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bba:	d111      	bne.n	8006be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bc4:	d004      	beq.n	8006bd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bce:	d107      	bne.n	8006be0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006be8:	d10f      	bne.n	8006c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e017      	b.n	8006c4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bf0c      	ite	eq
 8006c3e:	2301      	moveq	r3, #1
 8006c40:	2300      	movne	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d19b      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	2000006c 	.word	0x2000006c

08006c5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c70:	d111      	bne.n	8006c96 <SPI_EndRxTransaction+0x3a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c7a:	d004      	beq.n	8006c86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c84:	d107      	bne.n	8006c96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c94:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c9e:	d117      	bne.n	8006cd0 <SPI_EndRxTransaction+0x74>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d112      	bne.n	8006cd0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff ff49 	bl	8006b4c <SPI_WaitFlagStateUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01a      	beq.n	8006cf6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc4:	f043 0220 	orr.w	r2, r3, #32
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e013      	b.n	8006cf8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2180      	movs	r1, #128	@ 0x80
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff ff36 	bl	8006b4c <SPI_WaitFlagStateUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	f043 0220 	orr.w	r2, r3, #32
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e000      	b.n	8006cf8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2201      	movs	r2, #1
 8006d14:	2102      	movs	r1, #2
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff ff18 	bl	8006b4c <SPI_WaitFlagStateUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f043 0220 	orr.w	r2, r3, #32
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e013      	b.n	8006d5a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2180      	movs	r1, #128	@ 0x80
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7ff ff05 	bl	8006b4c <SPI_WaitFlagStateUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e000      	b.n	8006d5a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e041      	b.n	8006df8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fc fa1b 	bl	80031c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f000 f82d 	bl	8006e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a33      	ldr	r2, [pc, #204]	@ (8006ee0 <TIM_Base_SetConfig+0xe0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00f      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1e:	d00b      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a30      	ldr	r2, [pc, #192]	@ (8006ee4 <TIM_Base_SetConfig+0xe4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ee8 <TIM_Base_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_Base_SetConfig+0x38>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2e      	ldr	r2, [pc, #184]	@ (8006eec <TIM_Base_SetConfig+0xec>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d108      	bne.n	8006e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a24      	ldr	r2, [pc, #144]	@ (8006ee0 <TIM_Base_SetConfig+0xe0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_Base_SetConfig+0x72>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e58:	d00b      	beq.n	8006e72 <TIM_Base_SetConfig+0x72>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a21      	ldr	r2, [pc, #132]	@ (8006ee4 <TIM_Base_SetConfig+0xe4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_Base_SetConfig+0x72>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a20      	ldr	r2, [pc, #128]	@ (8006ee8 <TIM_Base_SetConfig+0xe8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_Base_SetConfig+0x72>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <TIM_Base_SetConfig+0xec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d108      	bne.n	8006e84 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee0 <TIM_Base_SetConfig+0xe0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d103      	bne.n	8006eb8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f023 0201 	bic.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	611a      	str	r2, [r3, #16]
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00

08006ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e04b      	b.n	8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a19      	ldr	r2, [pc, #100]	@ (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f54:	d00e      	beq.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a15      	ldr	r2, [pc, #84]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d009      	beq.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a13      	ldr	r2, [pc, #76]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a12      	ldr	r2, [pc, #72]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10c      	bne.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00

08006fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e042      	b.n	8007054 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fc f936 	bl	8003254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	@ 0x24
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fc7f 	bl	8007904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b0ba      	sub	sp, #232	@ 0xe8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007082:	2300      	movs	r3, #0
 8007084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800709a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <HAL_UART_IRQHandler+0x66>
 80070ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb63 	bl	8007786 <UART_Receive_IT>
      return;
 80070c0:	e25b      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80de 	beq.w	8007288 <HAL_UART_IRQHandler+0x22c>
 80070cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 80d1 	beq.w	8007288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HAL_UART_IRQHandler+0xae>
 80070f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <HAL_UART_IRQHandler+0xd2>
 8007116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007126:	f043 0202 	orr.w	r2, r3, #2
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <HAL_UART_IRQHandler+0xf6>
 800713a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714a:	f043 0204 	orr.w	r2, r3, #4
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d011      	beq.n	8007182 <HAL_UART_IRQHandler+0x126>
 800715e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800716a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800717a:	f043 0208 	orr.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 81f2 	beq.w	8007570 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800718c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_UART_IRQHandler+0x14e>
 8007198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 faee 	bl	8007786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <HAL_UART_IRQHandler+0x17a>
 80071ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d04f      	beq.n	8007276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9f8 	bl	80075cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d041      	beq.n	800726e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3314      	adds	r3, #20
 80071f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007200:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3314      	adds	r3, #20
 8007212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007216:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800721a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800722e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1d9      	bne.n	80071ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d013      	beq.n	8007266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007242:	4a7e      	ldr	r2, [pc, #504]	@ (800743c <HAL_UART_IRQHandler+0x3e0>)
 8007244:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724a:	4618      	mov	r0, r3
 800724c:	f7fd fcaa 	bl	8004ba4 <HAL_DMA_Abort_IT>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007264:	e00e      	b.n	8007284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f99c 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	e00a      	b.n	8007284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f998 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	e006      	b.n	8007284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f994 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007282:	e175      	b.n	8007570 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	bf00      	nop
    return;
 8007286:	e173      	b.n	8007570 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	2b01      	cmp	r3, #1
 800728e:	f040 814f 	bne.w	8007530 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8148 	beq.w	8007530 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8141 	beq.w	8007530 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80b6 	beq.w	8007440 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8145 	beq.w	8007574 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072f2:	429a      	cmp	r2, r3
 80072f4:	f080 813e 	bcs.w	8007574 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b20      	cmp	r3, #32
 8007308:	f000 8088 	beq.w	800741c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007322:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007326:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800732a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007338:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800733c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007344:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1d9      	bne.n	800730c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3314      	adds	r3, #20
 800735e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007368:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3314      	adds	r3, #20
 8007378:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800737c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007380:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007384:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800738e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e1      	bne.n	8007358 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e3      	bne.n	8007394 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073ec:	f023 0310 	bic.w	r3, r3, #16
 80073f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007400:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007404:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800740c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007416:	4618      	mov	r0, r3
 8007418:	f7fd fb88 	bl	8004b2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800742a:	b29b      	uxth	r3, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8bf 	bl	80075b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007438:	e09c      	b.n	8007574 <HAL_UART_IRQHandler+0x518>
 800743a:	bf00      	nop
 800743c:	08007691 	.word	0x08007691
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007448:	b29b      	uxth	r3, r3
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 808e 	beq.w	8007578 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800745c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8089 	beq.w	8007578 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	330c      	adds	r3, #12
 800746c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800747c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800748a:	647a      	str	r2, [r7, #68]	@ 0x44
 800748c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e3      	bne.n	8007466 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	623b      	str	r3, [r7, #32]
   return(result);
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3314      	adds	r3, #20
 80074be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80074c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e3      	bne.n	800749e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0310 	bic.w	r3, r3, #16
 80074fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007508:	61fa      	str	r2, [r7, #28]
 800750a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	69b9      	ldr	r1, [r7, #24]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	617b      	str	r3, [r7, #20]
   return(result);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e3      	bne.n	80074e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007522:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f844 	bl	80075b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800752e:	e023      	b.n	8007578 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_UART_IRQHandler+0x4f4>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8b5 	bl	80076b8 <UART_Transmit_IT>
    return;
 800754e:	e014      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <HAL_UART_IRQHandler+0x51e>
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8f4 	bl	8007756 <UART_EndTransmit_IT>
    return;
 800756e:	e004      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
    return;
 8007570:	bf00      	nop
 8007572:	e002      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
      return;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
      return;
 8007578:	bf00      	nop
  }
}
 800757a:	37e8      	adds	r7, #232	@ 0xe8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr

080075cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b095      	sub	sp, #84	@ 0x54
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80075f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e5      	bne.n	80075d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	61fb      	str	r3, [r7, #28]
   return(result);
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3314      	adds	r3, #20
 8007626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800762a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800762e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e5      	bne.n	8007608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007640:	2b01      	cmp	r3, #1
 8007642:	d119      	bne.n	8007678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	60bb      	str	r3, [r7, #8]
   return(result);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	647b      	str	r3, [r7, #68]	@ 0x44
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007664:	61ba      	str	r2, [r7, #24]
 8007666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6979      	ldr	r1, [r7, #20]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	613b      	str	r3, [r7, #16]
   return(result);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007686:	bf00      	nop
 8007688:	3754      	adds	r7, #84	@ 0x54
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr

08007690 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff ff7a 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b21      	cmp	r3, #33	@ 0x21
 80076ca:	d13e      	bne.n	800774a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d4:	d114      	bne.n	8007700 <UART_Transmit_IT+0x48>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d110      	bne.n	8007700 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	1c9a      	adds	r2, r3, #2
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	621a      	str	r2, [r3, #32]
 80076fe:	e008      	b.n	8007712 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	1c59      	adds	r1, r3, #1
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6211      	str	r1, [r2, #32]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29b      	uxth	r3, r3
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4619      	mov	r1, r3
 8007720:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10f      	bne.n	8007746 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007734:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007744:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr

08007756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800776c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff ff02 	bl	8007580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b08c      	sub	sp, #48	@ 0x30
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b22      	cmp	r3, #34	@ 0x22
 8007798:	f040 80ae 	bne.w	80078f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a4:	d117      	bne.n	80077d6 <UART_Receive_IT+0x50>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d113      	bne.n	80077d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80077d4:	e026      	b.n	8007824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e8:	d007      	beq.n	80077fa <UART_Receive_IT+0x74>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <UART_Receive_IT+0x82>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e008      	b.n	800781a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007814:	b2da      	uxtb	r2, r3
 8007816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29b      	uxth	r3, r3
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4619      	mov	r1, r3
 8007832:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007834:	2b00      	cmp	r3, #0
 8007836:	d15d      	bne.n	80078f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0220 	bic.w	r2, r2, #32
 8007846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0201 	bic.w	r2, r2, #1
 8007866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	2b01      	cmp	r3, #1
 800787c:	d135      	bne.n	80078ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078a4:	623a      	str	r2, [r7, #32]
 80078a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d10a      	bne.n	80078dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fe67 	bl	80075b6 <HAL_UARTEx_RxEventCallback>
 80078e8:	e002      	b.n	80078f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fe51 	bl	8007592 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e002      	b.n	80078fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3730      	adds	r7, #48	@ 0x30
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800793e:	f023 030c 	bic.w	r3, r3, #12
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	430b      	orrs	r3, r1
 800794a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2c      	ldr	r2, [pc, #176]	@ (8007a18 <UART_SetConfig+0x114>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d103      	bne.n	8007974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fe f8b2 	bl	8005ad4 <HAL_RCC_GetPCLK2Freq>
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	e002      	b.n	800797a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007974:	f7fe f89a 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009a      	lsls	r2, r3, #2
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	4a22      	ldr	r2, [pc, #136]	@ (8007a1c <UART_SetConfig+0x118>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	0119      	lsls	r1, r3, #4
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009a      	lsls	r2, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80079b0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a1c <UART_SetConfig+0x118>)
 80079b2:	fba3 0302 	umull	r0, r3, r3, r2
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	2064      	movs	r0, #100	@ 0x64
 80079ba:	fb00 f303 	mul.w	r3, r0, r3
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	3332      	adds	r3, #50	@ 0x32
 80079c4:	4a15      	ldr	r2, [pc, #84]	@ (8007a1c <UART_SetConfig+0x118>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079d0:	4419      	add	r1, r3
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009a      	lsls	r2, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <UART_SetConfig+0x118>)
 80079ea:	fba3 0302 	umull	r0, r3, r3, r2
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	2064      	movs	r0, #100	@ 0x64
 80079f2:	fb00 f303 	mul.w	r3, r0, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	3332      	adds	r3, #50	@ 0x32
 80079fc:	4a07      	ldr	r2, [pc, #28]	@ (8007a1c <UART_SetConfig+0x118>)
 80079fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40013800 	.word	0x40013800
 8007a1c:	51eb851f 	.word	0x51eb851f

08007a20 <memset>:
 8007a20:	4603      	mov	r3, r0
 8007a22:	4402      	add	r2, r0
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d100      	bne.n	8007a2a <memset+0xa>
 8007a28:	4770      	bx	lr
 8007a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2e:	e7f9      	b.n	8007a24 <memset+0x4>

08007a30 <__errno>:
 8007a30:	4b01      	ldr	r3, [pc, #4]	@ (8007a38 <__errno+0x8>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000078 	.word	0x20000078

08007a3c <__libc_init_array>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	2600      	movs	r6, #0
 8007a40:	4d0c      	ldr	r5, [pc, #48]	@ (8007a74 <__libc_init_array+0x38>)
 8007a42:	4c0d      	ldr	r4, [pc, #52]	@ (8007a78 <__libc_init_array+0x3c>)
 8007a44:	1b64      	subs	r4, r4, r5
 8007a46:	10a4      	asrs	r4, r4, #2
 8007a48:	42a6      	cmp	r6, r4
 8007a4a:	d109      	bne.n	8007a60 <__libc_init_array+0x24>
 8007a4c:	f000 fa12 	bl	8007e74 <_init>
 8007a50:	2600      	movs	r6, #0
 8007a52:	4d0a      	ldr	r5, [pc, #40]	@ (8007a7c <__libc_init_array+0x40>)
 8007a54:	4c0a      	ldr	r4, [pc, #40]	@ (8007a80 <__libc_init_array+0x44>)
 8007a56:	1b64      	subs	r4, r4, r5
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	42a6      	cmp	r6, r4
 8007a5c:	d105      	bne.n	8007a6a <__libc_init_array+0x2e>
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a64:	4798      	blx	r3
 8007a66:	3601      	adds	r6, #1
 8007a68:	e7ee      	b.n	8007a48 <__libc_init_array+0xc>
 8007a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6e:	4798      	blx	r3
 8007a70:	3601      	adds	r6, #1
 8007a72:	e7f2      	b.n	8007a5a <__libc_init_array+0x1e>
 8007a74:	080082fc 	.word	0x080082fc
 8007a78:	080082fc 	.word	0x080082fc
 8007a7c:	080082fc 	.word	0x080082fc
 8007a80:	08008300 	.word	0x08008300

08007a84 <memcpy>:
 8007a84:	440a      	add	r2, r1
 8007a86:	4291      	cmp	r1, r2
 8007a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a8c:	d100      	bne.n	8007a90 <memcpy+0xc>
 8007a8e:	4770      	bx	lr
 8007a90:	b510      	push	{r4, lr}
 8007a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a96:	4291      	cmp	r1, r2
 8007a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9c:	d1f9      	bne.n	8007a92 <memcpy+0xe>
 8007a9e:	bd10      	pop	{r4, pc}

08007aa0 <log>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	f000 f833 	bl	8007b10 <__ieee754_log>
 8007aaa:	4622      	mov	r2, r4
 8007aac:	4606      	mov	r6, r0
 8007aae:	460f      	mov	r7, r1
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f9 f80d 	bl	8000ad4 <__aeabi_dcmpun>
 8007aba:	b998      	cbnz	r0, 8007ae4 <log+0x44>
 8007abc:	2200      	movs	r2, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f7f8 fffc 	bl	8000ac0 <__aeabi_dcmpgt>
 8007ac8:	b960      	cbnz	r0, 8007ae4 <log+0x44>
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 ffcd 	bl	8000a70 <__aeabi_dcmpeq>
 8007ad6:	b140      	cbz	r0, 8007aea <log+0x4a>
 8007ad8:	f7ff ffaa 	bl	8007a30 <__errno>
 8007adc:	2322      	movs	r3, #34	@ 0x22
 8007ade:	2600      	movs	r6, #0
 8007ae0:	4f06      	ldr	r7, [pc, #24]	@ (8007afc <log+0x5c>)
 8007ae2:	6003      	str	r3, [r0, #0]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aea:	f7ff ffa1 	bl	8007a30 <__errno>
 8007aee:	2321      	movs	r3, #33	@ 0x21
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	4803      	ldr	r0, [pc, #12]	@ (8007b00 <log+0x60>)
 8007af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007af8:	f000 b804 	b.w	8007b04 <nan>
 8007afc:	fff00000 	.word	0xfff00000
 8007b00:	080082f0 	.word	0x080082f0

08007b04 <nan>:
 8007b04:	2000      	movs	r0, #0
 8007b06:	4901      	ldr	r1, [pc, #4]	@ (8007b0c <nan+0x8>)
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	7ff80000 	.word	0x7ff80000

08007b10 <__ieee754_log>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	b087      	sub	sp, #28
 8007b20:	da24      	bge.n	8007b6c <__ieee754_log+0x5c>
 8007b22:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007b26:	4304      	orrs	r4, r0
 8007b28:	d108      	bne.n	8007b3c <__ieee754_log+0x2c>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2000      	movs	r0, #0
 8007b30:	49cb      	ldr	r1, [pc, #812]	@ (8007e60 <__ieee754_log+0x350>)
 8007b32:	f7f8 fe5f 	bl	80007f4 <__aeabi_ddiv>
 8007b36:	b007      	add	sp, #28
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	da04      	bge.n	8007b4a <__ieee754_log+0x3a>
 8007b40:	f7f8 fb76 	bl	8000230 <__aeabi_dsub>
 8007b44:	2200      	movs	r2, #0
 8007b46:	2300      	movs	r3, #0
 8007b48:	e7f3      	b.n	8007b32 <__ieee754_log+0x22>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4bc5      	ldr	r3, [pc, #788]	@ (8007e64 <__ieee754_log+0x354>)
 8007b4e:	f7f8 fd27 	bl	80005a0 <__aeabi_dmul>
 8007b52:	460b      	mov	r3, r1
 8007b54:	460d      	mov	r5, r1
 8007b56:	4602      	mov	r2, r0
 8007b58:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8007b5c:	48c2      	ldr	r0, [pc, #776]	@ (8007e68 <__ieee754_log+0x358>)
 8007b5e:	4285      	cmp	r5, r0
 8007b60:	dd06      	ble.n	8007b70 <__ieee754_log+0x60>
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	f7f8 fb65 	bl	8000234 <__adddf3>
 8007b6a:	e7e4      	b.n	8007b36 <__ieee754_log+0x26>
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	e7f5      	b.n	8007b5c <__ieee754_log+0x4c>
 8007b70:	152c      	asrs	r4, r5, #20
 8007b72:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007b76:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007b7a:	440c      	add	r4, r1
 8007b7c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8007b80:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8007b84:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8007b88:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8007b8c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8007b90:	ea41 0305 	orr.w	r3, r1, r5
 8007b94:	4610      	mov	r0, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4bb4      	ldr	r3, [pc, #720]	@ (8007e6c <__ieee754_log+0x35c>)
 8007b9c:	f7f8 fb48 	bl	8000230 <__aeabi_dsub>
 8007ba0:	1cab      	adds	r3, r5, #2
 8007ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	4682      	mov	sl, r0
 8007baa:	468b      	mov	fp, r1
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8007bb4:	dc53      	bgt.n	8007c5e <__ieee754_log+0x14e>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f7f8 ff5a 	bl	8000a70 <__aeabi_dcmpeq>
 8007bbc:	b1d0      	cbz	r0, 8007bf4 <__ieee754_log+0xe4>
 8007bbe:	2c00      	cmp	r4, #0
 8007bc0:	f000 8120 	beq.w	8007e04 <__ieee754_log+0x2f4>
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f7f8 fc81 	bl	80004cc <__aeabi_i2d>
 8007bca:	a391      	add	r3, pc, #580	@ (adr r3, 8007e10 <__ieee754_log+0x300>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	460f      	mov	r7, r1
 8007bd4:	f7f8 fce4 	bl	80005a0 <__aeabi_dmul>
 8007bd8:	a38f      	add	r3, pc, #572	@ (adr r3, 8007e18 <__ieee754_log+0x308>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	4604      	mov	r4, r0
 8007be0:	460d      	mov	r5, r1
 8007be2:	4630      	mov	r0, r6
 8007be4:	4639      	mov	r1, r7
 8007be6:	f7f8 fcdb 	bl	80005a0 <__aeabi_dmul>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	e7b8      	b.n	8007b66 <__ieee754_log+0x56>
 8007bf4:	a38a      	add	r3, pc, #552	@ (adr r3, 8007e20 <__ieee754_log+0x310>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4659      	mov	r1, fp
 8007bfe:	f7f8 fccf 	bl	80005a0 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	2000      	movs	r0, #0
 8007c08:	4999      	ldr	r1, [pc, #612]	@ (8007e70 <__ieee754_log+0x360>)
 8007c0a:	f7f8 fb11 	bl	8000230 <__aeabi_dsub>
 8007c0e:	4652      	mov	r2, sl
 8007c10:	4606      	mov	r6, r0
 8007c12:	460f      	mov	r7, r1
 8007c14:	465b      	mov	r3, fp
 8007c16:	4650      	mov	r0, sl
 8007c18:	4659      	mov	r1, fp
 8007c1a:	f7f8 fcc1 	bl	80005a0 <__aeabi_dmul>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 fcbb 	bl	80005a0 <__aeabi_dmul>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	b914      	cbnz	r4, 8007c36 <__ieee754_log+0x126>
 8007c30:	4632      	mov	r2, r6
 8007c32:	463b      	mov	r3, r7
 8007c34:	e0a0      	b.n	8007d78 <__ieee754_log+0x268>
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7f8 fc48 	bl	80004cc <__aeabi_i2d>
 8007c3c:	a374      	add	r3, pc, #464	@ (adr r3, 8007e10 <__ieee754_log+0x300>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	f7f8 fcab 	bl	80005a0 <__aeabi_dmul>
 8007c4a:	a373      	add	r3, pc, #460	@ (adr r3, 8007e18 <__ieee754_log+0x308>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	4604      	mov	r4, r0
 8007c52:	460d      	mov	r5, r1
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	f7f8 fca2 	bl	80005a0 <__aeabi_dmul>
 8007c5c:	e0a5      	b.n	8007daa <__ieee754_log+0x29a>
 8007c5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c62:	f7f8 fae7 	bl	8000234 <__adddf3>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	f7f8 fdc1 	bl	80007f4 <__aeabi_ddiv>
 8007c72:	e9cd 0100 	strd	r0, r1, [sp]
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7f8 fc28 	bl	80004cc <__aeabi_i2d>
 8007c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c84:	4610      	mov	r0, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	f7f8 fc8a 	bl	80005a0 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c94:	f7f8 fc84 	bl	80005a0 <__aeabi_dmul>
 8007c98:	a363      	add	r3, pc, #396	@ (adr r3, 8007e28 <__ieee754_log+0x318>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	f7f8 fc7d 	bl	80005a0 <__aeabi_dmul>
 8007ca6:	a362      	add	r3, pc, #392	@ (adr r3, 8007e30 <__ieee754_log+0x320>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f7f8 fac2 	bl	8000234 <__adddf3>
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	f7f8 fc74 	bl	80005a0 <__aeabi_dmul>
 8007cb8:	a35f      	add	r3, pc, #380	@ (adr r3, 8007e38 <__ieee754_log+0x328>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fab9 	bl	8000234 <__adddf3>
 8007cc2:	4642      	mov	r2, r8
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	f7f8 fc6b 	bl	80005a0 <__aeabi_dmul>
 8007cca:	a35d      	add	r3, pc, #372	@ (adr r3, 8007e40 <__ieee754_log+0x330>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fab0 	bl	8000234 <__adddf3>
 8007cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cd8:	f7f8 fc62 	bl	80005a0 <__aeabi_dmul>
 8007cdc:	a35a      	add	r3, pc, #360	@ (adr r3, 8007e48 <__ieee754_log+0x338>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fc59 	bl	80005a0 <__aeabi_dmul>
 8007cee:	a358      	add	r3, pc, #352	@ (adr r3, 8007e50 <__ieee754_log+0x340>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 fa9e 	bl	8000234 <__adddf3>
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	f7f8 fc50 	bl	80005a0 <__aeabi_dmul>
 8007d00:	a355      	add	r3, pc, #340	@ (adr r3, 8007e58 <__ieee754_log+0x348>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f7f8 fa95 	bl	8000234 <__adddf3>
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	f7f8 fc47 	bl	80005a0 <__aeabi_dmul>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1a:	f7f8 fa8b 	bl	8000234 <__adddf3>
 8007d1e:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8007d22:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8007d26:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007d2a:	3551      	adds	r5, #81	@ 0x51
 8007d2c:	4335      	orrs	r5, r6
 8007d2e:	2d00      	cmp	r5, #0
 8007d30:	4680      	mov	r8, r0
 8007d32:	4689      	mov	r9, r1
 8007d34:	dd48      	ble.n	8007dc8 <__ieee754_log+0x2b8>
 8007d36:	2200      	movs	r2, #0
 8007d38:	4b4d      	ldr	r3, [pc, #308]	@ (8007e70 <__ieee754_log+0x360>)
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	f7f8 fc2f 	bl	80005a0 <__aeabi_dmul>
 8007d42:	4652      	mov	r2, sl
 8007d44:	465b      	mov	r3, fp
 8007d46:	f7f8 fc2b 	bl	80005a0 <__aeabi_dmul>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460f      	mov	r7, r1
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 fa6d 	bl	8000234 <__adddf3>
 8007d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d5e:	f7f8 fc1f 	bl	80005a0 <__aeabi_dmul>
 8007d62:	4680      	mov	r8, r0
 8007d64:	4689      	mov	r9, r1
 8007d66:	b964      	cbnz	r4, 8007d82 <__ieee754_log+0x272>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	4639      	mov	r1, r7
 8007d70:	f7f8 fa5e 	bl	8000230 <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4650      	mov	r0, sl
 8007d7a:	4659      	mov	r1, fp
 8007d7c:	f7f8 fa58 	bl	8000230 <__aeabi_dsub>
 8007d80:	e6d9      	b.n	8007b36 <__ieee754_log+0x26>
 8007d82:	a323      	add	r3, pc, #140	@ (adr r3, 8007e10 <__ieee754_log+0x300>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8c:	f7f8 fc08 	bl	80005a0 <__aeabi_dmul>
 8007d90:	a321      	add	r3, pc, #132	@ (adr r3, 8007e18 <__ieee754_log+0x308>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	4604      	mov	r4, r0
 8007d98:	460d      	mov	r5, r1
 8007d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9e:	f7f8 fbff 	bl	80005a0 <__aeabi_dmul>
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	f7f8 fa45 	bl	8000234 <__adddf3>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fa3d 	bl	8000230 <__aeabi_dsub>
 8007db6:	4652      	mov	r2, sl
 8007db8:	465b      	mov	r3, fp
 8007dba:	f7f8 fa39 	bl	8000230 <__aeabi_dsub>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	e7d9      	b.n	8007d7c <__ieee754_log+0x26c>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4650      	mov	r0, sl
 8007dce:	4659      	mov	r1, fp
 8007dd0:	f7f8 fa2e 	bl	8000230 <__aeabi_dsub>
 8007dd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dd8:	f7f8 fbe2 	bl	80005a0 <__aeabi_dmul>
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	2c00      	cmp	r4, #0
 8007de2:	f43f af25 	beq.w	8007c30 <__ieee754_log+0x120>
 8007de6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007e10 <__ieee754_log+0x300>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df0:	f7f8 fbd6 	bl	80005a0 <__aeabi_dmul>
 8007df4:	a308      	add	r3, pc, #32	@ (adr r3, 8007e18 <__ieee754_log+0x308>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e02:	e729      	b.n	8007c58 <__ieee754_log+0x148>
 8007e04:	2000      	movs	r0, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	e695      	b.n	8007b36 <__ieee754_log+0x26>
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w
 8007e10:	fee00000 	.word	0xfee00000
 8007e14:	3fe62e42 	.word	0x3fe62e42
 8007e18:	35793c76 	.word	0x35793c76
 8007e1c:	3dea39ef 	.word	0x3dea39ef
 8007e20:	55555555 	.word	0x55555555
 8007e24:	3fd55555 	.word	0x3fd55555
 8007e28:	df3e5244 	.word	0xdf3e5244
 8007e2c:	3fc2f112 	.word	0x3fc2f112
 8007e30:	96cb03de 	.word	0x96cb03de
 8007e34:	3fc74664 	.word	0x3fc74664
 8007e38:	94229359 	.word	0x94229359
 8007e3c:	3fd24924 	.word	0x3fd24924
 8007e40:	55555593 	.word	0x55555593
 8007e44:	3fe55555 	.word	0x3fe55555
 8007e48:	d078c69f 	.word	0xd078c69f
 8007e4c:	3fc39a09 	.word	0x3fc39a09
 8007e50:	1d8e78af 	.word	0x1d8e78af
 8007e54:	3fcc71c5 	.word	0x3fcc71c5
 8007e58:	9997fa04 	.word	0x9997fa04
 8007e5c:	3fd99999 	.word	0x3fd99999
 8007e60:	c3500000 	.word	0xc3500000
 8007e64:	43500000 	.word	0x43500000
 8007e68:	7fefffff 	.word	0x7fefffff
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	3fe00000 	.word	0x3fe00000

08007e74 <_init>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	bf00      	nop
 8007e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7a:	bc08      	pop	{r3}
 8007e7c:	469e      	mov	lr, r3
 8007e7e:	4770      	bx	lr

08007e80 <_fini>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr
